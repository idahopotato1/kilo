var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/Animations.html",[0,0.142,1,2.908]],["body/classes/Animations.html",[0,0.247,1,5.307,2,0.556,3,0.156,4,0.156,5,0.121,6,2.884,7,0.295,8,4.74,9,0.378,10,1.739,11,0.018,12,2.856,13,5.503,14,0.884,15,1.673,16,0.924,17,1.75,18,3.651,19,0.559,20,3.651,21,4.74,22,7.642,23,2.856,24,6.346,25,4.61,26,4.083,27,2.856,28,4.74,29,0.869,30,2.672,31,2.197,32,4.61,33,4.74,34,0.087,35,0.828,36,2.094,37,3.17,38,3.952,39,0.676,40,4.74,41,3.549,42,0.998,43,3.347,44,0.711,45,1.098,46,0.835,47,0.186,48,0.762,49,3.877,50,4.74,51,1.237,52,3.805,53,0.496,54,3.347,55,3.328,56,3.651,57,4.74,58,3.651,59,4.74,60,1.742,61,2.123,62,4.74,63,4.74,64,3.651,65,4.083,66,2.196,67,1.999,68,1.098,69,4.74,70,3.347,71,1.742,72,3.651,73,4.368,74,3.864,75,6.316,76,1.164,77,3.347,78,2.225,79,3.347,80,2.672,81,2.368,82,3.347,83,2.019,84,1.739,85,0.556,86,1.068,87,2.017,88,2.884,89,1.564,90,5.503,91,3.347,92,3.347,93,3.347,94,3.347,95,5.503,96,4.74,97,3.347,98,4.74,99,5.503,100,3.347,101,3.347,102,0.975,103,0.271,104,3.347,105,1.151,106,3.347,107,0.613,108,3.347,109,6.316,110,2.856,111,3.347,112,3.347,113,0.741,114,3.347,115,3.347,116,3.347,117,3.347,118,0.357,119,3.347,120,3.347,121,3.347,122,3.347,123,3.347,124,3.347,125,0.008,126,0.011,127,0.008]],["title/classes/Assets.html",[0,0.142,128,2.275]],["body/classes/Assets.html",[0,0.123,2,0.545,3,0.153,4,0.153,5,0.227,7,0.304,9,0.342,11,0.018,14,0.63,16,0.756,32,3.6,34,0.086,35,0.816,39,1.098,42,1.059,44,0.701,45,1.15,46,0.71,47,0.208,48,0.799,51,1.326,53,0.41,68,1.23,76,1.254,81,3.255,85,0.545,89,1.555,103,0.266,107,0.586,113,0.953,118,0.714,125,0.007,126,0.011,127,0.007,128,4.355,129,2.528,130,4.812,131,1.424,132,1.818,133,4.673,134,4.673,135,4.673,136,4.673,137,4.673,138,4.026,139,6.512,140,3.552,141,5.019,142,4.673,143,4.673,144,3.452,145,2.208,146,5.4,147,3.281,148,4.673,149,3.281,150,6.227,151,4.575,152,5.613,153,4.026,154,4.673,155,3.281,156,4.673,157,4.673,158,5.4,159,3.281,160,4.569,161,5.931,162,3.777,163,4.165,164,4.165,165,4.689,166,6.268,167,1.813,168,3.6,169,4.569,170,4.673,171,5.4,172,3.281,173,3.6,174,4.673,175,3.281,176,3.281,177,3.281,178,3.281,179,2.883,180,2.528,181,3.281,182,4.673,183,3.281,184,3.281,185,3.281,186,3.281,187,0.761,188,3.281,189,5.931,190,3.281,191,3.281,192,3.281,193,1.807,194,4.673,195,5.443,196,3.281,197,3.281,198,3.281,199,6.516,200,3.6,201,2.827,202,3.281,203,3.027,204,4.673,205,5.443,206,5.443,207,2.827,208,3.281,209,3.281,210,3.281,211,3.281,212,3.281,213,3.281,214,3.281,215,3.281,216,3.281,217,3.281,218,3.281,219,1.818,220,3.281,221,4.193,222,3.281,223,3.281,224,4.673,225,5.443,226,3.281,227,3.281,228,3.281,229,3.281]],["title/classes/BufferInfo.html",[0,0.142,230,2.651]],["body/classes/BufferInfo.html",[0,0.206,2,0.684,3,0.192,4,0.192,5,0.149,7,0.192,9,0.237,11,0.018,14,0.88,16,0.908,19,0.511,20,3.172,29,1.281,34,0.107,42,0.969,44,0.618,46,0.845,47,0.191,51,1.246,53,0.47,71,1.199,72,3.172,89,1.422,103,0.334,107,0.653,113,0.826,118,0.724,125,0.009,126,0.012,127,0.009,131,1.664,193,1.254,230,4.772,231,5.03,232,2.891,233,2.209,234,2.894,235,5.998,236,3.211,237,5.855,238,4.117,239,4.117,240,3.836,241,4.117,242,4.208,243,4.707,244,3.547,245,2.891,246,2.891,247,2.891,248,1.511,249,3.547,250,3.547,251,3.547,252,3.539,253,4.23,254,3.972,255,3.172,256,3.547,257,3.547,258,2.891,259,2.667,260,3.172,261,1.375,262,2.146,263,6.235,264,3.547,265,4.707,266,4.707,267,4.707,268,2.321,269,3.547,270,3.547,271,4.707,272,3.547,273,3.547,274,3.547,275,3.547,276,3.547,277,3.547,278,2.321,279,4.707,280,3.547,281,3.539,282,3.547,283,3.547,284,4.707,285,2.321,286,3.172,287,5.626,288,2.891,289,2.481,290,3.547,291,1.945,292,2.057,293,3.547,294,2.667,295,4.707,296,3.547,297,3.547,298,3.547,299,3.547,300,3.547,301,3.547]],["title/classes/Camera.html",[0,0.142,302,2.128]],["body/classes/Camera.html",[0,0.078,2,0.551,3,0.097,4,0.097,5,0.075,7,0.314,9,0.331,10,1.217,11,0.018,14,0.866,15,1.003,16,0.884,17,1.049,19,0.44,29,1.178,30,2.654,31,2.23,34,0.054,35,0.579,36,1.916,39,0.42,42,1.12,44,0.497,45,1.272,46,0.752,47,0.222,48,0.846,51,0.608,53,0.521,60,1.371,61,2.818,66,1.515,67,2.051,68,1.199,71,0.965,76,1.331,78,1.67,83,1.515,84,1.515,85,0.551,86,0.664,89,1.54,102,0.607,103,0.169,105,1.003,107,0.62,110,1.255,113,0.556,118,0.612,125,0.005,126,0.008,127,0.005,132,1.828,162,1.998,167,1.149,179,1.756,187,0.769,219,1.828,288,2.328,291,2.974,302,4.082,303,1.795,304,3.316,305,6.21,306,6.424,307,3.626,308,3.316,309,1.756,310,3.316,311,1.831,312,3.316,313,1.831,314,2.856,315,2.949,316,3.316,317,3.316,318,3.316,319,3.316,320,3.316,321,3.316,322,1.276,323,1.831,324,3.558,325,1.567,326,1.849,327,2.224,328,1.341,329,1.951,330,1.67,331,5.474,332,4.708,333,3.316,334,3.316,335,3.316,336,5.959,337,2.224,338,1.41,339,3.316,340,2.669,341,5.474,342,2.083,343,3.316,344,3.306,345,3.316,346,4.056,347,2.856,348,2.085,349,2.083,350,2.856,351,2.856,352,3.316,353,3.626,354,3.05,355,3.316,356,2.9,357,3.036,358,1.827,359,1.104,360,0.764,361,1.041,362,1.104,363,0.635,364,3.068,365,0.933,366,0.933,367,1.041,368,1.104,369,1.391,370,1.958,371,1.104,372,0.802,373,1.104,374,1.104,375,3.316,376,3.236,377,2.083,378,3.316,379,4.708,380,1.434,381,4.73,382,2.321,383,2.856,384,2.328,385,3.316,386,3.316,387,5.741,388,2.083,389,2.554,390,4.708,391,6.424,392,3.316,393,3.316,394,2.083,395,4.716,396,2.328,397,2.554,398,2.856,399,3.316,400,2.328,401,1.951,402,3.316,403,3.316,404,3.316,405,2.554,406,3.316,407,2.083,408,3.316,409,3.316,410,3.316,411,3.316,412,3.316,413,3.609,414,2.083,415,2.554,416,2.328,417,3.959,418,4.708,419,4.708,420,2.108,421,3.316,422,2.083,423,2.554,424,3.316,425,4.708,426,1.107,427,3.177,428,2.083,429,2.063,430,1.35,431,1.41,432,1.255,433,1.255,434,1.255,435,1.041,436,1.104,437,1.041,438,1.041,439,1.104,440,1.041,441,1.041,442,1.104,443,1.104,444,0.933,445,1.041,446,0.933,447,1.104,448,1.904,449,2.083,450,2.083,451,2.083,452,2.083,453,2.083,454,2.083,455,2.083,456,0.984,457,3.05,458,2.083,459,3.329,460,2.083,461,2.083,462,3.316,463,3.316,464,2.083,465,3.316,466,3.316,467,4.13,468,2.083,469,2.083,470,1.795,471,2.083,472,3.316,473,3.316,474,3.316,475,3.316,476,1.756,477,2.083,478,2.083,479,2.083,480,2.083,481,2.083,482,3.316,483,2.083,484,2.083,485,4.13,486,1.795,487,4.13,488,1.795,489,2.083,490,2.083,491,2.083,492,2.083,493,2.083,494,2.083,495,2.083,496,3.316,497,2.083,498,2.083,499,2.083,500,2.083,501,3.316,502,2.083,503,2.083,504,2.083,505,2.856,506,1.795,507,2.083]],["title/classes/CanvasRenderer.html",[0,0.142,508,2.446]],["body/classes/CanvasRenderer.html",[0,0.147,2,0.648,3,0.182,4,0.182,5,0.141,7,0.299,9,0.369,11,0.018,19,0.493,34,0.102,35,0.921,36,1.844,39,0.787,42,1.145,44,0.791,45,1.172,46,0.724,47,0.222,48,0.814,53,0.494,61,2.672,68,1.095,76,1.115,85,0.992,86,1.244,89,1.384,103,0.316,107,0.624,125,0.009,126,0.012,127,0.009,131,1.189,132,1.303,187,1.384,193,1.189,219,1.76,235,3.006,262,2.088,302,3.602,311,2.281,313,2.357,322,2.029,323,2.456,326,2.36,330,1.578,338,2.241,348,1.365,357,3.25,358,1.587,366,2.862,369,1.339,380,1.189,426,2.297,444,2.36,508,4.139,509,5.141,510,2.74,511,3.513,512,4.54,513,4.54,514,4.286,515,4.413,516,4.745,517,4.829,518,4.059,519,3.175,520,4.829,521,3.902,522,3.7,523,3.361,524,3.175,525,3.361,526,2.351,527,3.361,528,3.361,529,4.597,530,5.508,531,3.902,532,4.54,533,3.7,534,3.006,535,3.361,536,3.006,537,2.199,538,4.059,539,3.006,540,3.361,541,3.006,542,3.006,543,1.578,544,2.351,545,3.006,546,4.54,547,3.902,548,3.361,549,3.902,550,2.74,551,3.902,552,3.361,553,3.902,554,3.361,555,3.361,556,3.902,557,3.902,558,3.902,559,3.361,560,3.902,561,3.902,562,3.361,563,3.361]],["title/classes/Container.html",[0,0.142,323,1.204]],["body/classes/Container.html",[0,0.144,2,0.863,3,0.178,4,0.178,5,0.138,7,0.319,9,0.394,10,1.905,11,0.018,12,3.128,14,0.699,16,0.661,19,0.485,29,0.7,31,2.366,34,0.099,35,0.907,36,2.216,42,1.163,45,1.282,46,0.751,47,0.235,48,0.844,53,0.513,66,2.165,67,1.971,68,1.215,76,1.248,78,2.386,83,2.165,84,2.165,85,0.634,86,1.217,102,1.111,103,0.309,105,1.433,107,0.485,113,0.699,118,0.553,125,0.009,126,0.012,127,0.009,132,2.282,167,1.641,187,1.204,248,1.905,322,1.999,323,2.269,325,2.453,326,2.642,327,3.129,328,2.099,329,2.788,330,2.386,337,2.992,338,2.207,357,3.446,358,2.048,359,2.022,360,1.4,361,1.907,362,2.022,363,1.163,364,3.678,365,1.709,366,1.709,367,1.907,368,2.022,369,1.319,370,1.656,371,2.022,372,1.469,373,2.022,374,2.022,382,2.386,401,1.803,427,3.549,429,2.948,431,2.509,432,3.128,433,3.128,434,3.128,435,1.907,436,2.022,437,1.907,438,1.907,439,2.022,440,1.907,441,1.907,442,2.022,443,2.022,444,1.709,445,1.907,446,1.709,448,1.543,564,3.288,565,5.191,566,4.472,567,4.472,568,3.999,569,3.128,570,5.191,571,5.191,572,5.191,573,5.191,574,5.191,575,5.191,576,5.191,577,3.816]],["title/interfaces/Controls.html",[578,0.261,579,2.651]],["body/interfaces/Controls.html",[3,0.226,4,0.226,5,0.175,7,0.226,9,0.349,10,2.222,11,0.018,14,0.982,19,0.566,34,0.126,47,0.206,48,0.953,60,2.178,85,1.1,102,1.406,103,0.391,118,0.645,125,0.011,126,0.014,127,0.011,132,2.317,248,2.222,262,2.551,309,3.209,526,3.649,578,0.334,579,5.451,580,1.406,581,4.162,582,6.056,583,6.056,584,5.218,585,5.218,586,6.585,587,6.056,588,5.615,589,5.119,590,5.119,591,6.373,592,4.646,593,4.871]],["title/classes/Entity.html",[0,0.142,358,1.004]],["body/classes/Entity.html",[0,0.215,2,0.948,3,0.167,4,0.167,5,0.129,7,0.302,9,0.415,11,0.018,14,0.669,16,0.727,19,0.464,29,1.13,31,2.137,34,0.129,35,0.867,36,2.344,39,1.151,42,1.16,44,0.745,45,1.229,46,0.698,47,0.228,48,0.785,53,0.498,66,1.822,67,1.659,68,1.187,76,1.303,78,2.008,83,1.822,84,1.822,85,0.594,103,0.29,105,1.496,107,0.605,113,0.944,118,0.529,125,0.013,126,0.011,127,0.008,145,2.346,167,1.801,187,1.554,193,1.09,219,1.195,323,1.965,325,2.695,326,2.899,327,3.058,328,2.306,329,3.058,330,2.617,337,3.165,338,2.849,358,1.999,360,1.822,361,2.85,363,1.513,364,3.813,365,3,366,2.224,367,2.481,369,1.702,370,2.137,372,1.912,382,2.008,401,2.346,427,3.516,429,2.481,431,2.111,435,2.481,437,2.481,438,1.787,440,2.481,441,2.481,444,2.224,445,2.481,446,2.224,594,3.082,595,4.965,596,5.703,597,3.577,598,3.577,599,3.577,600,3.577,601,3.577,602,3.577,603,3.577,604,3.577,605,3.577,606,3.577,607,3.577,608,3.577,609,3.577,610,3.577,611,3.082,612,2.755,613,2.512,614,3.082,615,3.577,616,3.577,617,3.825,618,3.577,619,3.577,620,3.577,621,3.577,622,3.577,623,3.577]],["title/interfaces/ExtraLayer.html",[578,0.261,624,2.651]],["body/interfaces/ExtraLayer.html",[3,0.153,4,0.153,5,0.119,7,0.153,9,0.376,11,0.018,14,0.734,15,1.135,16,0.873,17,1.188,19,0.437,23,1.979,29,0.602,34,0.163,36,1.636,41,2.336,46,0.811,47,0.213,49,2.127,51,1.195,53,0.507,80,1.851,85,0.546,86,1.048,87,4.356,103,0.508,105,1.628,107,0.586,113,0.799,118,0.743,125,0.007,126,0.011,127,0.011,141,2.53,164,3.283,167,0.914,187,1.455,193,1.659,219,1.097,233,1.328,236,1.552,248,2.177,261,1.562,285,1.851,292,2.721,294,2.127,311,1.737,313,1.737,358,0.873,363,1.659,365,2.657,369,1.508,426,1.562,526,2.817,568,3.602,578,0.433,580,0.956,592,2.306,624,3.824,625,2.306,626,2.127,627,4.029,628,3.351,629,3.844,630,4.166,631,3.602,632,5.28,633,3.168,634,5.112,635,2.301,636,3.602,637,3.143,638,3.029,639,2.721,640,2.721,641,3.07,642,4.195,643,4.195,644,2.829,645,4.195,646,5.112,647,4.691,648,4.403,649,2.829,650,2.885,651,2.829,652,2.829,653,2.573,654,4.029,655,4.029,656,2.885,657,2.829,658,2.829,659,2.829,660,2.829,661,2.829,662,2.306,663,2.829,664,2.829,665,2.829,666,4.691,667,2.829,668,2.829,669,2.829,670,2.829,671,2.829,672,2.829,673,4.029,674,2.829,675,2.829,676,2.829,677,2.829,678,2.829,679,4.691,680,2.817,681,4.029,682,4.029,683,4.029,684,4.691,685,4.029,686,2.829,687,2.829,688,2.829,689,2.829,690,4.029,691,2.829,692,4.691,693,2.829,694,2.829,695,2.829,696,2.829,697,2.829,698,2.829,699,2.829,700,2.829,701,2.829,702,2.306]],["title/classes/GLUtils.html",[0,0.142,703,2.651]],["body/classes/GLUtils.html",[0,0.107,2,0.472,3,0.133,4,0.133,5,0.103,7,0.308,9,0.243,11,0.018,15,1.662,16,0.942,17,1.821,23,2.535,27,2.535,29,1.208,34,0.074,35,0.968,42,1.013,45,1.176,46,0.727,47,0.199,48,0.817,53,0.531,61,2.872,64,4.774,65,5.339,68,1.176,85,0.699,86,0.906,103,0.23,107,0.664,113,0.864,118,0.448,125,0.006,126,0.01,127,0.006,234,2.229,261,2.347,262,2.305,291,1.988,302,3.615,311,2.214,313,2.303,315,2.357,329,3.32,340,2.482,344,3.891,346,4.774,358,1.751,372,1.62,426,2.2,635,1.042,703,2.954,704,2.447,705,1.884,706,5.273,707,3.625,708,4.207,709,4.207,710,4.207,711,4.207,712,4.207,713,4.207,714,4.207,715,4.207,716,2.84,717,2.954,718,2.954,719,4.207,720,4.207,721,7.271,722,4.207,723,4.207,724,2.84,725,6.586,726,4.207,727,4.207,728,2.84,729,4.207,730,5.896,731,4.207,732,4.207,733,2.84,734,4.207,735,6.586,736,4.207,737,2.84,738,1.988,739,4.207,740,2.84,741,2.954,742,4.207,743,4.558,744,2.84,745,3.241,746,4.207,747,4.207,748,2.229,749,5.542,750,4.318,751,2.447,752,2.447,753,2.84,754,2.84,755,4.318,756,4.207,757,2.84,758,2.84,759,2.84,760,4.207,761,4.207,762,5.542,763,5.542,764,5.542,765,5.542,766,5.542,767,5.542,768,5.542,769,5.542,770,5.542,771,5.542,772,5.542,773,5.542,774,5.542,775,5.542,776,5.542,777,5.542,778,5.542,779,5.542]],["title/classes/Game.html",[0,0.142,132,1.261]],["body/classes/Game.html",[0,0.095,2,0.419,3,0.118,4,0.118,5,0.091,7,0.244,9,0.222,10,1.411,11,0.018,14,0.91,16,0.829,19,0.359,24,5.102,25,2.961,27,3.143,29,0.855,30,2.941,31,1.487,34,0.066,35,0.672,39,0.508,42,1.107,44,0.577,45,0.957,46,0.591,47,0.197,48,0.665,52,4.259,53,0.507,60,1.119,66,0.924,67,1.743,68,0.855,71,0.733,73,2.49,76,1.103,81,1.258,83,2.173,84,1.914,85,0.775,87,3.143,89,1.473,102,0.733,103,0.311,107,0.608,110,1.517,113,0.798,118,0.677,125,0.006,126,0.009,127,0.006,128,4.176,132,2.544,145,1.816,167,1.297,187,1.374,193,1.42,219,2.058,221,1.94,234,2.037,261,2.218,278,2.167,286,2.961,288,3.663,291,1.19,309,3.849,311,2.118,313,2.234,314,3.312,323,2.076,348,2.396,369,1.326,380,1.935,382,1.554,395,5.607,398,5.472,401,1.19,427,2.798,431,1.071,448,1.018,508,1.632,514,3.743,515,3.568,517,2.699,519,2.316,520,3.274,524,3.143,550,1.769,566,4.495,569,2.809,706,4.808,780,1.769,781,3.844,782,3.844,783,3.844,784,3.844,785,3.844,786,5.619,787,5.619,788,4.019,789,3.844,790,6.16,791,2.519,792,3.844,793,3.312,794,3.844,795,4.662,796,2.519,797,3.312,798,2.961,799,2.519,800,2.037,801,3.844,802,5.619,803,2.519,804,2.519,805,5.102,806,3.844,807,5.102,808,2.519,809,4.662,810,3.844,811,6.16,812,2.519,813,5.217,814,2.17,815,2.519,816,2.17,817,2.519,818,2.519,819,2.519,820,2.519,821,2.519,822,2.519,823,2.519,824,6.752,825,2.519,826,2.519,827,1.769,828,2.17,829,2.961,830,2.17,831,2.17,832,2.699,833,2.17,834,2.17,835,2.17,836,5.217,837,3.844,838,3.844,839,2.17,840,2.17,841,2.519,842,2.519,843,2.519,844,2.519,845,2.519,846,3.312,847,3.312,848,4.662,849,2.519,850,2.519,851,2.519,852,3.844,853,3.844,854,2.519,855,2.519,856,3.844,857,5.619,858,4.662,859,2.519,860,4.017,861,4.662,862,3.844,863,3.312,864,2.519,865,2.519,866,2.519,867,2.519,868,3.844,869,3.844,870,3.844,871,3.844,872,4.017,873,2.519,874,2.519,875,2.519]],["title/classes/GamepadControls.html",[0,0.142,590,2.651]],["body/classes/GamepadControls.html",[0,0.154,2,0.68,3,0.191,4,0.191,5,0.148,7,0.191,9,0.314,11,0.018,15,1.728,16,0.779,17,1.808,19,0.508,29,0.75,34,0.107,39,1.233,42,1.156,44,0.816,47,0.127,53,0.45,89,1.573,103,0.331,110,3.277,113,1.004,118,0.436,125,0.009,126,0.012,127,0.009,145,2.57,179,3.914,193,1.984,203,3.958,219,1.366,261,2.533,348,1.903,420,2.917,586,6.006,590,4.573,707,3.523,743,4.189,876,6.365,877,2.464,878,4.09,879,3.523,880,6.781,881,6.11,882,5.264,883,6.11,884,6.11,885,6.11,886,4.09,887,4.09,888,5.439,889,6.11,890,4.09,891,3.523,892,6.365,893,7.388,894,3.523,895,4.09,896,4.09,897,4.09,898,4.09,899,4.09,900,4.09,901,4.09,902,5.439,903,3.15,904,4.09,905,5.017,906,3.15,907,4.09,908,4.09,909,4.09,910,4.09,911,4.09,912,4.09,913,4.09,914,4.09,915,4.09,916,4.09,917,4.09,918,4.09,919,4.09,920,4.09,921,6.781,922,4.09,923,5.439,924,4.09,925,6.11,926,5.439,927,4.09,928,4.09,929,5.439,930,4.09,931,5.439,932,4.09,933,4.09,934,4.09]],["title/classes/GlBuffer.html",[0,0.142,252,2.446]],["body/classes/GlBuffer.html",[0,0.192,2,0.619,3,0.174,4,0.174,5,0.135,7,0.307,9,0.294,11,0.018,14,0.885,16,0.885,20,4.827,29,1.244,34,0.097,35,0.892,39,0.751,42,0.99,44,0.766,45,1.149,46,0.86,47,0.195,48,0.798,51,1.331,53,0.496,68,1.068,71,1.084,72,3.932,76,1.079,89,1.351,103,0.302,107,0.634,113,0.844,118,0.7,125,0.008,126,0.012,127,0.008,131,1.909,193,1.134,230,4.4,231,5.058,232,2.614,233,1.505,234,1.972,235,5.999,236,2.412,237,5.399,240,2.614,242,2.868,243,4.397,244,3.207,245,3.584,246,3.584,247,3.584,248,1.873,249,4.397,250,4.397,251,4.397,252,4.06,253,4.253,254,4.393,255,2.868,256,3.207,257,4.397,258,3.584,259,2.412,260,2.868,261,1.705,262,2.373,263,6.314,264,4.397,265,4.397,266,4.397,267,4.397,268,2.877,269,4.397,270,3.207,271,4.397,272,3.207,273,3.207,274,3.207,275,3.207,276,3.207,277,3.207,278,2.877,279,5.018,280,4.397,281,4.06,282,4.397,283,4.397,284,5.399,285,2.877,286,3.932,287,5.983,288,3.584,289,3.075,290,4.397,291,2.412,292,1.86,293,3.207,294,2.412,295,4.397,296,3.207,297,3.207,298,3.207,299,3.207,300,3.207,301,3.207,348,1.303,380,1.134,935,5.104,936,3.723,937,3.723,938,3.723,939,3.723]],["title/interfaces/HasFrame.html",[578,0.261,940,2.908]],["body/interfaces/HasFrame.html",[0,0.149,3,0.185,4,0.185,5,0.143,7,0.185,11,0.018,14,0.534,15,0.962,16,0.855,17,1.006,19,0.498,34,0.139,35,0.692,41,3.585,47,0.187,49,4.968,53,0.464,56,4.953,60,1.751,71,1.55,80,3.001,85,0.999,86,1.263,103,0.321,105,1.293,107,0.671,113,0.81,118,0.685,125,0.009,126,0.012,127,0.009,233,1.602,242,4.632,248,1.453,261,2.241,278,3.001,285,3.894,311,1.698,313,1.698,322,1.525,323,2.051,328,2.153,340,2.693,370,2.051,413,3.738,416,3.738,417,4.101,420,2.384,426,1.778,447,2.098,448,2.432,537,3.001,578,0.415,580,1.153,617,3.051,628,3.004,632,4.632,633,2.693,635,2.755,638,2.566,639,1.979,640,1.979,641,3.213,642,3.051,643,3.051,645,3.051,705,1.774,717,3.738,738,3.038,800,2.098,940,4.101,941,3.412,942,3.051,943,5.324,944,4.222,945,4.515,946,2.386,947,3.961,948,3.961,949,3.961,950,5.324,951,2.098,952,3.412,953,3.961,954,5.324,955,3.961,956,3.961,957,3.961,958,5.324,959,3.961,960,3.961,961,3.961,962,3.961,963,3.961,964,3.961,965,3.961,966,3.961,967,3.961,968,5.324,969,3.961,970,2.386,971,3.961,972,5.324,973,3.961,974,6.43,975,6.43,976,5.324,977,5.324]],["title/classes/HitBox.html",[0,0.142,945,2.651]],["body/classes/HitBox.html",[0,0.146,2,0.643,3,0.181,4,0.181,5,0.14,7,0.278,9,0.302,11,0.018,14,0.801,15,1.836,17,1.95,34,0.101,35,0.915,39,0.781,42,1.084,44,0.786,45,0.961,46,0.594,47,0.163,48,0.668,53,0.54,61,1.733,68,0.71,71,1.854,76,0.818,89,1.477,103,0.313,107,0.667,113,0.858,125,0.009,126,0.012,127,0.009,145,2.476,160,2.98,261,2.384,268,2.181,311,2.454,313,2.454,417,5.728,420,3.33,426,1.985,559,6.447,814,3.333,816,3.333,839,3.333,840,3.333,846,5.119,847,5.119,903,2.98,906,2.98,945,5.387,978,6.044,979,2.98,980,3.869,981,3.869,982,2.717,983,3.869,984,3.679,985,2.717,986,2.506,987,5.255,988,4.036,989,5.24,990,3.869,991,3.869,992,4.036,993,3.869,994,4.036,995,3.869,996,2.776,997,3.869,998,6.368,999,3.869,1000,3.869,1001,3.869,1002,3.869,1003,3.869,1004,5.941,1005,5.941]],["title/interfaces/Hits.html",[578,0.261,1006,2.651]],["body/interfaces/Hits.html",[3,0.183,4,0.183,5,0.141,7,0.183,11,0.018,15,1.737,16,0.923,17,1.817,19,0.493,29,0.967,34,0.137,47,0.208,53,0.442,60,1.137,61,2.863,85,0.877,86,1.246,103,0.518,105,1.28,107,0.624,113,0.526,118,0.562,125,0.009,126,0.012,127,0.009,131,1.19,162,2.353,163,2.743,167,1.661,179,2.069,187,1.738,193,2.269,219,1.761,340,2.674,358,1.039,369,1.817,400,2.743,413,4.688,415,3.009,416,4.489,420,2.863,447,2.069,537,2.202,578,0.364,580,1.137,629,3.416,630,3.703,635,1.433,641,2.863,702,2.743,944,4.192,951,3.537,970,2.353,982,5.19,985,4.938,986,4.325,987,4.938,1006,4.831,1007,2.743,1008,2.53,1009,4.925,1010,5.508,1011,6.368,1012,4.062,1013,4.062,1014,5.3,1015,3.009,1016,3.365,1017,3.365,1018,3.009,1019,3.703,1020,4.543,1021,3.703,1022,3.365,1023,3.365,1024,3.365,1025,3.703,1026,4.543,1027,3.365,1028,5.752,1029,3.365,1030,4.543,1031,4.543,1032,3.365,1033,4.543,1034,3.365,1035,3.365,1036,3.365,1037,3.365,1038,3.365,1039,3.365,1040,3.365,1041,3.365,1042,3.365]],["title/classes/KeyControls.html",[0,0.142,589,2.651]],["body/classes/KeyControls.html",[0,0.137,2,0.605,3,0.17,4,0.17,5,0.132,7,0.235,9,0.29,11,0.018,15,1.676,16,0.64,17,1.655,29,1.236,34,0.095,35,0.878,39,1.162,42,1.111,44,0.754,45,0.922,46,0.57,47,0.179,48,0.64,51,1.139,68,1.139,71,1.06,74,4.359,76,1.063,87,2.194,89,0.845,103,0.295,107,0.47,113,0.93,118,0.388,125,0.008,126,0.011,127,0.008,145,2.375,179,3.569,187,1.632,193,1.754,203,3.256,219,1.216,261,2.414,262,1.759,278,3.797,369,1.277,380,2.243,420,2.78,543,1.472,585,4.331,588,4.435,589,4.359,592,5.369,680,2.194,705,2.251,877,2.194,882,4.96,894,3.137,903,2.805,905,4.782,906,2.805,951,3.289,985,3.53,986,4.363,987,4.359,1043,5.5,1044,3.872,1045,5.027,1046,4.96,1047,3.641,1048,5.027,1049,3.641,1050,5.027,1051,5.027,1052,4.331,1053,5.027,1054,6.208,1055,5.027,1056,4.331,1057,3.641,1058,5.027,1059,5.027,1060,2.663,1061,3.641,1062,3.641,1063,6.208,1064,3.641,1065,3.641,1066,3.641,1067,3.641,1068,6.208,1069,6.208,1070,7.035,1071,5.027,1072,3.641,1073,4.435,1074,4.331,1075,3.641,1076,3.641,1077,3.641,1078,5.027,1079,3.641,1080,3.641,1081,7.035,1082,3.641,1083,3.641,1084,3.641,1085,3.641,1086,3.641,1087,3.641,1088,3.641,1089,3.641,1090,3.641,1091,3.641,1092,5.027,1093,5.027,1094,5.027,1095,3.641,1096,5.027,1097,3.641]],["title/interfaces/Layer.html",[578,0.261,633,1.691]],["body/interfaces/Layer.html",[3,0.175,4,0.24,5,0.136,7,0.175,9,0.427,11,0.018,15,1.245,17,1.303,19,0.707,34,0.098,46,0.824,47,0.237,48,0.866,51,1.366,53,0.535,71,2.026,105,1.689,125,0.009,126,0.012,127,0.009,140,3.33,233,2.662,236,3.211,248,2.494,311,2.219,313,2.219,360,2.494,363,2.006,380,1.915,426,2.366,578,0.47,580,1.092,628,2.563,633,3.401,635,2.763,637,3.753,639,2.563,640,2.563,641,2.815,650,3.097,653,3.288,656,2.717,738,3.495,748,1.986,1098,2.114,1099,3.09,1100,2.259,1101,2.259,1102,3.09,1103,2.259,1104,2.259,1105,3.09,1106,2.259,1107,2.259,1108,2.259]],["title/interfaces/Map.html",[105,0.917,578,0.261]],["body/interfaces/Map.html",[3,0.174,4,0.239,5,0.135,7,0.174,9,0.423,11,0.018,15,1.242,17,1.3,19,0.707,34,0.097,46,0.769,47,0.234,48,0.652,51,1.317,53,0.538,71,2.023,105,1.818,125,0.008,126,0.012,127,0.008,140,3.324,233,2.068,236,3.207,248,1.877,311,2.358,313,2.358,360,1.877,363,1.777,380,1.912,426,2.426,578,0.469,580,1.087,628,3.392,633,3.284,635,2.762,637,3.75,639,3.284,640,3.284,641,3.04,650,1.978,653,3.392,656,3.596,738,3.493,748,1.978,1098,2.105,1099,2.25,1100,2.25,1101,2.25,1102,3.082,1103,2.25,1104,2.25,1105,3.082,1106,2.25,1107,2.25,1108,2.25]],["title/classes/MouseControls.html",[0,0.142,593,2.651]],["body/classes/MouseControls.html",[0,0.153,2,0.676,3,0.19,4,0.19,5,0.147,7,0.253,9,0.313,11,0.018,14,0.548,19,0.507,31,2.302,34,0.106,35,0.946,39,0.821,42,1.1,44,0.813,45,0.746,46,0.461,47,0.21,48,0.518,68,0.746,76,0.86,81,2.707,85,0.676,86,1.297,89,1.648,103,0.329,107,0.38,118,0.649,125,0.009,126,0.012,127,0.009,131,1.651,151,3.805,167,1.507,187,1.615,193,2.249,203,3.947,219,2.035,315,1.729,323,1.944,328,2.464,369,1.769,370,2.073,372,2.086,505,3.504,506,3.504,514,3.054,522,4.563,524,3.265,591,6.528,593,4.563,614,3.504,705,2.427,741,3.805,877,2.45,891,3.504,892,5.997,951,2.155,986,3.51,996,2.871,1044,4.174,1056,5.831,1109,6.121,1110,5.418,1111,6.093,1112,6.768,1113,5.418,1114,5.418,1115,4.067,1116,4.067,1117,4.067,1118,4.668,1119,4.668,1120,4.067,1121,4.067,1122,4.067,1123,4.067,1124,6.093,1125,6.093,1126,6.093,1127,5.418,1128,4.067,1129,4.067,1130,4.067,1131,3.51,1132,4.067,1133,4.067,1134,4.067,1135,4.067,1136,4.067,1137,6.093,1138,5.418,1139,4.067,1140,4.067,1141,4.067,1142,4.067,1143,4.067,1144,5.418,1145,5.418,1146,5.418,1147,4.067,1148,4.067,1149,5.418,1150,4.067,1151,4.067,1152,4.067,1153,4.067]],["title/interfaces/Object.html",[9,0.218,578,0.261]],["body/interfaces/Object.html",[3,0.171,4,0.236,5,0.133,7,0.171,9,0.441,11,0.018,15,1.639,17,1.715,19,0.705,34,0.096,46,0.82,47,0.238,48,0.644,51,1.361,53,0.54,71,2.014,105,1.679,125,0.008,126,0.011,127,0.008,140,3.299,233,2.043,236,3.454,248,1.853,311,2.331,313,2.331,360,1.853,363,1.761,380,2.057,426,2.417,578,0.466,580,1.067,628,2.524,633,3.203,635,2.724,637,3.733,639,2.524,640,2.524,641,2.789,650,1.943,653,3.268,656,2.676,738,3.482,748,1.943,1098,2.067,1099,2.209,1100,2.209,1101,2.209,1102,3.482,1103,3.752,1104,3.043,1105,3.043,1106,2.209,1107,2.209,1108,2.209]],["title/classes/OneUp.html",[0,0.142,1154,2.908]],["body/classes/OneUp.html",[0,0.099,2,0.795,3,0.123,4,0.123,5,0.095,7,0.323,9,0.393,10,1.456,11,0.018,14,0.718,15,1.294,16,0.505,17,1.008,19,0.371,29,0.978,30,2.236,31,2.319,34,0.068,35,0.693,36,2.252,39,0.53,41,1.982,42,1.175,44,0.595,45,1.306,46,0.773,47,0.234,48,0.869,52,3.968,53,0.522,56,3.056,66,2.1,67,2.087,68,1.231,76,1.273,78,2.314,80,2.236,83,2.208,84,2.1,85,0.795,86,0.837,89,1.109,102,0.764,103,0.213,105,1.461,107,0.535,113,0.718,118,0.568,125,0.006,126,0.009,127,0.006,131,1.209,167,1.79,187,1.236,262,2.106,291,1.241,315,2.736,322,1.527,323,2.343,325,2.518,326,2.695,327,2.953,328,2.155,329,2.844,330,2.434,337,3.04,338,2.266,340,2.881,348,1.388,351,3.418,354,2.57,357,3.487,358,1.971,359,1.391,360,1.456,361,1.982,362,1.391,363,1.209,364,3.586,365,1.777,366,1.777,367,1.982,368,1.391,369,1.354,370,1.92,371,1.391,372,2.052,373,1.391,374,1.391,381,5.073,382,2.663,383,3.418,384,3.742,396,3.742,401,1.875,420,1.777,427,3.559,429,2.859,430,1.701,431,2.034,432,1.582,433,1.582,434,1.582,435,1.982,436,1.391,437,1.982,438,1.982,439,1.391,440,1.982,441,1.982,442,1.391,443,1.391,444,1.777,445,1.982,446,1.777,447,1.391,448,1.604,456,1.241,470,4.591,476,1.391,543,1.062,612,2.022,613,1.844,617,2.022,662,2.786,800,3.032,905,3.056,951,2.102,984,2.786,1060,2.102,1154,4.636,1155,4.12,1156,2.022,1157,3.418,1158,2.786,1159,3.967,1160,3.967,1161,3.967,1162,3.056,1163,3.418,1164,3.967,1165,3.967,1166,3.967,1167,3.967,1168,3.967,1169,3.967,1170,3.967,1171,4.12,1172,3.967,1173,3.967,1174,3.967,1175,3.967,1176,3.967,1177,3.967,1178,3.056,1179,2.626,1180,3.967,1181,3.967,1182,3.967,1183,2.57,1184,1.844,1185,1.844,1186,1.844,1187,1.844,1188,1.844,1189,1.844,1190,2.626,1191,1.844,1192,1.844,1193,1.844,1194,1.844,1195,1.844,1196,2.022,1197,2.022,1198,2.626,1199,3.418,1200,3.056,1201,2.626,1202,2.626,1203,2.626,1204,2.626,1205,2.626,1206,2.626]],["title/classes/Particle.html",[0,0.142,1207,2.446]],["body/classes/Particle.html",[0,0.096,2,0.782,3,0.12,4,0.12,5,0.093,7,0.321,9,0.401,11,0.018,14,0.803,15,0.621,16,0.67,17,0.65,19,0.364,29,0.713,30,3.358,31,2.31,34,0.067,35,0.679,36,2.233,39,0.516,42,1.176,44,0.583,45,1.3,46,0.768,47,0.233,48,0.863,51,0.469,53,0.506,60,1.37,66,2.076,67,2.069,68,1.243,74,4.183,76,1.31,78,2.287,83,2.076,84,2.076,85,0.782,86,0.816,89,1.092,103,0.315,105,1.447,107,0.44,113,0.709,118,0.272,125,0.006,126,0.009,127,0.006,131,1.944,167,1.657,168,2.996,187,1.22,315,2.633,322,1.497,323,2.323,325,2.485,326,2.668,327,2.926,328,2.126,329,2.815,330,2.409,337,3.015,338,2.236,340,2.668,344,1.796,348,2.233,353,3.625,354,2.519,357,3.475,358,1.979,359,1.355,360,1.427,361,1.943,362,1.355,363,1.185,364,3.57,365,1.742,366,1.742,367,1.943,368,1.355,369,1.336,370,2.241,371,1.355,372,1.497,373,1.355,374,1.355,380,0.779,382,2.126,401,1.838,423,2.996,427,3.49,429,2.351,430,1.657,431,2.001,432,1.541,433,1.541,434,1.541,435,1.943,436,1.355,437,1.943,438,1.943,439,1.355,440,1.943,441,1.943,442,1.355,443,1.355,444,1.742,445,1.943,446,1.742,447,1.355,448,1.573,456,1.208,476,2.786,543,1.573,578,0.177,613,1.796,800,3.156,951,2.06,996,3.281,1025,2.731,1060,2.06,1162,2.996,1178,2.996,1184,1.796,1185,1.796,1186,1.796,1187,1.796,1188,1.796,1189,1.796,1191,1.796,1192,1.796,1193,1.796,1194,1.796,1195,1.796,1196,2.996,1197,1.97,1200,3.625,1207,4.592,1208,1.97,1209,3.351,1210,3.351,1211,3.351,1212,2.519,1213,3.351,1214,2.927,1215,4.012,1216,2.557,1217,2.996,1218,3.625,1219,2.996,1220,4.051,1221,2.557,1222,2.731,1223,3.351,1224,3.351,1225,4.055,1226,2.557,1227,3.351,1228,3.351,1229,3.351,1230,1.657,1231,2.203,1232,2.203,1233,2.203,1234,1.97,1235,2.996,1236,4.055,1237,2.203,1238,4.873,1239,4.055,1240,1.796,1241,2.996,1242,4.055,1243,3.351,1244,1.541,1245,3.351,1246,2.731,1247,2.203,1248,2.203,1249,2.203,1250,2.203,1251,2.203,1252,2.203,1253,2.203,1254,1.796,1255,2.203,1256,2.203,1257,2.203,1258,2.203,1259,2.203,1260,2.203,1261,2.203,1262,2.203,1263,2.203]],["title/classes/ParticleEmitter.html",[0,0.142,1212,2.446]],["body/classes/ParticleEmitter.html",[0,0.112,2,0.857,3,0.139,4,0.139,5,0.108,7,0.332,9,0.405,11,0.018,16,0.657,19,0.407,29,0.799,31,2.263,34,0.078,35,0.761,36,2.337,37,3.004,39,0.601,42,1.193,44,0.654,45,1.335,46,0.795,47,0.237,48,0.894,53,0.518,60,1.269,66,1.891,67,1.721,68,1.27,76,1.333,78,2.084,81,2.177,83,1.891,84,1.891,85,0.857,86,0.95,89,1.011,103,0.241,105,1.531,107,0.482,113,0.764,125,0.007,126,0.01,127,0.007,131,1.57,167,1.754,187,1.315,248,1.599,315,2.681,322,1.678,323,2.392,325,2.679,326,2.823,327,3.077,328,2.44,329,2.979,330,2.549,337,3.155,338,2.411,340,2.823,348,1.985,357,3.544,358,2.001,359,1.578,360,1.599,361,2.177,362,1.578,363,1.328,364,3.66,365,1.952,366,1.952,367,2.177,368,1.578,369,1.441,370,2.077,371,1.578,372,1.984,373,1.578,374,1.578,382,2.084,401,2.059,427,3.556,429,2.575,430,1.93,431,2.191,432,1.795,433,1.795,434,1.795,435,2.177,436,1.578,437,2.177,438,2.177,439,1.578,440,2.177,441,2.177,442,1.578,443,1.578,444,2.54,445,2.177,446,1.952,448,1.205,456,1.407,543,1.762,800,3.34,996,2.309,1009,3.357,1157,2.566,1184,2.092,1185,2.092,1186,2.092,1187,2.092,1188,2.092,1189,2.092,1191,2.092,1192,2.092,1193,2.092,1194,2.092,1207,4.325,1212,3.673,1214,2.823,1215,4.084,1217,3.357,1218,3.357,1219,3.357,1220,3.357,1222,3.06,1264,4.44,1265,2.295,1266,4.358,1267,3.755,1268,3.97,1269,4.358,1270,4.358,1271,2.979,1272,4.358,1273,5.671,1274,2.979,1275,2.979,1276,2.295,1277,2.979,1278,2.979,1279,2.979,1280,2.979]],["title/interfaces/ParticleOptions.html",[578,0.261,1215,2.446]],["body/interfaces/ParticleOptions.html",[0,0.139,3,0.172,4,0.172,5,0.133,7,0.172,9,0.377,11,0.018,14,0.911,15,1.23,16,0.645,17,1.287,19,0.474,30,4.035,31,1.616,34,0.096,44,0.552,47,0.203,51,1.062,53,0.35,60,1.686,66,1.351,67,1.692,74,3.557,78,1.489,83,1.351,84,1.351,85,0.962,86,1.174,89,1.343,103,0.41,107,0.541,118,0.392,125,0.008,126,0.011,127,0.008,131,2.263,168,2.836,315,2.652,322,1.417,323,1.616,340,2.593,344,3.557,348,2.599,353,5.206,354,2.385,358,0.979,370,2.434,380,2.11,382,2.048,423,2.836,447,1.95,448,2.048,456,1.739,476,3.737,578,0.254,580,1.072,613,2.585,800,3.581,951,1.95,996,3.737,1025,2.585,1060,1.95,1162,2.836,1178,2.836,1195,2.585,1196,4.461,1197,2.836,1200,4.461,1207,4.778,1208,2.836,1209,3.172,1210,3.172,1211,3.172,1212,2.385,1213,3.172,1214,3.101,1215,4.237,1217,2.836,1218,4.461,1219,2.836,1220,5.038,1222,2.585,1223,3.172,1224,3.172,1225,4.989,1227,3.172,1228,3.172,1229,3.172,1230,2.385,1231,4.364,1232,4.364,1233,4.364,1234,3.902,1235,4.805,1236,5.823,1237,4.364,1238,6.077,1239,5.823,1240,3.557,1241,4.461,1242,5.823,1243,5.634,1244,3.052,1245,4.989,1246,3.557,1247,3.172,1248,3.172,1249,3.172,1250,3.172,1251,3.172,1252,3.172,1253,3.172,1254,2.585,1255,3.172,1256,3.172,1257,3.172,1258,3.172,1259,3.172,1260,3.172,1261,3.172,1262,3.172,1263,3.172]],["title/interfaces/Point.html",[41,1.886,578,0.261]],["body/interfaces/Point.html",[0,0.133,3,0.165,4,0.165,5,0.128,7,0.165,9,0.204,11,0.018,14,0.826,15,1.883,16,0.722,17,1.979,18,2.721,19,0.46,23,2.128,34,0.092,35,0.617,36,1.236,41,2.83,44,0.53,47,0.153,51,0.903,53,0.506,68,0.648,71,1.028,102,1.028,103,0.399,107,0.679,113,0.987,118,0.729,125,0.008,126,0.011,127,0.008,261,1.892,262,2.335,268,2.774,370,2.481,380,2.189,420,2.744,578,0.34,580,1.028,705,1.582,706,2.48,717,2.48,718,2.48,741,3.456,745,2.721,832,2.48,992,2.721,994,2.721,996,3.699,1073,5.14,1230,2.288,1240,2.48,1254,2.48,1281,2.721,1282,6.189,1283,3.791,1284,3.043,1285,3.043,1286,3.043,1287,3.043,1288,3.043,1289,3.043,1290,3.043,1291,3.043,1292,4.364,1293,3.043,1294,3.043,1295,6.111,1296,6.189,1297,2.721,1298,3.043,1299,3.043,1300,3.043,1301,3.043,1302,3.043,1303,3.043,1304,3.043,1305,3.043,1306,3.043,1307,3.043,1308,4.24,1309,3.043,1310,3.043,1311,3.043,1312,3.043,1313,3.043,1314,3.043,1315,4.881,1316,3.043,1317,3.043,1318,3.043,1319,3.043,1320,4.24,1321,4.24,1322,3.043,1323,3.043,1324,3.043,1325,3.043,1326,3.043]],["title/interfaces/Property.html",[578,0.261,738,1.784]],["body/interfaces/Property.html",[3,0.182,4,0.246,5,0.141,7,0.182,9,0.429,11,0.018,15,1.28,17,1.339,19,0.696,34,0.102,46,0.83,47,0.235,51,1.389,53,0.532,71,2.002,105,1.707,125,0.009,126,0.012,127,0.009,140,3.385,233,2.131,236,3.25,248,1.934,311,2.242,313,2.242,360,1.934,363,1.818,380,2.179,426,2.388,578,0.475,580,1.136,628,2.633,633,3.245,635,2.749,637,3.788,639,2.633,640,2.633,641,2.862,650,2.067,653,3.322,656,2.792,738,3.577,748,2.067,1098,2.199,1099,2.351,1100,2.351,1101,2.351,1102,3.175,1103,2.351,1104,2.351,1105,3.175,1106,2.351,1107,2.351,1108,2.351]],["title/classes/Rect.html",[0,0.142,315,1.605]],["body/classes/Rect.html",[0,0.13,2,0.806,3,0.162,4,0.162,5,0.125,7,0.318,9,0.382,11,0.018,12,2.922,14,0.653,16,0.441,19,0.453,29,0.634,31,2.114,34,0.09,35,0.847,36,2.125,39,0.698,42,1.183,44,0.728,45,1.274,46,0.751,47,0.235,48,0.844,51,0.634,53,0.528,60,1.768,66,1.269,67,1.155,68,1.173,76,1.185,78,1.398,83,1.269,84,1.269,85,0.575,102,1.007,103,0.393,105,1.36,107,0.598,113,0.653,118,0.517,125,0.008,126,0.011,127,0.008,167,1.558,187,1.125,268,2.734,311,2.281,313,2.327,315,2.719,322,1.867,323,1.547,325,2.292,326,2.508,327,2.647,328,2.585,329,2.647,330,2.265,337,2.869,338,2.062,357,3.379,358,2.028,359,1.832,360,1.269,361,1.728,362,1.832,363,1.054,364,3.401,365,1.549,366,1.549,367,1.728,368,1.832,369,1.232,370,2.039,371,1.832,372,2.156,373,1.832,374,1.832,376,1.95,382,1.398,396,5.022,401,1.634,426,2.32,427,3.379,429,1.728,431,1.471,435,1.728,436,1.832,437,1.728,438,1.728,439,1.832,440,1.728,441,1.728,442,1.832,443,1.832,444,1.549,445,1.728,446,2.508,448,1.398,456,1.634,457,2.24,459,2.24,476,3.387,511,2.423,519,2.922,578,0.239,988,3.736,1131,3.142,1214,2.863,1244,4.431,1327,2.664,1328,4.178,1329,4.178,1330,4.178,1331,4.654,1332,4.85,1333,3.458,1334,3.458,1335,3.458,1336,3.406,1337,4.263,1338,3.458,1339,3.406,1340,2.428,1341,2.428]],["title/interfaces/RectStyleOptions.html",[578,0.261,1331,2.651]],["body/interfaces/RectStyleOptions.html",[0,0.182,3,0.226,4,0.226,5,0.175,7,0.226,9,0.279,11,0.018,12,2.91,14,0.651,19,0.566,34,0.126,44,0.725,47,0.15,51,1.214,53,0.504,60,1.763,85,0.803,102,1.406,103,0.491,107,0.668,118,0.515,125,0.011,126,0.014,127,0.011,268,2.723,311,2.279,313,2.325,315,2.95,322,1.86,328,1.953,358,1.759,370,1.932,372,1.86,376,3.414,396,5.016,426,2.317,446,2.163,448,1.953,456,2.282,457,3.129,459,3.129,476,3.963,511,2.414,519,2.91,578,0.334,580,1.406,988,3.721,1131,3.129,1214,3.106,1244,4.507,1327,3.721,1328,4.162,1329,4.162,1330,4.162,1331,4.871,1336,3.392,1337,4.253,1339,3.392,1340,3.392,1341,3.392]],["title/classes/Renderer.html",[0,0.142,515,2.275]],["body/classes/Renderer.html",[0,0.252,2,0.655,3,0.184,4,0.184,5,0.143,7,0.248,11,0.018,16,0.502,19,0.496,34,0.103,35,0.927,39,0.796,42,1.16,45,1.101,46,0.68,47,0.219,48,0.764,53,0.507,60,1.545,61,3.09,68,0.974,76,1.123,81,2.652,85,0.882,86,1.258,103,0.32,107,0.496,113,0.715,118,0.42,125,0.009,126,0.012,127,0.009,131,1.617,145,2.508,151,2.769,187,1.489,262,1.858,302,4.041,311,2.286,313,2.341,323,2.379,330,2.146,338,3.048,358,1.707,426,2.144,457,3.439,459,3.439,511,3.207,514,4.204,515,3.198,516,4.911,517,3.727,518,4.089,519,3.198,520,4.704,522,4.507,524,3.867,526,3.198,529,4.089,530,4.622,534,4.089,536,4.089,537,2.992,538,4.944,539,4.089,541,4.089,542,4.089,543,1.595,550,2.769,552,3.398,554,3.398,1342,3.398,1343,5.308,1344,5.308,1345,5.308,1346,6,1347,3.944,1348,5.308,1349,3.944,1350,3.944,1351,3.944,1352,3.944,1353,3.944,1354,3.944,1355,3.944,1356,3.944,1357,5.308,1358,3.944,1359,4.089,1360,5.308,1361,3.944,1362,3.944,1363,3.944,1364,3.944,1365,5.308,1366,3.944,1367,3.944,1368,3.944,1369,3.944,1370,3.944,1371,3.944,1372,5.308,1373,3.944,1374,3.944,1375,3.944,1376,3.944]],["title/interfaces/Resolution.html",[578,0.261,1019,2.651]],["body/interfaces/Resolution.html",[3,0.184,4,0.184,5,0.143,7,0.184,11,0.018,15,1.811,16,0.925,17,1.895,19,0.496,29,0.973,34,0.138,47,0.199,53,0.495,60,1.147,61,2.873,85,0.882,86,1.257,103,0.52,105,1.288,107,0.626,113,0.531,118,0.565,125,0.009,126,0.012,127,0.009,131,1.2,162,2.374,163,2.766,167,1.668,179,2.087,187,1.553,193,2.272,219,1.772,340,2.686,358,1.048,369,1.63,400,2.766,413,4.702,415,4.086,416,4.505,420,3.089,447,2.087,537,2.221,578,0.367,580,1.147,629,2.552,630,2.766,635,1.446,641,2.873,702,2.766,944,4.211,951,2.81,970,2.374,982,4.949,985,4.211,986,3.436,987,4.211,1006,5.152,1007,2.766,1008,2.552,1009,5.158,1010,5.769,1011,6.072,1012,4.086,1013,4.086,1014,5.313,1015,4.086,1016,4.57,1017,4.57,1018,4.086,1019,4.211,1020,5.527,1021,4.505,1022,3.394,1023,3.394,1024,3.394,1025,3.725,1026,4.57,1027,3.394,1028,5.769,1029,3.394,1030,4.57,1031,4.57,1032,3.394,1033,4.57,1034,3.394,1035,3.394,1036,3.394,1037,3.394,1038,3.394,1039,3.394,1040,3.394,1041,3.394,1042,3.394]],["title/classes/Scene.html",[0,0.142,309,2]],["body/classes/Scene.html",[0,0.113,2,0.86,3,0.14,4,0.14,5,0.109,7,0.328,9,0.42,11,0.018,16,0.558,19,0.409,29,0.803,31,2.266,34,0.078,35,0.765,36,2.341,39,0.605,42,1.2,44,0.657,45,1.327,46,0.786,47,0.238,48,0.883,53,0.507,60,1.275,66,1.898,67,1.728,68,1.251,76,1.28,78,2.092,83,1.898,84,1.898,85,0.728,103,0.243,105,1.534,107,0.484,113,0.766,125,0.007,126,0.01,127,0.007,132,2.498,146,3.773,163,3.075,167,2.027,173,4.382,187,1.319,309,3.673,322,1.686,323,2.394,325,2.688,326,2.83,327,3.083,328,2.3,329,2.985,330,2.555,337,3.16,338,2.573,357,3.546,358,2.002,359,1.588,360,1.607,361,2.188,362,1.588,363,1.334,364,3.664,365,1.961,366,1.961,367,2.188,368,1.588,369,1.445,370,1.814,371,1.588,372,1.686,373,1.588,374,1.588,382,2.092,401,2.985,427,3.558,429,2.584,430,1.942,431,2.2,432,1.807,433,1.807,434,1.807,435,2.188,436,1.588,437,2.188,438,2.188,439,1.588,440,2.188,441,2.188,442,1.588,443,1.588,444,1.961,445,2.842,446,1.961,448,1.212,456,1.417,543,1.212,579,5.251,1184,2.105,1185,2.105,1186,2.105,1187,2.105,1188,2.105,1189,2.105,1191,2.105,1192,2.105,1193,2.105,1194,2.105,1377,2.583,1378,5.689,1379,5.689,1380,4.379,1381,6.689,1382,4.379,1383,4.379,1384,3.773,1385,2.998,1386,2.998,1387,2.998,1388,2.998,1389,2.998,1390,2.998]],["title/interfaces/Scripts.html",[578,0.261,1391,2.651]],["body/interfaces/Scripts.html",[0,0.141,3,0.174,4,0.331,5,0.135,7,0.174,9,0.215,11,0.018,14,0.845,16,0.743,19,0.478,29,0.685,34,0.097,44,0.56,46,0.86,47,0.159,51,1.373,53,0.353,60,1.087,89,1.665,103,0.414,107,0.65,113,0.845,118,0.788,125,0.008,126,0.012,127,0.008,130,2.622,131,1.138,234,1.978,240,4.881,245,2.622,246,2.622,247,2.622,253,4.502,254,3.779,258,2.622,259,2.419,261,1.949,262,2.3,281,4.065,285,2.883,289,4.264,292,3.135,348,1.307,405,2.876,516,2.419,578,0.353,580,1.087,648,3.592,680,3.082,1391,4.616,1392,2.876,1393,2.622,1394,5.649,1395,3.734,1396,4.494,1397,4.97,1398,5.026,1399,5.406,1400,3.217,1401,3.217,1402,3.313,1403,3.217,1404,3.217,1405,3.217,1406,3.217,1407,4.407,1408,4.407,1409,3.94,1410,2.876,1411,3.217,1412,5.026,1413,3.217,1414,3.217,1415,3.217,1416,3.217,1417,4.407,1418,4.407,1419,3.217,1420,4.407,1421,4.407,1422,4.834,1423,3.217,1424,4.407,1425,3.217,1426,4.407,1427,3.217,1428,4.407,1429,3.217,1430,3.217,1431,5.406,1432,3.217,1433,3.217,1434,3.217,1435,3.217,1436,3.217,1437,3.217,1438,3.217,1439,3.217,1440,3.217,1441,3.217,1442,3.217,1443,3.217,1444,3.217,1445,4.407,1446,3.217,1447,5.406,1448,3.217,1449,3.217,1450,4.407,1451,3.217,1452,3.217,1453,4.407,1454,3.217,1455,3.217,1456,3.217,1457,3.217,1458,3.217,1459,3.217,1460,3.217,1461,3.217,1462,3.217,1463,3.217,1464,3.217,1465,3.217,1466,3.217,1467,3.217,1468,3.217]],["title/classes/ShaderProgram.html",[0,0.142,1402,2.446]],["body/classes/ShaderProgram.html",[0,0.125,2,0.554,3,0.156,4,0.322,5,0.121,7,0.295,9,0.273,11,0.018,14,0.805,16,0.699,29,0.611,34,0.087,35,0.825,39,0.672,42,0.996,44,0.709,45,1.095,46,0.878,47,0.186,48,0.761,51,1.389,53,0.379,60,1.375,68,1.007,76,0.705,89,1.624,103,0.383,107,0.63,113,0.805,118,0.772,125,0.008,126,0.011,127,0.008,130,3.317,131,1.439,145,2.232,164,3.317,240,5.09,245,3.317,246,3.317,247,3.317,253,4.457,254,4.242,258,3.317,259,2.159,261,2.187,262,2.408,281,4.242,285,3.367,289,3.946,292,2.984,348,1.166,405,3.639,516,3.556,578,0.23,648,3.317,680,2.847,1391,4.832,1392,5.045,1393,2.34,1394,5.467,1396,4.6,1397,4.598,1398,5.432,1399,5.432,1400,4.07,1401,4.07,1402,3.869,1403,2.871,1404,2.871,1405,2.871,1406,2.871,1407,5.145,1408,4.07,1409,4.6,1410,3.639,1411,4.07,1412,4.729,1413,2.871,1414,2.871,1415,2.871,1416,2.871,1417,5.145,1418,4.07,1419,4.07,1420,4.07,1421,4.07,1422,5.045,1423,4.07,1424,4.07,1425,4.07,1426,5.145,1427,4.07,1428,4.07,1429,2.871,1430,2.871,1431,5.145,1432,2.871,1433,2.871,1434,2.871,1435,2.871,1436,2.871,1437,2.871,1438,2.871,1439,2.871,1440,2.871,1441,2.871,1442,2.871,1443,2.871,1444,2.871,1445,4.07,1446,2.871,1447,5.145,1448,2.871,1449,2.871,1450,4.07,1451,2.871,1452,2.871,1453,4.07,1454,2.871,1455,2.871,1456,2.871,1457,2.871,1458,2.871,1459,2.871,1460,2.871,1461,2.871,1462,2.871,1463,2.871,1464,2.871,1465,2.871,1466,2.871,1467,2.871,1468,2.871,1469,4.725,1470,4.725,1471,3.332,1472,3.332,1473,3.332,1474,3.332,1475,3.332,1476,3.332]],["title/classes/Sound.html",[0,0.142,144,2]],["body/classes/Sound.html",[0,0.148,2,0.654,3,0.184,4,0.28,5,0.142,7,0.28,9,0.346,10,1.945,11,0.018,14,0.808,16,0.675,19,0.495,29,0.972,34,0.103,35,0.926,37,3.653,38,4.154,39,0.794,42,1.089,44,0.795,45,1.099,46,0.679,47,0.186,48,0.764,51,1.099,53,0.272,58,4.617,67,1.314,68,1.099,71,1.146,73,3.434,76,1.268,85,0.654,89,1.229,102,1.146,103,0.429,107,0.56,113,0.53,118,0.713,125,0.009,126,0.012,127,0.009,128,3.864,132,1.77,144,4.11,145,2.504,176,2.763,187,1.39,193,2.101,209,4.503,219,1.314,261,1.77,278,2.988,292,1.966,369,1.523,543,1.591,569,3.194,578,0.272,705,2.374,798,3.031,1183,3.434,1214,3.314,1246,3.722,1477,3.031,1478,3.434,1479,4.083,1480,4.566,1481,4.083,1482,4.245,1483,5.235,1484,3.722,1485,4.316,1486,3.935,1487,4.209,1488,3.935,1489,4.566,1490,4.566,1491,3.935,1492,4.566,1493,4.083,1494,3.935,1495,3.935,1496,3.935,1497,4.566,1498,3.935,1499,3.935,1500,3.39,1501,5.164,1502,3.39,1503,3.39,1504,5.525,1505,3.39,1506,3.39,1507,3.39,1508,3.39,1509,3.39,1510,3.39,1511,3.39,1512,3.031,1513,3.39,1514,3.39,1515,3.39,1516,3.39,1517,3.39,1518,3.39]],["title/classes/SoundGroup.html",[0,0.142,1519,2.908]],["body/classes/SoundGroup.html",[0,0.174,2,0.769,3,0.216,4,0.216,5,0.168,7,0.303,9,0.34,10,2.163,11,0.018,14,1.017,16,0.59,34,0.121,35,1.03,37,3.929,38,4.344,39,0.934,42,1.025,44,0.884,45,1.081,46,0.668,47,0.183,48,0.751,68,1.081,76,1.247,80,3.323,85,0.98,89,1.074,102,1.348,103,0.375,107,0.551,118,0.628,125,0.011,126,0.013,127,0.011,144,4.045,363,2.081,447,2.452,543,1.872,1214,2.64,1222,4.795,1230,2.998,1276,4.541,1478,4.947,1479,4.541,1481,4.541,1482,3.552,1485,4.115,1493,4.541,1512,4.541,1519,5.554,1520,5.261,1521,3.566,1522,5.895,1523,5.895,1524,5.895,1525,5.895,1526,5.895,1527,4.629,1528,5.895,1529,5.895,1530,4.629,1531,6.829,1532,4.629,1533,3.988,1534,4.629]],["title/interfaces/SoundOptions.html",[578,0.261,1485,2.275]],["body/interfaces/SoundOptions.html",[0,0.163,3,0.203,4,0.264,5,0.157,7,0.203,9,0.363,10,1.593,11,0.018,14,0.762,16,0.802,19,0.529,29,1.154,34,0.113,37,2.997,38,3.409,44,0.651,47,0.176,51,0.797,53,0.435,58,4.358,67,1.45,71,1.264,73,2.813,85,0.722,89,1.312,102,1.264,103,0.458,107,0.588,113,0.585,118,0.71,125,0.01,126,0.013,127,0.01,128,4.017,132,1.45,144,4.078,176,3.049,187,1.547,193,2.16,209,4.682,219,1.45,261,1.45,278,2.448,292,2.17,369,1.599,569,4.166,578,0.3,580,1.264,705,1.945,798,3.345,1183,2.813,1214,3.278,1246,3.973,1477,3.345,1478,2.813,1479,3.345,1480,3.741,1481,3.345,1482,3.791,1483,5.281,1484,3.049,1485,4.166,1487,3.973,1489,3.741,1490,3.741,1492,3.741,1493,3.345,1497,3.741,1500,4.874,1501,5.422,1502,3.741,1503,3.741,1504,5.744,1505,3.741,1506,3.741,1507,3.741,1508,3.741,1509,3.741,1510,3.741,1511,3.741,1512,3.345,1513,3.741,1514,3.741,1515,3.741,1516,3.741,1517,3.741,1518,3.741]],["title/classes/SoundPool.html",[0,0.142,1535,2.908]],["body/classes/SoundPool.html",[0,0.176,2,0.775,3,0.218,4,0.304,5,0.169,7,0.277,9,0.342,10,2.174,11,0.018,14,0.798,16,0.755,29,0.856,32,4.563,34,0.122,35,1.035,37,3.745,38,4.126,39,0.941,42,1.028,44,0.889,45,1.087,46,0.671,47,0.184,48,0.755,51,1.194,53,0.488,68,1.087,76,1.253,85,0.775,89,1.374,102,1.358,103,0.378,107,0.609,118,0.631,125,0.011,126,0.013,127,0.011,144,4.109,193,1.421,248,2.174,356,3.275,543,1.886,569,2.81,1183,3.837,1214,3.287,1267,6.224,1478,3.837,1482,4.126,1483,3.275,1484,4.16,1485,4.353,1487,4.16,1520,5.276,1533,4.018,1535,5.276,1536,3.593,1537,5.103,1538,5.924,1539,5.924,1540,5.924,1541,5.924,1542,5.924,1543,6.849,1544,4.664,1545,5.924,1546,4.664,1547,4.664,1548,4.664,1549,4.664,1550,4.664,1551,4.664]],["title/classes/State.html",[0,0.142,1060,2]],["body/classes/State.html",[0,0.129,2,0.572,3,0.161,4,0.161,5,0.124,7,0.309,9,0.279,10,2.049,11,0.018,14,0.86,16,0.772,19,0.452,25,3.721,31,2.249,34,0.09,35,0.844,37,1.822,39,0.975,42,1.114,44,0.725,45,1.17,46,0.723,47,0.211,48,0.813,49,3.617,53,0.479,66,1.772,67,2.131,68,1.214,71,1.926,73,4.759,76,1.181,78,1.953,80,3.729,81,2.414,83,2.049,84,2.049,89,1.405,102,1.001,103,0.279,107,0.596,110,2.072,113,0.86,118,0.515,125,0.008,126,0.011,127,0.008,132,1.149,160,2.649,167,1.344,179,1.822,180,2.649,187,1.48,193,1.701,219,1.149,262,2.233,294,2.228,348,1.203,363,1.472,369,1.681,382,2.258,537,2.723,680,2.072,705,1.54,748,3.38,793,5.854,829,2.649,860,2.963,1052,2.963,1060,4.176,1118,4.162,1119,4.162,1183,3.129,1241,3.721,1384,4.162,1482,2.911,1537,4.162,1552,2.963,1553,3.439,1554,3.439,1555,3.439,1556,3.439,1557,3.439,1558,3.439,1559,3.439,1560,3.439,1561,3.439,1562,3.439,1563,3.439,1564,3.439,1565,6.795,1566,3.439,1567,3.439,1568,3.439,1569,3.439,1570,3.439,1571,3.439,1572,3.439,1573,3.439,1574,3.439,1575,3.439,1576,3.439,1577,3.439,1578,3.439,1579,4.831,1580,4.831,1581,7.441,1582,3.439,1583,4.831,1584,3.439,1585,3.439,1586,3.439,1587,6.056,1588,3.439,1589,4.831,1590,3.439,1591,4.831,1592,3.439,1593,6.616,1594,4.831,1595,3.439,1596,4.831,1597,4.831,1598,3.439,1599,3.439,1600,3.439,1601,6.056,1602,6.056,1603,4.831,1604,6.056,1605,4.831]],["title/classes/Text.html",[0,0.142,544,2.275]],["body/classes/Text.html",[0,0.132,2,0.814,3,0.164,4,0.164,5,0.127,7,0.319,9,0.384,10,1.797,11,0.018,12,2.952,14,0.66,16,0.447,19,0.458,27,2.952,29,0.643,31,2.124,34,0.091,35,0.856,36,2.138,39,0.708,42,1.172,44,0.735,45,1.279,46,0.755,47,0.233,48,0.848,51,1.253,53,0.505,55,3.44,60,2.088,66,1.287,67,1.172,68,1.179,76,1.194,78,1.419,83,1.287,84,1.287,85,0.583,102,1.021,103,0.397,105,1.371,107,0.571,113,0.66,118,0.522,125,0.008,126,0.011,127,0.008,131,1.069,167,1.57,187,1.136,234,2.595,307,3.774,322,1.886,323,1.562,325,2.315,326,2.528,327,2.667,328,1.981,329,2.667,330,2.282,337,2.887,338,2.083,357,3.389,358,2.031,359,1.859,360,1.287,361,1.753,362,1.859,363,1.069,364,3.414,365,1.571,366,1.571,367,1.753,368,1.859,369,1.245,370,1.562,371,1.859,372,1.351,373,1.859,374,1.859,376,1.978,382,1.419,397,3.774,401,1.658,427,3.389,429,1.753,431,1.492,435,1.753,436,1.859,437,1.753,438,1.753,439,1.859,440,1.753,441,1.753,442,1.859,443,1.859,444,1.571,445,1.753,446,2.528,448,1.419,456,1.658,476,2.595,511,2.448,514,3.444,544,4.663,578,0.242,800,3.405,1131,3.173,1214,1.571,1244,4.2,1268,3.774,1336,3.44,1337,4.29,1339,3.44,1340,3.44,1341,2.463,1606,2.702,1607,4.22,1608,4.22,1609,4.22,1610,4.22,1611,4.22,1612,4.675,1613,4.899,1614,5.264,1615,3.508,1616,3.508,1617,4.22,1618,3.022,1619,3.022,1620,3.022,1621,3.022]],["title/interfaces/TextOptions.html",[578,0.261,1612,2.651]],["body/interfaces/TextOptions.html",[0,0.177,3,0.22,4,0.22,5,0.17,7,0.22,9,0.271,10,1.727,11,0.018,12,2.835,14,0.634,19,0.557,27,2.835,34,0.123,44,0.706,47,0.203,48,0.759,51,1.365,53,0.412,55,3.305,60,2.064,85,0.782,102,1.37,103,0.483,107,0.642,118,0.501,125,0.011,126,0.014,127,0.011,131,1.815,234,2.493,307,3.625,322,1.812,358,1.738,376,3.358,397,3.625,446,2.108,448,1.903,456,2.224,476,3.836,511,2.351,514,3.358,544,4.7,578,0.325,580,1.37,800,3.64,1131,3.049,1214,2.668,1244,4.14,1268,3.625,1336,3.305,1337,4.183,1339,3.305,1340,3.305,1341,3.305,1606,3.625,1607,4.055,1608,4.055,1609,4.055,1610,4.055,1611,4.055,1612,4.825,1614,5.133,1617,6.238,1618,5.133,1619,5.92,1620,5.632,1621,4.055]],["title/classes/Texture.html",[0,0.142,946,2.275]],["body/classes/Texture.html",[0,0.197,2,0.87,3,0.244,4,0.244,5,0.248,7,0.297,9,0.367,10,2.334,11,0.018,14,0.857,19,0.595,34,0.136,39,1.056,42,1.005,44,0.954,45,0.96,46,0.593,47,0.198,48,0.667,51,1.258,85,0.87,102,1.523,103,0.424,107,0.489,118,0.678,125,0.012,126,0.014,127,0.012,130,4.468,132,1.748,140,3.938,150,5.481,151,4.468,152,5.481,153,6.145,169,4.901,200,5.281,705,2.849,946,4.478,1044,4.901,1622,4.508,1623,6.362,1624,6.362,1625,6.362,1626,5.232,1627,5.232]],["title/interfaces/Tile.html",[578,0.261,635,1.385]],["body/interfaces/Tile.html",[3,0.182,4,0.246,5,0.141,7,0.182,9,0.426,11,0.018,15,1.277,17,1.336,19,0.71,34,0.101,46,0.779,47,0.235,48,0.67,51,1.355,53,0.534,71,2.045,105,1.706,125,0.009,126,0.012,127,0.009,140,3.381,233,2.126,236,3.459,248,1.929,311,2.241,313,2.241,360,1.929,363,1.815,380,1.944,426,2.387,578,0.475,580,1.132,628,2.627,633,3.243,635,2.808,637,3.785,639,2.627,640,2.627,641,2.858,650,2.06,653,3.376,656,2.786,738,3.516,748,2.06,1098,2.192,1099,2.343,1100,2.343,1101,2.343,1102,3.168,1103,2.343,1104,2.343,1105,3.168,1106,2.343,1107,2.343,1108,2.343]],["title/interfaces/TiledMap.html",[578,0.261,638,2.446]],["body/interfaces/TiledMap.html",[3,0.14,4,0.14,5,0.109,7,0.242,9,0.4,11,0.018,14,0.698,15,1.065,16,0.853,17,1.114,19,0.41,23,1.81,29,0.551,34,0.165,35,0.766,36,1.051,41,2.19,42,0.693,45,0.804,46,0.813,47,0.229,48,0.559,49,1.946,51,1.227,53,0.524,68,0.804,80,1.693,85,0.499,86,0.958,87,4.282,103,0.49,105,1.726,107,0.566,113,0.767,118,0.727,125,0.007,126,0.01,127,0.012,141,2.314,164,2.109,167,0.836,187,1.514,193,1.578,219,1.003,233,1.214,236,1.419,248,2.395,261,1.902,285,1.693,292,2.587,294,1.946,311,1.931,313,1.931,358,0.799,363,1.926,365,2.549,369,1.538,426,1.902,526,2.641,543,1.773,568,2.314,578,0.418,580,0.874,592,2.109,624,3.079,625,3.636,626,1.946,627,2.587,628,3.159,629,2.84,630,3.079,631,2.314,632,5.029,633,2.997,634,2.587,635,2.455,636,4.385,637,3.207,638,3.354,639,3.159,640,3.159,641,3.24,642,4.87,643,4.87,644,3.777,645,4.87,646,5.765,647,4.905,648,4.584,649,3.777,650,3.207,651,3.777,652,2.587,653,2.446,654,3.777,655,3.777,656,2.743,657,2.587,658,2.587,659,2.587,660,2.587,661,2.587,662,2.109,663,2.587,664,2.587,665,2.587,666,4.461,667,2.587,668,2.587,669,2.587,670,2.587,671,2.587,672,2.587,673,3.777,674,2.587,675,2.587,676,2.587,677,2.587,678,2.587,679,4.461,680,2.641,681,3.777,682,3.777,683,3.777,684,4.461,685,3.777,686,2.587,687,2.587,688,2.587,689,2.587,690,3.777,691,2.587,692,4.461,693,2.587,694,2.587,695,2.587,696,2.587,697,2.587,698,2.587,699,2.587,700,2.587,701,2.587,702,2.109,1628,4.384,1629,4.384,1630,3.003,1631,3.003]],["title/interfaces/Tileset.html",[578,0.261,653,1.784]],["body/interfaces/Tileset.html",[3,0.17,4,0.269,5,0.132,7,0.17,9,0.421,11,0.018,15,1.22,17,1.276,19,0.704,34,0.095,46,0.763,47,0.235,48,0.791,51,1.339,53,0.541,71,2.048,105,1.676,125,0.008,126,0.011,127,0.008,140,3.828,233,2.327,236,3.261,248,1.843,311,2.277,313,2.277,360,1.843,363,1.891,380,1.891,426,2.459,578,0.465,580,1.059,628,2.51,633,3.197,635,2.787,637,3.726,639,3.254,640,3.254,641,3.15,650,1.927,653,3.478,656,2.661,738,3.478,748,2.661,1098,2.05,1099,2.192,1100,2.192,1101,2.192,1102,3.467,1103,2.192,1104,2.192,1105,4.057,1106,3.739,1107,3.739,1108,3.739]],["title/classes/Timer.html",[0,0.142,1632,2.651]],["body/classes/Timer.html",[0,0.137,2,0.607,3,0.171,4,0.171,5,0.132,7,0.269,9,0.359,10,1.848,11,0.018,14,0.679,16,0.735,19,0.471,26,4.34,27,3.035,29,0.924,30,2.84,31,2.15,34,0.095,35,0.88,39,0.737,42,0.982,44,0.756,45,0.924,46,0.571,47,0.203,48,0.642,53,0.513,60,1.81,61,2.256,66,1.848,67,2.252,68,0.67,76,1.065,78,2.037,81,3.369,83,2.281,84,1.848,88,4.34,89,1.513,102,1.063,103,0.296,107,0.61,113,0.679,118,0.614,125,0.008,126,0.011,127,0.008,132,1.683,138,5.355,167,2.032,173,4.788,187,1.442,193,1.894,219,1.22,291,2.937,309,2.669,327,3.081,330,2.332,337,2.38,354,3.263,372,1.939,381,5.194,382,2.726,431,2.643,511,2.517,533,4.365,543,1.477,569,4.242,611,3.146,612,3.88,662,4.365,788,3.88,805,4.34,828,3.146,872,4.34,1021,3.537,1060,2.669,1163,4.34,1199,4.34,1632,5.241,1633,2.813,1634,5.037,1635,5.809,1636,5.037,1637,7.04,1638,5.037,1639,4.34,1640,5.037,1641,6.216,1642,5.037,1643,5.037,1644,5.355,1645,7.04,1646,3.652,1647,6.742,1648,7.04,1649,5.037,1650,3.652,1651,3.652,1652,5.037,1653,5.037,1654,5.037,1655,5.037,1656,3.652,1657,3.88,1658,3.146,1659,5.766,1660,5.766,1661,5.037,1662,5.766,1663,3.652]],["title/classes/Vec.html",[0,0.142,370,1.204]],["body/classes/Vec.html",[0,0.103,2,0.456,3,0.128,4,0.128,5,0.099,7,0.317,9,0.236,11,0.018,14,0.854,15,1.869,16,0.625,17,1.968,18,3.157,19,0.383,23,2.47,34,0.071,35,0.951,36,1.906,39,0.553,41,2.452,42,1.134,44,0.615,45,1.222,46,0.755,47,0.214,48,0.849,51,1.069,53,0.517,68,1.294,71,1.586,102,0.798,103,0.332,107,0.644,113,0.94,118,0.71,125,0.006,126,0.009,127,0.006,261,2.043,262,2.441,268,3.07,370,2.51,380,2.252,420,1.836,578,0.189,705,1.836,706,3.447,717,2.878,718,2.878,741,2.878,745,3.157,832,2.878,992,3.157,994,3.157,996,3.83,1073,5.021,1230,2.655,1240,2.878,1254,2.878,1281,2.112,1282,6.133,1283,4.196,1284,3.531,1285,3.531,1286,3.531,1287,3.531,1288,3.531,1289,3.531,1290,3.531,1291,3.531,1292,5.021,1293,3.531,1294,2.362,1295,5.741,1296,5.846,1297,3.157,1298,3.531,1299,2.362,1300,3.531,1301,4.692,1302,2.362,1303,3.531,1304,3.531,1305,3.531,1306,4.692,1307,3.531,1308,4.692,1309,4.692,1310,3.531,1311,3.531,1312,4.692,1313,3.531,1314,3.531,1315,5.27,1316,2.362,1317,4.692,1318,2.362,1319,2.362,1320,5.27,1321,4.692,1322,3.531,1323,3.531,1324,3.531,1325,3.531,1326,4.692,1664,2.742,1665,2.742,1666,2.742,1667,2.742,1668,2.742,1669,2.742,1670,2.742,1671,2.742,1672,2.742,1673,2.742,1674,2.742,1675,2.742,1676,2.742,1677,2.742,1678,2.742]],["title/interfaces/VecEntity.html",[578,0.261,1679,2.908]],["body/interfaces/VecEntity.html",[3,0.172,4,0.172,5,0.133,7,0.172,11,0.018,15,1.515,16,0.646,17,1.472,19,0.583,31,1.848,34,0.096,47,0.194,52,3.054,53,0.488,66,2.401,67,2.185,71,1.073,83,2.726,84,2.126,85,0.612,86,1.175,103,0.572,107,0.699,113,0.781,118,0.738,125,0.008,126,0.011,127,0.008,131,1.544,167,1.927,203,4.487,262,2.469,291,2.395,328,2.523,350,5.825,370,2.396,372,2.231,420,1.65,578,0.4,580,1.073,1015,5.335,1021,3.559,1195,4.594,1234,2.839,1235,4.807,1283,5.335,1679,5.879,1680,3.175,1681,5.069,1682,6.24,1683,6.24,1684,6.761,1685,6.542,1686,6.24,1687,6.761,1688,6.24,1689,5.069,1690,5.069,1691,5.069,1692,5.069,1693,5.069,1694,7.245,1695,3.685,1696,5.069,1697,5.069,1698,3.685,1699,3.685,1700,5.794,1701,3.685,1702,5.069,1703,4.367,1704,5.069,1705,5.069,1706,5.069,1707,5.794,1708,5.069,1709,3.685,1710,3.685,1711,3.175,1712,5.069,1713,3.685,1714,3.685,1715,3.685,1716,3.685,1717,3.685,1718,3.685,1719,5.069]],["title/classes/WebAudio.html",[0,0.142,1720,2.908]],["body/classes/WebAudio.html",[0,0.148,2,0.655,3,0.184,4,0.28,5,0.143,7,0.248,11,0.018,14,0.715,19,0.496,29,1.101,34,0.103,35,0.927,37,3.4,38,3.867,39,0.796,42,1.16,44,0.796,45,0.723,46,0.447,47,0.123,48,0.502,51,1.101,55,2.769,68,1.177,76,1.357,89,1.554,103,0.32,107,0.369,113,0.903,118,0.566,125,0.009,126,0.012,127,0.009,144,2.812,145,2.508,176,2.769,209,5.153,261,2.394,348,1.38,356,2.769,369,1.349,380,1.202,384,3.727,524,4.248,545,4.622,584,4.573,705,1.766,797,4.573,879,3.398,984,2.769,1276,4.089,1478,4.158,1482,3.615,1483,3.727,1484,3.727,1487,4.213,1720,5.315,1721,6.378,1722,3.398,1723,3.944,1724,3.944,1725,3.944,1726,3.944,1727,3.944,1728,3.944,1729,3.944,1730,3.944,1731,6,1732,6.418,1733,6.418,1734,7.05,1735,6,1736,6.698,1737,3.944,1738,6.418,1739,5.308,1740,5.308,1741,3.944,1742,3.944,1743,5.308,1744,3.944,1745,5.308,1746,7.168,1747,3.944,1748,3.944,1749,5.308,1750,3.944,1751,3.944,1752,6,1753,3.944,1754,3.944,1755,3.944,1756,3.944,1757,5.308,1758,3.944,1759,3.944,1760,5.308,1761,3.944,1762,6,1763,3.944,1764,3.944,1765,5.308,1766,5.308,1767,5.308,1768,5.308,1769,3.944,1770,3.944,1771,3.944,1772,3.944,1773,6,1774,3.944,1775,3.944,1776,3.944,1777,3.944,1778,3.944,1779,3.944,1780,3.944,1781,3.944,1782,3.944,1783,6,1784,3.944,1785,3.944,1786,3.944]],["title/classes/WebGLRenderer.html",[0,0.142,827,2.651]],["body/classes/WebGLRenderer.html",[0,0.104,2,0.458,3,0.129,4,0.129,5,0.1,7,0.255,9,0.315,11,0.018,14,0.787,16,0.781,19,0.384,29,0.505,34,0.072,35,0.718,36,1.439,39,0.556,42,1.054,44,0.617,45,1.001,46,0.619,47,0.203,48,0.696,51,0.754,53,0.461,61,3.161,68,0.903,76,0.87,85,0.907,86,0.878,87,1.659,89,1.637,103,0.223,105,0.999,107,0.546,110,2.478,113,0.899,118,0.776,125,0.006,126,0.009,127,0.006,131,0.839,132,1.644,169,2.122,187,1.142,193,0.839,200,3.168,201,4.703,219,1.374,221,2.122,234,2.607,252,2.664,253,2.664,254,2.664,255,2.122,259,1.784,260,2.122,262,1.722,289,2.478,291,2.326,292,1.376,302,3.293,309,1.459,311,2.025,313,2.167,315,1.749,322,1.583,323,2.359,325,1.943,326,1.842,330,1.114,338,1.749,340,2.445,348,1.722,356,1.934,357,2.895,358,1.309,366,2.445,369,1.045,376,2.774,380,0.839,426,2.047,444,1.842,457,1.784,459,2.664,486,2.373,488,2.373,508,2.664,510,1.934,511,3.172,512,3.543,513,3.543,514,4.128,515,4.093,516,4.401,517,4.303,518,3.168,519,2.478,520,4.303,522,1.934,523,2.373,524,2.478,525,2.373,526,1.659,527,2.373,528,2.373,529,3.791,530,5.028,532,3.543,533,2.888,534,2.122,535,2.373,536,2.122,537,1.553,538,3.168,539,2.122,540,2.373,541,2.122,542,2.122,543,1.114,544,2.478,545,2.122,546,2.373,548,2.373,550,1.934,555,2.373,562,2.373,563,3.543,578,0.19,703,1.934,743,3.168,750,3.543,751,2.373,752,2.373,755,2.373,827,2.888,863,2.373,946,4.154,984,1.934,1158,1.934,1171,2.373,1359,2.122,1397,2.888,1402,3.188,1639,3.543,1658,3.543,1787,4.24,1788,2.754,1789,2.754,1790,2.754,1791,2.754,1792,2.754,1793,2.754,1794,2.754,1795,2.754,1796,2.754,1797,2.754,1798,2.754,1799,2.754,1800,2.754,1801,2.754,1802,2.754,1803,2.754,1804,2.754,1805,2.754,1806,4.113,1807,2.754,1808,2.754,1809,2.754,1810,2.754,1811,2.754,1812,2.754,1813,2.754,1814,2.754,1815,2.754,1816,2.754,1817,2.754,1818,2.754,1819,4.113,1820,2.754,1821,4.113,1822,4.113,1823,2.754,1824,2.754,1825,2.754,1826,2.754,1827,4.922,1828,4.922,1829,4.113,1830,2.754,1831,2.754,1832,2.754,1833,2.754,1834,2.754,1835,2.754,1836,2.754,1837,2.754,1838,2.754,1839,4.922,1840,4.113,1841,2.754,1842,2.754,1843,4.113,1844,2.754,1845,2.754,1846,2.754,1847,2.754,1848,5.459,1849,2.754,1850,4.113,1851,2.754,1852,2.754,1853,4.113,1854,2.754,1855,2.754,1856,2.754,1857,2.754,1858,2.754,1859,2.754,1860,2.754,1861,2.754,1862,4.113,1863,2.754,1864,4.113,1865,2.754,1866,4.113,1867,2.754,1868,2.754,1869,2.754,1870,5.459,1871,4.113,1872,2.754,1873,2.754,1874,2.754,1875,4.113,1876,4.113,1877,2.754,1878,5.459,1879,2.754,1880,2.754,1881,4.113,1882,5.841,1883,2.754,1884,4.922,1885,2.754,1886,2.754,1887,2.754,1888,2.754,1889,2.754,1890,2.754,1891,2.754,1892,2.754,1893,2.754,1894,2.754,1895,2.754]],["title/coverage.html",[1896,3.619]],["body/coverage.html",[0,0.292,1,2.44,5,0.115,6,2.729,9,0.183,11,0.018,14,0.427,41,1.583,47,0.098,52,1.908,61,1.418,105,0.769,125,0.007,126,0.01,127,0.007,128,1.908,129,2.44,132,1.058,144,1.678,167,2.153,230,2.224,231,3.51,232,3.2,252,2.052,302,1.786,303,2.729,309,1.678,315,1.347,323,1.01,340,1.418,358,0.842,370,1.01,389,2.44,400,2.224,508,2.052,509,2.729,510,3.2,515,1.908,544,1.908,564,2.729,578,0.518,579,2.224,581,2.729,589,2.224,590,2.224,593,2.224,594,2.729,624,2.224,625,3.747,626,3.457,633,1.418,635,1.162,638,2.052,653,1.497,703,2.224,704,2.729,730,3.926,738,1.497,780,2.224,827,2.224,876,2.729,877,3.215,940,2.44,941,4.598,942,3.51,944,2.224,945,2.224,946,1.908,978,2.729,979,2.44,1006,3.2,1007,3.747,1008,3.457,1018,2.44,1019,2.224,1043,2.44,1060,1.678,1098,3.63,1109,2.729,1154,2.44,1155,2.729,1156,2.44,1158,2.224,1207,2.052,1208,3.51,1212,2.052,1215,2.052,1264,2.729,1265,2.44,1281,3.51,1327,3.51,1331,2.224,1342,2.729,1377,2.729,1391,2.224,1392,3.51,1393,3.2,1402,2.052,1477,3.51,1485,1.908,1519,2.44,1520,3.51,1521,2.44,1535,2.44,1536,2.44,1552,2.729,1606,3.51,1612,2.224,1622,2.729,1632,2.224,1633,2.44,1679,2.44,1680,5.849,1703,2.729,1711,2.729,1720,2.44,1721,2.729,1722,2.729,1787,2.729,1896,2.224,1897,2.729,1898,3.167,1899,2.729,1900,6.87,1901,3.926,1902,5.028,1903,2.729,1904,3.926,1905,5.958,1906,5.716,1907,4.557,1908,2.729,1909,5.028,1910,4.598,1911,2.729,1912,4.557,1913,6.685,1914,5.547,1915,3.167,1916,2.729,1917,3.167,1918,3.167,1919,3.926,1920,4.598,1921,2.729,1922,3.926,1923,2.729,1924,3.167,1925,2.729,1926,3.167,1927,2.729,1928,3.167,1929,3.167,1930,2.729,1931,2.729,1932,6.37,1933,3.167,1934,3.167,1935,4.557,1936,3.167,1937,3.167,1938,3.167,1939,3.167,1940,3.167,1941,3.167,1942,3.167,1943,3.167,1944,3.167,1945,3.167,1946,3.167,1947,3.167,1948,3.167,1949,3.167,1950,3.167,1951,6.635,1952,3.167,1953,3.167,1954,3.167,1955,2.729,1956,2.729]],["title/miscellaneous/enumerations.html",[1957,1.899,1958,3.912]],["body/miscellaneous/enumerations.html",[11,0.017,29,1.079,34,0.153,42,0.929,52,4.34,53,0.406,125,0.013,126,0.015,127,0.013,132,2.278,291,2.779,348,2.058,380,2.195,780,4.129,829,4.53,830,5.066,831,5.066,832,4.789,833,5.066,834,5.066,835,5.066,1957,3.543,1958,5.066,1959,5.066,1960,5.881]],["title/index.html",[34,0.082,1961,2.716,1962,2.716]],["body/index.html",[11,0.015,31,1.837,102,1.677,125,0.013,126,0.015,127,0.013,132,1.924,162,3.471,233,2.329,533,4.045,718,4.045,788,5.672,970,3.471,1359,4.437,1896,5.015,1963,5.76,1964,5.76,1965,5.76,1966,5.76,1967,6.738,1968,5.76,1969,7.502,1970,5.76,1971,6.738,1972,5.76,1973,5.76,1974,5.76,1975,7.142,1976,4.437,1977,5.76,1978,5.76,1979,5.76,1980,5.76,1981,5.76]],["title/license.html",[1961,2.716,1962,2.716,1982,2.716]],["body/license.html",[11,0.015,125,0.012,126,0.015,127,0.012,131,1.959,207,4.586,262,1.863,305,4.586,369,1.353,384,3.738,567,4.586,629,3.449,952,5.539,1046,4.586,1292,4.953,1297,4.953,1897,4.586,1982,4.586,1983,6.43,1984,6.908,1985,5.324,1986,5.324,1987,5.324,1988,5.324,1989,5.324,1990,6.43,1991,5.324,1992,5.324,1993,5.324,1994,5.324,1995,5.324,1996,5.324,1997,7.669,1998,5.324,1999,5.324,2000,5.324,2001,6.908,2002,5.324,2003,5.324,2004,5.324,2005,5.324,2006,5.324,2007,5.324,2008,5.324,2009,5.324,2010,5.324,2011,5.324,2012,5.324,2013,5.324,2014,5.324,2015,5.324,2016,6.43,2017,6.43,2018,5.324,2019,5.324,2020,5.324,2021,5.324,2022,5.324,2023,5.324,2024,5.324,2025,5.324,2026,5.324,2027,5.324,2028,5.324,2029,5.324,2030,5.324,2031,5.324,2032,5.324,2033,5.324,2034,5.324,2035,5.324,2036,5.324,2037,5.324,2038,5.324,2039,5.324,2040,5.324,2041,5.324,2042,5.324,2043,5.324]],["title/modules.html",[2044,4.44]],["body/modules.html",[11,0.016,125,0.014,126,0.016,127,0.014,2044,5.315]],["title/overview.html",[2045,4.44]],["body/overview.html",[2,1.018,11,0.016,125,0.014,126,0.016,127,0.014,580,1.784,2045,5.279,2046,6.128,2047,6.128]],["title/miscellaneous/typealiases.html",[1957,1.899,2048,4.541]],["body/miscellaneous/typealiases.html",[9,0.312,11,0.015,31,1.726,34,0.141,47,0.229,60,1.575,81,3.604,125,0.012,126,0.015,127,0.012,129,4.168,139,4.661,158,5.593,162,3.912,165,4.661,167,2.15,171,5.593,179,3.44,180,4.168,187,1.255,233,2.188,347,4.661,431,2.761,588,5.001,625,3.799,626,4.206,635,2.382,636,5.001,780,3.799,807,5.593,877,3.912,982,3.799,996,2.866,1007,3.799,1008,4.206,1012,4.168,1013,4.168,1014,5.001,1043,4.168,1074,5.593,1632,3.799,1633,4.168,1635,4.661,1644,5.593,1957,3.26,1959,4.661,2049,5.41,2050,5.41,2051,6.492,2052,5.41,2053,5.41,2054,5.41,2055,5.41,2056,5.41,2057,6.492]],["title/unit-test.html",[970,2.445,1976,3.126]],["body/unit-test.html",[5,0.116,11,0.018,14,0.432,125,0.007,126,0.01,127,0.007,232,2.251,510,3.228,626,2.077,877,3.237,942,2.47,970,1.932,979,2.47,1008,2.077,1156,2.47,1265,2.47,1393,2.251,1521,2.47,1536,2.47,1657,2.47,1896,2.251,1899,2.762,1900,6.925,1901,6.063,1902,5.353,1903,4.629,1904,5.056,1905,5.57,1906,5.975,1908,3.96,1909,4.629,1910,4.629,1913,5.975,1914,4.629,1916,2.762,1919,5.353,1920,5.737,1921,2.762,1922,5.869,1923,2.762,1925,2.762,1927,3.96,1930,2.762,1931,4.629,1955,2.762,1956,2.762,1976,2.47,2058,3.206,2059,3.206,2060,3.206,2061,3.206,2062,4.597,2063,4.597,2064,5.373,2065,3.206,2066,3.206,2067,4.597,2068,4.597,2069,4.597,2070,3.206,2071,3.206,2072,4.597,2073,4.597,2074,3.206,2075,7.197,2076,3.206,2077,4.597,2078,4.597,2079,3.206,2080,3.206,2081,3.206,2082,6.659,2083,3.206,2084,7.038,2085,3.206,2086,3.206,2087,5.869,2088,4.597,2089,3.206,2090,3.206,2091,3.206,2092,3.206,2093,3.206,2094,3.206,2095,3.206,2096,3.206,2097,3.206,2098,3.206,2099,3.206,2100,3.206,2101,3.206,2102,3.206,2103,3.206,2104,3.206,2105,3.206,2106,3.206,2107,3.206,2108,3.206,2109,3.206,2110,3.206,2111,5.373,2112,3.206,2113,4.597,2114,3.206,2115,3.206,2116,3.206,2117,3.206,2118,3.206,2119,3.206,2120,3.206,2121,3.206,2122,3.206,2123,3.206,2124,3.206,2125,3.206,2126,3.206,2127,3.206,2128,3.206,2129,3.206,2130,3.206]],["title/miscellaneous/variables.html",[1957,1.899,2131,3.912]],["body/miscellaneous/variables.html",[9,0.334,11,0.018,15,1.79,16,0.737,29,1.239,34,0.117,47,0.18,53,0.483,64,5.383,76,1.428,113,0.91,125,0.01,126,0.013,127,0.01,281,4.143,289,3.484,324,3.87,348,2.364,376,3.939,380,1.762,389,4.455,511,3.491,631,5.202,946,3.853,1158,4.061,1394,5.383,1396,3.46,1397,4.061,1409,4.455,1410,3.46,1422,5.511,1657,3.46,1911,3.87,1932,3.87,1957,2.706,2131,3.87,2132,4.492,2133,4.492,2134,4.492,2135,6.988,2136,5.783,2137,4.492,2138,6.396,2139,5.783,2140,5.783,2141,6.988,2142,5.783,2143,6.754,2144,6.754,2145,6.754,2146,4.492,2147,6.396,2148,5.783,2149,5.783,2150,5.783,2151,4.492,2152,5.783,2153,5.783,2154,4.492,2155,4.492,2156,5.783,2157,4.492,2158,4.492,2159,5.783,2160,4.492,2161,4.492,2162,5.783,2163,4.492,2164,4.492,2165,4.492,2166,4.492,2167,4.492,2168,4.492,2169,4.492,2170,4.492]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":16,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["0.2",{"_index":478,"title":{},"body":{"classes/Camera.html":{}}}],["0.5",{"_index":1960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["0.6",{"_index":1164,"title":{},"body":{"classes/OneUp.html":{}}}],["0/0",{"_index":2075,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":29,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1)).xy",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1).normalize().multiply(amount",{"_index":1697,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["1.5",{"_index":1241,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/State.html":{}}}],["1.6",{"_index":1642,"title":{},"body":{"classes/Timer.html":{}}}],["1/1",{"_index":1913,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10",{"_index":1238,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["10/10",{"_index":1920,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["100",{"_index":1900,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1000",{"_index":863,"title":{},"body":{"classes/Game.html":{},"classes/WebGLRenderer.html":{}}}],["109/109",{"_index":2129,"title":{},"body":{"unit-test.html":{}}}],["11",{"_index":911,"title":{},"body":{"classes/GamepadControls.html":{}}}],["11/11",{"_index":2069,"title":{},"body":{"unit-test.html":{}}}],["12",{"_index":913,"title":{},"body":{"classes/GamepadControls.html":{}}}],["12/12",{"_index":1904,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["13",{"_index":915,"title":{},"body":{"classes/GamepadControls.html":{}}}],["13/13",{"_index":2084,"title":{},"body":{"unit-test.html":{}}}],["14",{"_index":917,"title":{},"body":{"classes/GamepadControls.html":{}}}],["14/14",{"_index":2073,"title":{},"body":{"unit-test.html":{}}}],["15/15",{"_index":1927,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["16",{"_index":1827,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["16/16",{"_index":1931,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["17/17",{"_index":1925,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["170/170",{"_index":2102,"title":{},"body":{"unit-test.html":{}}}],["175/175",{"_index":2100,"title":{},"body":{"unit-test.html":{}}}],["18/18",{"_index":2082,"title":{},"body":{"unit-test.html":{}}}],["19",{"_index":2047,"title":{},"body":{"overview.html":{}}}],["19/19",{"_index":2064,"title":{},"body":{"unit-test.html":{}}}],["2",{"_index":291,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/OneUp.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["2/2",{"_index":1922,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20",{"_index":1268,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["20/20",{"_index":2063,"title":{},"body":{"unit-test.html":{}}}],["2019",{"_index":1986,"title":{},"body":{"license.html":{}}}],["2020",{"_index":1987,"title":{},"body":{"license.html":{}}}],["20px",{"_index":1608,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["21",{"_index":889,"title":{},"body":{"classes/GamepadControls.html":{}}}],["21/21",{"_index":1903,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["22/22",{"_index":2088,"title":{},"body":{"unit-test.html":{}}}],["23/23",{"_index":2077,"title":{},"body":{"unit-test.html":{}}}],["24/24",{"_index":1907,"title":{},"body":{"coverage.html":{}}}],["25/25",{"_index":1908,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["255",{"_index":1828,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["26/26",{"_index":1919,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["28/28",{"_index":2068,"title":{},"body":{"unit-test.html":{}}}],["2d",{"_index":718,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"index.html":{}}}],["3",{"_index":356,"title":{},"body":{"classes/Camera.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["3/3",{"_index":1906,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["30",{"_index":1202,"title":{},"body":{"classes/OneUp.html":{}}}],["30/30",{"_index":2090,"title":{},"body":{"unit-test.html":{}}}],["31/31",{"_index":1924,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":988,"title":{},"body":{"classes/HitBox.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["32/32",{"_index":2087,"title":{},"body":{"unit-test.html":{}}}],["33/33",{"_index":2085,"title":{},"body":{"unit-test.html":{}}}],["333",{"_index":1340,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["34/34",{"_index":2111,"title":{},"body":{"unit-test.html":{}}}],["35",{"_index":2046,"title":{},"body":{"overview.html":{}}}],["35/35",{"_index":1921,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["37/37",{"_index":2112,"title":{},"body":{"unit-test.html":{}}}],["38/38",{"_index":2080,"title":{},"body":{"unit-test.html":{}}}],["39/39",{"_index":2110,"title":{},"body":{"unit-test.html":{}}}],["4",{"_index":984,"title":{},"body":{"classes/HitBox.html":{},"classes/OneUp.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["4/4",{"_index":1905,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["40",{"_index":989,"title":{},"body":{"classes/HitBox.html":{}}}],["43/43",{"_index":2079,"title":{},"body":{"unit-test.html":{}}}],["48",{"_index":470,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{}}}],["480",{"_index":314,"title":{},"body":{"classes/Camera.html":{},"classes/Game.html":{}}}],["49/49",{"_index":1930,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["5",{"_index":30,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Timer.html":{}}}],["5/5",{"_index":1914,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["55/55",{"_index":2065,"title":{},"body":{"unit-test.html":{}}}],["57/57",{"_index":2125,"title":{},"body":{"unit-test.html":{}}}],["58/58",{"_index":2124,"title":{},"body":{"unit-test.html":{}}}],["59/59",{"_index":2062,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":1171,"title":{},"body":{"classes/OneUp.html":{},"classes/WebGLRenderer.html":{}}}],["6/6",{"_index":1901,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["60",{"_index":802,"title":{},"body":{"classes/Game.html":{}}}],["61/61",{"_index":2106,"title":{},"body":{"unit-test.html":{}}}],["640",{"_index":312,"title":{},"body":{"classes/Camera.html":{}}}],["65/65",{"_index":2096,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":1172,"title":{},"body":{"classes/OneUp.html":{}}}],["7/7",{"_index":1902,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["71/71",{"_index":2067,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":870,"title":{},"body":{"classes/Game.html":{}}}],["77/77",{"_index":2097,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":1240,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["8/8",{"_index":1909,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["84/84",{"_index":2095,"title":{},"body":{"unit-test.html":{}}}],["85/85",{"_index":2072,"title":{},"body":{"unit-test.html":{}}}],["8].map(x",{"_index":1173,"title":{},"body":{"classes/OneUp.html":{}}}],["9/9",{"_index":1910,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["900",{"_index":1245,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["91/91",{"_index":2101,"title":{},"body":{"unit-test.html":{}}}],["97/97",{"_index":2130,"title":{},"body":{"unit-test.html":{}}}],["_",{"_index":1131,"title":{},"body":{"classes/MouseControls.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["__",{"_index":1337,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["_height",{"_index":840,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{}}}],["_program",{"_index":1403,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["_scene",{"_index":845,"title":{},"body":{"classes/Game.html":{}}}],["_width",{"_index":839,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{}}}],["_x",{"_index":1002,"title":{},"body":{"classes/HitBox.html":{}}}],["_y",{"_index":1003,"title":{},"body":{"classes/HitBox.html":{}}}],["a00",{"_index":762,"title":{},"body":{"classes/GLUtils.html":{}}}],["a01",{"_index":763,"title":{},"body":{"classes/GLUtils.html":{}}}],["a02",{"_index":764,"title":{},"body":{"classes/GLUtils.html":{}}}],["a10",{"_index":765,"title":{},"body":{"classes/GLUtils.html":{}}}],["a11",{"_index":766,"title":{},"body":{"classes/GLUtils.html":{}}}],["a12",{"_index":767,"title":{},"body":{"classes/GLUtils.html":{}}}],["a20",{"_index":768,"title":{},"body":{"classes/GLUtils.html":{}}}],["a21",{"_index":769,"title":{},"body":{"classes/GLUtils.html":{}}}],["a22",{"_index":770,"title":{},"body":{"classes/GLUtils.html":{}}}],["a_position",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a_texcoord",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":629,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{},"license.html":{}}}],["absolute",{"_index":1891,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["abstract",{"_index":338,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{}}}],["acc",{"_index":1683,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["acceleration",{"_index":1685,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["access",{"_index":1044,"title":{},"body":{"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/Texture.html":{}}}],["accessing",{"_index":949,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["accessors",{"_index":145,"title":{},"body":{"classes/Assets.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/Renderer.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/WebAudio.html":{}}}],["action",{"_index":1046,"title":{},"body":{"classes/KeyControls.html":{},"license.html":{}}}],["action(...buttons",{"_index":934,"title":{},"body":{"classes/GamepadControls.html":{}}}],["action(value",{"_index":1079,"title":{},"body":{"classes/KeyControls.html":{}}}],["actiona",{"_index":881,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actionb",{"_index":882,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["actionesc",{"_index":885,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actions",{"_index":257,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["actionx",{"_index":883,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actiony",{"_index":884,"title":{},"body":{"classes/GamepadControls.html":{}}}],["activate",{"_index":283,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["active",{"_index":279,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["activebuffer",{"_index":256,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["add",{"_index":36,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"classes/WebGLRenderer.html":{}}}],["add(child",{"_index":435,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["add(name",{"_index":50,"title":{},"body":{"classes/Animations.html":{}}}],["add(vec",{"_index":1304,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["adddebug",{"_index":1952,"title":{},"body":{"coverage.html":{}}}],["added",{"_index":403,"title":{},"body":{"classes/Camera.html":{}}}],["adds",{"_index":1303,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["affecting",{"_index":1217,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["against",{"_index":972,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["aliases",{"_index":2049,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1619,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["alignment",{"_index":1618,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["allow",{"_index":1537,"title":{},"body":{"classes/SoundPool.html":{},"classes/State.html":{}}}],["allows",{"_index":160,"title":{},"body":{"classes/Assets.html":{},"classes/HitBox.html":{},"classes/State.html":{}}}],["alone",{"_index":1213,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["along",{"_index":998,"title":{},"body":{"classes/HitBox.html":{}}}],["alpha",{"_index":325,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{}}}],["already",{"_index":1541,"title":{},"body":{"classes/SoundPool.html":{}}}],["always",{"_index":355,"title":{},"body":{"classes/Camera.html":{}}}],["amount",{"_index":350,"title":{},"body":{"classes/Camera.html":{},"interfaces/VecEntity.html":{}}}],["anchoring",{"_index":1278,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["and/or",{"_index":567,"title":{},"body":{"classes/Container.html":{},"license.html":{}}}],["angle",{"_index":730,"title":{},"body":{"classes/GLUtils.html":{},"coverage.html":{}}}],["anim",{"_index":75,"title":{},"body":{"classes/Animations.html":{}}}],["anim.frame.x",{"_index":122,"title":{},"body":{"classes/Animations.html":{}}}],["anim.frame.y",{"_index":124,"title":{},"body":{"classes/Animations.html":{}}}],["anim.update(dt",{"_index":120,"title":{},"body":{"classes/Animations.html":{}}}],["animation",{"_index":22,"title":{},"body":{"classes/Animations.html":{}}}],["animation(frames",{"_index":112,"title":{},"body":{"classes/Animations.html":{}}}],["animations",{"_index":1,"title":{"classes/Animations.html":{}},"body":{"classes/Animations.html":{},"coverage.html":{}}}],["anims",{"_index":104,"title":{},"body":{"classes/Animations.html":{}}}],["antialias",{"_index":1798,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["any).__spector_metadata",{"_index":273,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["any).anchor.x",{"_index":1867,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["any).anchor.y",{"_index":1868,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["any).audiocontext",{"_index":1739,"title":{},"body":{"classes/WebAudio.html":{}}}],["any).webkitaudiocontext",{"_index":1740,"title":{},"body":{"classes/WebAudio.html":{}}}],["api",{"_index":879,"title":{},"body":{"classes/GamepadControls.html":{},"classes/WebAudio.html":{}}}],["append",{"_index":794,"title":{},"body":{"classes/Game.html":{}}}],["applies",{"_index":1686,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["apply",{"_index":1015,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/VecEntity.html":{}}}],["applyforce",{"_index":1947,"title":{},"body":{"coverage.html":{}}}],["applyforce(e",{"_index":1688,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyfriction",{"_index":1948,"title":{},"body":{"coverage.html":{}}}],["applyfriction(e",{"_index":1695,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyhorizontalfriction",{"_index":1949,"title":{},"body":{"coverage.html":{}}}],["applyhorizontalfriction(e",{"_index":1698,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyimpulse",{"_index":1950,"title":{},"body":{"coverage.html":{}}}],["applyimpulse(e",{"_index":1701,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["arising",{"_index":2041,"title":{},"body":{"license.html":{}}}],["around",{"_index":247,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["array",{"_index":363,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/SoundGroup.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["arrays",{"_index":644,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["arrow",{"_index":1070,"title":{},"body":{"classes/KeyControls.html":{}}}],["aspects",{"_index":782,"title":{},"body":{"classes/Game.html":{}}}],["asset",{"_index":139,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["assets",{"_index":128,"title":{"classes/Assets.html":{}},"body":{"classes/Assets.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"coverage.html":{}}}],["assets.sound(src",{"_index":1505,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["associated",{"_index":1998,"title":{},"body":{"license.html":{}}}],["assumes",{"_index":308,"title":{},"body":{"classes/Camera.html":{}}}],["assuming",{"_index":572,"title":{},"body":{"classes/Container.html":{}}}],["async",{"_index":212,"title":{},"body":{"classes/Assets.html":{}}}],["attribcount",{"_index":1466,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["attriblocation",{"_index":284,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["attribute",{"_index":281,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["attributes",{"_index":1404,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["audio",{"_index":209,"title":{},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/WebAudio.html":{}}}],["audio(url",{"_index":210,"title":{},"body":{"classes/Assets.html":{}}}],["audio.addeventlistener('canplay",{"_index":211,"title":{},"body":{"classes/Assets.html":{}}}],["audio.addeventlistener('ended",{"_index":1510,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.addeventlistener('error",{"_index":1508,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.haswebaudio",{"_index":1726,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.loop",{"_index":1506,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.master.value",{"_index":1728,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.play",{"_index":1730,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.removeeventlistener('canplay",{"_index":208,"title":{},"body":{"classes/Assets.html":{}}}],["audio.ts",{"_index":1722,"title":{},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["audio.ts:18",{"_index":1741,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:27",{"_index":1751,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:32",{"_index":1754,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:37",{"_index":1756,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:42",{"_index":1759,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:44",{"_index":1737,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:74",{"_index":1747,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:79",{"_index":1748,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:84",{"_index":1744,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:89",{"_index":1742,"title":{},"body":{"classes/WebAudio.html":{}}}],["audiocontext",{"_index":1760,"title":{},"body":{"classes/WebAudio.html":{}}}],["authors",{"_index":2032,"title":{},"body":{"license.html":{}}}],["auto",{"_index":1368,"title":{},"body":{"classes/Renderer.html":{}}}],["automatically",{"_index":432,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["await",{"_index":213,"title":{},"body":{"classes/Assets.html":{}}}],["away",{"_index":1160,"title":{},"body":{"classes/OneUp.html":{}}}],["axis",{"_index":420,"title":{},"body":{"classes/Camera.html":{},"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"interfaces/Resolution.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["axis(id",{"_index":932,"title":{},"body":{"classes/GamepadControls.html":{}}}],["b",{"_index":743,"title":{},"body":{"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"classes/WebGLRenderer.html":{}}}],["b00",{"_index":771,"title":{},"body":{"classes/GLUtils.html":{}}}],["b01",{"_index":772,"title":{},"body":{"classes/GLUtils.html":{}}}],["b02",{"_index":773,"title":{},"body":{"classes/GLUtils.html":{}}}],["b10",{"_index":774,"title":{},"body":{"classes/GLUtils.html":{}}}],["b11",{"_index":775,"title":{},"body":{"classes/GLUtils.html":{}}}],["b12",{"_index":776,"title":{},"body":{"classes/GLUtils.html":{}}}],["b20",{"_index":777,"title":{},"body":{"classes/GLUtils.html":{}}}],["b21",{"_index":778,"title":{},"body":{"classes/GLUtils.html":{}}}],["b22",{"_index":779,"title":{},"body":{"classes/GLUtils.html":{}}}],["back",{"_index":793,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{}}}],["base",{"_index":595,"title":{},"body":{"classes/Entity.html":{}}}],["based",{"_index":64,"title":{},"body":{"classes/Animations.html":{},"classes/GLUtils.html":{},"miscellaneous/variables.html":{}}}],["basically",{"_index":570,"title":{},"body":{"classes/Container.html":{}}}],["before",{"_index":533,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"index.html":{}}}],["beginning",{"_index":1492,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["behavior",{"_index":1161,"title":{},"body":{"classes/OneUp.html":{}}}],["behaviors",{"_index":1218,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["being",{"_index":408,"title":{},"body":{"classes/Camera.html":{}}}],["below",{"_index":630,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{}}}],["between",{"_index":63,"title":{},"body":{"classes/Animations.html":{}}}],["bl",{"_index":1032,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["boolean",{"_index":187,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["boring",{"_index":783,"title":{},"body":{"classes/Game.html":{}}}],["both",{"_index":1410,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["bounds",{"_index":400,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["bounds.height",{"_index":1037,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.width",{"_index":1042,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.x",{"_index":1041,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.y",{"_index":1036,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["boundtexture",{"_index":1795,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["box",{"_index":969,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.height",{"_index":977,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.ts",{"_index":979,"title":{},"body":{"classes/HitBox.html":{},"coverage.html":{},"unit-test.html":{}}}],["box.ts:18",{"_index":997,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:23",{"_index":999,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:28",{"_index":1000,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:33",{"_index":1001,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:35",{"_index":993,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:61",{"_index":995,"title":{},"body":{"classes/HitBox.html":{}}}],["box.width",{"_index":976,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.x",{"_index":974,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.y",{"_index":975,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["br",{"_index":1033,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["branches",{"_index":2058,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":1577,"title":{},"body":{"classes/State.html":{}}}],["brief",{"_index":378,"title":{},"body":{"classes/Camera.html":{}}}],["buff",{"_index":270,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.buffer",{"_index":271,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.id",{"_index":274,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.name",{"_index":276,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer",{"_index":235,"title":{},"body":{"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GlBuffer.html":{}}}],["buffer(buffername",{"_index":264,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer.buffer",{"_index":267,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer.ts",{"_index":232,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{},"unit-test.html":{}}}],["buffer.ts:11",{"_index":239,"title":{},"body":{"classes/BufferInfo.html":{}}}],["buffer.ts:13",{"_index":241,"title":{},"body":{"classes/BufferInfo.html":{}}}],["buffer.ts:20",{"_index":936,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:37",{"_index":937,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:48",{"_index":938,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:66",{"_index":939,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:9",{"_index":238,"title":{},"body":{"classes/BufferInfo.html":{}}}],["bufferinfo",{"_index":230,"title":{"classes/BufferInfo.html":{}},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{}}}],["buffername",{"_index":263,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffers",{"_index":255,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/WebGLRenderer.html":{}}}],["button",{"_index":892,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["c",{"_index":1985,"title":{},"body":{"license.html":{}}}],["cache",{"_index":183,"title":{},"body":{"classes/Assets.html":{}}}],["cached",{"_index":133,"title":{},"body":{"classes/Assets.html":{}}}],["calculations",{"_index":1682,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["call",{"_index":401,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["callback",{"_index":163,"title":{},"body":{"classes/Assets.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{}}}],["called",{"_index":81,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/ParticleEmitter.html":{},"classes/Renderer.html":{},"classes/State.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["calls",{"_index":138,"title":{},"body":{"classes/Assets.html":{},"classes/Timer.html":{}}}],["camera",{"_index":302,"title":{"classes/Camera.html":{}},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["camera's",{"_index":345,"title":{},"body":{"classes/Camera.html":{}}}],["camera(player",{"_index":310,"title":{},"body":{"classes/Camera.html":{}}}],["camera.pos.x",{"_index":1374,"title":{},"body":{"classes/Renderer.html":{}}}],["camera.pos.y",{"_index":1375,"title":{},"body":{"classes/Renderer.html":{}}}],["cameratranslation",{"_index":750,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["canvas",{"_index":514,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.getcontext('2d",{"_index":1895,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.height",{"_index":1887,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.id",{"_index":1888,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.left",{"_index":1893,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.position",{"_index":1890,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.top",{"_index":1892,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.zindex",{"_index":1889,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.width",{"_index":1886,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvaselement",{"_index":1346,"title":{},"body":{"classes/Renderer.html":{}}}],["canvasrenderer",{"_index":508,"title":{"classes/CanvasRenderer.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["canvasrenderer(width",{"_index":855,"title":{},"body":{"classes/Game.html":{}}}],["canvasrenderingcontext2d",{"_index":546,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["canvastextalign",{"_index":1620,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["careful",{"_index":833,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["case",{"_index":1570,"title":{},"body":{"classes/State.html":{}}}],["catch(e",{"_index":220,"title":{},"body":{"classes/Assets.html":{}}}],["causes",{"_index":410,"title":{},"body":{"classes/Camera.html":{}}}],["cb",{"_index":166,"title":{},"body":{"classes/Assets.html":{}}}],["center",{"_index":1953,"title":{},"body":{"coverage.html":{}}}],["centeredx",{"_index":494,"title":{},"body":{"classes/Camera.html":{}}}],["centeredy",{"_index":499,"title":{},"body":{"classes/Camera.html":{}}}],["ch",{"_index":620,"title":{},"body":{"classes/Entity.html":{}}}],["chainable",{"_index":1285,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["change",{"_index":25,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{},"classes/State.html":{}}}],["changed",{"_index":1654,"title":{},"body":{"classes/Timer.html":{}}}],["charge",{"_index":1994,"title":{},"body":{"license.html":{}}}],["check",{"_index":537,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/State.html":{},"classes/WebGLRenderer.html":{}}}],["checks",{"_index":1069,"title":{},"body":{"classes/KeyControls.html":{}}}],["child",{"_index":364,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["children",{"_index":326,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{}}}],["claim",{"_index":2035,"title":{},"body":{"license.html":{}}}],["clamp",{"_index":1933,"title":{},"body":{"coverage.html":{}}}],["class",{"_index":0,"title":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"overview.html":{}}}],["clear",{"_index":530,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["clientrect",{"_index":1121,"title":{},"body":{"classes/MouseControls.html":{}}}],["clientx",{"_index":1144,"title":{},"body":{"classes/MouseControls.html":{}}}],["clienty",{"_index":1145,"title":{},"body":{"classes/MouseControls.html":{}}}],["clone",{"_index":1301,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["cloned",{"_index":1300,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["code",{"_index":1051,"title":{},"body":{"classes/KeyControls.html":{}}}],["coin",{"_index":1168,"title":{},"body":{"classes/OneUp.html":{}}}],["coin.anims.add('spin",{"_index":1170,"title":{},"body":{"classes/OneUp.html":{}}}],["coin.anims.play('spin",{"_index":1174,"title":{},"body":{"classes/OneUp.html":{}}}],["collection",{"_index":2170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collision",{"_index":982,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["collisions",{"_index":1010,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["color",{"_index":376,"title":{},"body":{"classes/Camera.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["color.a",{"_index":2158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color.split",{"_index":1816,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["columns",{"_index":1105,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["compiled",{"_index":1407,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["complete",{"_index":181,"title":{},"body":{"classes/Assets.html":{}}}],["completed",{"_index":146,"title":{},"body":{"classes/Assets.html":{},"classes/Scene.html":{}}}],["completion",{"_index":173,"title":{},"body":{"classes/Assets.html":{},"classes/Scene.html":{},"classes/Timer.html":{}}}],["components",{"_index":287,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["concrete",{"_index":541,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["conditions",{"_index":2015,"title":{},"body":{"license.html":{}}}],["connection",{"_index":2042,"title":{},"body":{"license.html":{}}}],["console.error(e",{"_index":222,"title":{},"body":{"classes/Assets.html":{}}}],["console.info(`cached",{"_index":226,"title":{},"body":{"classes/Assets.html":{}}}],["console.info(`load",{"_index":227,"title":{},"body":{"classes/Assets.html":{}}}],["console.log('first",{"_index":1573,"title":{},"body":{"classes/State.html":{}}}],["console.log(this.state.get",{"_index":1578,"title":{},"body":{"classes/State.html":{}}}],["console.warn(`image",{"_index":1836,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["const",{"_index":118,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["constructor",{"_index":39,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["constructor(container",{"_index":1113,"title":{},"body":{"classes/MouseControls.html":{}}}],["constructor(display",{"_index":1178,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["constructor(frame",{"_index":40,"title":{},"body":{"classes/Animations.html":{}}}],["constructor(frames",{"_index":93,"title":{},"body":{"classes/Animations.html":{}}}],["constructor(game",{"_index":1382,"title":{},"body":{"classes/Scene.html":{}}}],["constructor(gl",{"_index":258,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["constructor(numparticles",{"_index":1270,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["constructor(ontick",{"_index":1643,"title":{},"body":{"classes/Timer.html":{}}}],["constructor(sounds",{"_index":1526,"title":{},"body":{"classes/SoundGroup.html":{}}}],["constructor(src",{"_index":1484,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["constructor(state",{"_index":1580,"title":{},"body":{"classes/State.html":{}}}],["constructor(subject",{"_index":339,"title":{},"body":{"classes/Camera.html":{}}}],["constructor(text",{"_index":1611,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["constructor(url",{"_index":1624,"title":{},"body":{"classes/Texture.html":{}}}],["constructor(width",{"_index":519,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["constructor(x",{"_index":992,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["container",{"_index":323,"title":{"classes/Container.html":{}},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["container.alpha",{"_index":563,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["container.appendchild(div",{"_index":1370,"title":{},"body":{"classes/Renderer.html":{}}}],["container.visible",{"_index":562,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["container:11",{"_index":1184,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:14",{"_index":1187,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:16",{"_index":1188,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:19",{"_index":1185,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:27",{"_index":430,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:45",{"_index":1194,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:52",{"_index":1191,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:6",{"_index":1189,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:63",{"_index":1193,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:74",{"_index":1192,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:8",{"_index":1186,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["containing",{"_index":526,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/Renderer.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["contains",{"_index":781,"title":{},"body":{"classes/Game.html":{}}}],["context",{"_index":1752,"title":{},"body":{"classes/WebAudio.html":{}}}],["contract",{"_index":2038,"title":{},"body":{"license.html":{}}}],["control",{"_index":582,"title":{},"body":{"interfaces/Controls.html":{}}}],["controlled",{"_index":1211,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["controller",{"_index":908,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controllers",{"_index":909,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls",{"_index":579,"title":{"interfaces/Controls.html":{}},"body":{"interfaces/Controls.html":{},"classes/Scene.html":{},"coverage.html":{}}}],["controls.ts",{"_index":877,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["controls.ts:104",{"_index":1049,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:11",{"_index":1115,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:113",{"_index":1057,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:13",{"_index":891,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:15",{"_index":1114,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:18",{"_index":895,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:20",{"_index":1062,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:23",{"_index":897,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:25",{"_index":1065,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:28",{"_index":899,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:30",{"_index":1066,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:33",{"_index":901,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:38",{"_index":904,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:39",{"_index":1067,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:42",{"_index":1117,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:43",{"_index":907,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:45",{"_index":886,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:58",{"_index":1072,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:7",{"_index":887,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:70",{"_index":1047,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:9",{"_index":1116,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls/controls",{"_index":1387,"title":{},"body":{"classes/Scene.html":{}}}],["convert",{"_index":1715,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["converts",{"_index":1714,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["coordinate",{"_index":1282,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["coordinates",{"_index":741,"title":{},"body":{"classes/GLUtils.html":{},"classes/MouseControls.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copies",{"_index":1297,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"license.html":{}}}],["copy",{"_index":1292,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"license.html":{}}}],["copy(vec",{"_index":1298,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copyright",{"_index":1984,"title":{},"body":{"license.html":{}}}],["core",{"_index":1648,"title":{},"body":{"classes/Timer.html":{}}}],["corner",{"_index":971,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["corners",{"_index":968,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["correction",{"_index":1020,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["count",{"_index":1550,"title":{},"body":{"classes/SoundPool.html":{}}}],["countdown",{"_index":1634,"title":{},"body":{"classes/Timer.html":{}}}],["coverage",{"_index":1896,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["create",{"_index":20,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["create(buffername",{"_index":269,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["created",{"_index":1180,"title":{},"body":{"classes/OneUp.html":{}}}],["createprogram(vertexshader",{"_index":1443,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["creates",{"_index":268,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Vec.html":{}}}],["createtextcanvas",{"_index":1885,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["createtexture",{"_index":1846,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["ctx",{"_index":545,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["ctx2",{"_index":547,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["cubicin(x",{"_index":2166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cubicinout(x",{"_index":2169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cubicout(x",{"_index":2167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curframe",{"_index":91,"title":{},"body":{"classes/Animations.html":{}}}],["current",{"_index":73,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{}}}],["currently",{"_index":1489,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["curtime",{"_index":92,"title":{},"body":{"classes/Animations.html":{}}}],["custom",{"_index":18,"title":{},"body":{"classes/Animations.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["customized",{"_index":947,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["d",{"_index":1071,"title":{},"body":{"classes/KeyControls.html":{}}}],["damages",{"_index":2036,"title":{},"body":{"license.html":{}}}],["data",{"_index":233,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["dead",{"_index":327,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/Timer.html":{}}}],["deadzone",{"_index":888,"title":{},"body":{"classes/GamepadControls.html":{}}}],["deal",{"_index":2000,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2043,"title":{},"body":{"license.html":{}}}],["debug",{"_index":395,"title":{},"body":{"classes/Camera.html":{},"classes/Game.html":{}}}],["debugging",{"_index":405,"title":{},"body":{"classes/Camera.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["declare",{"_index":1100,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["default",{"_index":348,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1158,"title":{},"body":{"classes/OneUp.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults.shaders.fragmentcolor",{"_index":1811,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaults.shaders.fragmenttexture",{"_index":1808,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaults.shaders.vertexcolor",{"_index":1810,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaults.shaders.vertextexture",{"_index":1807,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaultsize",{"_index":1243,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["defined",{"_index":42,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["delay",{"_index":1637,"title":{},"body":{"classes/Timer.html":{}}}],["delete",{"_index":930,"title":{},"body":{"classes/GamepadControls.html":{}}}],["delta",{"_index":66,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["dependencies",{"_index":1968,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["desired",{"_index":1025,"title":{},"body":{"interfaces/Hits.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{}}}],["destination",{"_index":843,"title":{},"body":{"classes/Game.html":{}}}],["detected",{"_index":1011,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["detection",{"_index":983,"title":{},"body":{"classes/HitBox.html":{}}}],["determine",{"_index":1231,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["determines",{"_index":536,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["determining",{"_index":539,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["development",{"_index":1966,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":1559,"title":{},"body":{"classes/State.html":{}}}],["dimension",{"_index":735,"title":{},"body":{"classes/GLUtils.html":{}}}],["dimensions",{"_index":722,"title":{},"body":{"classes/GLUtils.html":{}}}],["ding",{"_index":1479,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["ding.play",{"_index":1481,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["dings",{"_index":1539,"title":{},"body":{"classes/SoundPool.html":{}}}],["dings.play",{"_index":1542,"title":{},"body":{"classes/SoundPool.html":{}}}],["direction",{"_index":905,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{}}}],["directions",{"_index":1009,"title":{},"body":{"interfaces/Hits.html":{},"classes/ParticleEmitter.html":{},"interfaces/Resolution.html":{}}}],["directly",{"_index":1348,"title":{},"body":{"classes/Renderer.html":{}}}],["dirto",{"_index":1934,"title":{},"body":{"coverage.html":{}}}],["dis",{"_index":1712,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["display",{"_index":800,"title":{},"body":{"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["displays",{"_index":397,"title":{},"body":{"classes/Camera.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["distance",{"_index":1935,"title":{},"body":{"coverage.html":{}}}],["distribute",{"_index":2008,"title":{},"body":{"license.html":{}}}],["div",{"_index":1360,"title":{},"body":{"classes/Renderer.html":{}}}],["div.appendchild(this.canvas",{"_index":1369,"title":{},"body":{"classes/Renderer.html":{}}}],["div.id",{"_index":1362,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.height",{"_index":1364,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.margin",{"_index":1367,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.position",{"_index":1363,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.width",{"_index":1366,"title":{},"body":{"classes/Renderer.html":{}}}],["divide",{"_index":1312,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["divide(s",{"_index":1313,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["divides",{"_index":1311,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["docs",{"_index":1975,"title":{},"body":{"index.html":{}}}],["docs:serve",{"_index":1981,"title":{},"body":{"index.html":{}}}],["docsto",{"_index":1977,"title":{},"body":{"index.html":{}}}],["document.addeventlistener('keydown",{"_index":1091,"title":{},"body":{"classes/KeyControls.html":{}}}],["document.addeventlistener('keyup",{"_index":1095,"title":{},"body":{"classes/KeyControls.html":{}}}],["document.addeventlistener('mousedown",{"_index":1128,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('mousemove",{"_index":1133,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('mouseup",{"_index":1130,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('resize",{"_index":1135,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.body",{"_index":795,"title":{},"body":{"classes/Game.html":{}}}],["document.createelement('audio",{"_index":1771,"title":{},"body":{"classes/WebAudio.html":{}}}],["document.createelement('canvas",{"_index":550,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["document.createelement('div",{"_index":1361,"title":{},"body":{"classes/Renderer.html":{}}}],["documentation",{"_index":1897,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["domrect",{"_index":1122,"title":{},"body":{"classes/MouseControls.html":{}}}],["done",{"_index":223,"title":{},"body":{"classes/Assets.html":{}}}],["dot",{"_index":1320,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["dot(vec",{"_index":1323,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["down",{"_index":986,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{}}}],["down(e",{"_index":1136,"title":{},"body":{"classes/MouseControls.html":{}}}],["dt",{"_index":83,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["duration",{"_index":381,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Timer.html":{}}}],["e",{"_index":203,"title":{},"body":{"classes/Assets.html":{},"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/VecEntity.html":{}}}],["e.acc.set(0",{"_index":1710,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.acc.x",{"_index":1689,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.acc.y",{"_index":1692,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.g",{"_index":1052,"title":{},"body":{"classes/KeyControls.html":{},"classes/State.html":{}}}],["e.height",{"_index":699,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.mass",{"_index":1691,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.name",{"_index":697,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.pos.add(dis",{"_index":1713,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.preventdefault",{"_index":1094,"title":{},"body":{"classes/KeyControls.html":{}}}],["e.properties",{"_index":700,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.type",{"_index":696,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.vel.clone().multiply",{"_index":1696,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.set(vx",{"_index":1709,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.x",{"_index":1706,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.y",{"_index":1708,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.width",{"_index":698,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.x",{"_index":694,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.y",{"_index":695,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["each",{"_index":431,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["early",{"_index":1228,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["ease",{"_index":389,"title":{},"body":{"classes/Camera.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["easier",{"_index":250,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["easing",{"_index":324,"title":{},"body":{"classes/Camera.html":{},"miscellaneous/variables.html":{}}}],["effect",{"_index":1157,"title":{},"body":{"classes/OneUp.html":{},"classes/ParticleEmitter.html":{}}}],["effects",{"_index":1757,"title":{},"body":{"classes/WebAudio.html":{}}}],["el",{"_index":1120,"title":{},"body":{"classes/MouseControls.html":{}}}],["elapsed",{"_index":828,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["elasticout(r",{"_index":1640,"title":{},"body":{"classes/Timer.html":{}}}],["element",{"_index":524,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["emits",{"_index":1269,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter",{"_index":1277,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts",{"_index":1265,"title":{},"body":{"classes/ParticleEmitter.html":{},"coverage.html":{},"unit-test.html":{}}}],["emitter.ts:11",{"_index":1271,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts:43",{"_index":1275,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["empty",{"_index":1339,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["enable",{"_index":286,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{}}}],["enables",{"_index":280,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["enforce",{"_index":2055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["engine",{"_index":1963,"title":{},"body":{"index.html":{}}}],["ent",{"_index":702,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{}}}],["entire",{"_index":950,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["entities",{"_index":365,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{}}}],["entitieslayer",{"_index":675,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["entitieslayer.objects",{"_index":678,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["entity",{"_index":358,"title":{"classes/Entity.html":{}},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["entity.pos.x",{"_index":1372,"title":{},"body":{"classes/Renderer.html":{}}}],["entity.pos.y",{"_index":1376,"title":{},"body":{"classes/Renderer.html":{}}}],["entity.width",{"_index":1373,"title":{},"body":{"classes/Renderer.html":{}}}],["entity:11",{"_index":359,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:14",{"_index":371,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:16",{"_index":373,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:19",{"_index":362,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:45",{"_index":443,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:52",{"_index":436,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:6",{"_index":374,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:63",{"_index":442,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:74",{"_index":439,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["entity:8",{"_index":368,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["enum",{"_index":829,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1958,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumtype",{"_index":1581,"title":{},"body":{"classes/State.html":{}}}],["equivalent",{"_index":893,"title":{},"body":{"classes/GamepadControls.html":{}}}],["error",{"_index":648,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["error('tiled",{"_index":679,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["error(`error",{"_index":1509,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["error(`invalid",{"_index":1820,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["error(`no",{"_index":293,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["error(`unknown",{"_index":1421,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["error(message",{"_index":1453,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["es",{"_index":701,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["escape",{"_index":902,"title":{},"body":{"classes/GamepadControls.html":{}}}],["established",{"_index":1224,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["event",{"_index":207,"title":{},"body":{"classes/Assets.html":{},"license.html":{}}}],["events",{"_index":1110,"title":{},"body":{"classes/MouseControls.html":{}}}],["everything",{"_index":402,"title":{},"body":{"classes/Camera.html":{}}}],["example",{"_index":10,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{}}}],["existing",{"_index":59,"title":{},"body":{"classes/Animations.html":{}}}],["exits",{"_index":1227,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["export",{"_index":103,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["express",{"_index":2023,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1343,"title":{},"body":{"classes/Renderer.html":{}}}],["extending",{"_index":446,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["extends",{"_index":322,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{}}}],["extra",{"_index":627,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["extralayer",{"_index":624,"title":{"interfaces/ExtraLayer.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{}}}],["extralayers",{"_index":666,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["extralayers.filter(layer",{"_index":681,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["f00",{"_index":1330,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["f12",{"_index":1077,"title":{},"body":{"classes/KeyControls.html":{}}}],["f5",{"_index":1076,"title":{},"body":{"classes/KeyControls.html":{}}}],["factory",{"_index":199,"title":{},"body":{"classes/Assets.html":{}}}],["factory(url",{"_index":228,"title":{},"body":{"classes/Assets.html":{}}}],["fade",{"_index":383,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{}}}],["fadeduration",{"_index":842,"title":{},"body":{"classes/Game.html":{}}}],["fadeinseconds",{"_index":811,"title":{},"body":{"classes/Game.html":{}}}],["fadeout",{"_index":1732,"title":{},"body":{"classes/WebAudio.html":{}}}],["fades",{"_index":1743,"title":{},"body":{"classes/WebAudio.html":{}}}],["fadetime",{"_index":841,"title":{},"body":{"classes/Game.html":{}}}],["fading",{"_index":1162,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["falls",{"_index":792,"title":{},"body":{"classes/Game.html":{}}}],["false",{"_index":193,"title":{},"body":{"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["fast",{"_index":835,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["fetch(url",{"_index":214,"title":{},"body":{"classes/Assets.html":{}}}],["ff0",{"_index":1203,"title":{},"body":{"classes/OneUp.html":{}}}],["fff",{"_index":385,"title":{},"body":{"classes/Camera.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"unit-test.html":{}}}],["files",{"_index":1999,"title":{},"body":{"license.html":{}}}],["fill",{"_index":476,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["findattributes",{"_index":1465,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["first",{"_index":748,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/State.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["firstgid",{"_index":1106,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["fitness",{"_index":2028,"title":{},"body":{"license.html":{}}}],["flash",{"_index":331,"title":{},"body":{"classes/Camera.html":{}}}],["flash(duration",{"_index":375,"title":{},"body":{"classes/Camera.html":{}}}],["flashduration",{"_index":453,"title":{},"body":{"classes/Camera.html":{}}}],["flashrect",{"_index":454,"title":{},"body":{"classes/Camera.html":{}}}],["flashtime",{"_index":452,"title":{},"body":{"classes/Camera.html":{}}}],["flat",{"_index":719,"title":{},"body":{"classes/GLUtils.html":{}}}],["float",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["float32array([0",{"_index":244,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["fn",{"_index":440,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["fn(child",{"_index":623,"title":{},"body":{"classes/Entity.html":{}}}],["focus",{"_index":332,"title":{},"body":{"classes/Camera.html":{}}}],["focus(ease",{"_index":386,"title":{},"body":{"classes/Camera.html":{}}}],["follow",{"_index":455,"title":{},"body":{"classes/Camera.html":{}}}],["following",{"_index":2014,"title":{},"body":{"license.html":{}}}],["follows",{"_index":304,"title":{},"body":{"classes/Camera.html":{}}}],["font",{"_index":1617,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["force",{"_index":1687,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["force.x",{"_index":1690,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["force.y",{"_index":1693,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["foreach(layer",{"_index":683,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["form",{"_index":659,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["formatted",{"_index":1325,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["found",{"_index":294,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["four",{"_index":967,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["fps",{"_index":786,"title":{},"body":{"classes/Game.html":{}}}],["fragment",{"_index":1397,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["fragmentcolor",{"_index":2161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fragmentshader",{"_index":1431,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["fragmentsource",{"_index":1426,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["fragmenttexture",{"_index":2151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frame",{"_index":49,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["frames",{"_index":24,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{}}}],["framesource",{"_index":106,"title":{},"body":{"classes/Animations.html":{}}}],["free",{"_index":1993,"title":{},"body":{"license.html":{}}}],["friction",{"_index":1694,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["friction.y",{"_index":1699,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["from(v",{"_index":1293,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["fullarea",{"_index":243,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["function",{"_index":167,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1657,"title":{},"body":{"classes/Timer.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["furnished",{"_index":2013,"title":{},"body":{"license.html":{}}}],["g",{"_index":1829,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gainnode",{"_index":1762,"title":{},"body":{"classes/WebAudio.html":{}}}],["game",{"_index":132,"title":{"classes/Game.html":{}},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["game(640",{"_index":784,"title":{},"body":{"classes/Game.html":{}}}],["game.assets.completed",{"_index":1833,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["game.assets.image(url",{"_index":1627,"title":{},"body":{"classes/Texture.html":{}}}],["game.debug",{"_index":221,"title":{},"body":{"classes/Assets.html":{},"classes/Game.html":{},"classes/WebGLRenderer.html":{}}}],["game.fps",{"_index":868,"title":{},"body":{"classes/Game.html":{}}}],["game.height",{"_index":1641,"title":{},"body":{"classes/Timer.html":{}}}],["game.run",{"_index":785,"title":{},"body":{"classes/Game.html":{}}}],["game.ups",{"_index":871,"title":{},"body":{"classes/Game.html":{}}}],["gameover",{"_index":1562,"title":{},"body":{"classes/State.html":{}}}],["gamepad",{"_index":586,"title":{},"body":{"interfaces/Controls.html":{},"classes/GamepadControls.html":{}}}],["gamepadcontrols",{"_index":590,"title":{"classes/GamepadControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/GamepadControls.html":{},"coverage.html":{}}}],["gamepadevent",{"_index":925,"title":{},"body":{"classes/GamepadControls.html":{}}}],["gamestate",{"_index":1560,"title":{},"body":{"classes/State.html":{}}}],["gamestate.ready",{"_index":1571,"title":{},"body":{"classes/State.html":{}}}],["gameupdate",{"_index":807,"title":{},"body":{"classes/Game.html":{},"miscellaneous/typealiases.html":{}}}],["gameupdate(step",{"_index":866,"title":{},"body":{"classes/Game.html":{}}}],["gauss",{"_index":1936,"title":{},"body":{"coverage.html":{}}}],["gaussdistance",{"_index":1937,"title":{},"body":{"coverage.html":{}}}],["get2dprojectionmatrix",{"_index":708,"title":{},"body":{"classes/GLUtils.html":{}}}],["get2dprojectionmatrix(width",{"_index":715,"title":{},"body":{"classes/GLUtils.html":{}}}],["getaction",{"_index":1061,"title":{},"body":{"classes/KeyControls.html":{}}}],["getactiona",{"_index":890,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactionb",{"_index":894,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["getactionesc",{"_index":900,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactionx",{"_index":896,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactiony",{"_index":898,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getattriblocation",{"_index":1469,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getattriblocation(name",{"_index":1419,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["getcameratranslation",{"_index":709,"title":{},"body":{"classes/GLUtils.html":{}}}],["getcameratranslation(camera",{"_index":723,"title":{},"body":{"classes/GLUtils.html":{}}}],["getcanvas",{"_index":820,"title":{},"body":{"classes/Game.html":{}}}],["getcanvaselement",{"_index":1355,"title":{},"body":{"classes/Renderer.html":{}}}],["getcompleted",{"_index":177,"title":{},"body":{"classes/Assets.html":{}}}],["getctx",{"_index":1750,"title":{},"body":{"classes/WebAudio.html":{}}}],["gethaschildren",{"_index":608,"title":{},"body":{"classes/Entity.html":{}}}],["getheight",{"_index":816,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{}}}],["getlayer('entities",{"_index":676,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getlayer('level",{"_index":674,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getlayer(layer.name",{"_index":685,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getmaster",{"_index":1753,"title":{},"body":{"classes/WebAudio.html":{}}}],["getmusic",{"_index":1758,"title":{},"body":{"classes/WebAudio.html":{}}}],["getobjectbyname",{"_index":1628,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["getobjectbyname(name",{"_index":649,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getobjectsbytype",{"_index":1629,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["getobjectsbytype(type",{"_index":651,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getpositionmatrix(camera",{"_index":1855,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["getprogram",{"_index":1475,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getrotation",{"_index":710,"title":{},"body":{"classes/GLUtils.html":{}}}],["getrotation(angle",{"_index":727,"title":{},"body":{"classes/GLUtils.html":{}}}],["gets",{"_index":261,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Point.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{}}}],["getscale",{"_index":711,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscale(x",{"_index":732,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscalematrix",{"_index":712,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscalematrix(sprite",{"_index":736,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscene",{"_index":818,"title":{},"body":{"classes/Game.html":{}}}],["getsfx",{"_index":1755,"title":{},"body":{"classes/WebAudio.html":{}}}],["getspeed",{"_index":822,"title":{},"body":{"classes/Game.html":{}}}],["gettexture(gl",{"_index":1832,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gettileprops",{"_index":691,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["gettileset",{"_index":677,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getting",{"_index":1961,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":713,"title":{},"body":{"classes/GLUtils.html":{}}}],["gettranslation(x",{"_index":739,"title":{},"body":{"classes/GLUtils.html":{}}}],["getuniformlocation",{"_index":1470,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getuniformlocation(name",{"_index":1423,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["getvolume",{"_index":1495,"title":{},"body":{"classes/Sound.html":{}}}],["getwidth",{"_index":814,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{}}}],["getx",{"_index":903,"title":{},"body":{"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{}}}],["gety",{"_index":906,"title":{},"body":{"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{}}}],["gid",{"_index":1103,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["gl",{"_index":253,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["gl.active_attributes",{"_index":1468,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.attachshader(this.program",{"_index":1445,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.bindbuffer(gl.array_buffer",{"_index":296,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.bindtexture(gl.texture_2d",{"_index":1840,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.blendequation(gl.func_add",{"_index":1439,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.blendfunc(gl.src_alpha",{"_index":1440,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.bufferdata(gl.array_buffer",{"_index":297,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.clamp_to_edge",{"_index":1850,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.clearcolor(0",{"_index":1437,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.compile_status",{"_index":1462,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.compileshader(shader",{"_index":1460,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createprogram",{"_index":1444,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createshader(shadertype",{"_index":1458,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createtexture",{"_index":1847,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.deleteprogram(this.program",{"_index":1452,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.deleteshader(shader",{"_index":1464,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.disable(gl.depth_test",{"_index":1442,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.enable(gl.blend",{"_index":1438,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.enablevertexattribarray(attriblocation",{"_index":301,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.float",{"_index":300,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.getprograminfolog(this.program",{"_index":1451,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getprogramparameter(program",{"_index":1467,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getprogramparameter(this.program",{"_index":1448,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getshaderinfolog(shader",{"_index":1463,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getshaderparameter(shader",{"_index":1461,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.link_status",{"_index":1449,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.linkprogram(this.program",{"_index":1446,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.nearest",{"_index":1853,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.one_minus_src_alpha",{"_index":1441,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.rgba",{"_index":1843,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.shadersource(shader",{"_index":1459,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.static_draw",{"_index":298,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.teximage2d(gl.texture_2d",{"_index":1842,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texparameteri(gl.texture_2d",{"_index":1848,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_mag_filter",{"_index":1854,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_min_filter",{"_index":1852,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_wrap_s",{"_index":1849,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_wrap_t",{"_index":1851,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.unsigned_byte",{"_index":1844,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.vertexattribpointer(attriblocation",{"_index":299,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl_fragcolor",{"_index":2159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gl_position",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glbuffer",{"_index":252,"title":{"classes/GlBuffer.html":{}},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["glbuffer(this.gl",{"_index":1799,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["global",{"_index":1102,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["globalalpha",{"_index":1796,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils",{"_index":703,"title":{"classes/GLUtils.html":{}},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["glutils.get2dprojectionmatrix(this.width",{"_index":1863,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.getcameratranslation(camera",{"_index":1861,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.getrotation(sprite.rotation",{"_index":1879,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.getscale(width",{"_index":756,"title":{},"body":{"classes/GLUtils.html":{}}}],["glutils.getscalematrix(sprite",{"_index":1869,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation",{"_index":752,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(0",{"_index":751,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(sprite.pivot.x",{"_index":1877,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(sprite.pos.x",{"_index":1866,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(originmatrix",{"_index":1881,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(pivotmatrix",{"_index":1880,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(posmatrix",{"_index":1884,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(scalematrix",{"_index":1883,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["go",{"_index":1574,"title":{},"body":{"classes/State.html":{}}}],["going",{"_index":1597,"title":{},"body":{"classes/State.html":{}}}],["gotpickup",{"_index":1166,"title":{},"body":{"classes/OneUp.html":{}}}],["granted",{"_index":1992,"title":{},"body":{"license.html":{}}}],["group",{"_index":1531,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts",{"_index":1521,"title":{},"body":{"classes/SoundGroup.html":{},"coverage.html":{},"unit-test.html":{}}}],["group.ts:21",{"_index":1527,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts:37",{"_index":1530,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts:42",{"_index":1532,"title":{},"body":{"classes/SoundGroup.html":{}}}],["h",{"_index":1253,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["h.y",{"_index":1258,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["half",{"_index":26,"title":{},"body":{"classes/Animations.html":{},"classes/Timer.html":{}}}],["handler(e",{"_index":928,"title":{},"body":{"classes/GamepadControls.html":{}}}],["handles",{"_index":8,"title":{},"body":{"classes/Animations.html":{}}}],["hasanchor",{"_index":1856,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["hasanchor(sprite",{"_index":1865,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["haschildren",{"_index":596,"title":{},"body":{"classes/Entity.html":{}}}],["hasframe",{"_index":940,"title":{"interfaces/HasFrame.html":{}},"body":{"interfaces/HasFrame.html":{},"coverage.html":{}}}],["haswebaudio",{"_index":1731,"title":{},"body":{"classes/WebAudio.html":{}}}],["height",{"_index":313,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["helper",{"_index":948,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["helpers",{"_index":1284,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["hereby",{"_index":1991,"title":{},"body":{"license.html":{}}}],["highp",{"_index":2153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hit",{"_index":1018,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["hitbox",{"_index":945,"title":{"classes/HitBox.html":{}},"body":{"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"coverage.html":{}}}],["hitbox(4",{"_index":991,"title":{},"body":{"classes/HitBox.html":{}}}],["hits",{"_index":1006,"title":{"interfaces/Hits.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["hits.down",{"_index":1034,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["hits.right",{"_index":1039,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["holders",{"_index":2033,"title":{},"body":{"license.html":{}}}],["holds",{"_index":565,"title":{},"body":{"classes/Container.html":{}}}],["home/kiswa/projects/kilo/lib/animations.ts",{"_index":2060,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/assets.ts",{"_index":2061,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/camera.ts",{"_index":2066,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/container.ts",{"_index":2070,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/controls/gamepad",{"_index":2083,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/controls/key",{"_index":2086,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/controls/mouse",{"_index":2089,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/fx/one",{"_index":2091,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/fx/particle",{"_index":2092,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/fx/particle.ts",{"_index":2093,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/game.ts",{"_index":2071,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/canvas",{"_index":2094,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/renderer.ts",{"_index":2098,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl",{"_index":2099,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/defaults.ts",{"_index":2103,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/gl",{"_index":2104,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/shader",{"_index":2105,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/utils.ts",{"_index":2107,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/resolvers/stop",{"_index":2108,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/resolvers/wall",{"_index":2109,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/scene.ts",{"_index":2074,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/sound/sound",{"_index":2113,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/sound/sound.ts",{"_index":2114,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/state.ts",{"_index":2076,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/tile",{"_index":2078,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/timer.ts",{"_index":2081,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/entity.ts",{"_index":2115,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/hit",{"_index":2116,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/rect.ts",{"_index":2117,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/sprite.ts",{"_index":2118,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/text.ts",{"_index":2119,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/texture.ts",{"_index":2120,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/trigger.ts",{"_index":2121,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/vec.ts",{"_index":2122,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/math.ts",{"_index":2123,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/physics.ts",{"_index":2126,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/sprite.ts",{"_index":2127,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/tiled",{"_index":2128,"title":{},"body":{"unit-test.html":{}}}],["horizontal",{"_index":1234,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["horizontalvelrange",{"_index":1236,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["html5",{"_index":513,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlaudioelement",{"_index":176,"title":{},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/WebAudio.html":{}}}],["htmlcanvaselement",{"_index":522,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlelement",{"_index":520,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlimageelement",{"_index":153,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["id",{"_index":236,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["identifier",{"_index":1898,"title":{},"body":{"coverage.html":{}}}],["idle",{"_index":21,"title":{},"body":{"classes/Animations.html":{}}}],["ids",{"_index":1099,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["ignore",{"_index":87,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/KeyControls.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["image",{"_index":140,"title":{},"body":{"classes/Assets.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["image(url",{"_index":148,"title":{},"body":{"classes/Assets.html":{}}}],["imageheight",{"_index":1107,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["imagewidth",{"_index":1108,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["img",{"_index":200,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{},"classes/WebGLRenderer.html":{}}}],["img.addeventlistener('load",{"_index":202,"title":{},"body":{"classes/Assets.html":{}}}],["img.complete",{"_index":1835,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["img.src",{"_index":201,"title":{},"body":{"classes/Assets.html":{},"classes/WebGLRenderer.html":{}}}],["implementation",{"_index":12,"title":{},"body":{"classes/Animations.html":{},"classes/Container.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["implementations",{"_index":542,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["implemented",{"_index":445,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["implements",{"_index":1291,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["implied",{"_index":2024,"title":{},"body":{"license.html":{}}}],["import",{"_index":85,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["impulse",{"_index":1700,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["included",{"_index":2018,"title":{},"body":{"license.html":{}}}],["including",{"_index":952,"title":{},"body":{"interfaces/HasFrame.html":{},"license.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["information",{"_index":1554,"title":{},"body":{"classes/State.html":{}}}],["inherited",{"_index":357,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{}}}],["initial",{"_index":1183,"title":{},"body":{"classes/OneUp.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{}}}],["initialize",{"_index":44,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["initwebgl",{"_index":1436,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["input",{"_index":1068,"title":{},"body":{"classes/KeyControls.html":{}}}],["inputs",{"_index":1045,"title":{},"body":{"classes/KeyControls.html":{}}}],["inside",{"_index":1165,"title":{},"body":{"classes/OneUp.html":{}}}],["install",{"_index":1967,"title":{},"body":{"index.html":{}}}],["instance",{"_index":797,"title":{},"body":{"classes/Game.html":{},"classes/WebAudio.html":{}}}],["instanceof",{"_index":1871,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["instances",{"_index":1545,"title":{},"body":{"classes/SoundPool.html":{}}}],["integrate",{"_index":1703,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["integrate(e",{"_index":1704,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["integratepos",{"_index":1711,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["integrates",{"_index":1702,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["interface",{"_index":578,"title":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"interfaces/VecEntity.html":{}},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["interfaces",{"_index":580,"title":{},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"interfaces/VecEntity.html":{},"overview.html":{}}}],["internal",{"_index":88,"title":{},"body":{"classes/Animations.html":{},"classes/Timer.html":{}}}],["invalid",{"_index":1023,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["is(state",{"_index":1589,"title":{},"body":{"classes/State.html":{}}}],["isabovelevel",{"_index":634,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["iscompleted",{"_index":186,"title":{},"body":{"classes/Assets.html":{}}}],["isconnect",{"_index":929,"title":{},"body":{"classes/GamepadControls.html":{}}}],["isdown",{"_index":1111,"title":{},"body":{"classes/MouseControls.html":{}}}],["isin",{"_index":1579,"title":{},"body":{"classes/State.html":{}}}],["isin(...states",{"_index":1591,"title":{},"body":{"classes/State.html":{}}}],["isincamera",{"_index":518,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["isincamera(entity",{"_index":534,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["isjson",{"_index":224,"title":{},"body":{"classes/Assets.html":{}}}],["iswebgl",{"_index":844,"title":{},"body":{"classes/Game.html":{}}}],["j",{"_index":954,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["json",{"_index":141,"title":{},"body":{"classes/Assets.html":{},"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["json(url",{"_index":154,"title":{},"body":{"classes/Assets.html":{}}}],["jsonobj",{"_index":663,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.height",{"_index":670,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.layers",{"_index":671,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tileheight",{"_index":668,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tilesets",{"_index":672,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tilewidth",{"_index":667,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.width",{"_index":669,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["justsetstate",{"_index":1599,"title":{},"body":{"classes/State.html":{}}}],["keep",{"_index":390,"title":{},"body":{"classes/Camera.html":{}}}],["key",{"_index":592,"title":{},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/KeyControls.html":{},"interfaces/TiledMap.html":{}}}],["key's",{"_index":1055,"title":{},"body":{"classes/KeyControls.html":{}}}],["key(key",{"_index":1048,"title":{},"body":{"classes/KeyControls.html":{}}}],["keyboard",{"_index":585,"title":{},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{}}}],["keyboardevent",{"_index":1050,"title":{},"body":{"classes/KeyControls.html":{}}}],["keycontrols",{"_index":589,"title":{"classes/KeyControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{},"coverage.html":{}}}],["keymap",{"_index":1074,"title":{},"body":{"classes/KeyControls.html":{},"miscellaneous/typealiases.html":{}}}],["keys",{"_index":588,"title":{},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{},"miscellaneous/typealiases.html":{}}}],["keyw",{"_index":1053,"title":{},"body":{"classes/KeyControls.html":{}}}],["kilo",{"_index":1359,"title":{},"body":{"classes/Renderer.html":{},"classes/WebGLRenderer.html":{},"index.html":{}}}],["kind",{"_index":2022,"title":{},"body":{"license.html":{}}}],["l",{"_index":1255,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["l.y",{"_index":1262,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["last",{"_index":84,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["lastplay",{"_index":1279,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["lasttime",{"_index":860,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{}}}],["layer",{"_index":633,"title":{"interfaces/Layer.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["layer.data",{"_index":688,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["layer.isabovelevel",{"_index":682,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["layer.name",{"_index":689,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["layers",{"_index":628,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["layersuptolevel",{"_index":953,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["left",{"_index":987,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{}}}],["lerp",{"_index":1938,"title":{},"body":{"coverage.html":{}}}],["level",{"_index":632,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{}}}],["levelindex",{"_index":645,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{}}}],["levellayer",{"_index":673,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["liability",{"_index":2037,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2034,"title":{},"body":{"license.html":{}}}],["lib/.../assets.ts",{"_index":2051,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../defaults.ts",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../game.ts",{"_index":1959,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/.../key",{"_index":2050,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../math.ts",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../tiled",{"_index":2053,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../timer.ts",{"_index":2052,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../wall",{"_index":2054,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/animations.ts",{"_index":6,"title":{},"body":{"classes/Animations.html":{},"coverage.html":{}}}],["lib/animations.ts:106",{"_index":79,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:52",{"_index":43,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:74",{"_index":54,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:85",{"_index":70,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:95",{"_index":77,"title":{},"body":{"classes/Animations.html":{}}}],["lib/assets.ts",{"_index":129,"title":{},"body":{"classes/Assets.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/assets.ts:109",{"_index":155,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:24",{"_index":178,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:26",{"_index":147,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:44",{"_index":172,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:61",{"_index":159,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:70",{"_index":149,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:88",{"_index":175,"title":{},"body":{"classes/Assets.html":{}}}],["lib/camera.ts",{"_index":303,"title":{},"body":{"classes/Camera.html":{},"coverage.html":{}}}],["lib/camera.ts:108",{"_index":414,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:119",{"_index":407,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:138",{"_index":422,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:149",{"_index":377,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:166",{"_index":388,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:206",{"_index":428,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:26",{"_index":349,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:44",{"_index":342,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:86",{"_index":394,"title":{},"body":{"classes/Camera.html":{}}}],["lib/container.ts",{"_index":564,"title":{},"body":{"classes/Container.html":{},"coverage.html":{}}}],["lib/container.ts:27",{"_index":577,"title":{},"body":{"classes/Container.html":{}}}],["lib/controls/controls.ts",{"_index":581,"title":{},"body":{"interfaces/Controls.html":{},"coverage.html":{}}}],["lib/controls/gamepad",{"_index":876,"title":{},"body":{"classes/GamepadControls.html":{},"coverage.html":{}}}],["lib/controls/key",{"_index":1043,"title":{},"body":{"classes/KeyControls.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/controls/mouse",{"_index":1109,"title":{},"body":{"classes/MouseControls.html":{},"coverage.html":{}}}],["lib/fx/one",{"_index":1155,"title":{},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["lib/fx/particle",{"_index":1264,"title":{},"body":{"classes/ParticleEmitter.html":{},"coverage.html":{}}}],["lib/fx/particle.ts",{"_index":1208,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["lib/fx/particle.ts:103",{"_index":1226,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:50",{"_index":1216,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:81",{"_index":1221,"title":{},"body":{"classes/Particle.html":{}}}],["lib/game.ts",{"_index":780,"title":{},"body":{"classes/Game.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/game.ts:103",{"_index":826,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:106",{"_index":791,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:152",{"_index":812,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:168",{"_index":808,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:66",{"_index":796,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:68",{"_index":799,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:70",{"_index":803,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:72",{"_index":804,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:75",{"_index":815,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:80",{"_index":817,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:85",{"_index":819,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:90",{"_index":821,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:98",{"_index":823,"title":{},"body":{"classes/Game.html":{}}}],["lib/renderer/canvas",{"_index":509,"title":{},"body":{"classes/CanvasRenderer.html":{},"coverage.html":{}}}],["lib/renderer/renderer.ts",{"_index":1342,"title":{},"body":{"classes/Renderer.html":{},"coverage.html":{}}}],["lib/renderer/renderer.ts:11",{"_index":1349,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:13",{"_index":1350,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:16",{"_index":1356,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:18",{"_index":1347,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:44",{"_index":1354,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:52",{"_index":1353,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:7",{"_index":1352,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:9",{"_index":1351,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/webgl",{"_index":1787,"title":{},"body":{"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["lib/renderer/webgl/defaults.ts",{"_index":1911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/renderer/webgl/gl",{"_index":231,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{}}}],["lib/renderer/webgl/shader",{"_index":1392,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["lib/renderer/webgl/utils.ts",{"_index":704,"title":{},"body":{"classes/GLUtils.html":{},"coverage.html":{}}}],["lib/renderer/webgl/utils.ts:102",{"_index":744,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:11",{"_index":724,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:29",{"_index":737,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:47",{"_index":733,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:61",{"_index":716,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:75",{"_index":740,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:88",{"_index":728,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/resolvers/stop",{"_index":1915,"title":{},"body":{"coverage.html":{}}}],["lib/resolvers/wall",{"_index":1007,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/scene.ts",{"_index":1377,"title":{},"body":{"classes/Scene.html":{},"coverage.html":{}}}],["lib/scene.ts:12",{"_index":1386,"title":{},"body":{"classes/Scene.html":{}}}],["lib/scene.ts:14",{"_index":1385,"title":{},"body":{"classes/Scene.html":{}}}],["lib/scene.ts:16",{"_index":1383,"title":{},"body":{"classes/Scene.html":{}}}],["lib/sound/sound",{"_index":1520,"title":{},"body":{"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"coverage.html":{}}}],["lib/sound/sound.ts",{"_index":1477,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"coverage.html":{}}}],["lib/sound/sound.ts:24",{"_index":1488,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:30",{"_index":1496,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:35",{"_index":1499,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:37",{"_index":1486,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:70",{"_index":1491,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:81",{"_index":1494,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/web",{"_index":1721,"title":{},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["lib/state.ts",{"_index":1552,"title":{},"body":{"classes/State.html":{},"coverage.html":{}}}],["lib/state.ts:100",{"_index":1598,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:111",{"_index":1590,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:119",{"_index":1592,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:40",{"_index":1585,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:42",{"_index":1584,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:47",{"_index":1582,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:64",{"_index":1586,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:79",{"_index":1595,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:89",{"_index":1588,"title":{},"body":{"classes/State.html":{}}}],["lib/tile",{"_index":941,"title":{},"body":{"interfaces/HasFrame.html":{},"coverage.html":{}}}],["lib/timer.ts",{"_index":1633,"title":{},"body":{"classes/Timer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/timer.ts:22",{"_index":1650,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:24",{"_index":1651,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:31",{"_index":1646,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:60",{"_index":1656,"title":{},"body":{"classes/Timer.html":{}}}],["lib/types/entity.ts",{"_index":594,"title":{},"body":{"classes/Entity.html":{},"coverage.html":{}}}],["lib/types/entity.ts:11",{"_index":598,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:14",{"_index":601,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:16",{"_index":602,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:19",{"_index":599,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:22",{"_index":609,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:24",{"_index":597,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:45",{"_index":607,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:52",{"_index":604,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:6",{"_index":603,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:63",{"_index":606,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:74",{"_index":605,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:8",{"_index":600,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/hit",{"_index":978,"title":{},"body":{"classes/HitBox.html":{},"coverage.html":{}}}],["lib/types/rect.ts",{"_index":1327,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"coverage.html":{}}}],["lib/types/rect.ts:18",{"_index":1333,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:20",{"_index":1335,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:23",{"_index":1334,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:25",{"_index":1332,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:49",{"_index":1338,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/sprite.ts",{"_index":1926,"title":{},"body":{"coverage.html":{}}}],["lib/types/text.ts",{"_index":1606,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{},"coverage.html":{}}}],["lib/types/text.ts:26",{"_index":1615,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/text.ts:28",{"_index":1613,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/text.ts:49",{"_index":1616,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/texture.ts",{"_index":1622,"title":{},"body":{"classes/Texture.html":{},"coverage.html":{}}}],["lib/types/texture.ts:13",{"_index":1625,"title":{},"body":{"classes/Texture.html":{}}}],["lib/types/tiled.ts",{"_index":1098,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["lib/types/trigger.ts",{"_index":1928,"title":{},"body":{"coverage.html":{}}}],["lib/types/vec.ts",{"_index":1281,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"coverage.html":{}}}],["lib/types/vec.ts:110",{"_index":1674,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:122",{"_index":1670,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:130",{"_index":1673,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:135",{"_index":1675,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:150",{"_index":1671,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:161",{"_index":1678,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:23",{"_index":1665,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:25",{"_index":1666,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:32",{"_index":1672,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:34",{"_index":1664,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:53",{"_index":1676,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:65",{"_index":1669,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:73",{"_index":1668,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:82",{"_index":1667,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:96",{"_index":1677,"title":{},"body":{"classes/Vec.html":{}}}],["lib/utils/math.ts",{"_index":1932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/utils/physics.ts",{"_index":1680,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["lib/utils/sprite.ts",{"_index":1951,"title":{},"body":{"coverage.html":{}}}],["lib/utils/tiled",{"_index":625,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["library",{"_index":1964,"title":{},"body":{"index.html":{}}}],["license",{"_index":1982,"title":{"license.html":{}},"body":{"license.html":{}}}],["life",{"_index":1196,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["lifecycle",{"_index":1210,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["lifesecrange",{"_index":1242,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["limitation",{"_index":2003,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2025,"title":{},"body":{"license.html":{}}}],["limits",{"_index":392,"title":{},"body":{"classes/Camera.html":{}}}],["lines",{"_index":2059,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":448,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["listeners",{"_index":161,"title":{},"body":{"classes/Assets.html":{}}}],["literal",{"_index":2057,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":164,"title":{},"body":{"classes/Assets.html":{},"interfaces/ExtraLayer.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["load(vertexsource",{"_index":1427,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loaded",{"_index":169,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{},"classes/WebGLRenderer.html":{}}}],["loading",{"_index":798,"title":{},"body":{"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["loads",{"_index":130,"title":{},"body":{"classes/Assets.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Texture.html":{}}}],["loadshader(source",{"_index":1456,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loadtiles",{"_index":686,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["loadtiles(tiles",{"_index":684,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["local",{"_index":1104,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["localhost:5000",{"_index":1980,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1979,"title":{},"body":{"index.html":{}}}],["locate",{"_index":1417,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["location",{"_index":285,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["lookup",{"_index":242,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{}}}],["loop",{"_index":569,"title":{},"body":{"classes/Container.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Timer.html":{}}}],["loops",{"_index":1500,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["low",{"_index":1729,"title":{},"body":{"classes/WebAudio.html":{}}}],["mag",{"_index":1315,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["magnitude",{"_index":1314,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["main",{"_index":631,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":249,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["manage",{"_index":251,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["manages",{"_index":1266,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["mandatory",{"_index":646,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["map",{"_index":105,"title":{"interfaces/Map.html":{}},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["map(fn",{"_index":437,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["map.mapheight",{"_index":318,"title":{},"body":{"classes/Camera.html":{}}}],["map.mapwidth",{"_index":316,"title":{},"body":{"classes/Camera.html":{}}}],["map.tileheight",{"_index":319,"title":{},"body":{"classes/Camera.html":{}}}],["map.tilesatcorners(bounds",{"_index":1030,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["map.tilewidth",{"_index":317,"title":{},"body":{"classes/Camera.html":{}}}],["map.ts",{"_index":942,"title":{},"body":{"interfaces/HasFrame.html":{},"coverage.html":{},"unit-test.html":{}}}],["mapdata.pickuplocations.foreach(pos",{"_index":574,"title":{},"body":{"classes/Container.html":{}}}],["mapheight",{"_index":643,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{}}}],["mappos",{"_index":961,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["mappos.x",{"_index":957,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["mapwidth",{"_index":642,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{}}}],["marked",{"_index":434,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["mass",{"_index":1684,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["master",{"_index":1734,"title":{},"body":{"classes/WebAudio.html":{}}}],["masternode",{"_index":1761,"title":{},"body":{"classes/WebAudio.html":{}}}],["mat3",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":126,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["math",{"_index":1230,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/SoundGroup.html":{},"classes/Vec.html":{}}}],["math.abs(centeredx",{"_index":507,"title":{},"body":{"classes/Camera.html":{}}}],["math.cos",{"_index":760,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.floor(camera.pos.x",{"_index":753,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.floor(camera.pos.y",{"_index":754,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.min(t",{"_index":864,"title":{},"body":{"classes/Game.html":{}}}],["math.randf(h.x",{"_index":1257,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randf(l.x",{"_index":1261,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randf(v.x",{"_index":1259,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randonefrom(this.sounds).play(opts",{"_index":1534,"title":{},"body":{"classes/SoundGroup.html":{}}}],["math.round(.25",{"_index":869,"title":{},"body":{"classes/Game.html":{}}}],["math.sin",{"_index":761,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.sqrt(this.x",{"_index":1316,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["math.sqrt(vel.x",{"_index":1717,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["matrices",{"_index":746,"title":{},"body":{"classes/GLUtils.html":{}}}],["matrix",{"_index":721,"title":{},"body":{"classes/GLUtils.html":{}}}],["matthew",{"_index":1988,"title":{},"body":{"license.html":{}}}],["max_frame",{"_index":838,"title":{},"body":{"classes/Game.html":{}}}],["maximum",{"_index":1233,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["maxx",{"_index":496,"title":{},"body":{"classes/Camera.html":{}}}],["maxy",{"_index":501,"title":{},"body":{"classes/Camera.html":{}}}],["merchantability",{"_index":2027,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2006,"title":{},"body":{"license.html":{}}}],["message",{"_index":1450,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["method",{"_index":444,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{}}}],["methods",{"_index":35,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["minimum",{"_index":1232,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["miscellaneous",{"_index":1957,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":647,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["mit",{"_index":1983,"title":{},"body":{"license.html":{}}}],["mix",{"_index":1939,"title":{},"body":{"coverage.html":{}}}],["modify",{"_index":2005,"title":{},"body":{"license.html":{}}}],["modules",{"_index":2044,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monospace",{"_index":1609,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["more",{"_index":980,"title":{},"body":{"classes/HitBox.html":{}}}],["mouse",{"_index":591,"title":{},"body":{"interfaces/Controls.html":{},"classes/MouseControls.html":{}}}],["mousecontrols",{"_index":593,"title":{"classes/MouseControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/MouseControls.html":{},"coverage.html":{}}}],["mouseevent",{"_index":1137,"title":{},"body":{"classes/MouseControls.html":{}}}],["mouseposfromevent(e",{"_index":1143,"title":{},"body":{"classes/MouseControls.html":{}}}],["move",{"_index":351,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{}}}],["move(e",{"_index":1139,"title":{},"body":{"classes/MouseControls.html":{}}}],["move.ts",{"_index":1916,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["moved",{"_index":1159,"title":{},"body":{"classes/OneUp.html":{}}}],["movement",{"_index":1026,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["movements",{"_index":1024,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["moving",{"_index":354,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Timer.html":{}}}],["ms",{"_index":862,"title":{},"body":{"classes/Game.html":{}}}],["multiple",{"_index":136,"title":{},"body":{"classes/Assets.html":{}}}],["multiples",{"_index":1538,"title":{},"body":{"classes/SoundPool.html":{}}}],["multiplication",{"_index":749,"title":{},"body":{"classes/GLUtils.html":{}}}],["multiplier",{"_index":824,"title":{},"body":{"classes/Game.html":{}}}],["multiplies",{"_index":745,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiply",{"_index":1309,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiply(s",{"_index":1310,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiplymatrices",{"_index":714,"title":{},"body":{"classes/GLUtils.html":{}}}],["multiplymatrices(a",{"_index":742,"title":{},"body":{"classes/GLUtils.html":{}}}],["music",{"_index":1736,"title":{},"body":{"classes/WebAudio.html":{}}}],["musicnode",{"_index":1764,"title":{},"body":{"classes/WebAudio.html":{}}}],["mute",{"_index":1733,"title":{},"body":{"classes/WebAudio.html":{}}}],["mutes",{"_index":1745,"title":{},"body":{"classes/WebAudio.html":{}}}],["name",{"_index":46,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["named",{"_index":72,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["namespace",{"_index":1101,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["needed",{"_index":1021,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["needs",{"_index":1564,"title":{},"body":{"classes/State.html":{}}}],["network",{"_index":137,"title":{},"body":{"classes/Assets.html":{}}}],["new",{"_index":14,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"unit-test.html":{}}}],["next",{"_index":1548,"title":{},"body":{"classes/SoundPool.html":{}}}],["node",{"_index":1746,"title":{},"body":{"classes/WebAudio.html":{}}}],["noninfringement",{"_index":2031,"title":{},"body":{"license.html":{}}}],["normal",{"_index":832,"title":{},"body":{"classes/Game.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"miscellaneous/enumerations.html":{}}}],["normalize",{"_index":1317,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["notice",{"_index":2016,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1969,"title":{},"body":{"index.html":{}}}],["null",{"_index":110,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/State.html":{},"classes/WebGLRenderer.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["numeric",{"_index":1181,"title":{},"body":{"classes/OneUp.html":{}}}],["numparticles",{"_index":1272,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["object",{"_index":9,"title":{"interfaces/Object.html":{}},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":1119,"title":{},"body":{"classes/MouseControls.html":{},"classes/State.html":{}}}],["object.assign",{"_index":1513,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["objects",{"_index":248,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/SoundPool.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["obtaining",{"_index":1996,"title":{},"body":{"license.html":{}}}],["offset",{"_index":417,"title":{},"body":{"classes/Camera.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{}}}],["offsets",{"_index":415,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["ondone",{"_index":1645,"title":{},"body":{"classes/Timer.html":{}}}],["one",{"_index":80,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/SoundGroup.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["one.pos.copy(this.player.pos",{"_index":1177,"title":{},"body":{"classes/OneUp.html":{}}}],["oneup",{"_index":1154,"title":{"classes/OneUp.html":{}},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["oneup(coin",{"_index":1176,"title":{},"body":{"classes/OneUp.html":{}}}],["onload",{"_index":206,"title":{},"body":{"classes/Assets.html":{}}}],["onprogress",{"_index":142,"title":{},"body":{"classes/Assets.html":{}}}],["onprogress(cb",{"_index":157,"title":{},"body":{"classes/Assets.html":{}}}],["onready",{"_index":143,"title":{},"body":{"classes/Assets.html":{}}}],["onready(cb",{"_index":170,"title":{},"body":{"classes/Assets.html":{}}}],["onscenecomplete",{"_index":1381,"title":{},"body":{"classes/Scene.html":{}}}],["ontick",{"_index":1647,"title":{},"body":{"classes/Timer.html":{}}}],["opacity",{"_index":360,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["optional",{"_index":48,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["optionally",{"_index":1636,"title":{},"body":{"classes/Timer.html":{}}}],["options",{"_index":1214,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["options.loop",{"_index":1507,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["opts",{"_index":1512,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["opts.time",{"_index":1516,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["opts.volume",{"_index":1514,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["originmatrix",{"_index":1870,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["otherwise",{"_index":2040,"title":{},"body":{"license.html":{}}}],["out",{"_index":384,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/WebAudio.html":{},"license.html":{}}}],["over",{"_index":1163,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["overlay",{"_index":379,"title":{},"body":{"classes/Camera.html":{}}}],["overrides",{"_index":58,"title":{},"body":{"classes/Animations.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["overriding",{"_index":1493,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["overview",{"_index":2045,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":107,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["parent",{"_index":1118,"title":{},"body":{"classes/MouseControls.html":{},"classes/State.html":{}}}],["parsed",{"_index":156,"title":{},"body":{"classes/Assets.html":{}}}],["parsefloat(parts[3].replace",{"_index":1825,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(0",{"_index":1826,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(2",{"_index":1830,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(4",{"_index":1831,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[0",{"_index":1821,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[1",{"_index":1822,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[2",{"_index":1824,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[2].replace",{"_index":1823,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parser.ts",{"_index":626,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["parser.ts:33",{"_index":1630,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["parser.ts:41",{"_index":1631,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["parses",{"_index":657,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["partial",{"_index":361,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["partial,index",{"_index":438,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["particle",{"_index":1207,"title":{"classes/Particle.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particle's",{"_index":1229,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["particleemitter",{"_index":1212,"title":{"classes/ParticleEmitter.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particleoptions",{"_index":1215,"title":{"interfaces/ParticleOptions.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particles",{"_index":1273,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["particular",{"_index":2029,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1815,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parts.length",{"_index":1819,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parts[0",{"_index":1817,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parts[0].substr(parts[0].indexof",{"_index":1818,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["passed",{"_index":1220,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["passthroughkeys",{"_index":1075,"title":{},"body":{"classes/KeyControls.html":{}}}],["passthroughkeys.indexof(e.code.tostring",{"_index":1093,"title":{},"body":{"classes/KeyControls.html":{}}}],["path",{"_index":152,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["pause",{"_index":1558,"title":{},"body":{"classes/State.html":{}}}],["paused",{"_index":1561,"title":{},"body":{"classes/State.html":{}}}],["pauses",{"_index":1749,"title":{},"body":{"classes/WebAudio.html":{}}}],["per",{"_index":288,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{}}}],["permission",{"_index":1990,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2011,"title":{},"body":{"license.html":{}}}],["person",{"_index":1995,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2012,"title":{},"body":{"license.html":{}}}],["physics",{"_index":1681,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["pickup",{"_index":573,"title":{},"body":{"classes/Container.html":{}}}],["pickup(pos",{"_index":576,"title":{},"body":{"classes/Container.html":{}}}],["pickups",{"_index":571,"title":{},"body":{"classes/Container.html":{}}}],["pickups.push(new",{"_index":575,"title":{},"body":{"classes/Container.html":{}}}],["pivotmatrix",{"_index":1873,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["pixel",{"_index":958,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["pixels",{"_index":426,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["play",{"_index":37,"title":{},"body":{"classes/Animations.html":{},"classes/ParticleEmitter.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/WebAudio.html":{}}}],["play(anim",{"_index":69,"title":{},"body":{"classes/Animations.html":{}}}],["play(options",{"_index":1546,"title":{},"body":{"classes/SoundPool.html":{}}}],["play(opts",{"_index":1529,"title":{},"body":{"classes/SoundGroup.html":{}}}],["play(overrides",{"_index":1490,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["play(pos",{"_index":1274,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["player",{"_index":661,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["player.hitbox",{"_index":990,"title":{},"body":{"classes/HitBox.html":{}}}],["playing",{"_index":1482,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/WebAudio.html":{}}}],["plays",{"_index":1276,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/SoundGroup.html":{},"classes/WebAudio.html":{}}}],["point",{"_index":41,"title":{"interfaces/Point.html":{}},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"coverage.html":{}}}],["pool",{"_index":1267,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/SoundPool.html":{}}}],["pool.ts",{"_index":1536,"title":{},"body":{"classes/SoundPool.html":{},"coverage.html":{},"unit-test.html":{}}}],["pool.ts:16",{"_index":1544,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:40",{"_index":1547,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:47",{"_index":1549,"title":{},"body":{"classes/SoundPool.html":{}}}],["poolsize",{"_index":1543,"title":{},"body":{"classes/SoundPool.html":{}}}],["portions",{"_index":2020,"title":{},"body":{"license.html":{}}}],["pos",{"_index":328,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/HasFrame.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/VecEntity.html":{}}}],["position",{"_index":372,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["posmatrix",{"_index":1882,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["possible",{"_index":1384,"title":{},"body":{"classes/Scene.html":{},"classes/State.html":{}}}],["power",{"_index":425,"title":{},"body":{"classes/Camera.html":{}}}],["pre",{"_index":830,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["precise",{"_index":981,"title":{},"body":{"classes/HitBox.html":{}}}],["precision",{"_index":2152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepares",{"_index":282,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["pressed",{"_index":1056,"title":{},"body":{"classes/KeyControls.html":{},"classes/MouseControls.html":{}}}],["prevent",{"_index":135,"title":{},"body":{"classes/Assets.html":{}}}],["prevents",{"_index":1022,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["previous",{"_index":1587,"title":{},"body":{"classes/State.html":{}}}],["prior",{"_index":1556,"title":{},"body":{"classes/State.html":{}}}],["private",{"_index":89,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Timer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["product",{"_index":1321,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["program",{"_index":240,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["program.ts",{"_index":1393,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{},"unit-test.html":{}}}],["program.ts:18",{"_index":1476,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:20",{"_index":1471,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:45",{"_index":1472,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:60",{"_index":1473,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:74",{"_index":1474,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["progress",{"_index":165,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["progresscallback",{"_index":158,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["progresslisteners",{"_index":185,"title":{},"body":{"classes/Assets.html":{}}}],["projection",{"_index":720,"title":{},"body":{"classes/GLUtils.html":{}}}],["projectionmatrix",{"_index":1862,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["properties",{"_index":19,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["property",{"_index":738,"title":{"interfaces/Property.html":{}},"body":{"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["protected",{"_index":516,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["provide",{"_index":162,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["provided",{"_index":262,"title":{},"body":{"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"interfaces/Controls.html":{},"classes/GLUtils.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Renderer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"license.html":{}}}],["provides",{"_index":705,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Point.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Texture.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{}}}],["publish",{"_index":2007,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2030,"title":{},"body":{"license.html":{}}}],["px",{"_index":1365,"title":{},"body":{"classes/Renderer.html":{}}}],["python=/path/to/python2.7run",{"_index":1970,"title":{},"body":{"index.html":{}}}],["quadin(x",{"_index":2163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quadout(x",{"_index":2164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quickly",{"_index":62,"title":{},"body":{"classes/Animations.html":{}}}],["r",{"_index":1658,"title":{},"body":{"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["radians",{"_index":731,"title":{},"body":{"classes/GLUtils.html":{}}}],["rand",{"_index":1940,"title":{},"body":{"coverage.html":{}}}],["randf",{"_index":1941,"title":{},"body":{"coverage.html":{}}}],["random",{"_index":1222,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/SoundGroup.html":{}}}],["randomly",{"_index":423,"title":{},"body":{"classes/Camera.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["randomseed",{"_index":1942,"title":{},"body":{"coverage.html":{}}}],["randonefrom",{"_index":1943,"title":{},"body":{"coverage.html":{}}}],["randonein",{"_index":1944,"title":{},"body":{"coverage.html":{}}}],["range",{"_index":353,"title":{},"body":{"classes/Camera.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["ranges",{"_index":1225,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["rate",{"_index":90,"title":{},"body":{"classes/Animations.html":{}}}],["ratio",{"_index":872,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["ready",{"_index":180,"title":{},"body":{"classes/Assets.html":{},"classes/State.html":{},"miscellaneous/typealiases.html":{}}}],["readycallback",{"_index":171,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["readylisteners",{"_index":184,"title":{},"body":{"classes/Assets.html":{}}}],["rect",{"_index":315,"title":{"classes/Rect.html":{}},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["rect(32",{"_index":1329,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["rect(40",{"_index":1201,"title":{},"body":{"classes/OneUp.html":{}}}],["rect(this.width",{"_index":492,"title":{},"body":{"classes/Camera.html":{}}}],["rectangle",{"_index":396,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["rectstyleoptions",{"_index":1331,"title":{"interfaces/RectStyleOptions.html":{}},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"coverage.html":{}}}],["recursive",{"_index":366,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/WebGLRenderer.html":{}}}],["recursively",{"_index":532,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["reference",{"_index":1379,"title":{},"body":{"classes/Scene.html":{}}}],["refocus",{"_index":411,"title":{},"body":{"classes/Camera.html":{}}}],["relative",{"_index":151,"title":{},"body":{"classes/Assets.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/Texture.html":{}}}],["released",{"_index":1112,"title":{},"body":{"classes/MouseControls.html":{}}}],["remaining",{"_index":188,"title":{},"body":{"classes/Assets.html":{}}}],["remove",{"_index":337,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/Timer.html":{}}}],["remove(child",{"_index":441,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["removes",{"_index":433,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["render",{"_index":517,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["render(container",{"_index":529,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["rendered",{"_index":568,"title":{},"body":{"classes/Container.html":{},"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["renderer",{"_index":515,"title":{"classes/Renderer.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["renderer.ts",{"_index":510,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"unit-test.html":{}}}],["renderer.ts:24",{"_index":1788,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:39",{"_index":531,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer.ts:62",{"_index":1789,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:9",{"_index":521,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer:11",{"_index":523,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:13",{"_index":525,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:44",{"_index":540,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:52",{"_index":535,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:7",{"_index":528,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:9",{"_index":527,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderers",{"_index":1345,"title":{},"body":{"classes/Renderer.html":{}}}],["rendering",{"_index":511,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["reporting",{"_index":1973,"title":{},"body":{"index.html":{}}}],["representation",{"_index":1324,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["require",{"_index":343,"title":{},"body":{"classes/Camera.html":{}}}],["requiring",{"_index":943,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["res.json",{"_index":216,"title":{},"body":{"classes/Assets.html":{}}}],["reset",{"_index":74,"title":{},"body":{"classes/Animations.html":{},"classes/KeyControls.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["resets",{"_index":1058,"title":{},"body":{"classes/KeyControls.html":{}}}],["resize",{"_index":1140,"title":{},"body":{"classes/MouseControls.html":{}}}],["resolution",{"_index":1019,"title":{"interfaces/Resolution.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["resolve",{"_index":1016,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["resolver",{"_index":1012,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":2002,"title":{},"body":{"license.html":{}}}],["result",{"_index":125,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result[i",{"_index":622,"title":{},"body":{"classes/Entity.html":{}}}],["results",{"_index":127,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":113,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["rgba(255",{"_index":477,"title":{},"body":{"classes/Camera.html":{}}}],["right",{"_index":985,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{}}}],["rights",{"_index":2004,"title":{},"body":{"license.html":{}}}],["ross",{"_index":1989,"title":{},"body":{"license.html":{}}}],["rotation",{"_index":729,"title":{},"body":{"classes/GLUtils.html":{}}}],["rotmatrix",{"_index":1878,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["run",{"_index":788,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{},"index.html":{}}}],["run(gameupdate",{"_index":806,"title":{},"body":{"classes/Game.html":{}}}],["s",{"_index":1073,"title":{},"body":{"classes/KeyControls.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["same",{"_index":32,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/SoundPool.html":{}}}],["sampler2d",{"_index":2154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalar",{"_index":1308,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["scale",{"_index":329,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["scalematrix",{"_index":755,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["scene",{"_index":309,"title":{"classes/Scene.html":{}},"body":{"classes/Camera.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/Scene.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["scene(game",{"_index":587,"title":{},"body":{"interfaces/Controls.html":{}}}],["scene/object/whatever",{"_index":1567,"title":{},"body":{"classes/State.html":{}}}],["scenes",{"_index":1380,"title":{},"body":{"classes/Scene.html":{}}}],["screen",{"_index":398,"title":{},"body":{"classes/Camera.html":{},"classes/Game.html":{}}}],["script",{"_index":1395,"title":{},"body":{"interfaces/Scripts.html":{}}}],["scripts",{"_index":1391,"title":{"interfaces/Scripts.html":{}},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["scripts.fragment",{"_index":1416,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["second",{"_index":27,"title":{},"body":{"classes/Animations.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Timer.html":{}}}],["seconds",{"_index":382,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{}}}],["see",{"_index":1219,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["select",{"_index":1528,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sell",{"_index":2010,"title":{},"body":{"license.html":{}}}],["serve",{"_index":1978,"title":{},"body":{"index.html":{}}}],["set",{"_index":71,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["set(state",{"_index":1594,"title":{},"body":{"classes/State.html":{}}}],["set(x",{"_index":994,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["setaction(value",{"_index":1064,"title":{},"body":{"classes/KeyControls.html":{}}}],["setactive",{"_index":935,"title":{},"body":{"classes/GlBuffer.html":{}}}],["setactive(buffername",{"_index":290,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["setdebug",{"_index":333,"title":{},"body":{"classes/Camera.html":{}}}],["setdebug(debug",{"_index":393,"title":{},"body":{"classes/Camera.html":{}}}],["sets",{"_index":278,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/KeyControls.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["setscene",{"_index":789,"title":{},"body":{"classes/Game.html":{}}}],["setscene(scene",{"_index":810,"title":{},"body":{"classes/Game.html":{}}}],["setspeed(value",{"_index":825,"title":{},"body":{"classes/Game.html":{}}}],["setsubject",{"_index":334,"title":{},"body":{"classes/Camera.html":{}}}],["setsubject(sprite",{"_index":406,"title":{},"body":{"classes/Camera.html":{}}}],["settileframeatmappos(mappos",{"_index":962,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["settileframeatpixelpos(pos",{"_index":965,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["setting",{"_index":1497,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["settracking",{"_index":335,"title":{},"body":{"classes/Camera.html":{}}}],["settracking(xo",{"_index":412,"title":{},"body":{"classes/Camera.html":{}}}],["setvolume(volume",{"_index":1498,"title":{},"body":{"classes/Sound.html":{}}}],["sfx",{"_index":1735,"title":{},"body":{"classes/WebAudio.html":{}}}],["sfxnode",{"_index":1763,"title":{},"body":{"classes/WebAudio.html":{}}}],["shader",{"_index":1394,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["shaderprogram",{"_index":1402,"title":{"classes/ShaderProgram.html":{}},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["shaderprogram(this.gl",{"_index":1806,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["shaderprogramcol",{"_index":1793,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["shaderprogramtex",{"_index":1792,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["shaders",{"_index":1409,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["shadertype",{"_index":1457,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["shake",{"_index":336,"title":{},"body":{"classes/Camera.html":{}}}],["shake(power",{"_index":421,"title":{},"body":{"classes/Camera.html":{}}}],["shakedecay",{"_index":450,"title":{},"body":{"classes/Camera.html":{}}}],["shakelast",{"_index":451,"title":{},"body":{"classes/Camera.html":{}}}],["shakepower",{"_index":449,"title":{},"body":{"classes/Camera.html":{}}}],["shall",{"_index":2017,"title":{},"body":{"license.html":{}}}],["short",{"_index":424,"title":{},"body":{"classes/Camera.html":{}}}],["showing",{"_index":399,"title":{},"body":{"classes/Camera.html":{}}}],["shows",{"_index":801,"title":{},"body":{"classes/Game.html":{}}}],["sides",{"_index":419,"title":{},"body":{"classes/Camera.html":{}}}],["sign",{"_index":1182,"title":{},"body":{"classes/OneUp.html":{}}}],["similar",{"_index":1167,"title":{},"body":{"classes/OneUp.html":{}}}],["simple",{"_index":717,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["simpler",{"_index":658,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["simplifies",{"_index":878,"title":{},"body":{"classes/GamepadControls.html":{}}}],["simplify",{"_index":1400,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["single",{"_index":168,"title":{},"body":{"classes/Assets.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["size",{"_index":344,"title":{},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["sizes",{"_index":734,"title":{},"body":{"classes/GLUtils.html":{}}}],["skip",{"_index":1652,"title":{},"body":{"classes/Timer.html":{}}}],["slide.ts",{"_index":1008,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["slow",{"_index":834,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["smoothstep",{"_index":1945,"title":{},"body":{"coverage.html":{}}}],["software",{"_index":1997,"title":{},"body":{"license.html":{}}}],["something",{"_index":1727,"title":{},"body":{"classes/WebAudio.html":{}}}],["sound",{"_index":144,"title":{"classes/Sound.html":{}},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{},"coverage.html":{}}}],["sound('assets/sounds/ding.ogg",{"_index":1480,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["sound('assets/sounds/ding1.ogg",{"_index":1522,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding2.ogg",{"_index":1523,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding3.ogg",{"_index":1524,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding4.ogg",{"_index":1525,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound(url",{"_index":174,"title":{},"body":{"classes/Assets.html":{}}}],["soundgroup",{"_index":1519,"title":{"classes/SoundGroup.html":{}},"body":{"classes/SoundGroup.html":{},"coverage.html":{}}}],["soundoptions",{"_index":1485,"title":{"interfaces/SoundOptions.html":{}},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"coverage.html":{}}}],["soundpool",{"_index":1535,"title":{"classes/SoundPool.html":{}},"body":{"classes/SoundPool.html":{},"coverage.html":{}}}],["soundpool('assets/sounds/ding.ogg",{"_index":1540,"title":{},"body":{"classes/SoundPool.html":{}}}],["sounds",{"_index":1478,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["sources",{"_index":1396,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["sp",{"_index":1857,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sp.anchor",{"_index":1858,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sp.anchor.x",{"_index":1859,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sp.anchor.y",{"_index":1860,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["space",{"_index":418,"title":{},"body":{"classes/Camera.html":{}}}],["spacebar",{"_index":1063,"title":{},"body":{"classes/KeyControls.html":{}}}],["specific",{"_index":1344,"title":{},"body":{"classes/Renderer.html":{}}}],["specified",{"_index":56,"title":{},"body":{"classes/Animations.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{}}}],["speed",{"_index":52,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"interfaces/VecEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["speed(value",{"_index":850,"title":{},"body":{"classes/Game.html":{}}}],["speed(vel",{"_index":1716,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["speed.normal",{"_index":837,"title":{},"body":{"classes/Game.html":{}}}],["speeds",{"_index":831,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["sprite",{"_index":61,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["sprite.anchor.x",{"_index":489,"title":{},"body":{"classes/Camera.html":{}}}],["sprite.anchor.y",{"_index":490,"title":{},"body":{"classes/Camera.html":{}}}],["sprite.height",{"_index":488,"title":{},"body":{"classes/Camera.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.pivot.x",{"_index":1874,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.pivot.y",{"_index":1875,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.pos",{"_index":483,"title":{},"body":{"classes/Camera.html":{}}}],["sprite.pos.y",{"_index":1639,"title":{},"body":{"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.rotation",{"_index":1872,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.scale",{"_index":757,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.scale.x",{"_index":758,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.scale.y",{"_index":759,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.texture",{"_index":1834,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.ts",{"_index":1923,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["sprite.width",{"_index":486,"title":{},"body":{"classes/Camera.html":{},"classes/WebGLRenderer.html":{}}}],["src",{"_index":1487,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["start",{"_index":809,"title":{},"body":{"classes/Game.html":{}}}],["started",{"_index":1962,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":662,"title":{},"body":{"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{}}}],["state",{"_index":1060,"title":{"classes/State.html":{}},"body":{"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/State.html":{},"classes/Timer.html":{},"coverage.html":{}}}],["state(gamestate.ready",{"_index":1566,"title":{},"body":{"classes/State.html":{}}}],["state(myenum.stateone",{"_index":1583,"title":{},"body":{"classes/State.html":{}}}],["statements",{"_index":1899,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["states",{"_index":1593,"title":{},"body":{"classes/State.html":{}}}],["static",{"_index":706,"title":{},"body":{"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["status",{"_index":179,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{},"classes/State.html":{},"miscellaneous/typealiases.html":{}}}],["step",{"_index":836,"title":{},"body":{"classes/Game.html":{}}}],["stop",{"_index":38,"title":{},"body":{"classes/Animations.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["stopmovement",{"_index":1917,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":1596,"title":{},"body":{"classes/State.html":{}}}],["string",{"_index":51,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["strings",{"_index":2056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["style",{"_index":1244,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["styles",{"_index":1614,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["subject",{"_index":305,"title":{},"body":{"classes/Camera.html":{},"license.html":{}}}],["sublicense",{"_index":2009,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2019,"title":{},"body":{"license.html":{}}}],["subtract",{"_index":1306,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["subtract(vec",{"_index":1307,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["subtracts",{"_index":1305,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["success",{"_index":1447,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["super",{"_index":456,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["super(width",{"_index":548,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["super.update(dt",{"_index":1204,"title":{},"body":{"classes/OneUp.html":{}}}],["support",{"_index":1723,"title":{},"body":{"classes/WebAudio.html":{}}}],["supported",{"_index":584,"title":{},"body":{"interfaces/Controls.html":{},"classes/WebAudio.html":{}}}],["switch",{"_index":1569,"title":{},"body":{"classes/State.html":{}}}],["t",{"_index":427,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["table",{"_index":1956,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1955,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["target",{"_index":493,"title":{},"body":{"classes/Camera.html":{}}}],["target.x",{"_index":495,"title":{},"body":{"classes/Camera.html":{}}}],["target.y",{"_index":500,"title":{},"body":{"classes/Camera.html":{}}}],["temporary",{"_index":1557,"title":{},"body":{"classes/State.html":{}}}],["test",{"_index":970,"title":{"unit-test.html":{}},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"index.html":{},"unit-test.html":{}}}],["test:covtests",{"_index":1974,"title":{},"body":{"index.html":{}}}],["testobj",{"_index":1328,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["testrun",{"_index":1972,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1971,"title":{},"body":{"index.html":{}}}],["text",{"_index":544,"title":{"classes/Text.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["text('hello",{"_index":1607,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["text.pos.set(20",{"_index":1610,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["textoptions",{"_index":1612,"title":{"interfaces/TextOptions.html":{}},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{},"coverage.html":{}}}],["texture",{"_index":946,"title":{"classes/Texture.html":{}},"body":{"interfaces/HasFrame.html":{},"classes/Texture.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["texture('assets/images/tilesheet.png",{"_index":1623,"title":{},"body":{"classes/Texture.html":{}}}],["texture2d(u_sampler",{"_index":2157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textureinfo",{"_index":1790,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["textures",{"_index":1794,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["then(json",{"_index":217,"title":{},"body":{"classes/Assets.html":{}}}],["then(res",{"_index":215,"title":{},"body":{"classes/Assets.html":{}}}],["thin",{"_index":245,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this._height",{"_index":847,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{}}}],["this._program",{"_index":1408,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this._scene",{"_index":848,"title":{},"body":{"classes/Game.html":{}}}],["this._width",{"_index":846,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{}}}],["this._x",{"_index":1004,"title":{},"body":{"classes/HitBox.html":{}}}],["this._y",{"_index":1005,"title":{},"body":{"classes/HitBox.html":{}}}],["this.action(0",{"_index":910,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(1",{"_index":912,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(2",{"_index":914,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(3",{"_index":916,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(4",{"_index":918,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.activebuffer",{"_index":295,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.add",{"_index":473,"title":{},"body":{"classes/Camera.html":{}}}],["this.add(camera",{"_index":321,"title":{},"body":{"classes/Camera.html":{}}}],["this.add(display",{"_index":1249,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.add(new",{"_index":1175,"title":{},"body":{"classes/OneUp.html":{}}}],["this.alpha",{"_index":613,"title":{},"body":{"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.anims",{"_index":13,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.add('idle",{"_index":28,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.get(anim).reset",{"_index":115,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.get(name",{"_index":114,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.get(this.current",{"_index":119,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.play('idle",{"_index":33,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.set(name",{"_index":111,"title":{},"body":{"classes/Animations.html":{}}}],["this.attributes",{"_index":1413,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.attributes[name",{"_index":1420,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.audio",{"_index":1511,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.currenttime",{"_index":1515,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.pause",{"_index":1518,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.play",{"_index":1517,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.volume",{"_index":1501,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.axis(0",{"_index":919,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.axis(1",{"_index":920,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.boundtexture",{"_index":1839,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffer",{"_index":549,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.getcontext('2d",{"_index":556,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.height",{"_index":553,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.width",{"_index":551,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffers",{"_index":260,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffers.create('position",{"_index":1800,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffers.create('rect",{"_index":1802,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffers.create('texture",{"_index":1801,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffers.find(x",{"_index":265,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.length",{"_index":275,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.push(buff",{"_index":277,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.setactive('position",{"_index":1813,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.cache",{"_index":190,"title":{},"body":{"classes/Assets.html":{}}}],["this.cache[url",{"_index":225,"title":{},"body":{"classes/Assets.html":{}}}],["this.camera",{"_index":320,"title":{},"body":{"classes/Camera.html":{}}}],["this.canvas",{"_index":1357,"title":{},"body":{"classes/Renderer.html":{}}}],["this.canvas.getcontext('2d",{"_index":561,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.canvas.getcontext('webgl",{"_index":1797,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.canvas.height",{"_index":554,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{}}}],["this.canvas.id",{"_index":1358,"title":{},"body":{"classes/Renderer.html":{}}}],["this.canvas.width",{"_index":552,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{}}}],["this.checkwebgl(canvas",{"_index":851,"title":{},"body":{"classes/Game.html":{}}}],["this.children",{"_index":617,"title":{},"body":{"classes/Entity.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{}}}],["this.children.entries",{"_index":621,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.filter(ch",{"_index":619,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.length",{"_index":610,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.push(child",{"_index":618,"title":{},"body":{"classes/Entity.html":{}}}],["this.container",{"_index":1371,"title":{},"body":{"classes/Renderer.html":{}}}],["this.container.appendchild(canvas",{"_index":1894,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.context",{"_index":1765,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.context.creategain",{"_index":1773,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.context.currenttime",{"_index":1783,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.controller",{"_index":921,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controller.axes[id",{"_index":933,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controllers",{"_index":922,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controllers[gamepad.index",{"_index":931,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controls",{"_index":1389,"title":{},"body":{"classes/Scene.html":{}}}],["this.count",{"_index":1551,"title":{},"body":{"classes/SoundPool.html":{}}}],["this.createprogram(vertexshader",{"_index":1434,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.createtextcanvas",{"_index":1803,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.createtexture",{"_index":1841,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.ctx",{"_index":555,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["this.ctx.imagesmoothingenabled",{"_index":557,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.ctx.textbaseline",{"_index":558,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.ctx2",{"_index":560,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.cubicin(1",{"_index":2168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.curframe",{"_index":98,"title":{},"body":{"classes/Animations.html":{}}}],["this.current",{"_index":109,"title":{},"body":{"classes/Animations.html":{}}}],["this.curtime",{"_index":99,"title":{},"body":{"classes/Animations.html":{}}}],["this.dead",{"_index":612,"title":{},"body":{"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Timer.html":{}}}],["this.debug",{"_index":472,"title":{},"body":{"classes/Camera.html":{}}}],["this.debug.pos.set",{"_index":504,"title":{},"body":{"classes/Camera.html":{}}}],["this.delay",{"_index":1660,"title":{},"body":{"classes/Timer.html":{}}}],["this.destination",{"_index":856,"title":{},"body":{"classes/Game.html":{}}}],["this.destination.alpha",{"_index":874,"title":{},"body":{"classes/Game.html":{}}}],["this.divide(mag",{"_index":1319,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.done",{"_index":197,"title":{},"body":{"classes/Assets.html":{}}}],["this.down(e",{"_index":1129,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.duration",{"_index":1199,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["this.easing",{"_index":468,"title":{},"body":{"classes/Camera.html":{}}}],["this.el",{"_index":1123,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.clientheight",{"_index":1151,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.clientwidth",{"_index":1148,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.getboundingclientrect",{"_index":1142,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.height",{"_index":1150,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.width",{"_index":1147,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.elapsed",{"_index":1659,"title":{},"body":{"classes/Timer.html":{}}}],["this.element",{"_index":1770,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.pause",{"_index":1781,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.play",{"_index":1780,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.src",{"_index":1772,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.fadeduration",{"_index":858,"title":{},"body":{"classes/Game.html":{}}}],["this.fadetime",{"_index":857,"title":{},"body":{"classes/Game.html":{}}}],["this.findattributes",{"_index":1454,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.finduniforms",{"_index":1455,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.first",{"_index":1605,"title":{},"body":{"classes/State.html":{}}}],["this.flashduration",{"_index":466,"title":{},"body":{"classes/Camera.html":{}}}],["this.flashrect",{"_index":467,"title":{},"body":{"classes/Camera.html":{}}}],["this.flashtime",{"_index":465,"title":{},"body":{"classes/Camera.html":{}}}],["this.focus",{"_index":491,"title":{},"body":{"classes/Camera.html":{}}}],["this.frame",{"_index":96,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames",{"_index":94,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames.length",{"_index":101,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames[0",{"_index":97,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames[this.curframe",{"_index":100,"title":{},"body":{"classes/Animations.html":{}}}],["this.framesource",{"_index":108,"title":{},"body":{"classes/Animations.html":{}}}],["this.framesource.x",{"_index":121,"title":{},"body":{"classes/Animations.html":{}}}],["this.framesource.y",{"_index":123,"title":{},"body":{"classes/Animations.html":{}}}],["this.game",{"_index":1388,"title":{},"body":{"classes/Scene.html":{}}}],["this.gl",{"_index":259,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["this.gl.createbuffer",{"_index":272,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.gl.fragment_shader",{"_index":1433,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.gl.vertex_shader",{"_index":1430,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.globalalpha",{"_index":1812,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.handler(e",{"_index":926,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.haswebaudio",{"_index":1769,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.height",{"_index":459,"title":{},"body":{"classes/Camera.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["this.img",{"_index":1626,"title":{},"body":{"classes/Texture.html":{}}}],["this.initwebgl",{"_index":1435,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.iscompleted",{"_index":189,"title":{},"body":{"classes/Assets.html":{}}}],["this.isdown",{"_index":1124,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.iswebgl",{"_index":852,"title":{},"body":{"classes/Game.html":{}}}],["this.justsetstate",{"_index":1604,"title":{},"body":{"classes/State.html":{}}}],["this.keys",{"_index":1097,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowdown",{"_index":1088,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowleft",{"_index":1082,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowright",{"_index":1084,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowup",{"_index":1086,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keya",{"_index":1083,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyd",{"_index":1085,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keys",{"_index":1089,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyw",{"_index":1087,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyx",{"_index":1080,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.space",{"_index":1078,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys[e.code",{"_index":1092,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys[key",{"_index":1096,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.last",{"_index":1601,"title":{},"body":{"classes/State.html":{}}}],["this.lasttime",{"_index":1603,"title":{},"body":{"classes/State.html":{}}}],["this.levelindex].children[mappos.y",{"_index":955,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.life",{"_index":1200,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.load(scripts.vertex",{"_index":1415,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.load(url",{"_index":205,"title":{},"body":{"classes/Assets.html":{}}}],["this.loadshader(fragmentsource",{"_index":1432,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.loadshader(vertexsource",{"_index":1429,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.loginfo",{"_index":859,"title":{},"body":{"classes/Game.html":{}}}],["this.mag",{"_index":1318,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.mapwidth",{"_index":956,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.master.connect(this.context.destination",{"_index":1775,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.master.gain.value",{"_index":1774,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode",{"_index":1766,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.linearramptovalueattime(0",{"_index":1786,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.setvalueattime(0",{"_index":1782,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.setvalueattime(volume",{"_index":1785,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.value",{"_index":1784,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.mouseposfromevent(e",{"_index":1138,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.move(e",{"_index":1134,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.music.connect(this.master",{"_index":1779,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.music.gain.value",{"_index":1778,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.musicnode",{"_index":1768,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.name",{"_index":1412,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.offset",{"_index":484,"title":{},"body":{"classes/Camera.html":{}}}],["this.offset.x",{"_index":485,"title":{},"body":{"classes/Camera.html":{}}}],["this.offset.y",{"_index":487,"title":{},"body":{"classes/Camera.html":{}}}],["this.onassetload(asset",{"_index":229,"title":{},"body":{"classes/Assets.html":{}}}],["this.onassetload(e",{"_index":204,"title":{},"body":{"classes/Assets.html":{}}}],["this.onassetload(json",{"_index":218,"title":{},"body":{"classes/Assets.html":{}}}],["this.ondone",{"_index":1662,"title":{},"body":{"classes/Timer.html":{}}}],["this.onscenecomplete",{"_index":1390,"title":{},"body":{"classes/Scene.html":{}}}],["this.ontick",{"_index":1661,"title":{},"body":{"classes/Timer.html":{}}}],["this.ontick(ratio",{"_index":1663,"title":{},"body":{"classes/Timer.html":{}}}],["this.options",{"_index":1246,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.options.defaultsize.x",{"_index":1250,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.defaultsize.y",{"_index":1251,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.fill",{"_index":1252,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.volume",{"_index":1503,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.particles",{"_index":1280,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["this.playing",{"_index":1504,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.pos",{"_index":614,"title":{},"body":{"classes/Entity.html":{},"classes/MouseControls.html":{}}}],["this.pos.add(this.vel",{"_index":1206,"title":{},"body":{"classes/OneUp.html":{}}}],["this.pos.set(0",{"_index":1263,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.pos.x",{"_index":505,"title":{},"body":{"classes/Camera.html":{},"classes/MouseControls.html":{}}}],["this.pos.y",{"_index":506,"title":{},"body":{"classes/Camera.html":{},"classes/MouseControls.html":{}}}],["this.pressed",{"_index":1125,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.progresslisteners",{"_index":192,"title":{},"body":{"classes/Assets.html":{}}}],["this.progresslisteners.push(cb",{"_index":198,"title":{},"body":{"classes/Assets.html":{}}}],["this.quadin(1",{"_index":2165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.rate",{"_index":95,"title":{},"body":{"classes/Animations.html":{}}}],["this.readylisteners",{"_index":191,"title":{},"body":{"classes/Assets.html":{}}}],["this.readylisteners.push(cb",{"_index":196,"title":{},"body":{"classes/Assets.html":{}}}],["this.rect",{"_index":1141,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rect.left",{"_index":1152,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rect.top",{"_index":1153,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.released",{"_index":1126,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.remaining",{"_index":195,"title":{},"body":{"classes/Assets.html":{}}}],["this.remove(this.debug",{"_index":479,"title":{},"body":{"classes/Camera.html":{}}}],["this.renderer",{"_index":853,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.canvaselement",{"_index":849,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.render(this.destination",{"_index":875,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.render(this.scene",{"_index":867,"title":{},"body":{"classes/Game.html":{}}}],["this.reset",{"_index":1090,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.resize",{"_index":1127,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.scale",{"_index":615,"title":{},"body":{"classes/Entity.html":{}}}],["this.scene.alpha",{"_index":873,"title":{},"body":{"classes/Game.html":{}}}],["this.scene.update(step",{"_index":865,"title":{},"body":{"classes/Game.html":{}}}],["this.set(state",{"_index":1600,"title":{},"body":{"classes/State.html":{}}}],["this.set(x",{"_index":1299,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.setsubject(subject",{"_index":471,"title":{},"body":{"classes/Camera.html":{}}}],["this.settileframeatmappos(this.pixeltomappos(pos",{"_index":966,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.settracking(64",{"_index":469,"title":{},"body":{"classes/Camera.html":{}}}],["this.sfx.connect(this.master",{"_index":1777,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.sfx.gain.value",{"_index":1776,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.sfxnode",{"_index":1767,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.shaderprogramcol",{"_index":1809,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.shaderprogramtex",{"_index":1805,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.shaderprogramtex.getattriblocation('a_position",{"_index":1814,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.shakedecay",{"_index":463,"title":{},"body":{"classes/Camera.html":{}}}],["this.shakelast",{"_index":464,"title":{},"body":{"classes/Camera.html":{}}}],["this.shakepower",{"_index":462,"title":{},"body":{"classes/Camera.html":{}}}],["this.sounds",{"_index":1533,"title":{},"body":{"classes/SoundGroup.html":{},"classes/SoundPool.html":{}}}],["this.state",{"_index":1565,"title":{},"body":{"classes/State.html":{}}}],["this.state.first",{"_index":1572,"title":{},"body":{"classes/State.html":{}}}],["this.state.set(gamestate.playing",{"_index":1576,"title":{},"body":{"classes/State.html":{}}}],["this.state.time",{"_index":1575,"title":{},"body":{"classes/State.html":{}}}],["this.state.update(dt",{"_index":1568,"title":{},"body":{"classes/State.html":{}}}],["this.style",{"_index":1341,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["this.subject",{"_index":482,"title":{},"body":{"classes/Camera.html":{}}}],["this.text",{"_index":1621,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["this.textures",{"_index":1804,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.textures.get(img.src).texture",{"_index":1838,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.textures.has(img.src",{"_index":1837,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.textures.set(img.src",{"_index":1845,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.threshold",{"_index":923,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.tileatmappos(mappos",{"_index":963,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.tileatmappos(this.pixeltomappos(pos",{"_index":960,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.time",{"_index":1602,"title":{},"body":{"classes/State.html":{}}}],["this.total",{"_index":194,"title":{},"body":{"classes/Assets.html":{}}}],["this.tracking",{"_index":480,"title":{},"body":{"classes/Camera.html":{}}}],["this.tracking.x",{"_index":474,"title":{},"body":{"classes/Camera.html":{}}}],["this.tracking.y",{"_index":475,"title":{},"body":{"classes/Camera.html":{}}}],["this.uniforms",{"_index":1414,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.uniforms[name",{"_index":1424,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.up",{"_index":1132,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.vel",{"_index":1197,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.vel.set",{"_index":1256,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.visible",{"_index":611,"title":{},"body":{"classes/Entity.html":{},"classes/Timer.html":{}}}],["this.width",{"_index":457,"title":{},"body":{"classes/Camera.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["this.worldsize",{"_index":461,"title":{},"body":{"classes/Camera.html":{}}}],["this.worldsize.height",{"_index":502,"title":{},"body":{"classes/Camera.html":{}}}],["this.worldsize.width",{"_index":497,"title":{},"body":{"classes/Camera.html":{}}}],["this.x",{"_index":1295,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.y",{"_index":1296,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["threshold",{"_index":880,"title":{},"body":{"classes/GamepadControls.html":{}}}],["throw",{"_index":292,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["throws",{"_index":1418,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["tick",{"_index":1635,"title":{},"body":{"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["tickfunc",{"_index":1644,"title":{},"body":{"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["tile",{"_index":635,"title":{"interfaces/Tile.html":{}},"body":{"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tile.frame",{"_index":964,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["tileatpixelpos(pos",{"_index":959,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["tiled",{"_index":637,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiled.layer",{"_index":655,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiled.map",{"_index":665,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiled.object",{"_index":650,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiled.tileset",{"_index":654,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiledata",{"_index":636,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/typealiases.html":{}}}],["tiledmap",{"_index":638,"title":{"interfaces/TiledMap.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{},"coverage.html":{}}}],["tiledparser",{"_index":1954,"title":{},"body":{"coverage.html":{}}}],["tiledparser(jsonobj",{"_index":664,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tileedge",{"_index":1028,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tileheight",{"_index":640,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tilemap",{"_index":944,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["tiles",{"_index":641,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiles.push",{"_index":687,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiles[1].pos.x",{"_index":1040,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tiles[2].pos.y",{"_index":1035,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tilesatcorners(box",{"_index":973,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["tileset",{"_index":653,"title":{"interfaces/Tileset.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["tileset.tiles",{"_index":693,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tilesets",{"_index":656,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tilesets[0",{"_index":690,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tilesperrow",{"_index":652,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tilesprite",{"_index":340,"title":{},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["tilesprite#update",{"_index":117,"title":{},"body":{"classes/Animations.html":{}}}],["tilesprite(texture",{"_index":1169,"title":{},"body":{"classes/OneUp.html":{}}}],["tilesprite.update",{"_index":82,"title":{},"body":{"classes/Animations.html":{}}}],["tilesprite.update()]{@link",{"_index":116,"title":{},"body":{"classes/Animations.html":{}}}],["tilewidth",{"_index":639,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["time",{"_index":67,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["timer",{"_index":1632,"title":{"classes/Timer.html":{}},"body":{"classes/Timer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timer((r",{"_index":1638,"title":{},"body":{"classes/Timer.html":{}}}],["timestamp",{"_index":429,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["timing",{"_index":57,"title":{},"body":{"classes/Animations.html":{}}}],["tmp",{"_index":692,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["together",{"_index":747,"title":{},"body":{"classes/GLUtils.html":{}}}],["top",{"_index":559,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/HitBox.html":{}}}],["tort",{"_index":2039,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":1326,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["total",{"_index":182,"title":{},"body":{"classes/Assets.html":{}}}],["towards",{"_index":352,"title":{},"body":{"classes/Camera.html":{}}}],["tr",{"_index":1038,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["track",{"_index":387,"title":{},"body":{"classes/Camera.html":{}}}],["tracked",{"_index":409,"title":{},"body":{"classes/Camera.html":{}}}],["tracking",{"_index":391,"title":{},"body":{"classes/Camera.html":{}}}],["tracks",{"_index":1553,"title":{},"body":{"classes/State.html":{}}}],["transition",{"_index":813,"title":{},"body":{"classes/Game.html":{}}}],["transitioning",{"_index":1555,"title":{},"body":{"classes/State.html":{}}}],["translate",{"_index":726,"title":{},"body":{"classes/GLUtils.html":{}}}],["translation",{"_index":725,"title":{},"body":{"classes/GLUtils.html":{}}}],["translationmatrix",{"_index":1864,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["trigger",{"_index":1929,"title":{},"body":{"coverage.html":{}}}],["true",{"_index":219,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["turn",{"_index":404,"title":{},"body":{"classes/Camera.html":{}}}],["two",{"_index":23,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Point.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{}}}],["type",{"_index":47,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2048,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":86,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["typescript",{"_index":102,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"index.html":{}}}],["u_color",{"_index":2162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_posmatrix",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_sampler",{"_index":2155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_texalpha",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_texmatrix",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":680,"title":{},"body":{"interfaces/ExtraLayer.html":{},"classes/KeyControls.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["uniform",{"_index":1422,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["uniforms",{"_index":1405,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["unique",{"_index":1378,"title":{},"body":{"classes/Scene.html":{}}}],["unit",{"_index":1976,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["unless",{"_index":1653,"title":{},"body":{"classes/Timer.html":{}}}],["unpivotmatrix",{"_index":1876,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["unpressed",{"_index":1059,"title":{},"body":{"classes/KeyControls.html":{}}}],["up",{"_index":951,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{}}}],["up.ts",{"_index":1156,"title":{},"body":{"classes/OneUp.html":{},"coverage.html":{},"unit-test.html":{}}}],["up.ts:27",{"_index":1179,"title":{},"body":{"classes/OneUp.html":{}}}],["up.ts:53",{"_index":1190,"title":{},"body":{"classes/OneUp.html":{}}}],["update",{"_index":31,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["update(_",{"_index":1336,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["update(dt",{"_index":78,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{}}}],["update/render",{"_index":367,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Text.html":{}}}],["updated",{"_index":566,"title":{},"body":{"classes/Container.html":{},"classes/Game.html":{}}}],["updates",{"_index":805,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["upon",{"_index":65,"title":{},"body":{"classes/Animations.html":{},"classes/GLUtils.html":{}}}],["ups",{"_index":787,"title":{},"body":{"classes/Game.html":{}}}],["uri",{"_index":134,"title":{},"body":{"classes/Assets.html":{}}}],["url",{"_index":150,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["usage",{"_index":1401,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["use",{"_index":131,"title":{},"body":{"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"license.html":{}}}],["used",{"_index":60,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["useful",{"_index":1411,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["user",{"_index":1655,"title":{},"body":{"classes/Timer.html":{}}}],["uses",{"_index":347,"title":{},"body":{"classes/Camera.html":{},"miscellaneous/typealiases.html":{}}}],["useseededrandom",{"_index":1946,"title":{},"body":{"coverage.html":{}}}],["usewebgl",{"_index":790,"title":{},"body":{"classes/Game.html":{}}}],["using",{"_index":55,"title":{},"body":{"classes/Animations.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebAudio.html":{}}}],["usually",{"_index":660,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["utilizing",{"_index":512,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["utils",{"_index":447,"title":{},"body":{"classes/Camera.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{},"classes/SoundGroup.html":{}}}],["utils.math.clamp(centeredx",{"_index":498,"title":{},"body":{"classes/Camera.html":{}}}],["utils.math.clamp(centeredy",{"_index":503,"title":{},"body":{"classes/Camera.html":{}}}],["utils.math.clamp(this.life",{"_index":1205,"title":{},"body":{"classes/OneUp.html":{}}}],["utils.sprite.bounds(ent",{"_index":1029,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["v",{"_index":1254,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["v.y",{"_index":1260,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["v_texalpha",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v_texcoord",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val",{"_index":1081,"title":{},"body":{"classes/KeyControls.html":{}}}],["value",{"_index":380,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":996,"title":{},"body":{"classes/HitBox.html":{},"classes/MouseControls.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":1912,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2131,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec",{"_index":370,"title":{"classes/Vec.html":{}},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/HasFrame.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"coverage.html":{}}}],["vec().copy(v",{"_index":1294,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec(.8",{"_index":1247,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["vec(0",{"_index":1198,"title":{},"body":{"classes/OneUp.html":{}}}],["vec(1",{"_index":616,"title":{},"body":{"classes/Entity.html":{}}}],["vec(10",{"_index":1248,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["vec(4",{"_index":1287,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec(xo",{"_index":481,"title":{},"body":{"classes/Camera.html":{}}}],["vec.from(this",{"_index":1302,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec.from(vector1",{"_index":1289,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec2",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec3(a_position",{"_index":2150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec3(a_texcoord",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec4",{"_index":2156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec4((u_posmatrix",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vecentity",{"_index":1679,"title":{"interfaces/VecEntity.html":{}},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["vecs",{"_index":1322,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector",{"_index":1283,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["vector1",{"_index":1286,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector1.add(vector2).multiply(3",{"_index":1290,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector2",{"_index":1288,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vel",{"_index":1195,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["vel.x",{"_index":1718,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["vel.y",{"_index":1719,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["velocity",{"_index":1235,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["vertex",{"_index":289,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["vertexcolor",{"_index":2160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vertexshader",{"_index":1428,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["vertexsource",{"_index":1425,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["vertextexture",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":1237,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["verticalvelrange",{"_index":1239,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["view",{"_index":346,"title":{},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{}}}],["viewport",{"_index":306,"title":{},"body":{"classes/Camera.html":{}}}],["viewport.height",{"_index":460,"title":{},"body":{"classes/Camera.html":{}}}],["viewport.width",{"_index":458,"title":{},"body":{"classes/Camera.html":{}}}],["visibility",{"_index":538,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["visible",{"_index":330,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Text.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["void",{"_index":76,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Timer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["volume",{"_index":1483,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["volume(volume",{"_index":1502,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["vx",{"_index":1705,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["vy",{"_index":1707,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["w",{"_index":1054,"title":{},"body":{"classes/KeyControls.html":{}}}],["wait",{"_index":1649,"title":{},"body":{"classes/Timer.html":{}}}],["walkable",{"_index":1013,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["walkables",{"_index":1031,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["walkabletest",{"_index":1014,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["wallslide",{"_index":1918,"title":{},"body":{"coverage.html":{}}}],["wallslide(ent",{"_index":1027,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["warranties",{"_index":2026,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2021,"title":{},"body":{"license.html":{}}}],["web",{"_index":1724,"title":{},"body":{"classes/WebAudio.html":{}}}],["webaudio",{"_index":1720,"title":{"classes/WebAudio.html":{}},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["webaudio('assets/sounds/theme.ogg",{"_index":1725,"title":{},"body":{"classes/WebAudio.html":{}}}],["webgl",{"_index":234,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{}}}],["webglbuffer",{"_index":237,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["webglprogram",{"_index":1398,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["webglrenderer",{"_index":827,"title":{"classes/WebGLRenderer.html":{}},"body":{"classes/Game.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["webglrenderer(width",{"_index":854,"title":{},"body":{"classes/Game.html":{}}}],["webglrenderingcontext",{"_index":254,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["webglshader",{"_index":1399,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["webgltexture",{"_index":1791,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["webgluniformlocation",{"_index":1406,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["well",{"_index":1017,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["whatever",{"_index":1563,"title":{},"body":{"classes/State.html":{}}}],["whether",{"_index":369,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TiledMap.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"license.html":{}}}],["whose",{"_index":1209,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["width",{"_index":311,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["window",{"_index":1738,"title":{},"body":{"classes/WebAudio.html":{}}}],["window.addeventlistener('gamepadconnected",{"_index":924,"title":{},"body":{"classes/GamepadControls.html":{}}}],["window.addeventlistener('gamepaddisconnected",{"_index":927,"title":{},"body":{"classes/GamepadControls.html":{}}}],["window.performance.now",{"_index":861,"title":{},"body":{"classes/Game.html":{}}}],["within",{"_index":1223,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["without",{"_index":2001,"title":{},"body":{"license.html":{}}}],["working",{"_index":707,"title":{},"body":{"classes/GLUtils.html":{},"classes/GamepadControls.html":{}}}],["world",{"_index":307,"title":{},"body":{"classes/Camera.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["worldsize",{"_index":341,"title":{},"body":{"classes/Camera.html":{}}}],["wrap",{"_index":583,"title":{},"body":{"interfaces/Controls.html":{}}}],["wrapper",{"_index":246,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["written",{"_index":1965,"title":{},"body":{"index.html":{}}}],["x",{"_index":15,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"miscellaneous/variables.html":{}}}],["x.name",{"_index":266,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["xo",{"_index":416,"title":{},"body":{"classes/Camera.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["xr",{"_index":1146,"title":{},"body":{"classes/MouseControls.html":{}}}],["y",{"_index":17,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["yes",{"_index":543,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["yo",{"_index":413,"title":{},"body":{"classes/Camera.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["yr",{"_index":1149,"title":{},"body":{"classes/MouseControls.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animations.html":{"url":"classes/Animations.html","title":"class - Animations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/animations.ts\n        \n\n            \n                Description\n            \n            \n                Handles animations for an object.\nExample\n // In the implementation of a class\n this.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n // Create 'idle' animation with two frames that change every half second.\n this.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n\n // In the update of the same class\n this.anims.play('idle')\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(frame: Point)\n                    \n                \n                        \n                            \n                                Defined in lib/animations.ts:52\n                            \n                        \n\n                \n                    \n                            Initialize Animations object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        frame\n                                                  \n                                                        \n                                                                        Point\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object with x and y properties.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(name: string, frames: Point[], speed: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:74\n                \n            \n\n\n            \n                \n                    Add a new animation by name, using specified frames and timing.\nOverrides existing animation if the same name is used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The animation name.\n\n                                    \n                                \n                                \n                                    frames\n                                    \n                                                Point[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite frames used in the animation.\n\n                                    \n                                \n                                \n                                    speed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        How quickly to change between frames (based upon delta time).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Animation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(anim: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:85\n                \n            \n\n\n            \n                \n                    Set the named animation as the current animation and reset it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    anim\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the animation to play.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:95\n                \n            \n\n\n            \n                \n                    Stop the current animation. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:106\n                \n            \n\n\n            \n                \n                    Update the current animation if one is set.\nCalled by TileSprite.update().\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from './types'\n\n/**\n * @ignore\n * @internal\n */\nclass Animation {\n  frame: Point\n\n  private frames: Point[]\n  private rate: number\n  private curFrame: number\n  private curTime: number\n\n  constructor(frames: Point[], rate: number) {\n    this.frames = frames\n    this.rate = rate\n  }\n\n  reset() {\n    this.frame = this.frames[0]\n    this.curFrame = 0\n    this.curTime = 0\n  }\n\n  update(dt: number) {\n    if ((this.curTime += dt) > this.rate) {\n      this.curFrame++\n      this.frame = this.frames[this.curFrame % this.frames.length]\n      this.curTime -= this.rate\n    }\n  }\n}\n\n/**\n * Handles animations for an object.\n *\n * ### Example\n * ```typescript\n // In the implementation of a class\n this.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n // Create 'idle' animation with two frames that change every half second.\n this.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n\n // In the update of the same class\n this.anims.play('idle')\n```\n */\nexport class Animations {\n  private anims: Map\n  private frameSource: any\n  private current: string\n\n  /**\n   * Initialize Animations object.\n   *\n   * @param frame An object with x and y properties.\n   */\n  constructor(frame: Point) {\n    this.anims = new Map()\n    this.frameSource = frame\n    this.current = null\n  }\n\n  /**\n   * Add a new animation by name, using specified frames and timing.\n   *\n   * Overrides existing animation if the same name is used.\n   *\n   * @param name The animation name.\n   * @param frames Sprite frames used in the animation.\n   * @param speed How quickly to change between frames (based upon delta time).\n   */\n  add(name: string, frames: Point[], speed: number): Animation {\n    this.anims.set(name, new Animation(frames, speed))\n\n    return this.anims.get(name)\n  }\n\n  /**\n   * Set the named animation as the current animation and reset it.\n   *\n   * @param anim The name of the animation to play.\n   */\n  play(anim: string) {\n    if (anim === this.current) {\n      return\n    }\n\n    this.current = anim\n    this.anims.get(anim).reset()\n  }\n\n  /** Stop the current animation. */\n  stop() {\n    this.current = null\n  }\n\n  /**\n   * Update the current animation if one is set.\n   *\n   * Called by [TileSprite.update()]{@link TileSprite#update}.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (!this.current) {\n      return\n    }\n\n    const anim = this.anims.get(this.current)\n    anim.update(dt)\n\n    this.frameSource.x = anim.frame.x\n    this.frameSource.y = anim.frame.y\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Assets.html":{"url":"classes/Assets.html","title":"class - Assets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Assets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/assets.ts\n        \n\n            \n                Description\n            \n            \n                Loads assets for use in a game.\nAssets are cached by URI to prevent multiple network calls for the same asset.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                json\n                            \n                            \n                                onProgress\n                            \n                            \n                                onReady\n                            \n                            \n                                sound\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/assets.ts:26\n                            \n                        \n\n                \n                    \n                            Initialize Assets object. \n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            image\n                        \n                        \n                    \n                \n            \n            \n                \nimage(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:70\n                \n            \n\n\n            \n                \n                    Loads an image asset.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to image file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLImageElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            json\n                        \n                        \n                    \n                \n            \n            \n                \njson(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:109\n                \n            \n\n\n            \n                \n                    Loads a JSON asset and returns parsed object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to JSON asset.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \nonProgress(cb: ProgressCallback)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:61\n                \n            \n\n\n            \n                \n                    Allows listeners to provide a callback for asset load progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                ProgressCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when a single asset is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onReady\n                        \n                        \n                    \n                \n            \n            \n                \nonReady(cb: ReadyCallback)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:44\n                \n            \n\n\n            \n                \n                    Allows listeners to provide a callback for asset load completion.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                ReadyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when all assets are loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sound\n                        \n                        \n                    \n                \n            \n            \n                \nsound(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:88\n                \n            \n\n\n            \n                \n                    Loads a sound asset.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to sound file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLAudioElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/assets.ts:24\n                                \n                            \n                    \n                        \n                                Get completed status of all assets. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Game } from '.'\n\n/** Function that is called when an asset is ready. */\ntype ReadyCallback = () => void\n\n/** Function that is called to provide progress status. */\ntype ProgressCallback = (complete: number, total: number) => void\n\n/**\n * Loads assets for use in a game.\n *\n * Assets are cached by URI to prevent multiple network calls for the same asset.\n */\nexport class Assets {\n  private cache: any\n  private readyListeners: ReadyCallback[]\n  private progressListeners: ProgressCallback[]\n  private isCompleted: boolean\n\n  private total: number\n  private remaining: number\n\n  /** Get completed status of all assets. */\n  get completed() {\n    return this.isCompleted\n  }\n\n  /** Initialize Assets object. */\n  constructor() {\n    this.cache = {}\n    this.readyListeners = []\n    this.progressListeners = []\n    this.isCompleted = false\n\n    this.total = 0\n    this.remaining = 0\n  }\n\n  /**\n   * Allows listeners to provide a callback for asset load completion.\n   *\n   * @param cb Function called when all assets are loaded.\n   */\n  onReady(cb: ReadyCallback) {\n    if (this.isCompleted) {\n      return cb()\n    }\n\n    this.readyListeners.push(cb)\n\n    if (this.remaining === 0) {\n      this.done()\n    }\n  }\n\n  /**\n   * Allows listeners to provide a callback for asset load progress.\n   *\n   * @param cb Function called when a single asset is loaded.\n   */\n  onProgress(cb: ProgressCallback) {\n    this.progressListeners.push(cb)\n  }\n\n  /**\n   * Loads an image asset.\n   *\n   * @param url Relative path to image file.\n   */\n  image(url: string): HTMLImageElement {\n    const factory = (url: string) => {\n      const img = new Image()\n\n      img.src = url\n      img.addEventListener('load', e => this.onAssetLoad(e), false)\n\n      return img\n    }\n\n    return this.load(url, factory)\n  }\n\n  /**\n   * Loads a sound asset.\n   *\n   * @param url Relative path to sound file.\n   */\n  sound(url: string): HTMLAudioElement {\n    const factory = (url: string) => {\n      const onLoad = (e: Event) => {\n        audio.removeEventListener('canplay', onLoad)\n        this.onAssetLoad(e)\n      }\n\n      const audio = new Audio(url)\n      audio.addEventListener('canplay', onLoad, false)\n\n      return audio\n    }\n\n    return this.load(url, factory)\n  }\n\n  /**\n   * Loads a JSON asset and returns parsed object.\n   *\n   * @param url Relative path to JSON asset.\n   */\n  json(url: string) {\n    const factory = async (url: string) => {\n      return await fetch(url)\n        .then(res => res.json())\n        .then(json => this.onAssetLoad(json, true))\n        .catch(e => Game.debug && console.error(e))\n    }\n\n    return this.load(url, factory, true)\n  }\n\n  private done() {\n    this.isCompleted = true\n\n    for (let i = 0; i  any, isJson = false) {\n    if (this.cache[url]) {\n      Game.debug && console.info(`cached ${url}`)\n      return this.cache[url]\n    }\n\n    Game.debug && console.info(`load ${url}`)\n\n    this.remaining++\n    this.total++\n\n    const asset = factory(url)\n    this.cache[url] = asset\n\n    this.onAssetLoad(asset, isJson)\n\n    return asset\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BufferInfo.html":{"url":"classes/BufferInfo.html","title":"class - BufferInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BufferInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/gl-buffer.ts\n        \n\n            \n                Description\n            \n            \n                Data about a WebGL buffer. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buffer\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLBuffer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:9\n                            \n                        \n\n                \n                    \n                        The WebGLBuffer. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:11\n                            \n                        \n\n                \n                    \n                        Buffer ID in the program. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:13\n                            \n                        \n\n                \n                    \n                        Lookup name for the buffer. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        const fullArea = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n\n/** Data about a WebGL buffer. */\nclass BufferInfo {\n  /** The WebGLBuffer. */\n  buffer: WebGLBuffer\n  /** Buffer ID in the program. */\n  id: number\n  /** Lookup name for the buffer. */\n  name: string\n}\n\n/** Thin wrapper around WebGLBuffer objects, making them easier to manage. */\nexport class GlBuffer {\n  private gl: WebGLRenderingContext\n  private buffers: BufferInfo[]\n  private activeBuffer: BufferInfo\n\n  /**\n   * Initialize GlBuffer object.\n   *\n   * @param gl WebGLRenderingContext to use for buffer actions.\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl\n    this.buffers = []\n  }\n\n  /**\n   * Gets the buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to return.\n   */\n  buffer(bufferName: string) {\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    return buffer.buffer\n  }\n\n  /**\n   * Creates a new buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to create.\n   */\n  create(bufferName: string) {\n    const buff = new BufferInfo()\n    buff.buffer = this.gl.createBuffer()\n    ; (buff.buffer as any).__SPECTOR_Metadata = { bufferName }\n    buff.id = this.buffers.length\n    buff.name = bufferName\n\n    this.buffers.push(buff)\n  }\n\n  /**\n   * Sets the named buffer as active, enables the provided attribute,\n   * and prepares the buffer for use.\n   *\n   * @param bufferName The name of the buffer to activate.\n   * @param attribLocation The location of the attribute to enable.\n   * @param components The number of components per vertex.\n   */\n  setActive(bufferName: string, attribLocation: number, components: number = 2) {\n    const { gl } = this\n\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    if (!buffer) {\n      throw new Error(`No buffer with name ${bufferName} found to set as active.`)\n    }\n\n    if (this.activeBuffer === buffer) {\n      return\n    }\n\n    this.activeBuffer = buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, fullArea, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(attribLocation, components, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(attribLocation)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Camera.html":{"url":"classes/Camera.html","title":"class - Camera","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Camera\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/camera.ts\n        \n\n            \n                Description\n            \n            \n                Follows a subject to provide a viewport into a game world.\nExample\nAssumes this is in a Scene.\nconst camera = new Camera(player, { width: 640, height: 480 } as Rect, {\n   width: map.mapWidth * map.tileWidth,\n   height: map.mapHeight * map.tileHeight\n } as Rect)\n\nthis.camera = this.add(camera)\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                easing\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                flash\n                            \n                            \n                                focus\n                            \n                            \n                                setDebug\n                            \n                            \n                                setSubject\n                            \n                            \n                                setTracking\n                            \n                            \n                                shake\n                            \n                            \n                                update\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subject: TileSprite | Sprite, viewport: Rect, worldSize: Rect)\n                    \n                \n                        \n                            \n                                Defined in lib/camera.ts:44\n                            \n                        \n\n                \n                    \n                            Initialize Camera object.\nThe Rect parameters only require width and height properties.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        subject\n                                                  \n                                                        \n                                                                        TileSprite | Sprite\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The {\n\n                                                        \n                                                \n                                                \n                                                        viewport\n                                                  \n                                                        \n                                                                        Rect\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of the camera's view into the game.\n\n                                                        \n                                                \n                                                \n                                                        worldSize\n                                                  \n                                                        \n                                                                        Rect\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of the game world. Uses viewport by default.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            easing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/camera.ts:26\n                            \n                        \n\n                \n                    \n                        Amount to move towards subject per update.\nRange from 0 to 1 where 0 is not moving, and 1 is always on subject.\nDefault is .3\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            flash\n                        \n                        \n                    \n                \n            \n            \n                \nflash(duration: number, color: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:149\n                \n            \n\n\n            \n                \n                    Add a brief overlay to 'flash' the viewport.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .2\n                                    \n\n                                    \n                                        Time in seconds for flash to fade out.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '#fff'\n                                    \n\n                                    \n                                        Color of the overlay used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n            \n                \nfocus(ease: number, track)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:166\n                \n            \n\n\n            \n                \n                    Focus the camera on the subject.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    ease\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Range from 0 to 1 where 0 is not moving, and 1 is on subject.\n\n                                    \n                                \n                                \n                                    track\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to keep the subject in tracking limits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDebug\n                        \n                        \n                    \n                \n            \n            \n                \nsetDebug(debug)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:86\n                \n            \n\n\n            \n                \n                    Set debug status on camera.\nWhen true, a rectangle displays on-screen showing camera tracking bounds.\nOnly call after everything is added to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    debug\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to turn debugging on or off.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSubject\n                        \n                        \n                    \n                \n            \n            \n                \nsetSubject(sprite: TileSprite | Sprite)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:119\n                \n            \n\n\n            \n                \n                    Update the subject being tracked by the camera.\nAlso causes the camera to refocus to the new subject.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                TileSprite | Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new subject to track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTracking\n                        \n                        \n                    \n                \n            \n            \n                \nsetTracking(xo: number, yo: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:108\n                \n            \n\n\n            \n                \n                    Update tracking offsets used to keep the subject in view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    xo\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Offset of tracking space from sides on X axis.\n\n                                    \n                                \n                                \n                                    yo\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Offset of tracking space from sides on Y axis.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            shake\n                        \n                        \n                    \n                \n            \n            \n                \nshake(power: number, duration: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:138\n                \n            \n\n\n            \n                \n                    Shake the camera randomly for a short time.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    power\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5\n                                    \n\n                                    \n                                        Number of pixels to shake the camera.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .5\n                                    \n\n                                    \n                                        Time in seconds to shake.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:206\n                \n            \n\n\n            \n                \n                    Update the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:27\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite, Utils } from '.'\nimport { Sprite, Rect, Vec } from './types'\n\n/**\n * Follows a subject to provide a viewport into a game world.\n *\n * ### Example\n * Assumes this is in a {@link Scene}.\n *\n * ```typescript\nconst camera = new Camera(player, { width: 640, height: 480 } as Rect, {\n   width: map.mapWidth * map.tileWidth,\n   height: map.mapHeight * map.tileHeight\n } as Rect)\n\nthis.camera = this.add(camera)\n```\n */\nexport class Camera extends Container {\n  /**\n   * Amount to move towards subject per update.\n   *\n   * Range from 0 to 1 where 0 is not moving, and 1 is always on subject.\n   * Default is .3\n   */\n  easing: number\n\n  private shakePower: number\n  private shakeDecay: number\n  private shakeLast: Vec\n\n  private flashTime: number\n  private flashDuration: number\n  private flashRect: Rect\n\n  private width: number\n  private height: number\n\n  private debug: Rect\n  private worldSize: Rect\n\n  private tracking: Vec\n  private offset: Vec\n  private subject: Vec\n\n  /**\n   * Initialize Camera object.\n   *\n   * The {@link Rect} parameters only require `width` and `height` properties.\n   *\n   * @param subject The {@link TileSprite} or {@link Sprite} for the camera to follow.\n   * @param viewport Size of the camera's view into the game.\n   * @param worldSize Size of the game world. Uses `viewport` by default.\n   */\n  constructor(subject: TileSprite | Sprite, viewport: Rect,\n              worldSize: Rect = viewport) {\n    super()\n\n    this.width = viewport.width\n    this.height = viewport.height\n    this.worldSize = worldSize\n\n    this.shakePower = 0\n    this.shakeDecay = 0\n    this.shakeLast = new Vec()\n\n    this.flashTime = 0\n    this.flashDuration = 0\n    this.flashRect = null\n\n    this.easing = .3\n\n    this.setTracking(64, 48)\n    this.setSubject(subject)\n  }\n\n  /**\n   * Set debug status on camera.\n   *\n   * When true, a rectangle displays on-screen showing camera tracking bounds.\n   *\n   * Only call after everything is added to the camera.\n   *\n   * @param debug Whether to turn debugging on or off.\n   */\n  setDebug(debug = true) {\n    if (debug) {\n      this.debug = this.add(\n        new Rect(\n          this.tracking.x * 2,\n          this.tracking.y * 2,\n          { fill: 'rgba(255, 0, 0, 0.2)' }\n        )\n      )\n\n      return\n    }\n\n    this.remove(this.debug)\n  }\n\n  /**\n   * Update tracking offsets used to keep the subject in view.\n   *\n   * @param xo Offset of tracking space from sides on X axis.\n   * @param yo Offset of tracking space from sides on Y axis.\n   */\n  setTracking(xo: number, yo: number) {\n    this.tracking = new Vec(xo, yo)\n  }\n\n  /**\n   * Update the subject being tracked by the camera.\n   *\n   * Also causes the camera to refocus to the new subject.\n   *\n   * @param sprite The new subject to track.\n   */\n  setSubject(sprite: TileSprite | Sprite) {\n    this.subject = sprite.pos\n    this.offset = new Vec()\n\n    this.offset.x += sprite.width / 2\n    this.offset.y += sprite.height / 2\n\n    this.offset.x -= sprite.anchor.x\n    this.offset.y -= sprite.anchor.y\n\n    this.focus()\n  }\n\n  /**\n   * Shake the camera randomly for a short time.\n   *\n   * @param power Number of pixels to shake the camera.\n   * @param duration Time in seconds to shake.\n   */\n  shake(power = 5, duration = .5) {\n    this.shakePower = power\n    this.shakeDecay = power / duration\n  }\n\n  /**\n   * Add a brief overlay to 'flash' the viewport.\n   *\n   * @param duration Time in seconds for flash to fade out.\n   * @param color Color of the overlay used.\n   */\n  flash(duration = .2, color = '#fff') {\n    if (!this.flashRect) {\n      this.flashRect = this.add(\n        new Rect(this.width, this.height, { fill: color })\n      )\n    }\n\n    this.flashDuration = duration\n    this.flashTime = duration\n  }\n\n  /**\n   * Focus the camera on the subject.\n   *\n   * @param ease Range from 0 to 1 where 0 is not moving, and 1 is on subject.\n   * @param track Whether or not to keep the subject in tracking limits.\n   */\n  focus(ease = 1, track = true) {\n    const target = this.subject\n\n    const centeredX = target.x + this.offset.x - this.width / 2\n    const maxX = this.worldSize.width - this.width\n    let x = -Utils.math.clamp(centeredX, 0, maxX)\n\n    const centeredY = target.y + this.offset.y - this.height / 2\n    const maxY = this.worldSize.height - this.height\n    let y = -Utils.math.clamp(centeredY, 0, maxY)\n\n    if (this.debug) {\n      this.debug.pos.set(\n        -this.pos.x + this.width / 2 - this.tracking.x,\n        -this.pos.y + this.height / 2 - this.tracking.y\n      )\n    }\n\n    if (track) {\n      if (Math.abs(centeredX + this.pos.x) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CanvasRenderer.html":{"url":"classes/CanvasRenderer.html","title":"class - CanvasRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CanvasRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/canvas-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Recursive rendering utilizing HTML5 canvas. \n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/canvas-renderer.ts:9\n                            \n                        \n\n                \n                    \n                            Initialize CanvasRenderer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTMLElement to add the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:11\n\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:13\n\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:9\n\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:7\n\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(container: Container, clear)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/canvas-renderer.ts:39\n                \n            \n\n\n            \n                \n                    Recursive method for rendering the provided container and all its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Container object to render recursively.\n\n                                    \n                                \n                                \n                                    clear\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to clear the canvas before rendering.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:44\n\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Container, Game } from '../'\nimport { Entity, Text } from '../types'\n\n/** Recursive rendering utilizing HTML5 canvas. */\nexport class CanvasRenderer extends Renderer {\n  private ctx: CanvasRenderingContext2D\n  private ctx2: CanvasRenderingContext2D\n  private buffer: HTMLCanvasElement\n\n  /**\n   * Initialize CanvasRenderer object.\n   *\n   * @param width Width of the canvas in pixels.\n   * @param height Height of the canvas in pixels.\n   * @param container The HTMLElement to add the canvas to.\n   */\n  constructor(width: number, height: number, container: HTMLElement) {\n    super(width, height, container)\n\n    this.buffer = document.createElement('canvas')\n\n    this.buffer.width = this.canvas.width = width\n    this.buffer.height = this.canvas.height = height\n\n    this.ctx = this.buffer.getContext('2d')\n    this.ctx.imageSmoothingEnabled = false\n    this.ctx.textBaseline = 'top'\n\n    this.ctx2 = this.canvas.getContext('2d')\n  }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Container.html":{"url":"classes/Container.html","title":"class - Container","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Container\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/container.ts\n        \n\n            \n                Description\n            \n            \n                Holds game objects updated and/or rendered in the game loop.\nBasically, just an Entity with an update implementation.\nExample\nconst pickups = new Container()\n\n// Assuming there is a 'Pickup' type in your game.\nmapData.pickupLocations.forEach(pos => {\n pickups.push(new Pickup(pos))\n})\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:27\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity } from './types'\n\n/**\n * Holds game objects updated and/or rendered in the game loop.\n *\n * Basically, just an {@link Entity} with an `update` implementation.\n *\n * ### Example\n * ```typescript\nconst pickups = new Container()\n\n// Assuming there is a 'Pickup' type in your game.\nmapData.pickupLocations.forEach(pos => {\n pickups.push(new Pickup(pos))\n})\n```\n */\nexport class Container extends Entity {\n  /**\n   * Update each child in the container.\n   *\n   * Automatically removes any child object marked as dead.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  update(dt: number, t: number) {\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controls.html":{"url":"interfaces/Controls.html","title":"interface - Controls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Controls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/controls.ts\n        \n\n            \n                Description\n            \n            \n                Object containing optional control objects.\nUsed to wrap supported controls for your game.\nExample\n // For a game with keyboard and gamepad controls\n const scene = new Scene(game, {\n   keys: new KeyControls(),\n   gamepad: new GamepadControls()\n })\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        gamepad\n                                \n                                \n                                            Optional\n                                        keys\n                                \n                                \n                                            Optional\n                                        mouse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gamepad\n                                    \n                                \n                                \n                                    \n                                        gamepad:         GamepadControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GamepadControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Gamepad controls to be used if provided. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keys\n                                    \n                                \n                                \n                                    \n                                        keys:         KeyControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Key controls to be used if provided. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouse\n                                    \n                                \n                                \n                                    \n                                        mouse:         MouseControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MouseControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Mouse controls to be used if provided. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { KeyControls } from './key-controls'\nimport { MouseControls } from './mouse-controls'\nimport { GamepadControls } from './gamepad-controls'\n\n/**\n * Object containing optional control objects.\n *\n * Used to wrap supported controls for your game.\n *\n * ### Example\n * ```typescript\n // For a game with keyboard and gamepad controls\n const scene = new Scene(game, {\n   keys: new KeyControls(),\n   gamepad: new GamepadControls()\n })\n ```\n */\nexport interface Controls {\n  /** Key controls to be used if provided. */\n  keys?: KeyControls\n  /** Mouse controls to be used if provided. */\n  mouse?: MouseControls\n  /** Gamepad controls to be used if provided. */\n  gamepad?: GamepadControls\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Entity.html":{"url":"classes/Entity.html","title":"class - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/entity.ts\n        \n\n            \n                Description\n            \n            \n                An abstract base class for all entities. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasChildren\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/types/entity.ts:24\n                            \n                        \n\n                \n                    \n                            Initialize an Entity object. \n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:11\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:19\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:8\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:14\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:16\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:6\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:52\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:74\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:45\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasChildren\n                    \n                \n\n                \n                    \n                        gethasChildren()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/entity.ts:22\n                                \n                            \n                    \n                        \n                                Whether or not there are any child entities. \n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Vec } from '.'\n\n/** An abstract base class for all entities. */\nexport abstract class Entity {\n  /** Whether or not the entity is visible. */\n  visible: boolean\n  /** Whether or not the entity is dead. */\n  dead: boolean\n\n  /** The opacity of the entity (from 0 to 1) */\n  alpha: number\n\n  /** Position of the entity. */\n  pos: Vec\n  /** Scale of the entity. */\n  scale: Vec\n\n  /** An array of child entities for recursive update/render. */\n  children: Partial[]\n\n  /** Whether or not there are any child entities. */\n  get hasChildren(): boolean {\n    return this.children.length > 0\n  }\n\n  /** Initialize an Entity object. */\n  constructor() {\n    this.visible = true\n    this.dead = false\n\n    this.alpha = 1\n\n    this.pos = new Vec()\n    this.scale = new Vec(1, 1)\n\n    this.children = []\n  }\n\n  /**\n   * Update method to be implemented by classes extending Entity.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  abstract update(dt: number, t: number): void\n\n  /**\n   * Add and return a child object.\n   *\n   * @param child Object to add to the container.\n   */\n  add(child: T) {\n    this.children.push(child)\n\n    return child\n  }\n\n  /**\n   * Remove and return a child object.\n   *\n   * @param child Object to remove from the container.\n   */\n  remove(child: T) {\n    this.children = this.children.filter(ch => ch !== child)\n\n    return child\n  }\n\n  /**\n   * Map a function across all children.\n   *\n   * @param fn Function to call for each child.\n   */\n  map(fn: (child: Partial, index?: number) => void): any {\n    const result: any[] = []\n\n    for (const [i, child] of this.children.entries()) {\n      result[i] = fn(child, i)\n    }\n\n    return result\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtraLayer.html":{"url":"interfaces/ExtraLayer.html","title":"interface - ExtraLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExtraLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/tiled-parser.ts\n        \n\n            \n                Description\n            \n            \n                Interface to add extra layers above or below the main level layer. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isAboveLevel\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isAboveLevel\n                                    \n                                \n                                \n                                    \n                                        isAboveLevel:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the layer is rendered above the level or below. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the layer to load. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Point } from '../types'\n\n/** Type for tile data. */\nexport type TileData = {\n  [key: string]: any,\n  frame: Point,\n  x: number,\n  y: number\n}\n\n/** Interface for a Tiled map object. */\nexport interface TiledMap {\n  /** Width of a tile in pixels. */\n  tileWidth: number\n  /** Height of a tile in pixels. */\n  tileHeight: number\n  /** Width of the map in tiles. */\n  mapWidth: number\n  /** Height of the map in tiles. */\n  mapHeight: number\n  /** Array of arrays of tile objects. */\n  tiles: TileData[][]\n  /** Index of the level layer in tiles array. */\n  levelIndex: number\n\n  /**\n   * Gets an object from the map by name.\n   *\n   * @param name Name of object to get.\n   * @param mandatory Whether a missing object is an error.\n   */\n  getObjectByName(name: string, mandatory?: boolean): Tiled.Object\n\n  /**\n   * Gets an array of objects from the map by type.\n   *\n   * @param type Type name of the objects to get.\n   * @param mandatory Whether no results is an error.\n   */\n  getObjectsByType(type: string, mandatory?: boolean): Tiled.Object[]\n}\n\n/** Interface to add extra layers above or below the main level layer. */\nexport interface ExtraLayer {\n  /** Name of the layer to load. */\n  name: string\n  /** Whether the layer is rendered above the level or below. */\n  isAboveLevel: boolean\n}\n\n/**\n * @ignore\n */\nlet tileWidth: number\n/**\n * @ignore\n */\nlet tileHeight: number\n/**\n * @ignore\n */\nlet mapWidth: number\n/**\n * @ignore\n */\nlet mapHeight: number\n/**\n * @ignore\n */\nlet tilesPerRow: number\n/**\n * @ignore\n */\nlet levelIndex: number\n\n/**\n * @ignore\n */\nlet tileset: Tiled.Tileset\n/**\n * @ignore\n */\nlet layers: Tiled.Layer[]\n/**\n * @ignore\n */\nlet tilesets: Tiled.Tileset[]\n/**\n * @ignore\n */\nlet entities: Tiled.Object[]\n\n/**\n * Parses a Tiled map object into a simpler form.\n *\n * There must be at least two layers in the Tiled map:\n * * \"level\"    - containing the tiles for the level\n * * \"entities\" - containing at least one entity (usually player starting location)\n *\n * @param jsonObj Object from Tiled JSON export.\n */\nexport function tiledParser(jsonObj: Tiled.Map,\n                            extraLayers?: ExtraLayer[]): TiledMap {\n  tileWidth = jsonObj.tilewidth\n  tileHeight = jsonObj.tileheight\n  mapWidth = jsonObj.width\n  mapHeight = jsonObj.height\n  layers = jsonObj.layers\n  tilesets = jsonObj.tilesets\n\n  const levelLayer = getLayer('level')\n  const entitiesLayer = getLayer('entities')\n\n  tileset = getTileset()\n\n  if (!entitiesLayer.objects) {\n    throw new Error('Tiled Error: Missing entities objects.')\n  }\n\n  entities = []\n  for (let i = 0; i  {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i  {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n\n/**\n * @ignore\n */\nconst loadTiles = (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i  {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n\n/**\n * @ignore\n */\nconst getTileProps = (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i  {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i  {\n  const es = []\n  for (let i = 0; i  {\n  let ent: any\n\n  for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GLUtils.html":{"url":"classes/GLUtils.html","title":"class - GLUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GLUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/utils.ts\n        \n\n            \n                Description\n            \n            \n                Provides static methods for working with WebGL. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get2DProjectionMatrix\n                            \n                            \n                                    Static\n                                getCameraTranslation\n                            \n                            \n                                    Static\n                                getRotation\n                            \n                            \n                                    Static\n                                getScale\n                            \n                            \n                                    Static\n                                getScaleMatrix\n                            \n                            \n                                    Static\n                                getTranslation\n                            \n                            \n                                    Static\n                                multiplyMatrices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get2DProjectionMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get2DProjectionMatrix(width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:61\n                \n            \n\n\n            \n                \n                    Gets a simple 2D flat projection matrix from the provided dimensions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of view in pixels.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of view in pixels.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCameraTranslation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTranslation(camera: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:11\n                \n            \n\n\n            \n                \n                    Gets a translation matrix based upon camera position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera object to translate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getRotation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRotation(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:88\n                \n            \n\n\n            \n                \n                    Gets a rotation matrix from the provided angle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScale\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScale(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:47\n                \n            \n\n\n            \n                \n                    Gets a scale matrix based upon provided sizes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Size to scale to in x dimension.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Size to scale to in y dimension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleMatrix(sprite: Sprite | TileSprite | Rect, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:29\n                \n            \n\n\n            \n                \n                    Gets a scale matrix based upon entity scale.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                Sprite | TileSprite | Rect\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Entity with scale property.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of the entity in pixels.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of the entity in pixels.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTranslation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTranslation(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:75\n                \n            \n\n\n            \n                \n                    Gets a translation matrix from the provided coordinates.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translation for the x dimension.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translation for the y dimension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            multiplyMatrices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    multiplyMatrices(a: number[], b: number[])\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:102\n                \n            \n\n\n            \n                \n                    Multiplies two matrices together.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The first matrix for multiplication.\n\n                                    \n                                \n                                \n                                    b\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The second matrix for multiplication.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sprite, Rect } from '../../types'\nimport { TileSprite } from '../../tile-sprite'\n\n/** Provides static methods for working with WebGL. */\nexport class GLUtils {\n  /**\n   * Gets a translation matrix based upon camera position.\n   *\n   * @param camera Camera object to translate.\n   */\n  static getCameraTranslation(camera: any) {\n    let cameraTranslation = GLUtils.getTranslation(0, 0)\n\n    if (camera) {\n      cameraTranslation = GLUtils.getTranslation(\n        Math.floor(camera.pos.x), Math.floor(camera.pos.y))\n    }\n\n    return cameraTranslation\n  }\n\n  /**\n   * Gets a scale matrix based upon entity scale.\n   *\n   * @param sprite Entity with `scale` property.\n   * @param width Width of the entity in pixels.\n   * @param height Height of the entity in pixels.\n   */\n  static getScaleMatrix(sprite: Sprite | TileSprite | Rect,\n                        width: number, height: number) {\n    let scaleMatrix = GLUtils.getScale(width, height)\n\n    if (sprite.scale) {\n      scaleMatrix = GLUtils.getScale(width * sprite.scale.x,\n        height * sprite.scale.y)\n    }\n\n    return scaleMatrix\n  }\n\n  /**\n   * Gets a scale matrix based upon provided sizes.\n   *\n   * @param x Size to scale to in x dimension.\n   * @param y Size to scale to in y dimension.\n   */\n  static getScale(x: number, y: number) {\n    return [\n      x, 0, 0,\n      0, y, 0,\n      0, 0, 1\n    ]\n  }\n\n  /**\n   * Gets a simple 2D flat projection matrix from the provided dimensions.\n   *\n   * @param width Width of view in pixels.\n   * @param height Height of view in pixels.\n   */\n  static get2DProjectionMatrix(width: number, height: number) {\n    return [\n      2 / width, 0, 0,\n      0, -2 / height, 0,\n      -1, 1, 1\n    ]\n  }\n\n  /**\n   * Gets a translation matrix from the provided coordinates.\n   *\n   * @param x Translation for the x dimension.\n   * @param y Translation for the y dimension.\n   */\n  static getTranslation(x: number, y: number) {\n    return [\n      1, 0, 0,\n      0, 1, 0,\n      x, y, 1\n    ]\n  }\n\n  /**\n   * Gets a rotation matrix from the provided angle.\n   *\n   * @param angle Angle in radians.\n   */\n  static getRotation(angle: number) {\n    return [\n      Math.cos(-angle), -Math.sin(-angle), 0,\n      Math.sin(-angle), Math.cos(-angle), 0,\n      0, 0, 1\n    ]\n  }\n\n  /**\n   * Multiplies two matrices together.\n   *\n   * @param a The first matrix for multiplication.\n   * @param b The second matrix for multiplication.\n   */\n  static multiplyMatrices(a: number[], b: number[]) {\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = a\n    const [b00, b01, b02, b10, b11, b12, b20, b21, b22] = b\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22,\n    ]\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Game.html":{"url":"classes/Game.html","title":"class - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/game.ts\n        \n\n            \n                Description\n            \n            \n                Contains all aspects of a game.\nExample\n // This is a boring 'game'.\n const game = new Game(640, 480)\n\n game.run()\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                assets\n                            \n                            \n                                    Static\n                                debug\n                            \n                            \n                                    Static\n                                FPS\n                            \n                            \n                                    Static\n                                UPS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                run\n                            \n                            \n                                setScene\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                                \n                                    scene\n                                \n                                \n                                    canvas\n                                \n                                \n                                    speed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, useWebGL: boolean, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/game.ts:106\n                            \n                        \n\n                \n                    \n                            Initialize Game object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the game screen.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the game screen.\n\n                                                        \n                                                \n                                                \n                                                        useWebGL\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether or not to render with WebGL. Falls back to canvas.\nDefault is true.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The element to append the canvas to.\nDefault is document.body\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            assets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Assets\n\n                        \n                    \n                    \n                        \n                            Default value : new Assets()\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:66\n                            \n                        \n\n                \n                    \n                        An Assets instance for loading all game assets. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            debug\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:68\n                            \n                        \n\n                \n                    \n                        Whether or not to enable debug display (shows FPS and UPS). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            FPS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 60\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:70\n                            \n                        \n\n                \n                    \n                        Frames per second. Only updated if debug is true. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            UPS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 60\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:72\n                            \n                        \n\n                \n                    \n                        Updates per second. Only updated if debug is true. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun(gameUpdate: GameUpdate)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:168\n                \n            \n\n\n            \n                \n                    Start the game loop.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    gameUpdate\n                                    \n                                                GameUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => {}\n                                    \n\n                                    \n                                        An update function to run for the game.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setScene\n                        \n                        \n                    \n                \n            \n            \n                \nsetScene(scene: Scene, fadeInSeconds: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:152\n                \n            \n\n\n            \n                \n                    Change to a new scene in the game.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                                Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The new scene to transition into.\n\n                                    \n                                \n                                \n                                    fadeInSeconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .5\n                                    \n\n                                    \n                                        Time in seconds for the transition.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:75\n                                \n                            \n                    \n                        \n                                Gets the width of the game screen. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:80\n                                \n                            \n                    \n                        \n                                Gets the height of the game screen. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        scene\n                    \n                \n\n                \n                    \n                        getscene()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:85\n                                \n                            \n                    \n                        \n                                Gets the game scene. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        canvas\n                    \n                \n\n                \n                    \n                        getcanvas()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:90\n                                \n                            \n                    \n                        \n                                Gets the canvas element used by the renderer. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        speed\n                    \n                \n\n                \n                    \n                        getspeed()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:98\n                                \n                            \n                    \n                        \n                                Gets the current speed multiplier of the game.\n\n\n                                \n                                \n                        \n                    \n\n                \n                    \n                        setspeed(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:103\n                                \n                            \n                    \n                        \n                                Sets the speed multiplier of the game. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Assets } from './assets'\nimport { Renderer, CanvasRenderer, WebGLRenderer } from './renderer'\nimport { Container, Scene } from '.'\n\n/**\n * Function called on each update.\n *\n * @param dt Delta time since last call.\n * @param t Elapsed time since start.\n */\ntype GameUpdate = (dt: number, t: number) => void\n\n/**\n * Enum of pre-defined speeds for a game.\n * Default game speed is \"Normal\".\n *\n * Can also be any number, but be careful.\n */\nexport enum Speed {\n  Slow = .5,\n  Normal = 1,\n  Fast = 2\n}\n\n/**\n * @ignore\n */\nconst STEP = 1 / 60\n/**\n * @ignore\n */\nlet MULTIPLIER = Speed.Normal\n/**\n * @ignore\n */\nlet SPEED = STEP / MULTIPLIER\n/**\n * @ignore\n */\nconst MAX_FRAME = SPEED * 5\n\n/**\n * Contains all aspects of a game.\n *\n * ### Example\n * ```typescript\n // This is a boring 'game'.\n const game = new Game(640, 480)\n\n game.run()\n ```\n */\nexport class Game {\n  private _width: number\n  private _height: number\n\n  private fadeTime: number\n  private fadeDuration: number\n  private destination: Scene\n\n  private isWebGL: boolean\n  private renderer: Renderer\n  private _scene: Scene | Container\n\n  /** An Assets instance for loading all game assets. */\n  static assets: Assets = new Assets()\n  /** Whether or not to enable debug display (shows FPS and UPS). */\n  static debug: boolean = false\n  /** Frames per second. Only updated if debug is true. */\n  static FPS: number = 60\n  /** Updates per second. Only updated if debug is true. */\n  static UPS: number = 60\n\n  /** Gets the width of the game screen. */\n  get width() {\n    return this._width\n  }\n\n  /** Gets the height of the game screen. */\n  get height() {\n    return this._height\n  }\n\n  /** Gets the game scene. */\n  get scene() {\n    return this._scene\n  }\n\n  /** Gets the canvas element used by the renderer. */\n  get canvas() {\n    return this.renderer.canvasElement\n  }\n\n  /**\n   * Gets the current speed multiplier of the game.\n   * @default {@link Speed.Normal}\n   */\n  get speed() {\n    return MULTIPLIER\n  }\n\n  /** Sets the speed multiplier of the game. */\n  set speed(value: Speed | number) {\n    MULTIPLIER = value\n    SPEED = STEP / MULTIPLIER\n  }\n\n  /**\n   * Initialize Game object.\n   *\n   * @param width Width of the game screen.\n   * @param height Height of the game screen.\n   * @param useWebGL Whether or not to render with WebGL. Falls back to canvas.\n   * Default is `true`.\n   * @param container The element to append the canvas to.\n   * Default is `document.body`\n   */\n  constructor(width: number, height: number, useWebGL: boolean = true,\n              container: HTMLElement = document.body) {\n    this._width = width\n    this._height = height\n\n    const canvas = document.createElement('canvas')\n\n    if (useWebGL) {\n      this.checkWebGL(canvas)\n    }\n\n    if (useWebGL && this.isWebGL) {\n      this.renderer = new WebGLRenderer(width, height, container)\n    }\n\n    if (!useWebGL || !this.isWebGL) {\n      this.renderer = new CanvasRenderer(width, height, container)\n    }\n\n    this._scene = new Container()\n    this.destination = null\n\n    this.fadeTime = 0\n    this.fadeDuration = 0\n\n    this.logInfo()\n  }\n\n  /**\n   * Change to a new scene in the game.\n   *\n   * @param scene The new scene to transition into.\n   * @param fadeInSeconds Time in seconds for the transition.\n   */\n  setScene(scene: Scene, fadeInSeconds = .5) {\n    if (!fadeInSeconds) {\n      this._scene = scene\n      return\n    }\n\n    this.destination = scene\n    this.fadeTime = fadeInSeconds\n    this.fadeDuration = fadeInSeconds\n  }\n\n  /**\n   * Start the game loop.\n   *\n   * @param gameUpdate An update function to run for the game.\n   */\n  run(gameUpdate: GameUpdate = () => {}) {\n    let dt = 0\n    let last = 0\n\n    let lastTime = window.performance.now()\n    let frames = 0\n    let updates = 0\n\n    const loop = (ms: number) => {\n      const t = ms / 1000\n\n      dt += Math.min(t - last, MAX_FRAME)\n      last = t\n\n      while (dt >= SPEED) {\n        updates++\n        this.scene.update(STEP, t / MULTIPLIER)\n        gameUpdate(STEP, t / MULTIPLIER)\n        dt -= SPEED\n      }\n\n      frames++\n      this.renderer.render(this.scene)\n\n      if (Game.debug && window.performance.now() - lastTime >= 1000) {\n        Game.FPS = Math.round(.25 * frames + .75 * Game.FPS)\n        Game.UPS = Math.round(.25 * updates + .75 * Game.UPS)\n\n        frames = 0\n        updates = 0\n        lastTime = window.performance.now()\n      }\n\n      if (this.fadeTime > 0) {\n        const ratio = this.fadeTime / this.fadeDuration\n\n        this.scene.alpha = ratio\n        this.destination.alpha = 1 - ratio\n        this.renderer.render(this.destination, false)\n\n        if ((this.fadeTime -= STEP) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GamepadControls.html":{"url":"classes/GamepadControls.html","title":"class - GamepadControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GamepadControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/gamepad-controls.ts\n        \n\n            \n                Description\n            \n            \n                Simplifies working with the\nGamepad API.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                threshold\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actionA\n                                \n                                \n                                    actionB\n                                \n                                \n                                    actionX\n                                \n                                \n                                    actionY\n                                \n                                \n                                    actionEsc\n                                \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/controls/gamepad-controls.ts:45\n                            \n                        \n\n                \n                    \n                            Initialize GamepadControls object.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            threshold\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/gamepad-controls.ts:7\n                            \n                        \n\n                \n                    \n                        Deadzone threshold. Default is .21 \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actionA\n                    \n                \n\n                \n                    \n                        getactionA()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:13\n                                \n                            \n                    \n                        \n                                Gets status of A button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionB\n                    \n                \n\n                \n                    \n                        getactionB()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:18\n                                \n                            \n                    \n                        \n                                Gets status of B button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionX\n                    \n                \n\n                \n                    \n                        getactionX()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:23\n                                \n                            \n                    \n                        \n                                Gets status of X button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionY\n                    \n                \n\n                \n                    \n                        getactionY()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:28\n                                \n                            \n                    \n                        \n                                Gets status of Y button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionEsc\n                    \n                \n\n                \n                    \n                        getactionEsc()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:33\n                                \n                            \n                    \n                        \n                                Gets status of Escape-equivalent button. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:38\n                                \n                            \n                    \n                        \n                                Gets direction of x axis. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:43\n                                \n                            \n                    \n                        \n                                Gets direction of y axis. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class GamepadControls {\n  /** Deadzone threshold. Default is .21 */\n  threshold: number\n\n  private controller: Gamepad\n  private controllers: Gamepad[]\n\n  /** Gets status of A button (or equivalent). */\n  get actionA() {\n    return this.action(0, 11)\n  }\n\n  /** Gets status of B button (or equivalent). */\n  get actionB() {\n    return this.action(1, 12)\n  }\n\n  /** Gets status of X button (or equivalent). */\n  get actionX() {\n    return this.action(2, 13)\n  }\n\n  /** Gets status of Y button (or equivalent). */\n  get actionY() {\n    return this.action(3, 14)\n  }\n\n  /** Gets status of Escape-equivalent button. */\n  get actionEsc() {\n    return this.action(4)\n  }\n\n  /** Gets direction of x axis. */\n  get x() {\n    return this.axis(0)\n  }\n\n  /** Gets direction of y axis. */\n  get y() {\n    return this.axis(1)\n  }\n\n  /**\n   * Initialize GamepadControls object.\n   */\n  constructor() {\n    this.controller = null\n    this.controllers = []\n    this.threshold = .21\n\n    window.addEventListener('gamepadconnected',\n      (e: GamepadEvent) => this.handler(e, true),\n      false)\n\n    window.addEventListener('gamepaddisconnected',\n      (e: GamepadEvent) => this.handler(e),\n      false)\n  }\n\n  private handler(e: GamepadEvent, isConnect = false) {\n    const { gamepad } = e\n\n    if (!isConnect) {\n      delete this.controllers[gamepad.index]\n      this.controller = null\n      return\n    }\n\n    this.controllers[gamepad.index] = gamepad\n    this.controller = gamepad\n  }\n\n  private axis(id: number) {\n    if (!this.controller) {\n      return 0\n    }\n\n    return (this.controller.axes[id]  this.threshold)\n        ? 1\n        : 0\n  }\n\n  private action(...buttons: number[]) {\n    if (!this.controller) {\n      return false\n    }\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlBuffer.html":{"url":"classes/GlBuffer.html","title":"class - GlBuffer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlBuffer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/gl-buffer.ts\n        \n\n            \n                Description\n            \n            \n                Thin wrapper around WebGLBuffer objects, making them easier to manage. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buffer\n                            \n                            \n                                create\n                            \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gl: WebGLRenderingContext)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl/gl-buffer.ts:20\n                            \n                        \n\n                \n                    \n                            Initialize GlBuffer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gl\n                                                  \n                                                        \n                                                                    WebGLRenderingContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                WebGLRenderingContext to use for buffer actions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buffer\n                        \n                        \n                    \n                \n            \n            \n                \nbuffer(bufferName: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:37\n                \n            \n\n\n            \n                \n                    Gets the buffer with the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the buffer to return.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(bufferName: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:48\n                \n            \n\n\n            \n                \n                    Creates a new buffer with the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the buffer to create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setActive\n                        \n                        \n                    \n                \n            \n            \n                \nsetActive(bufferName: string, attribLocation: number, components: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:66\n                \n            \n\n\n            \n                \n                    Sets the named buffer as active, enables the provided attribute,\nand prepares the buffer for use.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the buffer to activate.\n\n                                    \n                                \n                                \n                                    attribLocation\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The location of the attribute to enable.\n\n                                    \n                                \n                                \n                                    components\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        The number of components per vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        const fullArea = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n\n/** Data about a WebGL buffer. */\nclass BufferInfo {\n  /** The WebGLBuffer. */\n  buffer: WebGLBuffer\n  /** Buffer ID in the program. */\n  id: number\n  /** Lookup name for the buffer. */\n  name: string\n}\n\n/** Thin wrapper around WebGLBuffer objects, making them easier to manage. */\nexport class GlBuffer {\n  private gl: WebGLRenderingContext\n  private buffers: BufferInfo[]\n  private activeBuffer: BufferInfo\n\n  /**\n   * Initialize GlBuffer object.\n   *\n   * @param gl WebGLRenderingContext to use for buffer actions.\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl\n    this.buffers = []\n  }\n\n  /**\n   * Gets the buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to return.\n   */\n  buffer(bufferName: string) {\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    return buffer.buffer\n  }\n\n  /**\n   * Creates a new buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to create.\n   */\n  create(bufferName: string) {\n    const buff = new BufferInfo()\n    buff.buffer = this.gl.createBuffer()\n    ; (buff.buffer as any).__SPECTOR_Metadata = { bufferName }\n    buff.id = this.buffers.length\n    buff.name = bufferName\n\n    this.buffers.push(buff)\n  }\n\n  /**\n   * Sets the named buffer as active, enables the provided attribute,\n   * and prepares the buffer for use.\n   *\n   * @param bufferName The name of the buffer to activate.\n   * @param attribLocation The location of the attribute to enable.\n   * @param components The number of components per vertex.\n   */\n  setActive(bufferName: string, attribLocation: number, components: number = 2) {\n    const { gl } = this\n\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    if (!buffer) {\n      throw new Error(`No buffer with name ${bufferName} found to set as active.`)\n    }\n\n    if (this.activeBuffer === buffer) {\n      return\n    }\n\n    this.activeBuffer = buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, fullArea, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(attribLocation, components, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(attribLocation)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFrame.html":{"url":"interfaces/HasFrame.html","title":"interface - HasFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tile-map.ts\n        \n\n            \n                Description\n            \n            \n                Simple interface requiring a frame property of type Point.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        frame\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        frame\n                                    \n                                \n                                \n                                    \n                                        frame:         Point\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Point\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The frame used by a TileMap.  \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Container, TileSprite } from '.'\nimport { HitBox, Point, Texture, Vec } from './types'\nimport { TiledMap } from './utils'\n\n/**\n * Simple interface requiring a frame property of type {@link Point}.\n */\ninterface HasFrame {\n  /** The frame used by a {@link TileMap}.  */\n  frame: Point\n}\n\n/**\n * A customized Container of {@link TileSprite} objects that provides helper\n * methods for accessing tiles.\n *\n * Only tiles on the 'level' layer are used. Other layers are only for display.\n */\nexport class TileMap extends Container {\n  /** Width of the entire map in tiles. */\n  mapWidth: number\n  /** Height of the entire map in tiles. */\n  mapHeight: number\n  /** Width of one tile in pixels. */\n  tileWidth: number\n  /** Height of one tile in pixels. */\n  tileHeight: number\n  /** Index of the level layer in tiles data. */\n  levelIndex: number\n\n  /** Gets the layers up to and including the level layer. */\n  get layersUpToLevel() {\n    const layers = []\n\n    for (let i = 0; i (new Container())\n\n      for (let j = 0; j (this.children as any)\n      [this.levelIndex].children[mapPos.y * this.mapWidth + mapPos.x]\n  }\n\n  /**\n   * Gets the tile at the specified location.\n   *\n   * @param pos Pixel location to lookup tile.\n   */\n  tileAtPixelPos(pos: Vec) {\n    return this.tileAtMapPos(this.pixelToMapPos(pos))\n  }\n\n  /**\n   * Gets the tile at the specified location and sets the `frame` property.\n   *\n   * @param mapPos Tile location to lookup tile.\n   * @param frame The frame to set on the tile.\n   */\n  setTileFrameAtMapPos(mapPos: Vec, frame: Point) {\n    const tile = this.tileAtMapPos(mapPos)\n\n    tile.frame = frame\n\n    return tile\n  }\n\n  /**\n   * Gets the tile at the specified location and sets the `frame` property.\n   *\n   * @param pos Pixel location to lookup tile.\n   * @param frame The frame to set on the tile.\n   */\n  setTileFrameAtPixelPos(pos: Vec, frame: Point) {\n    return this.setTileFrameAtMapPos(this.pixelToMapPos(pos), frame)\n  }\n\n  /**\n   * Gets the tiles at all four corners of the specified HitBox.\n   *\n   * @param box HitBox to test for corner tiles.\n   * @param xo X axis offset to check against.\n   * @param yo Y axis offset to check against.\n   */\n  tilesAtCorners(box: HitBox, xo = 0, yo = 0): TileSprite[] {\n    const tiles = []\n    const corners = [\n      [box.x, box.y],\n      [box.x + box.width, box.y],\n      [box.x, box.y + box.height],\n      [box.x + box.width, box.y + box.height]\n    ]\n\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HitBox.html":{"url":"classes/HitBox.html","title":"class - HitBox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HitBox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/hit-box.ts\n        \n\n            \n                Description\n            \n            \n                Allows for more precise collision detection.\n// Creates a hitbox 4 pixels right and down from the top left of the sprite,\n// with a width of 32 pixels and a height of 40 pixels.\nplayer.hitbox = new HitBox(4, 4, 32, 40)\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(x: number, y: number, width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in lib/types/hit-box.ts:35\n                            \n                        \n\n                \n                    \n                            Initialize HitBox object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        x\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                X axis offset from top left.\n\n                                                        \n                                                \n                                                \n                                                        y\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Y axis offset from top left.\n\n                                                        \n                                                \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of hitbox.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of hitbox.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/hit-box.ts:61\n                \n            \n\n\n            \n                \n                    Set new values for the hitbox.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        X axis offset from top left.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Y axis offset from top left.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of hitbox.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of hitbox.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:18\n                                \n                            \n                    \n                        \n                                Gets the offset along the X axis from top left. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:23\n                                \n                            \n                    \n                        \n                                Gets the offset along the Y axis from top left. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:28\n                                \n                            \n                    \n                        \n                                Gets the width of the hitbox. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:33\n                                \n                            \n                    \n                        \n                                Gets the height of the hitbox. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class HitBox {\n  private _x: number\n  private _y: number\n\n  private _height: number\n  private _width: number\n\n  /** Gets the offset along the X axis from top left. */\n  get x() {\n    return this._x\n  }\n\n  /** Gets the offset along the Y axis from top left. */\n  get y() {\n    return this._y\n  }\n\n  /** Gets the width of the hitbox. */\n  get width() {\n    return this._width\n  }\n\n  /** Gets the height of the hitbox. */\n  get height() {\n    return  this._height\n  }\n\n  /**\n   * Initialize HitBox object.\n   *\n   * @param x X axis offset from top left.\n   * @param y Y axis offset from top left.\n   * @param width Width of hitbox.\n   * @param height Height of hitbox.\n   */\n  constructor(x: number, y: number, width: number, height: number) {\n    this._x = x\n    this._y = y\n\n    this._height = height\n    this._width = width\n  }\n\n  /**\n   * Set new values for the hitbox.\n   *\n   * @param x X axis offset from top left.\n   * @param y Y axis offset from top left.\n   * @param width Width of hitbox.\n   * @param height Height of hitbox.\n   */\n  set(x: number, y: number, width: number, height: number) {\n    this._x = x\n    this._y = y\n\n    this._height = height\n    this._width = width\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hits.html":{"url":"interfaces/Hits.html","title":"interface - Hits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Hits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/resolvers/wall-slide.ts\n        \n\n            \n                Description\n            \n            \n                Directions where collisions are detected. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        down\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        up\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        down\n                                    \n                                \n                                \n                                    \n                                        down:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from below.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from the left.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from the right.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        up\n                                    \n                                \n                                \n                                    \n                                        up:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from above.  \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Sprite } from '../types'\nimport { TileMap, Utils, TileSprite } from '..'\n\n/** Function used to provide collision resolver with walkable tile status. */\nexport type WalkableTest = (sprite: TileSprite, index: number) => boolean\n\n/** Directions where collisions are detected. */\nexport interface Hits {\n  /** Whether or not a collision was detected from above.  */\n  up: boolean\n  /** Whether or not a collision was detected from below.  */\n  down: boolean\n  /** Whether or not a collision was detected from the left.  */\n  left: boolean\n  /** Whether or not a collision was detected from the right.  */\n  right: boolean\n}\n\n/** The offsets to apply to resolve collisions, as well as the hit directions. */\nexport interface Resolution {\n  /** Correction needed in the x axis. */\n  x: number\n  /** Correction needed in the y axis. */\n  y: number\n  /** Directions where collisions were detected. */\n  hits: Hits\n}\n\n/**\n * Collision resolver that only prevents invalid movements.\n *\n * @param ent The Sprite entity to check.\n * @param map The TileMap to use for collision.\n * @param x Desired movement in the X axis.\n * @param y Desired movement in the Y axis.\n * @param walkableTest Callback function to test for walkable tiles.\n */\nexport function wallSlide(ent: Sprite, map: TileMap, x = 0, y = 0,\n                          walkableTest?: WalkableTest): Resolution {\n  let tiles: TileSprite[]\n  let tileEdge: number\n\n  const bounds = Utils.sprite.bounds(ent)\n  const hits = { up: false, down: false, left: false, right: false }\n\n  let xo = x\n  let yo = y\n\n  if (y !== 0) {\n    tiles = map.tilesAtCorners(bounds, 0, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(bl && br)) {\n      hits.down = true\n      tileEdge = tiles[2].pos.y - 1\n      yo = tileEdge - (bounds.y + bounds.height)\n    }\n  }\n\n  if (x !== 0) {\n    tiles = map.tilesAtCorners(bounds, xo, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(tr && br)) {\n      hits.right = true\n      tileEdge = tiles[1].pos.x - 1\n      xo = tileEdge - (bounds.x + bounds.width)\n    }\n  }\n\n  return { x: xo, y: yo, hits }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyControls.html":{"url":"classes/KeyControls.html","title":"class - KeyControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/key-controls.ts\n        \n\n            \n                Description\n            \n            \n                Provides access to keyboard inputs. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    action\n                                \n                                \n                                    actionB\n                                \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/controls/key-controls.ts:70\n                            \n                        \n\n                \n                    \n                            Initialize KeyControls object. \n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            key\n                        \n                        \n                    \n                \n            \n            \n                \nkey(key: string, value?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/key-controls.ts:104\n                \n            \n\n\n            \n                \n                    Gets or sets the value of a key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        KeyboardEvent code for the key (e.g. 'KeyW' for W).\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        If provided, sets the key's value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not key is 'pressed'.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/key-controls.ts:113\n                \n            \n\n\n            \n                \n                    Resets all keys to 'unpressed' state. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        action\n                    \n                \n\n                \n                    \n                        getaction()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:20\n                                \n                            \n                    \n                        \n                                Gets status of the spacebar. \n\n\n                        \n                    \n\n                \n                    \n                        setaction(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:25\n                                \n                            \n                    \n                        \n                                Sets status of the spacebar. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        actionB\n                    \n                \n\n                \n                    \n                        getactionB()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:30\n                                \n                            \n                    \n                        \n                                Gets status of the X key. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:39\n                                \n                            \n                    \n                        \n                                Gets x axis input direction.\nChecks left arrow or A key for left, and right arrow or D key for down.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:58\n                                \n                            \n                    \n                        \n                                Gets y axis input direction.\nChecks up arrow or W key for up, and down arrow or S key for down.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        type KeyMap = {\n  [s: string]: boolean\n}\n\n/**\n * @ignore\n */\nconst passThroughKeys = [\n  'F5', 'F12'\n]\n\n/** Provides access to keyboard inputs. */\nexport class KeyControls {\n  private keys: KeyMap\n\n  /** Gets status of the spacebar. */\n  get action() {\n    return this.keys.Space\n  }\n\n  /** Sets status of the spacebar. */\n  set action(value: boolean) {\n    this.keys.Space = value\n  }\n\n  /** Gets status of the X key. */\n  get actionB() {\n    return this.keys.KeyX\n  }\n\n  /**\n   * Gets x axis input direction.\n   *\n   * Checks left arrow or A key for left, and right arrow or D key for down.\n   */\n  get x() {\n    let val = 0\n\n    if (this.keys.ArrowLeft || this.keys.KeyA) {\n      val -= 1\n    }\n\n    if (this.keys.ArrowRight || this.keys.KeyD) {\n      val += 1\n    }\n\n    return val\n  }\n\n  /**\n   * Gets y axis input direction.\n   *\n   * Checks up arrow or W key for up, and down arrow or S key for down.\n   */\n  get y() {\n    let val = 0\n\n    if (this.keys.ArrowUp || this.keys.KeyW) {\n      val -= 1\n    }\n\n    if (this.keys.ArrowDown || this.keys.KeyS) {\n      val += 1\n    }\n\n    return val\n  }\n\n  /** Initialize KeyControls object. */\n  constructor() {\n    this.reset()\n\n    document.addEventListener('keydown', e => {\n      this.keys[e.code] = true\n\n      if (passThroughKeys.indexOf(e.code.toString()) > -1) {\n        return\n      }\n\n      e.preventDefault()\n    }, false)\n\n    document.addEventListener('keyup', e => {\n      this.keys[e.code] = false\n\n      if (passThroughKeys.indexOf(e.code.toString()) > -1) {\n        return\n      }\n\n      e.preventDefault()\n    }, false)\n  }\n\n  /**\n   * Gets or sets the value of a key.\n   *\n   * @param key KeyboardEvent code for the key (e.g. 'KeyW' for W).\n   * @param value If provided, sets the key's value.\n   * @returns Whether or not key is 'pressed'.\n   */\n  key(key: string, value?: boolean) {\n    if (value !== undefined) {\n      this.keys[key] = value\n    }\n\n    return !!this.keys[key]\n  }\n\n  /** Resets all keys to 'unpressed' state. */\n  reset() {\n    this.keys = {}\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Layer.html":{"url":"interfaces/Layer.html","title":"interface - Layer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Layer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Layer in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        objects\n                                \n                                \n                                        opacity\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a tile layer, this is an array of tile IDs. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                    \n                                \n                                \n                                    \n                                        objects:     Tiled.Object[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tiled.Object[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If an object layer, this is an array of Objects. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opacity\n                                    \n                                \n                                \n                                    \n                                        opacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The opacity of the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the layer. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Map.html":{"url":"interfaces/Map.html","title":"interface - Map","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Map\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                The Tiled map. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        layers\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        tileheight\n                                \n                                \n                                        tilesets\n                                \n                                \n                                        tilewidth\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layers\n                                    \n                                \n                                \n                                    \n                                        layers:         Layer[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Layers in map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileheight\n                                    \n                                \n                                \n                                    \n                                        tileheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilesets\n                                    \n                                \n                                \n                                    \n                                        tilesets:     Tileset[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tileset[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tilesets in the map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilewidth\n                                    \n                                \n                                \n                                    \n                                        tilewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the map in tiles. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MouseControls.html":{"url":"classes/MouseControls.html","title":"class - MouseControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MouseControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/mouse-controls.ts\n        \n\n            \n                Description\n            \n            \n                Provides access to mouse events. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDown\n                            \n                            \n                                pos\n                            \n                            \n                                pressed\n                            \n                            \n                                released\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(container: HTMLCanvasElement)\n                    \n                \n                        \n                            \n                                Defined in lib/controls/mouse-controls.ts:15\n                            \n                        \n\n                \n                    \n                            Initialize MouseControls object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLCanvasElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The canvas element to use for relative mouse coordinates.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:11\n                            \n                        \n\n                \n                    \n                        Whether the mouse button is down. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:9\n                            \n                        \n\n                \n                    \n                        Position of the mouse. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pressed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:13\n                            \n                        \n\n                \n                    \n                        Whether the mouse button was just pressed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            released\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:15\n                            \n                        \n\n                \n                    \n                        Whether the mouse button was just released. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:42\n                \n            \n\n\n            \n                \n                    Update mouse values.\nShould be called in parent object's update function.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vec } from '../types'\n\n/** Provides access to mouse events. */\nexport class MouseControls {\n  private el: HTMLCanvasElement\n  private rect: ClientRect | DOMRect\n\n  /** Position of the mouse. */\n  pos: Vec\n  /** Whether the mouse button is down. */\n  isDown: boolean\n  /** Whether the mouse button was just pressed. */\n  pressed: boolean\n  /** Whether the mouse button was just released. */\n  released: boolean\n\n  /**\n   * Initialize MouseControls object.\n   *\n   * @param container The canvas element to use for relative mouse coordinates.\n   */\n  constructor(container: HTMLCanvasElement) {\n    this.el = container\n\n    this.pos = new Vec()\n    this.isDown = false\n    this.pressed = false\n    this.released = false\n    this.resize()\n\n    document.addEventListener('mousedown', e => this.down(e), false)\n    document.addEventListener('mouseup', _ => this.up(), false)\n    document.addEventListener('mousemove', e => this.move(e), false)\n    document.addEventListener('resize', _ => this.resize(), false)\n  }\n\n  /**\n   * Update mouse values.\n   *\n   * Should be called in parent object's update function.\n   */\n  update() {\n    this.released = false\n    this.pressed = false\n  }\n\n  private down(e: MouseEvent) {\n    this.isDown = true\n    this.pressed = true\n    this.mousePosFromEvent(e)\n  }\n\n  private up() {\n    this.isDown = false\n    this.released = true\n  }\n\n  private move(e: MouseEvent) {\n    this.mousePosFromEvent(e)\n  }\n\n  private resize() {\n    this.rect = this.el.getBoundingClientRect()\n  }\n\n  private mousePosFromEvent(e: MouseEvent) {\n    const { clientX, clientY } = e\n    const xr = this.el.width / this.el.clientWidth\n    const yr = this.el.height / this.el.clientHeight\n\n    this.pos.x = (clientX - this.rect.left) * xr\n    this.pos.y = (clientY - this.rect.top) * yr\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Object.html":{"url":"interfaces/Object.html","title":"interface - Object","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Object\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                An Object in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        gid\n                                \n                                \n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                                \n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gid\n                                    \n                                \n                                \n                                    \n                                        gid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The global ID of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The local Id of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X value of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y value of the object. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OneUp.html":{"url":"classes/OneUp.html","title":"class - OneUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OneUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/one-up.ts\n        \n\n            \n                Description\n            \n            \n                An effect where the provided TileSprite or Rect\n(defaults to rectangle if not provided) is moved away from its starting\nposition at the specified speed and duration.\nDefault behavior is moving up and fading out over 0.6 seconds.\nExample\n// Inside a 'gotPickup' or similar function\nconst coin = new TileSprite(texture, 48, 48)\ncoin.anims.add('spin', [5, 6, 7, 8].map(x => ({ x, y: 4 } as any)), .1)\ncoin.anims.play('spin')\n\nconst one = this.add(new OneUp(coin))\none.pos.copy(this.player.pos)\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(display?: TileSprite | Rect, speed: number, duration: number)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/one-up.ts:27\n                            \n                        \n\n                \n                    \n                            Initialize OneUp object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        TileSprite | Rect\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\nRectangle created if not provided.\n\n                                                        \n                                                \n                                                \n                                                        speed\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Speed (and x-axis direction by numeric sign) to move from\ninitial point.\n\n                                                        \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds to fade out.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/one-up.ts:53\n                \n            \n\n\n            \n                \n                    Update the state of the OneUp.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:27\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container } from '../container'\nimport { Vec, Rect } from '../types'\nimport { TileSprite, Utils } from '..'\n\n/**\n * An effect where the provided {@link TileSprite} or {@link Rect}\n * (defaults to rectangle if not provided) is moved away from its starting\n * position at the specified speed and duration.\n *\n * Default behavior is moving up and fading out over 0.6 seconds.\n *\n * ### Example\n * ```typescript\n// Inside a 'gotPickup' or similar function\nconst coin = new TileSprite(texture, 48, 48)\ncoin.anims.add('spin', [5, 6, 7, 8].map(x => ({ x, y: 4 } as any)), .1)\ncoin.anims.play('spin')\n\nconst one = this.add(new OneUp(coin))\none.pos.copy(this.player.pos)\n```\n */\nexport class OneUp extends Container {\n  private vel: Vec\n\n  private duration: number\n  private life: number\n\n  /**\n   * Initialize OneUp object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * Rectangle created if not provided.\n   * @param speed Speed (and x-axis direction by numeric sign) to move from\n   * initial point.\n   * @param duration Time in seconds to fade out.\n   */\n  constructor(display?: TileSprite | Rect, speed = 2, duration = .6) {\n    super()\n\n    this.vel = new Vec(0, -speed)\n    this.duration = duration\n    this.life = duration\n    this.children = [display || new Rect(40, 30, { fill: '#ff0' })]\n  }\n\n  /**\n   * Update the state of the OneUp.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  update(dt: number, t: number) {\n    super.update(dt, t)\n\n    this.alpha = Utils.math.clamp(this.life / this.duration)\n    this.pos.add(this.vel)\n\n    this.dead = ((this.life -= dt) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Particle.html":{"url":"classes/Particle.html","title":"class - Particle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Particle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle.ts\n        \n\n            \n                Description\n            \n            \n                A single particle whose lifecycle is controlled by a ParticleEmitter.\nCan be used alone if desired as a randomly moving and fading entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                            \n                                update\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(display?: Rect | TileSprite, options?: ParticleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/particle.ts:50\n                            \n                        \n\n                \n                    \n                            Initialize Particle object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        Rect | TileSprite\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParticleOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options affecting particle behaviors.\nSee ParticleOptions for default values if not passed in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle.ts:81\n                \n            \n\n\n            \n                \n                    Reset the particle with random values within established ranges. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle.ts:103\n                \n            \n\n\n            \n                \n                    Update state of the particle.\nExits early if the particle's time is up.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:27\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { math } from '../utils'\n\n/**\n * Options used to determine particle behaviors.\n *\n * Ranges use a {@link Vec} where the x value is the minimum, and y is the maximum.\n */\nexport interface ParticleOptions {\n  /**\n   * Range of values to use for horizontal velocity.\n   * @default -5 to 5\n   */\n  horizontalVelRange: Vec\n\n  /**\n   * Range of values to use for vertical velocity.\n   * @default -5 to -10\n   */\n  verticalVelRange: Vec\n\n  /**\n   * Range of values to use for particle life in seconds.\n   * @default .8 to 1.5\n   */\n  lifeSecRange: Vec\n\n  /**\n   * Default particle size to use if no display object passed in.\n   * @default 10 by 10\n   */\n  defaultSize: Vec\n\n  /**\n   * Fill style to use if no display object passed in.\n   * @default '#900'\n   */\n  fill: string\n}\n\n/**\n * A single particle whose lifecycle is controlled by a {@link ParticleEmitter}.\n *\n * Can be used alone if desired as a randomly moving and fading entity.\n */\nexport class Particle extends Container {\n  private options: ParticleOptions\n  private vel: Vec\n  private life: number\n\n  /**\n   * Initialize Particle object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See ParticleOptions for default values if not passed in.\n   */\n  constructor(display?: Rect | TileSprite, options?: ParticleOptions) {\n    super()\n\n    this.vel = new Vec()\n    this.alpha = this.life = 0\n\n    this.options = options || {\n      horizontalVelRange: new Vec(-5, 5),\n      verticalVelRange: new Vec(-5, -10),\n      lifeSecRange: new Vec(.8, 1.5),\n      defaultSize: new Vec(10, 10),\n      fill: '#900'\n    }\n\n    this.add(display || new Rect(\n      this.options.defaultSize.x,\n      this.options.defaultSize.y,\n      { fill: this.options.fill }\n    ))\n  }\n\n  /** Reset the particle with random values within established ranges. */\n  reset() {\n    const {\n      horizontalVelRange: h,\n      verticalVelRange: v,\n      lifeSecRange: l\n    } = this.options\n\n    this.vel.set(\n      math.randf(h.x, h.y), math.randf(v.x, v.y)\n    )\n\n    this.life = math.randf(l.x, l.y)\n    this.pos.set(0, 0)\n  }\n\n  /**\n   * Update state of the particle.\n   *\n   * Exits early if the particle's time is up.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.life \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticleEmitter.html":{"url":"classes/ParticleEmitter.html","title":"class - ParticleEmitter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticleEmitter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle-emitter.ts\n        \n\n            \n                Description\n            \n            \n                Container which manages a pool of Particle objects (20 by default)\nand emits them in random directions when the play method is called.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(numParticles: number, display?: TileSprite | Rect, options?: ParticleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/particle-emitter.ts:11\n                            \n                        \n\n                \n                    \n                            Initialize ParticleEmitter object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        numParticles\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of particles used.\n\n                                                        \n                                                \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        TileSprite | Rect\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParticleOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options affecting particle behaviors.\nSee ParticleOptions for default values if not passed in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(pos: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle-emitter.ts:43\n                \n            \n\n\n            \n                \n                    'Plays' the particle emitter effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position to use for anchoring particles.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:27\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { Particle, ParticleOptions } from './particle'\n\n/**\n * Container which manages a pool of {@link Particle} objects (20 by default)\n * and emits them in random directions when the `play` method is called.\n */\nexport class ParticleEmitter extends Container {\n  private particles: Particle[]\n  private lastPlay: number\n\n  /**\n   * Initialize ParticleEmitter object.\n   *\n   * @param numParticles The number of particles used.\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See ParticleOptions for default values if not passed in.\n   */\n  constructor(numParticles = 20, display?: TileSprite | Rect,\n              options?: ParticleOptions) {\n    super()\n\n    this.particles = []\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParticleOptions.html":{"url":"interfaces/ParticleOptions.html","title":"interface - ParticleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParticleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle.ts\n        \n\n            \n                Description\n            \n            \n                Options used to determine particle behaviors.\nRanges use a Vec where the x value is the minimum, and y is the maximum.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        defaultSize\n                                \n                                \n                                        fill\n                                \n                                \n                                        horizontalVelRange\n                                \n                                \n                                        lifeSecRange\n                                \n                                \n                                        verticalVelRange\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultSize\n                                    \n                                \n                                \n                                    \n                                        defaultSize:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 10 by 10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default particle size to use if no display object passed in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : '#900'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fill style to use if no display object passed in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalVelRange\n                                    \n                                \n                                \n                                    \n                                        horizontalVelRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : -5 to 5\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for horizontal velocity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lifeSecRange\n                                    \n                                \n                                \n                                    \n                                        lifeSecRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : .8 to 1.5\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for particle life in seconds.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalVelRange\n                                    \n                                \n                                \n                                    \n                                        verticalVelRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : -5 to -10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for vertical velocity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { math } from '../utils'\n\n/**\n * Options used to determine particle behaviors.\n *\n * Ranges use a {@link Vec} where the x value is the minimum, and y is the maximum.\n */\nexport interface ParticleOptions {\n  /**\n   * Range of values to use for horizontal velocity.\n   * @default -5 to 5\n   */\n  horizontalVelRange: Vec\n\n  /**\n   * Range of values to use for vertical velocity.\n   * @default -5 to -10\n   */\n  verticalVelRange: Vec\n\n  /**\n   * Range of values to use for particle life in seconds.\n   * @default .8 to 1.5\n   */\n  lifeSecRange: Vec\n\n  /**\n   * Default particle size to use if no display object passed in.\n   * @default 10 by 10\n   */\n  defaultSize: Vec\n\n  /**\n   * Fill style to use if no display object passed in.\n   * @default '#900'\n   */\n  fill: string\n}\n\n/**\n * A single particle whose lifecycle is controlled by a {@link ParticleEmitter}.\n *\n * Can be used alone if desired as a randomly moving and fading entity.\n */\nexport class Particle extends Container {\n  private options: ParticleOptions\n  private vel: Vec\n  private life: number\n\n  /**\n   * Initialize Particle object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See ParticleOptions for default values if not passed in.\n   */\n  constructor(display?: Rect | TileSprite, options?: ParticleOptions) {\n    super()\n\n    this.vel = new Vec()\n    this.alpha = this.life = 0\n\n    this.options = options || {\n      horizontalVelRange: new Vec(-5, 5),\n      verticalVelRange: new Vec(-5, -10),\n      lifeSecRange: new Vec(.8, 1.5),\n      defaultSize: new Vec(10, 10),\n      fill: '#900'\n    }\n\n    this.add(display || new Rect(\n      this.options.defaultSize.x,\n      this.options.defaultSize.y,\n      { fill: this.options.fill }\n    ))\n  }\n\n  /** Reset the particle with random values within established ranges. */\n  reset() {\n    const {\n      horizontalVelRange: h,\n      verticalVelRange: v,\n      lifeSecRange: l\n    } = this.options\n\n    this.vel.set(\n      math.randf(h.x, h.y), math.randf(v.x, v.y)\n    )\n\n    this.life = math.randf(l.x, l.y)\n    this.pos.set(0, 0)\n  }\n\n  /**\n   * Update state of the particle.\n   *\n   * Exits early if the particle's time is up.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.life \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Point.html":{"url":"interfaces/Point.html","title":"interface - Point","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/vec.ts\n        \n\n            \n                Description\n            \n            \n                Interface with x and y coordinates. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X axis coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y axis coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n  /** X axis coordinate */\n  x: number\n  /** Y axis coordinate */\n  y: number\n}\n\n/**\n * Simple 2D vector that provides vector math helpers.\n *\n * Most methods are chainable.\n *\n * ```typescript\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n```\n */\nexport class Vec implements Point {\n  /** X coordinate value. */\n  x: number\n  /** Y coordinate value. */\n  y: number\n\n  /**\n   * Creates a new Vec from the provided Vec.\n   *\n   * @param v Vec to copy into new Vec.\n   */\n  static from(v: Vec) {\n    return new Vec().copy(v)\n  }\n\n  /**\n   * Initialize Vec object.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the coordinates of the Vec.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  set(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Copies the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to copy values from.\n   */\n  copy(vec: Vec) {\n    const { x, y } = vec\n    return this.set(x, y)\n  }\n\n  /**\n   * Creates a cloned copy of the Vec.\n   */\n  clone() {\n    return Vec.from(this)\n  }\n\n  /**\n   * Adds the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to add values from.\n   */\n  add(vec: Vec) {\n    const { x, y } = vec\n\n    this.x += x\n    this.y += y\n\n    return this\n  }\n\n  /**\n   * Subtracts the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to subtract values from.\n   */\n  subtract(vec: Vec) {\n    const { x, y } = vec\n\n    this.x -= x\n    this.y -= y\n\n    return this\n  }\n\n  /**\n   * Multiplies the x and y values by the provided value.\n   *\n   * @param s The scalar value to multiply.\n   */\n  multiply(s: number) {\n    this.x *= s\n    this.y *= s\n\n    return this\n  }\n\n  /**\n   * Divides the x and y values by the provided value.\n   *\n   * @param s The scalar value to divide by.\n   */\n  divide(s: number) {\n    this.x /= s\n    this.y /= s\n\n    return this\n  }\n\n  /** Gets the magnitude of the Vec. */\n  mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /** Gets the normal of the Vec. */\n  normalize() {\n    const mag = this.mag()\n\n    if (mag > 0) {\n      this.divide(mag)\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the dot product of two Vecs.\n   *\n   * @param vec The Vec to get dot product from.\n   */\n  dot(vec: Vec) {\n    const{ x, y } = vec\n\n    return this.x * x + this.y * y\n  }\n\n  /**\n   * Custom string representation.\n   *\n   * @returns String formatted as \"(x, y)\"\n   */\n  toString() {\n    return `(${this.x}, ${this.y})`\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Property.html":{"url":"interfaces/Property.html","title":"interface - Property","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Property\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Property object in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the property. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the property. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value of the property. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rect.html":{"url":"classes/Rect.html","title":"class - Rect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/rect.ts\n        \n\n            \n                Description\n            \n            \n                Creates a rectangle for rendering.\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                pos\n                            \n                            \n                                style\n                            \n                            \n                                width\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, style: RectStyleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/types/rect.ts:25\n                            \n                        \n\n                \n                    \n                            Initialize Rect object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height in pixels.\n\n                                                        \n                                                \n                                                \n                                                        style\n                                                  \n                                                        \n                                                                        RectStyleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Style options.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:18\n                            \n                        \n\n                \n                    \n                        Height of the rectangle in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:23\n                            \n                        \n\n                \n                    \n                        Position of the rectangle. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RectStyleOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:25\n                            \n                        \n\n                \n                    \n                        Style options for the rectangle. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:20\n                            \n                        \n\n                \n                    \n                        Width of the rectangle in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/rect.ts:49\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vec, Entity } from '.'\n\n/** Style options for a Rect. */\nexport interface RectStyleOptions {\n  /** The fill color. */\n  fill: string\n}\n\n/**\n * Creates a rectangle for rendering.\n *\n * ```typescript\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n```\n */\nexport class Rect extends Entity {\n  /** Height of the rectangle in pixels. */\n  height: number\n  /** Width of the rectangle in pixels. */\n  width: number\n\n  /** Position of the rectangle. */\n  pos: Vec\n  /** Style options for the rectangle. */\n  style: RectStyleOptions\n\n  /**\n   * Initialize Rect object.\n   *\n   * @param width Width in pixels.\n   * @param height Height in pixels.\n   * @param style Style options.\n   */\n  constructor(width: number, height: number,\n              style: RectStyleOptions = { fill: '#333' }) {\n    super()\n\n    this.height = height\n    this.width = width\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RectStyleOptions.html":{"url":"interfaces/RectStyleOptions.html","title":"interface - RectStyleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RectStyleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/rect.ts\n        \n\n            \n                Description\n            \n            \n                Style options for a Rect. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fill\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The fill color. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Vec, Entity } from '.'\n\n/** Style options for a Rect. */\nexport interface RectStyleOptions {\n  /** The fill color. */\n  fill: string\n}\n\n/**\n * Creates a rectangle for rendering.\n *\n * ```typescript\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n```\n */\nexport class Rect extends Entity {\n  /** Height of the rectangle in pixels. */\n  height: number\n  /** Width of the rectangle in pixels. */\n  width: number\n\n  /** Position of the rectangle. */\n  pos: Vec\n  /** Style options for the rectangle. */\n  style: RectStyleOptions\n\n  /**\n   * Initialize Rect object.\n   *\n   * @param width Width in pixels.\n   * @param height Height in pixels.\n   * @param style Style options.\n   */\n  constructor(width: number, height: number,\n              style: RectStyleOptions = { fill: '#333' }) {\n    super()\n\n    this.height = height\n    this.width = width\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/renderer.ts\n        \n\n            \n                Description\n            \n            \n                Abstract class to extend for specific renderers. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canvasElement\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/renderer.ts:18\n                            \n                        \n\n                \n                    \n                            Abstract class, so not to be called directly. \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:11\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:13\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:9\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:7\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/renderer.ts:52\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/renderer.ts:44\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        canvasElement\n                    \n                \n\n                \n                    \n                        getcanvasElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/renderer/renderer.ts:16\n                                \n                            \n                    \n                        \n                                Get the HTMLCanvasElement used for rendering. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Container } from '..'\nimport { Sprite } from '../types'\n\n/** Abstract class to extend for specific renderers. */\nexport abstract class Renderer {\n  /** Width of the canvas in pixels. */\n  protected width: number\n  /** Height of the canvas in pixels. */\n  protected height: number\n  /** Canvas element for rendering. */\n  protected canvas: HTMLCanvasElement\n  /** Containing element for the canvas. */\n  protected container: HTMLElement\n\n  /** Get the HTMLCanvasElement used for rendering. */\n  get canvasElement() {\n    return this.canvas\n  }\n\n  /** Abstract class, so not to be called directly. */\n  constructor(width: number, height: number, container: HTMLElement) {\n    this.width = width\n    this.height = height\n\n    this.canvas = document.createElement('canvas')\n    this.canvas.id = 'kilo-canvas'\n    this.canvas.width = width\n    this.canvas.height = height\n\n    const div = document.createElement('div')\n    div.id = 'kilo-container'\n    div.style.position = 'relative'\n    div.style.height = this.height + 'px'\n    div.style.width = this.width + 'px'\n    div.style.margin = '0 auto'\n\n    div.appendChild(this.canvas)\n    container.appendChild(div)\n\n    this.container = div\n  }\n\n  /** To be defined by concrete implementations. */\n  abstract render(container: Container, clear?: boolean): void\n\n  /**\n   * Determines if the provided entity is visible to the camera.\n   *\n   * @param entity Sprite to check for visibility.\n   * @param camera Camera to use when determining visibility.\n   */\n  protected isInCamera(entity: Sprite, camera: any) {\n    return entity.pos.x + entity.width >= -camera.pos.x &&\n      entity.pos.x = -camera.pos.y &&\n      entity.pos.y \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resolution.html":{"url":"interfaces/Resolution.html","title":"interface - Resolution","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resolution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/resolvers/wall-slide.ts\n        \n\n            \n                Description\n            \n            \n                The offsets to apply to resolve collisions, as well as the hit directions. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hits\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                    \n                                \n                                \n                                    \n                                        hits:         Hits\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hits\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Directions where collisions were detected. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correction needed in the x axis. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correction needed in the y axis. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Sprite } from '../types'\nimport { TileMap, Utils, TileSprite } from '..'\n\n/** Function used to provide collision resolver with walkable tile status. */\nexport type WalkableTest = (sprite: TileSprite, index: number) => boolean\n\n/** Directions where collisions are detected. */\nexport interface Hits {\n  /** Whether or not a collision was detected from above.  */\n  up: boolean\n  /** Whether or not a collision was detected from below.  */\n  down: boolean\n  /** Whether or not a collision was detected from the left.  */\n  left: boolean\n  /** Whether or not a collision was detected from the right.  */\n  right: boolean\n}\n\n/** The offsets to apply to resolve collisions, as well as the hit directions. */\nexport interface Resolution {\n  /** Correction needed in the x axis. */\n  x: number\n  /** Correction needed in the y axis. */\n  y: number\n  /** Directions where collisions were detected. */\n  hits: Hits\n}\n\n/**\n * Collision resolver that only prevents invalid movements.\n *\n * @param ent The Sprite entity to check.\n * @param map The TileMap to use for collision.\n * @param x Desired movement in the X axis.\n * @param y Desired movement in the Y axis.\n * @param walkableTest Callback function to test for walkable tiles.\n */\nexport function wallSlide(ent: Sprite, map: TileMap, x = 0, y = 0,\n                          walkableTest?: WalkableTest): Resolution {\n  let tiles: TileSprite[]\n  let tileEdge: number\n\n  const bounds = Utils.sprite.bounds(ent)\n  const hits = { up: false, down: false, left: false, right: false }\n\n  let xo = x\n  let yo = y\n\n  if (y !== 0) {\n    tiles = map.tilesAtCorners(bounds, 0, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(bl && br)) {\n      hits.down = true\n      tileEdge = tiles[2].pos.y - 1\n      yo = tileEdge - (bounds.y + bounds.height)\n    }\n  }\n\n  if (x !== 0) {\n    tiles = map.tilesAtCorners(bounds, xo, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(tr && br)) {\n      hits.right = true\n      tileEdge = tiles[1].pos.x - 1\n      xo = tileEdge - (bounds.x + bounds.width)\n    }\n  }\n\n  return { x: xo, y: yo, hits }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scene.html":{"url":"classes/Scene.html","title":"class - Scene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/scene.ts\n        \n\n            \n                Description\n            \n            \n                A unique Container with a reference to the game and controls,\nand a callback for the completion of the scene.\nTo be implemented as your unique scenes.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                controls\n                            \n                            \n                                game\n                            \n                            \n                                onSceneComplete\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(game: Game, onSceneComplete: Function, controls?: Controls)\n                    \n                \n                        \n                            \n                                Defined in lib/scene.ts:16\n                            \n                        \n\n                \n                    \n                            Initialize Scene object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        game\n                                                  \n                                                        \n                                                                        Game\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to the game.\n\n                                                        \n                                                \n                                                \n                                                        onSceneComplete\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Function to call on scene completion.\n\n                                                        \n                                                \n                                                \n                                                        controls\n                                                  \n                                                        \n                                                                        Controls\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object with possible controls.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            controls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Controls\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:14\n                            \n                        \n\n                \n                    \n                        The game controls to be used. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            game\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Game\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:12\n                            \n                        \n\n                \n                    \n                        The game object. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSceneComplete\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:16\n                            \n                        \n\n                \n                    \n                        Function to call when the scene is completed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:27\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, Game } from '.'\nimport { Controls } from './controls/controls'\n\n/**\n * A unique {@link Container} with a reference to the game and controls,\n * and a callback for the completion of the scene.\n *\n * To be implemented as your unique scenes.\n */\nexport abstract class Scene extends Container {\n  /** The game object. */\n  game: Game\n  /** The game controls to be used. */\n  controls: Controls\n  /** Function to call when the scene is completed. */\n  onSceneComplete: Function\n\n  /**\n   * Initialize Scene object.\n   *\n   * @param game Reference to the game.\n   * @param onSceneComplete Function to call on scene completion.\n   * @param controls Object with possible controls.\n   */\n  constructor(game: Game, onSceneComplete: Function, controls?: Controls) {\n    super()\n\n    this.game = game\n    this.controls = controls\n\n    this.onSceneComplete = onSceneComplete\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Scripts.html":{"url":"interfaces/Scripts.html","title":"interface - Scripts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Scripts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/shader-program.ts\n        \n\n            \n                Description\n            \n            \n                Interface for WebGL shader script sources. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fragment\n                                \n                                \n                                        vertex\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fragment\n                                    \n                                \n                                \n                                    \n                                        fragment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fragment shader source. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vertex\n                                    \n                                \n                                \n                                    \n                                        vertex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vertex shader source. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Scripts {\n  /** Vertex shader source. */\n  vertex: string\n  /** Fragment shader source. */\n  fragment: string\n}\n\n/** Thin wrapper around WebGLProgram, and WebGLShader to simplify usage. */\nexport class ShaderProgram {\n  private gl: WebGLRenderingContext\n  private _program: WebGLProgram\n  private attributes: { [name: string]: number }\n  private uniforms: { [name: string]: WebGLUniformLocation }\n  private name: string\n\n  /** Gets the compiled WebGLProgram. */\n  get program() {\n    return this._program\n  }\n\n  /**\n   * Initialize ShaderProgram object.\n   *\n   * @param gl WebGLRenderingContext to use for the shaders and program.\n   * @param scripts Sources for both vertex and fragment shaders to be used.\n   * @param name The name of the program (useful in debugging).\n   */\n  constructor(gl: WebGLRenderingContext, scripts: Scripts, name = 'default') {\n    this.gl = gl\n    this.name = name\n    this.attributes = {}\n    this.uniforms = {}\n\n    this.load(scripts.vertex, scripts.fragment)\n  }\n\n  /**\n   * Gets the attribute location for the provided name.\n   *\n   * @param name Name of the attribute to locate.\n   *\n   * @throws Error if no attribute with the provided name.\n   */\n  getAttribLocation(name: string) {\n    if (this.attributes[name] === undefined) {\n      throw new Error(`Unknown attribute ${name} in shader program ${this.name}.`)\n    }\n\n    return this.attributes[name]\n  }\n\n  /**\n   * Gets the uniform location for the provided name.\n   *\n   * @param name Name of the uniform to locate.\n   *\n   * @throws Error if no uniform with the provided name.\n   */\n  getUniformLocation(name: string) {\n    if (this.uniforms[name] === undefined) {\n      throw new Error(`Unknown uniform ${name} in shader program ${this.name}.`)\n    }\n\n    return this.uniforms[name]\n  }\n\n  /**\n   * Loads the provided sources into a compiled program.\n   *\n   * @param vertexSource Source for the vertex shader.\n   * @param fragmentSource Source for the fragment shader.\n   */\n  protected load(vertexSource: string, fragmentSource: string) {\n    const vertexShader =\n      this.loadShader(vertexSource, this.gl.VERTEX_SHADER)\n    const fragmentShader =\n      this.loadShader(fragmentSource, this.gl.FRAGMENT_SHADER)\n\n    this.createProgram(vertexShader, fragmentShader)\n    this.initWebGl()\n  }\n\n  private initWebGl() {\n    const { gl } = this\n\n    gl.clearColor(0, 0, 0, 1)\n\n    gl.enable(gl.BLEND)\n    gl.blendEquation(gl.FUNC_ADD)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.DEPTH_TEST)\n  }\n\n  private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const { gl } = this\n    this._program = gl.createProgram()\n\n    gl.attachShader(this.program, vertexShader)\n    gl.attachShader(this.program, fragmentShader)\n    gl.linkProgram(this.program)\n\n    const success = gl.getProgramParameter(this.program, gl.LINK_STATUS)\n    if (!success) {\n      const message = gl.getProgramInfoLog(this.program)\n      gl.deleteProgram(this.program)\n\n      throw new Error(message)\n    }\n\n    this.findAttributes()\n    this.findUniforms()\n  }\n\n  private loadShader(source: string, shaderType: number): WebGLShader {\n    const { gl } = this\n    const shader = gl.createShader(shaderType)\n\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n      const message = gl.getShaderInfoLog(shader)\n      gl.deleteShader(shader)\n\n      throw new Error(message)\n    }\n\n    return shader\n  }\n\n  private findAttributes() {\n    const { gl, program } = this\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShaderProgram.html":{"url":"classes/ShaderProgram.html","title":"class - ShaderProgram","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShaderProgram\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/shader-program.ts\n        \n\n            \n                Description\n            \n            \n                Thin wrapper around WebGLProgram, and WebGLShader to simplify usage. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAttribLocation\n                            \n                            \n                                getUniformLocation\n                            \n                            \n                                    Protected\n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    program\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gl: WebGLRenderingContext, scripts: Scripts, name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl/shader-program.ts:20\n                            \n                        \n\n                \n                    \n                            Initialize ShaderProgram object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gl\n                                                  \n                                                        \n                                                                    WebGLRenderingContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                WebGLRenderingContext to use for the shaders and program.\n\n                                                        \n                                                \n                                                \n                                                        scripts\n                                                  \n                                                        \n                                                                        Scripts\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sources for both vertex and fragment shaders to be used.\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the program (useful in debugging).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAttribLocation\n                        \n                        \n                    \n                \n            \n            \n                \ngetAttribLocation(name: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:45\n                \n            \n\n\n            \n                \n                    Gets the attribute location for the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the attribute to locate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUniformLocation\n                        \n                        \n                    \n                \n            \n            \n                \ngetUniformLocation(name: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:60\n                \n            \n\n\n            \n                \n                    Gets the uniform location for the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the uniform to locate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(vertexSource: string, fragmentSource: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:74\n                \n            \n\n\n            \n                \n                    Loads the provided sources into a compiled program.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexSource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Source for the vertex shader.\n\n                                    \n                                \n                                \n                                    fragmentSource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Source for the fragment shader.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        program\n                    \n                \n\n                \n                    \n                        getprogram()\n                    \n                \n                            \n                                \n                                    Defined in lib/renderer/webgl/shader-program.ts:18\n                                \n                            \n                    \n                        \n                                Gets the compiled WebGLProgram. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export interface Scripts {\n  /** Vertex shader source. */\n  vertex: string\n  /** Fragment shader source. */\n  fragment: string\n}\n\n/** Thin wrapper around WebGLProgram, and WebGLShader to simplify usage. */\nexport class ShaderProgram {\n  private gl: WebGLRenderingContext\n  private _program: WebGLProgram\n  private attributes: { [name: string]: number }\n  private uniforms: { [name: string]: WebGLUniformLocation }\n  private name: string\n\n  /** Gets the compiled WebGLProgram. */\n  get program() {\n    return this._program\n  }\n\n  /**\n   * Initialize ShaderProgram object.\n   *\n   * @param gl WebGLRenderingContext to use for the shaders and program.\n   * @param scripts Sources for both vertex and fragment shaders to be used.\n   * @param name The name of the program (useful in debugging).\n   */\n  constructor(gl: WebGLRenderingContext, scripts: Scripts, name = 'default') {\n    this.gl = gl\n    this.name = name\n    this.attributes = {}\n    this.uniforms = {}\n\n    this.load(scripts.vertex, scripts.fragment)\n  }\n\n  /**\n   * Gets the attribute location for the provided name.\n   *\n   * @param name Name of the attribute to locate.\n   *\n   * @throws Error if no attribute with the provided name.\n   */\n  getAttribLocation(name: string) {\n    if (this.attributes[name] === undefined) {\n      throw new Error(`Unknown attribute ${name} in shader program ${this.name}.`)\n    }\n\n    return this.attributes[name]\n  }\n\n  /**\n   * Gets the uniform location for the provided name.\n   *\n   * @param name Name of the uniform to locate.\n   *\n   * @throws Error if no uniform with the provided name.\n   */\n  getUniformLocation(name: string) {\n    if (this.uniforms[name] === undefined) {\n      throw new Error(`Unknown uniform ${name} in shader program ${this.name}.`)\n    }\n\n    return this.uniforms[name]\n  }\n\n  /**\n   * Loads the provided sources into a compiled program.\n   *\n   * @param vertexSource Source for the vertex shader.\n   * @param fragmentSource Source for the fragment shader.\n   */\n  protected load(vertexSource: string, fragmentSource: string) {\n    const vertexShader =\n      this.loadShader(vertexSource, this.gl.VERTEX_SHADER)\n    const fragmentShader =\n      this.loadShader(fragmentSource, this.gl.FRAGMENT_SHADER)\n\n    this.createProgram(vertexShader, fragmentShader)\n    this.initWebGl()\n  }\n\n  private initWebGl() {\n    const { gl } = this\n\n    gl.clearColor(0, 0, 0, 1)\n\n    gl.enable(gl.BLEND)\n    gl.blendEquation(gl.FUNC_ADD)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.DEPTH_TEST)\n  }\n\n  private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const { gl } = this\n    this._program = gl.createProgram()\n\n    gl.attachShader(this.program, vertexShader)\n    gl.attachShader(this.program, fragmentShader)\n    gl.linkProgram(this.program)\n\n    const success = gl.getProgramParameter(this.program, gl.LINK_STATUS)\n    if (!success) {\n      const message = gl.getProgramInfoLog(this.program)\n      gl.deleteProgram(this.program)\n\n      throw new Error(message)\n    }\n\n    this.findAttributes()\n    this.findUniforms()\n  }\n\n  private loadShader(source: string, shaderType: number): WebGLShader {\n    const { gl } = this\n    const shader = gl.createShader(shaderType)\n\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n      const message = gl.getShaderInfoLog(shader)\n      gl.deleteShader(shader)\n\n      throw new Error(message)\n    }\n\n    return shader\n  }\n\n  private findAttributes() {\n    const { gl, program } = this\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sound.html":{"url":"classes/Sound.html","title":"class - Sound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound.ts\n        \n\n            \n                Description\n            \n            \n                Provides sounds for your game!\nExample\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                playing\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    volume\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string, options: SoundOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound.ts:37\n                            \n                        \n\n                \n                    \n                            Initialize Sound object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Source for the sound.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SoundOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initial options for the sound.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            playing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not the sound is currently playing. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(overrides?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound.ts:70\n                \n            \n\n\n            \n                \n                    Play the sound from the beginning.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overrides\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Overriding options for the sound.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound.ts:81\n                \n            \n\n\n            \n                \n                    Stop the sound from playing. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        volume\n                    \n                \n\n                \n                    \n                        getvolume()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/sound.ts:30\n                                \n                            \n                    \n                        \n                                Gets the current volume setting. \n\n\n                        \n                    \n\n                \n                    \n                        setvolume(volume)\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/sound.ts:35\n                                \n                            \n                    \n                        \n                                Sets the volume of the sound. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            volume\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Assets } from '../assets'\n\n/** Options for a Sound object. */\nexport interface SoundOptions {\n  /** Volume of the sound (from 0 to 1). */\n  volume: number,\n  /** Whether or not the sound loops. */\n  loop: boolean\n}\n\n/**\n * Provides sounds for your game!\n *\n * ### Example\n * ```typescript\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n```\n */\nexport class Sound {\n  /** Whether or not the sound is currently playing. */\n  playing: boolean\n\n  private options: SoundOptions\n  private audio: HTMLAudioElement\n\n  /** Gets the current volume setting. */\n  get volume() {\n    return this.audio.volume\n  }\n\n  /** Sets the volume of the sound. */\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume\n  }\n\n  /**\n   * Initialize Sound object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   */\n  constructor(src: string, options: SoundOptions = { volume: 1, loop: false }) {\n    this.playing = false\n    this.options = options\n\n    const assets = new Assets()\n    const audio = assets.sound(src)\n\n    audio.loop = options.loop\n\n    audio.addEventListener('error', () => {\n      throw Error(`Error loading audio: ${src}`)\n    }, false)\n\n    audio.addEventListener('ended', () => {\n      this.playing = false\n    }, false)\n\n    this.audio = audio\n  }\n\n  /**\n   * Play the sound from the beginning.\n   *\n   * @param overrides Overriding options for the sound.\n   */\n  play(overrides?: SoundOptions) {\n    const opts = Object.assign({ time: 0 }, this.options, overrides)\n\n    this.audio.volume = opts.volume\n    this.audio.currentTime = opts.time\n\n    this.audio.play()\n    this.playing = true\n  }\n\n  /** Stop the sound from playing. */\n  stop() {\n    this.audio.pause()\n    this.playing = false\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SoundGroup.html":{"url":"classes/SoundGroup.html","title":"class - SoundGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SoundGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound-group.ts\n        \n\n            \n                Description\n            \n            \n                Plays a random sound from an array of sounds.\nExample\nconst ding = new SoundGroup([\n  new Sound('assets/sounds/ding1.ogg'),\n  new Sound('assets/sounds/ding2.ogg'),\n  new Sound('assets/sounds/ding3.ogg'),\n  new Sound('assets/sounds/ding4.ogg')\n])\n\n// When one of the sounds should play.\nding.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sounds: Sound[])\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound-group.ts:21\n                            \n                        \n\n                \n                    \n                            Initialize SoundGroup object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sounds\n                                                  \n                                                        \n                                                                        Sound[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Array of sounds to select from on play.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(opts?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-group.ts:37\n                \n            \n\n\n            \n                \n                    Play a random sound from the group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Overriding options for the sound.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-group.ts:42\n                \n            \n\n\n            \n                \n                    Stop all sounds in the group from playing. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sound, SoundOptions } from './sound'\nimport { math } from '../utils'\n\n/**\n * Plays a random sound from an array of sounds.\n *\n * ### Example\n * ```typescript\nconst ding = new SoundGroup([\n  new Sound('assets/sounds/ding1.ogg'),\n  new Sound('assets/sounds/ding2.ogg'),\n  new Sound('assets/sounds/ding3.ogg'),\n  new Sound('assets/sounds/ding4.ogg')\n])\n\n// When one of the sounds should play.\nding.play()\n```\n */\nexport class SoundGroup {\n  private sounds: Sound[]\n\n  /**\n   * Initialize SoundGroup object.\n   *\n   * @param sounds Array of sounds to select from on play.\n   */\n  constructor(sounds: Sound[]) {\n    this.sounds = sounds\n  }\n\n  /**\n   * Play a random sound from the group.\n   *\n   * @param opts Overriding options for the sound.\n   */\n  play(opts?: SoundOptions) {\n    math.randOneFrom(this.sounds).play(opts)\n  }\n\n  /** Stop all sounds in the group from playing. */\n  stop() {\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoundOptions.html":{"url":"interfaces/SoundOptions.html","title":"interface - SoundOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoundOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound.ts\n        \n\n            \n                Description\n            \n            \n                Options for a Sound object. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        loop\n                                \n                                \n                                        volume\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        loop\n                                    \n                                \n                                \n                                    \n                                        loop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the sound loops. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Volume of the sound (from 0 to 1). \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Assets } from '../assets'\n\n/** Options for a Sound object. */\nexport interface SoundOptions {\n  /** Volume of the sound (from 0 to 1). */\n  volume: number,\n  /** Whether or not the sound loops. */\n  loop: boolean\n}\n\n/**\n * Provides sounds for your game!\n *\n * ### Example\n * ```typescript\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n```\n */\nexport class Sound {\n  /** Whether or not the sound is currently playing. */\n  playing: boolean\n\n  private options: SoundOptions\n  private audio: HTMLAudioElement\n\n  /** Gets the current volume setting. */\n  get volume() {\n    return this.audio.volume\n  }\n\n  /** Sets the volume of the sound. */\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume\n  }\n\n  /**\n   * Initialize Sound object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   */\n  constructor(src: string, options: SoundOptions = { volume: 1, loop: false }) {\n    this.playing = false\n    this.options = options\n\n    const assets = new Assets()\n    const audio = assets.sound(src)\n\n    audio.loop = options.loop\n\n    audio.addEventListener('error', () => {\n      throw Error(`Error loading audio: ${src}`)\n    }, false)\n\n    audio.addEventListener('ended', () => {\n      this.playing = false\n    }, false)\n\n    this.audio = audio\n  }\n\n  /**\n   * Play the sound from the beginning.\n   *\n   * @param overrides Overriding options for the sound.\n   */\n  play(overrides?: SoundOptions) {\n    const opts = Object.assign({ time: 0 }, this.options, overrides)\n\n    this.audio.volume = opts.volume\n    this.audio.currentTime = opts.time\n\n    this.audio.play()\n    this.playing = true\n  }\n\n  /** Stop the sound from playing. */\n  stop() {\n    this.audio.pause()\n    this.playing = false\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SoundPool.html":{"url":"classes/SoundPool.html","title":"class - SoundPool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SoundPool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound-pool.ts\n        \n\n            \n                Description\n            \n            \n                A pool of sound objects to allow playing multiples of the same sound.\nExample\nconst dings = new SoundPool('assets/sounds/ding.ogg')\n\n// When the sound should play (and may already be playing).\ndings.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string, poolSize: number, options: SoundOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound-pool.ts:16\n                            \n                        \n\n                \n                    \n                            Initialize SoundPool object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Source for the sound.\n\n                                                        \n                                                \n                                                \n                                                        poolSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Number of sound instances in the pool.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SoundOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initial options for the sound.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(options?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-pool.ts:40\n                \n            \n\n\n            \n                \n                    Play the next sound in the pool.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-pool.ts:47\n                \n            \n\n\n            \n                \n                    Stop all sounds in the pool. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sound, SoundOptions } from './sound'\n\n/**\n * A pool of sound objects to allow playing multiples of the same sound.\n *\n * ### Example\n * ```typescript\nconst dings = new SoundPool('assets/sounds/ding.ogg')\n\n// When the sound should play (and may already be playing).\ndings.play()\n```\n */\nexport class SoundPool {\n  private count: number\n  private sounds: Sound[]\n\n  /**\n   * Initialize SoundPool object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   * @param poolSize Number of sound instances in the pool.\n   */\n  constructor(src: string, poolSize = 3,\n              options: SoundOptions = { volume: 1, loop: false }) {\n    this.count = 0\n    this.sounds = []\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/state.ts\n        \n\n            \n                Description\n            \n            \n                Tracks state as provided, and provides information on status of the current\nstate. Also allows transitioning to a prior state from a temporary state\n(e.g. a pause dialog back to game play).\nExample\nenum GameState {\n  Ready,\n  Playing,\n  Paused,\n  GameOver\n}\n\n// In the constructor of whatever needs state.\nthis.state = new State(GameState.Ready)\n\n// In the update of the scene/object/whatever.\nthis.state.update(dt)\n\nswitch (this.state) {\n  case GameState.Ready:\n    if (this.state.first) {\n      console.log('First frame of this state')\n    }\n\n    // Go to Playing state after 1.5 seconds\n    if (this.state.time > 1.5) {\n      this.state.set(GameState.Playing)\n    }\n  break\n\n  default:\n    console.log(this.state.get())\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first\n                            \n                            \n                                time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                get\n                            \n                            \n                                is\n                            \n                            \n                                isIn\n                            \n                            \n                                set\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: EnumType)\n                    \n                \n                        \n                            \n                                Defined in lib/state.ts:47\n                            \n                        \n\n                \n                    \n                            Initialize State object.\nExample\nconst state = new State(MyEnum.StateOne)\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                    EnumType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The initial state to set.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            first\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:42\n                            \n                        \n\n                \n                    \n                        Whether this is the first frame of the current state. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:40\n                            \n                        \n\n                \n                    \n                        Number of seconds in the current state. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            back\n                        \n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:64\n                \n            \n\n\n            \n                \n                    Return to the previous state (if there is one). \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:89\n                \n            \n\n\n            \n                \n                    Get the current state. \n\n\n                    \n                        Returns :     EnumType\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            is\n                        \n                        \n                    \n                \n            \n            \n                \nis(state: EnumType)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:111\n                \n            \n\n\n            \n                \n                    Whether the current state is the one provided.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            EnumType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State to check for.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isIn\n                        \n                        \n                    \n                \n            \n            \n                \nisIn(...states: EnumType[])\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:119\n                \n            \n\n\n            \n                \n                    Whether the current state is one of the provided states.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    states\n                                    \n                                            EnumType[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of possible states.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(state: EnumType)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:79\n                \n            \n\n\n            \n                \n                    Set the current state and store the previous state to allow going back.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            EnumType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state to change to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:100\n                \n            \n\n\n            \n                \n                    Update the state.\nShould be called in parent object's update function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class State {\n  /** Number of seconds in the current state. */\n  time: number\n  /** Whether this is the first frame of the current state. */\n  first: boolean\n\n  private last: EnumType\n  private lastTime: number\n  private state: EnumType\n  private justSetState: boolean\n\n  /**\n   * Initialize State object.\n   *\n   * ### Example\n   * ```typescript\nconst state = new State(MyEnum.StateOne)\n```\n   *\n   * @param state The initial state to set.\n   */\n  constructor(state: EnumType) {\n    this.set(state)\n  }\n\n  /** Return to the previous state (if there is one). */\n  back() {\n    if (this.last === undefined) return\n\n    this.state = this.last\n    this.last = null\n\n    this.time = this.lastTime\n    this.justSetState = false\n  }\n\n  /**\n   * Set the current state and store the previous state to allow going back.\n   *\n   * @param state The new state to change to.\n   */\n  set(state: EnumType) {\n    this.last = this.state\n    this.lastTime = this.time || 0\n\n    this.state = state\n    this.time = 0\n    this.justSetState = true\n  }\n\n  /** Get the current state. */\n  get() {\n    return this.state\n  }\n\n  /**\n   * Update the state.\n   *\n   * Should be called in parent object's update function.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    this.first = this.justSetState\n    this.time += this.first ? 0 : dt\n    this.justSetState = false\n  }\n\n  /**\n   * Whether the current state is the one provided.\n   *\n   * @param state State to check for.\n   */\n  is(state: EnumType) {\n    return this.state === state\n  }\n\n  /**\n   * Whether the current state is one of the provided states.\n   * @param states Array of possible states.\n   */\n  isIn(...states: EnumType[]) {\n    let found = false\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Text.html":{"url":"classes/Text.html","title":"class - Text","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Text\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/text.ts\n        \n\n            \n                Description\n            \n            \n                Displays text on the canvas.\nWhen using WebGL for rendering a second canvas is used for text.\nExample\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                style\n                            \n                            \n                                text\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                remove\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(text: string, style: TextOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/types/text.ts:28\n                            \n                        \n\n                \n                    \n                            Initialize Text object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The text to display.\n\n                                                        \n                                                \n                                                \n                                                        style\n                                                  \n                                                        \n                                                                        TextOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The styles used for the text.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TextOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/text.ts:28\n                            \n                        \n\n                \n                    \n                        The styles used for the text. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/text.ts:26\n                            \n                        \n\n                \n                    \n                        The text to display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/text.ts:49\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:74\n\n                \n            \n\n\n            \n                \n                    Map a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove and return a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity } from '.'\n\n/** Options for text display. */\nexport interface TextOptions {\n  /** The font to use. */\n  font: string,\n  /** The text fill color. */\n  fill: string,\n  /** Alignment for the text. */\n  align?: CanvasTextAlign\n}\n\n/**\n * Displays text on the canvas.\n *\n * When using WebGL for rendering a second canvas is used for text.\n *\n * ### Example\n * ```typescript\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n```\n */\nexport class Text extends Entity {\n  /** The text to display. */\n  text: string\n  /** The styles used for the text. */\n  style: TextOptions\n\n  /**\n   * Initialize Text object.\n   *\n   * @param text The text to display.\n   * @param style The styles used for the text.\n   */\n  constructor(text: string, style: TextOptions) {\n    super()\n\n    this.text = text\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextOptions.html":{"url":"interfaces/TextOptions.html","title":"interface - TextOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/text.ts\n        \n\n            \n                Description\n            \n            \n                Options for text display. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        align\n                                \n                                \n                                        fill\n                                \n                                \n                                        font\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        align\n                                    \n                                \n                                \n                                    \n                                        align:         CanvasTextAlign\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CanvasTextAlign\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Alignment for the text. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text fill color. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        font\n                                    \n                                \n                                \n                                    \n                                        font:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The font to use. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Entity } from '.'\n\n/** Options for text display. */\nexport interface TextOptions {\n  /** The font to use. */\n  font: string,\n  /** The text fill color. */\n  fill: string,\n  /** Alignment for the text. */\n  align?: CanvasTextAlign\n}\n\n/**\n * Displays text on the canvas.\n *\n * When using WebGL for rendering a second canvas is used for text.\n *\n * ### Example\n * ```typescript\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n```\n */\nexport class Text extends Entity {\n  /** The text to display. */\n  text: string\n  /** The styles used for the text. */\n  style: TextOptions\n\n  /**\n   * Initialize Text object.\n   *\n   * @param text The text to display.\n   * @param style The styles used for the text.\n   */\n  constructor(text: string, style: TextOptions) {\n    super()\n\n    this.text = text\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Texture.html":{"url":"classes/Texture.html","title":"class - Texture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Texture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/texture.ts\n        \n\n            \n                Description\n            \n            \n                Loads an image into an HTMLImageElement and provides access to it.\nExample\nconst texture = new Texture('assets/images/tilesheet.png')\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                img\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in lib/types/texture.ts:13\n                            \n                        \n\n                \n                    \n                            Initialize Texture object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Relative path to image file.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            img\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLImageElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/texture.ts:13\n                            \n                        \n\n                \n                    \n                        The loaded image. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Game } from '..'\n\n/**\n * Loads an image into an HTMLImageElement and provides access to it.\n *\n * ### Example\n * ```typescript\nconst texture = new Texture('assets/images/tilesheet.png')\n```\n */\nexport class Texture {\n  /** The loaded image. */\n  img: HTMLImageElement\n\n  /**\n   * Initialize Texture object.\n   *\n   * @param url Relative path to image file.\n   */\n  constructor(url: string) {\n    this.img = Game.assets.image(url)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tile.html":{"url":"interfaces/Tile.html","title":"interface - Tile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Tile in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the tile in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the tile. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the tile. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TiledMap.html":{"url":"interfaces/TiledMap.html","title":"interface - TiledMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TiledMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/tiled-parser.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a Tiled map object. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        levelIndex\n                                \n                                \n                                        mapHeight\n                                \n                                \n                                        mapWidth\n                                \n                                \n                                        tileHeight\n                                \n                                \n                                        tiles\n                                \n                                \n                                        tileWidth\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getObjectByName\n                                \n                                \n                                    getObjectsByType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObjectByName\n                        \n                        \n                    \n                \n            \n            \n                \ngetObjectByName(name: string, mandatory?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/utils/tiled-parser.ts:33\n                \n            \n\n\n            \n                \n                    Gets an object from the map by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of object to get.\n\n                                    \n                                \n                                \n                                    mandatory\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Whether a missing object is an error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Tiled.Object\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObjectsByType\n                        \n                        \n                    \n                \n            \n            \n                \ngetObjectsByType(type: string, mandatory?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/utils/tiled-parser.ts:41\n                \n            \n\n\n            \n                \n                    Gets an array of objects from the map by type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type name of the objects to get.\n\n                                    \n                                \n                                \n                                    mandatory\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Whether no results is an error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Tiled.Object[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelIndex\n                                    \n                                \n                                \n                                    \n                                        levelIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Index of the level layer in tiles array. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mapHeight\n                                    \n                                \n                                \n                                    \n                                        mapHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mapWidth\n                                    \n                                \n                                \n                                    \n                                        mapWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileHeight\n                                    \n                                \n                                \n                                    \n                                        tileHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tiles\n                                    \n                                \n                                \n                                    \n                                        tiles:         TileData[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TileData[][]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of arrays of tile objects. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileWidth\n                                    \n                                \n                                \n                                    \n                                        tileWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Point } from '../types'\n\n/** Type for tile data. */\nexport type TileData = {\n  [key: string]: any,\n  frame: Point,\n  x: number,\n  y: number\n}\n\n/** Interface for a Tiled map object. */\nexport interface TiledMap {\n  /** Width of a tile in pixels. */\n  tileWidth: number\n  /** Height of a tile in pixels. */\n  tileHeight: number\n  /** Width of the map in tiles. */\n  mapWidth: number\n  /** Height of the map in tiles. */\n  mapHeight: number\n  /** Array of arrays of tile objects. */\n  tiles: TileData[][]\n  /** Index of the level layer in tiles array. */\n  levelIndex: number\n\n  /**\n   * Gets an object from the map by name.\n   *\n   * @param name Name of object to get.\n   * @param mandatory Whether a missing object is an error.\n   */\n  getObjectByName(name: string, mandatory?: boolean): Tiled.Object\n\n  /**\n   * Gets an array of objects from the map by type.\n   *\n   * @param type Type name of the objects to get.\n   * @param mandatory Whether no results is an error.\n   */\n  getObjectsByType(type: string, mandatory?: boolean): Tiled.Object[]\n}\n\n/** Interface to add extra layers above or below the main level layer. */\nexport interface ExtraLayer {\n  /** Name of the layer to load. */\n  name: string\n  /** Whether the layer is rendered above the level or below. */\n  isAboveLevel: boolean\n}\n\n/**\n * @ignore\n */\nlet tileWidth: number\n/**\n * @ignore\n */\nlet tileHeight: number\n/**\n * @ignore\n */\nlet mapWidth: number\n/**\n * @ignore\n */\nlet mapHeight: number\n/**\n * @ignore\n */\nlet tilesPerRow: number\n/**\n * @ignore\n */\nlet levelIndex: number\n\n/**\n * @ignore\n */\nlet tileset: Tiled.Tileset\n/**\n * @ignore\n */\nlet layers: Tiled.Layer[]\n/**\n * @ignore\n */\nlet tilesets: Tiled.Tileset[]\n/**\n * @ignore\n */\nlet entities: Tiled.Object[]\n\n/**\n * Parses a Tiled map object into a simpler form.\n *\n * There must be at least two layers in the Tiled map:\n * * \"level\"    - containing the tiles for the level\n * * \"entities\" - containing at least one entity (usually player starting location)\n *\n * @param jsonObj Object from Tiled JSON export.\n */\nexport function tiledParser(jsonObj: Tiled.Map,\n                            extraLayers?: ExtraLayer[]): TiledMap {\n  tileWidth = jsonObj.tilewidth\n  tileHeight = jsonObj.tileheight\n  mapWidth = jsonObj.width\n  mapHeight = jsonObj.height\n  layers = jsonObj.layers\n  tilesets = jsonObj.tilesets\n\n  const levelLayer = getLayer('level')\n  const entitiesLayer = getLayer('entities')\n\n  tileset = getTileset()\n\n  if (!entitiesLayer.objects) {\n    throw new Error('Tiled Error: Missing entities objects.')\n  }\n\n  entities = []\n  for (let i = 0; i  {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i  {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n\n/**\n * @ignore\n */\nconst loadTiles = (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i  {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n\n/**\n * @ignore\n */\nconst getTileProps = (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i  {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i  {\n  const es = []\n  for (let i = 0; i  {\n  let ent: any\n\n  for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tileset.html":{"url":"interfaces/Tileset.html","title":"interface - Tileset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tileset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Tileset in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        columns\n                                \n                                \n                                        firstgid\n                                \n                                \n                                        image\n                                \n                                \n                                        imageheight\n                                \n                                \n                                        imagewidth\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        tileheight\n                                \n                                \n                                            Optional\n                                        tiles\n                                \n                                \n                                        tilewidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                    \n                                \n                                \n                                    \n                                        columns:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of columns in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstgid\n                                    \n                                \n                                \n                                    \n                                        firstgid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The first global ID in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Source image for the tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageheight\n                                    \n                                \n                                \n                                    \n                                        imageheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the image in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagewidth\n                                    \n                                \n                                \n                                    \n                                        imagewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the image in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileheight\n                                    \n                                \n                                \n                                    \n                                        tileheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tiles\n                                    \n                                \n                                \n                                    \n                                        tiles:         Tile[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tile[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If set, an array of Tile data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilewidth\n                                    \n                                \n                                \n                                    \n                                        tilewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timer.html":{"url":"classes/Timer.html","title":"class - Timer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/timer.ts\n        \n\n            \n                Description\n            \n            \n                Countdown timer that calls a function on each tick, and optionally\non completion.\nExample\n// Moving a sprite into position on a game scene over 2 seconds,\n// with a half-second delay before starting.\nconst timer = new Timer((r: number) =>\n  (sprite.pos.y = elasticOut(r) * game.height - game.height / 1.6),\n  () => {}, 2, .5\n)\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dead\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(onTick: TickFunc, onDone?: Function, duration: number, delay: number)\n                    \n                \n                        \n                            \n                                Defined in lib/timer.ts:31\n                            \n                        \n\n                \n                    \n                            Initialize Timer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        onTick\n                                                  \n                                                        \n                                                                        TickFunc\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Function called every tick (core loop update).\n\n                                                        \n                                                \n                                                \n                                                        onDone\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function called on timer completion.\n\n                                                        \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds for the timer to run.\n\n                                                        \n                                                \n                                                \n                                                        delay\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds to wait before starting timer.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:22\n                            \n                        \n\n                \n                    \n                        Used by core loop to remove the object when dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:24\n                            \n                        \n\n                \n                    \n                        Used by core loop to skip rendering. False, unless changed by user. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/timer.ts:60\n                \n            \n\n\n            \n                \n                    Called by core loop each tick.\nUpdates internal state and calls onTick or onDone functions as needed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        type TickFunc = (r: number) => void\n\n/**\n * Countdown timer that calls a function on each tick, and optionally\n * on completion.\n *\n * ### Example\n * ```typescript\n// Moving a sprite into position on a game scene over 2 seconds,\n// with a half-second delay before starting.\nconst timer = new Timer((r: number) =>\n  (sprite.pos.y = elasticOut(r) * game.height - game.height / 1.6),\n  () => {}, 2, .5\n)\n```\n */\nexport class Timer {\n  /** Used by core loop to remove the object when dead. */\n  dead: boolean\n  /** Used by core loop to skip rendering. False, unless changed by user. */\n  visible: boolean\n\n  private elapsed: number\n  private duration: number\n  private delay: number\n\n  private onTick: Function\n  private onDone: Function\n\n  /**\n   * Initialize Timer object.\n   *\n   * @param duration Time in seconds for the timer to run.\n   * @param onTick Function called every tick (core loop update).\n   * @param onDone Function called on timer completion.\n   * @param delay Time in seconds to wait before starting timer.\n   */\n  constructor(onTick: TickFunc, onDone?: Function, duration = 1, delay = 0) {\n    this.elapsed = 0\n    this.duration = duration\n    this.delay = delay\n\n    this.dead = false\n    this.visible = false\n\n    this.onTick = onTick\n    this.onDone = onDone\n  }\n\n  /**\n   * Called by core loop each tick.\n   *\n   * Updates internal state and calls `onTick` or `onDone` functions as needed.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.delay > 0) {\n      this.delay -= dt\n      return\n    }\n\n    this.elapsed += dt\n    const ratio = this.elapsed / this.duration\n\n    if (ratio >= 1) {\n      this.onDone && this.onDone()\n      this.dead = true\n\n      return\n    }\n\n    this.onTick && this.onTick(ratio)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vec.html":{"url":"classes/Vec.html","title":"class - Vec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/vec.ts\n        \n\n            \n                Description\n            \n            \n                Simple 2D vector that provides vector math helpers.\nMost methods are chainable.\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n            \n\n\n            \n                Implements\n            \n            \n                            Point\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                copy\n                            \n                            \n                                divide\n                            \n                            \n                                dot\n                            \n                            \n                                    Static\n                                from\n                            \n                            \n                                mag\n                            \n                            \n                                multiply\n                            \n                            \n                                normalize\n                            \n                            \n                                set\n                            \n                            \n                                subtract\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(x: number, y: number)\n                    \n                \n                        \n                            \n                                Defined in lib/types/vec.ts:34\n                            \n                        \n\n                \n                    \n                            Initialize Vec object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        x\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                X coordinate value.\n\n                                                        \n                                                \n                                                \n                                                        y\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Y coordinate value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/vec.ts:23\n                            \n                        \n\n                \n                    \n                        X coordinate value. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/vec.ts:25\n                            \n                        \n\n                \n                    \n                        Y coordinate value. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:82\n                \n            \n\n\n            \n                \n                    Adds the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to add values from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clone\n                        \n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:73\n                \n            \n\n\n            \n                \n                    Creates a cloned copy of the Vec.\n\n\n                    \n                        Returns :         Vec\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \ncopy(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:65\n                \n            \n\n\n            \n                \n                    Copies the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to copy values from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            divide\n                        \n                        \n                    \n                \n            \n            \n                \ndivide(s: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:122\n                \n            \n\n\n            \n                \n                    Divides the x and y values by the provided value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scalar value to divide by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dot\n                        \n                        \n                    \n                \n            \n            \n                \ndot(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:150\n                \n            \n\n\n            \n                \n                    Gets the dot product of two Vecs.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to get dot product from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            from\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    from(v: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:32\n                \n            \n\n\n            \n                \n                    Creates a new Vec from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Vec to copy into new Vec.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Vec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mag\n                        \n                        \n                    \n                \n            \n            \n                \nmag()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:130\n                \n            \n\n\n            \n                \n                    Gets the magnitude of the Vec. \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            multiply\n                        \n                        \n                    \n                \n            \n            \n                \nmultiply(s: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:110\n                \n            \n\n\n            \n                \n                    Multiplies the x and y values by the provided value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scalar value to multiply.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            normalize\n                        \n                        \n                    \n                \n            \n            \n                \nnormalize()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:135\n                \n            \n\n\n            \n                \n                    Gets the normal of the Vec. \n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:53\n                \n            \n\n\n            \n                \n                    Set the coordinates of the Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        X coordinate value.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Y coordinate value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subtract\n                        \n                        \n                    \n                \n            \n            \n                \nsubtract(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:96\n                \n            \n\n\n            \n                \n                    Subtracts the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to subtract values from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:161\n                \n            \n\n\n            \n                \n                    Custom string representation.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        String formatted as \"(x, y)\"\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface Point {\n  /** X axis coordinate */\n  x: number\n  /** Y axis coordinate */\n  y: number\n}\n\n/**\n * Simple 2D vector that provides vector math helpers.\n *\n * Most methods are chainable.\n *\n * ```typescript\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n```\n */\nexport class Vec implements Point {\n  /** X coordinate value. */\n  x: number\n  /** Y coordinate value. */\n  y: number\n\n  /**\n   * Creates a new Vec from the provided Vec.\n   *\n   * @param v Vec to copy into new Vec.\n   */\n  static from(v: Vec) {\n    return new Vec().copy(v)\n  }\n\n  /**\n   * Initialize Vec object.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the coordinates of the Vec.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  set(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Copies the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to copy values from.\n   */\n  copy(vec: Vec) {\n    const { x, y } = vec\n    return this.set(x, y)\n  }\n\n  /**\n   * Creates a cloned copy of the Vec.\n   */\n  clone() {\n    return Vec.from(this)\n  }\n\n  /**\n   * Adds the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to add values from.\n   */\n  add(vec: Vec) {\n    const { x, y } = vec\n\n    this.x += x\n    this.y += y\n\n    return this\n  }\n\n  /**\n   * Subtracts the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to subtract values from.\n   */\n  subtract(vec: Vec) {\n    const { x, y } = vec\n\n    this.x -= x\n    this.y -= y\n\n    return this\n  }\n\n  /**\n   * Multiplies the x and y values by the provided value.\n   *\n   * @param s The scalar value to multiply.\n   */\n  multiply(s: number) {\n    this.x *= s\n    this.y *= s\n\n    return this\n  }\n\n  /**\n   * Divides the x and y values by the provided value.\n   *\n   * @param s The scalar value to divide by.\n   */\n  divide(s: number) {\n    this.x /= s\n    this.y /= s\n\n    return this\n  }\n\n  /** Gets the magnitude of the Vec. */\n  mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /** Gets the normal of the Vec. */\n  normalize() {\n    const mag = this.mag()\n\n    if (mag > 0) {\n      this.divide(mag)\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the dot product of two Vecs.\n   *\n   * @param vec The Vec to get dot product from.\n   */\n  dot(vec: Vec) {\n    const{ x, y } = vec\n\n    return this.x * x + this.y * y\n  }\n\n  /**\n   * Custom string representation.\n   *\n   * @returns String formatted as \"(x, y)\"\n   */\n  toString() {\n    return `(${this.x}, ${this.y})`\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VecEntity.html":{"url":"interfaces/VecEntity.html","title":"interface - VecEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VecEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/physics.ts\n        \n\n            \n                Description\n            \n            \n                Interface for properties needed for physics calculations. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        acc\n                                \n                                \n                                        mass\n                                \n                                \n                                        pos\n                                \n                                \n                                        vel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        acc\n                                    \n                                \n                                \n                                    \n                                        acc:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for acceleration. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mass\n                                    \n                                \n                                \n                                    \n                                        mass:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mass to use in calculations. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pos\n                                    \n                                \n                                \n                                    \n                                        pos:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for position. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vel\n                                    \n                                \n                                \n                                    \n                                        vel:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for velocity. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Vec } from '../types'\n\n/** Interface for properties needed for physics calculations. */\nexport interface VecEntity {\n  /** Vector for acceleration. */\n  acc: Vec,\n  /** Vector for velocity. */\n  vel: Vec,\n  /** Vector for position. */\n  pos: Vec,\n  /** Mass to use in calculations. */\n  mass: number\n}\n\n/**\n * Applies the provided force to the acceleration of the provided VecEntity.\n *\n * @param e VecEntity to set acceleration on.\n * @param force Force to apply to VecEntity.\n */\nexport function applyForce(e: VecEntity, force: Vec) {\n  e.acc.x += force.x / e.mass\n  e.acc.y += force.y / e.mass\n}\n\n/**\n * Applies the provided friction to the provided VecEntity.\n *\n * @param e VecEntity to apply friction to.\n * @param amount Amount of friction to apply.\n */\nexport function applyFriction(e: VecEntity, amount: number) {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount)\n  applyForce(e, friction)\n}\n\n/**\n * Applies the provided friction to the provided VecEntity in only the X axis.\n *\n * @param e VecEntity to apply horizontal friction to.\n * @param amount Amount of friction to apply.\n */\nexport function applyHorizontalFriction(e: VecEntity, amount: number) {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount)\n\n  friction.y = 0\n  applyForce(e, friction)\n}\n\n/**\n * Applies the provided impulse to the provided VecEntity.\n *\n * @param e VecEntity to apply impulse to.\n * @param force Vec to apply as impulse.\n * @param dt Delta time since last update.\n */\nexport function applyImpulse(e: VecEntity, force: Vec, dt: number) {\n  applyForce(e, { x: force.x / dt, y: force.y / dt })\n}\n\n/**\n * Integrates acceleration and velocity with delta time.\n *\n * @param e VecEntity to integrate.\n * @param dt Delta time since last update.\n */\nexport function integrate(e: VecEntity, dt: number) {\n  const vx = e.vel.x + e.acc.x * dt\n  const vy = e.vel.y + e.acc.y * dt\n  const x = (e.vel.x + vx) / 2 * dt\n  const y = (e.vel.y + vy) / 2 * dt\n\n  e.vel.set(vx, vy)\n  e.acc.set(0, 0)\n\n  return { x, y }\n}\n\n/**\n * Integrates the position with delta time.\n *\n * @param e VecEntity to integrate.\n * @param dt Delta time since last update.\n */\nexport function integratePos (e: VecEntity, dt: number) {\n  const dis = integrate(e, dt)\n  e.pos.add(dis)\n\n  return dis\n}\n\n/**\n * Converts a velocity vector to a speed.\n *\n * @param vel The Vec to convert to a speed.\n */\nexport function speed(vel: Vec) {\n  return Math.sqrt(vel.x * vel.x + vel.y * vel.y)\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebAudio.html":{"url":"classes/WebAudio.html","title":"class - WebAudio","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebAudio\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/web-audio.ts\n        \n\n            \n                Description\n            \n            \n                Provides support for playing sounds using the\nWeb Audio API.\nconst audio = new WebAudio('assets/sounds/theme.ogg')\n\nif (!audio.hasWebAudio) {\n  // Do something else for sounds.\n}\n\naudio.master.value = .3 // Low volume\naudio.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hasWebAudio\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fadeOut\n                            \n                            \n                                mute\n                            \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ctx\n                                \n                                \n                                    master\n                                \n                                \n                                    sfx\n                                \n                                \n                                    music\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/web-audio.ts:44\n                            \n                        \n\n                \n                    \n                            Initialize WebAudio instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The source for the audio element.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasWebAudio\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : !!((window as any).AudioContext || (window as any).webkitAudioContext)\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:18\n                            \n                        \n\n                \n                    \n                        Whether or not WebAudio is supported. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fadeOut\n                        \n                        \n                    \n                \n            \n            \n                \nfadeOut()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:89\n                \n            \n\n\n            \n                \n                    Fades out playing sounds. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mute\n                        \n                        \n                    \n                \n            \n            \n                \nmute()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:84\n                \n            \n\n\n            \n                \n                    Mutes the master node. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:74\n                \n            \n\n\n            \n                \n                    Plays the audio element. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:79\n                \n            \n\n\n            \n                \n                    Pauses the audio element. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ctx\n                    \n                \n\n                \n                    \n                        getctx()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:27\n                                \n                            \n                    \n                        \n                                Gets the audio context. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        master\n                    \n                \n\n                \n                    \n                        getmaster()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:32\n                                \n                            \n                    \n                        \n                                Gets the master node. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sfx\n                    \n                \n\n                \n                    \n                        getsfx()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:37\n                                \n                            \n                    \n                        \n                                Gets the sound effects node. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        music\n                    \n                \n\n                \n                    \n                        getmusic()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:42\n                                \n                            \n                    \n                        \n                                Gets the music node. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class WebAudio {\n  /** Whether or not WebAudio is supported. */\n  hasWebAudio = !!((window as any).AudioContext || (window as any).webkitAudioContext)\n\n  private element: HTMLAudioElement\n  private context: AudioContext\n  private masterNode: GainNode\n  private sfxNode: GainNode\n  private musicNode: GainNode\n\n  /** Gets the audio context. */\n  get ctx() {\n    return this.context\n  }\n\n  /** Gets the master node. */\n  get master() {\n    return this.masterNode\n  }\n\n  /** Gets the sound effects node. */\n  get sfx() {\n    return this.sfxNode\n  }\n\n  /** Gets the music node. */\n  get music() {\n    return this.musicNode\n  }\n\n  /**\n   * Initialize WebAudio instance.\n   *\n   * @param src The source for the audio element.\n   */\n  constructor(src: string) {\n    if (!this.hasWebAudio) {\n      return\n    }\n\n    this.element = document.createElement('audio')\n    this.element.src = src\n    this.context = new AudioContext()\n\n    this.masterNode = this.context.createGain()\n    this.master.gain.value = 1\n    this.master.connect(this.context.destination)\n\n    this.sfxNode = this.context.createGain()\n    this.sfx.gain.value = 1\n    this.sfx.connect(this.master)\n\n    this.musicNode = this.context.createGain()\n    this.music.gain.value = 1\n    this.music.connect(this.master)\n  }\n\n  /** Plays the audio element. */\n  play() {\n    this.element.play()\n  }\n\n  /** Pauses the audio element. */\n  stop() {\n    this.element.pause()\n  }\n\n  /** Mutes the master node. */\n  mute() {\n    this.masterNode.gain.setValueAtTime(0, this.context.currentTime)\n  }\n\n  /** Fades out playing sounds. */\n  fadeOut() {\n    const volume = this.masterNode.gain.value\n\n    this.masterNode.gain.setValueAtTime(volume, this.context.currentTime)\n    this.masterNode.gain.linearRampToValueAtTime(0, this.context.currentTime + .4)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebGLRenderer.html":{"url":"classes/WebGLRenderer.html","title":"class - WebGLRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebGLRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Recursive rendering utilizing HTML5 canvas and WebGL. \n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl-renderer.ts:24\n                            \n                        \n\n                \n                    \n                            Initialize CanvasRenderer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTMLElement to add the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:11\n\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:13\n\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:9\n\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:7\n\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(container: Container, clear)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:62\n                \n            \n\n\n            \n                \n                    Recursive method for rendering the provided container and all its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Container object to render recursively.\n\n                                    \n                                \n                                \n                                    clear\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to clear the canvas before rendering.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:44\n\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Camera, Container, Game, Scene, TileSprite } from '../'\nimport { Entity, Sprite, Text, Rect } from '../types'\nimport { defaults, ShaderProgram, GlBuffer,  GLUtils } from './webgl'\n\n/**\n * @ignore\n */\ninterface TextureInfo {\n  texture: WebGLTexture\n}\n\n/** Recursive rendering utilizing HTML5 canvas and WebGL. */\nexport class WebGLRenderer extends Renderer {\n  private gl: WebGLRenderingContext\n  private ctx: CanvasRenderingContext2D\n  private shaderProgramTex: ShaderProgram\n  private shaderProgramCol: ShaderProgram\n\n  private buffers: GlBuffer\n  private textures: Map\n  private boundTexture: string\n  private globalAlpha: number\n  private game: Game\n\n    /**\n     * Initialize CanvasRenderer object.\n     *\n     * @param width Width of the canvas in pixels.\n     * @param height Height of the canvas in pixels.\n     * @param container The HTMLElement to add the canvas to.\n     */\n    constructor(width: number, height: number, container: HTMLElement) {\n      super(width, height, container)\n\n      this.gl = this.canvas.getContext('webgl', { antialias: false })\n\n      this.buffers = new GlBuffer(this.gl)\n      this.buffers.create('position')\n      this.buffers.create('texture')\n      this.buffers.create('rect')\n\n      this.createTextCanvas()\n\n      this.textures = new Map()\n      this.shaderProgramTex = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexTexture,\n        fragment: defaults.shaders.fragmentTexture,\n      }, 'default-texture')\n      this.shaderProgramCol = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexColor,\n        fragment: defaults.shaders.fragmentColor,\n      }, 'default-color')\n    }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha = 0) {\n      this.globalAlpha = container.alpha\n    }\n\n    this.buffers.setActive('position',\n      this.shaderProgramTex.getAttribLocation('a_position'))\n\n    for (let i = 0; i  6) {\n      const parts = color.split(',')\n      parts[0] = parts[0].substr(parts[0].indexOf('(') + 1)\n\n      if (parts.length > 4) {\n        throw new Error(`Invalid color string ${color}`)\n      }\n\n      if (parts.length === 3) {\n        return [\n          parseInt(parts[0]), parseInt(parts[1]),\n          parseInt(parts[2].replace(')', '')), alpha\n        ]\n      }\n\n      return [\n        parseInt(parts[0]), parseInt(parts[1]),\n        parseInt(parts[2]), parseFloat(parts[3].replace(')', ''))\n      ]\n    }\n\n    const r = parseInt(color.substr(0, 2), 16) / 255\n    const g = parseInt(color.substr(2, 2), 16) / 255\n    const b = parseInt(color.substr(4, 2), 16) / 255\n\n    return [r, g, b, alpha]\n  }\n\n  private getTexture(gl: WebGLRenderingContext, sprite: Sprite | TileSprite) {\n    if (!Game.assets.completed) {\n      return null\n    }\n\n    const { img } = sprite.texture\n\n    if (!img.complete) {\n      if (Game.debug) {\n        console.warn(`Image ${img.src} not yet loaded...`)\n      }\n\n      return null\n    }\n\n    if (this.textures.has(img.src)) {\n      const texture = this.textures.get(img.src).texture\n\n      if (this.boundTexture !== img.src) {\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        this.boundTexture = img.src\n      }\n\n      return texture\n    }\n\n    const texture = this.createTexture()\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n\n    this.textures.set(img.src, { texture })\n    this.boundTexture = img.src\n\n    return texture\n  }\n\n  private createTexture() {\n    const { gl } = this\n    const texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n    return texture\n  }\n\n  private getPositionMatrix(camera: any, sprite: Sprite | TileSprite | Rect) {\n    const hasAnchor = (sp: any) => sp.anchor && (sp.anchor.x || sp.anchor.y)\n\n    const cameraTranslation = GLUtils.getCameraTranslation(camera)\n    const projectionMatrix =\n      GLUtils.get2DProjectionMatrix(this.width, this.height)\n    const translationMatrix = hasAnchor(sprite)\n      ? GLUtils.getTranslation(sprite.pos.x + (sprite as any).anchor.x,\n                               sprite.pos.y + (sprite as any).anchor.y)\n      : GLUtils.getTranslation(sprite.pos.x, sprite.pos.y)\n    const scaleMatrix =\n      GLUtils.getScaleMatrix(sprite, sprite.width, sprite.height)\n\n    let originMatrix = GLUtils.getTranslation(0, 0)\n\n    if ((sprite instanceof Sprite || sprite instanceof TileSprite)\n        && sprite.rotation) {\n      const pivotMatrix = GLUtils.getTranslation(-sprite.pivot.x, -sprite.pivot.y)\n      const unpivotMatrix = GLUtils.getTranslation(sprite.pivot.x, sprite.pivot.y)\n\n      let rotMatrix = GLUtils.getRotation(sprite.rotation)\n      rotMatrix = GLUtils.multiplyMatrices(pivotMatrix, rotMatrix)\n\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, rotMatrix)\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, unpivotMatrix)\n    }\n\n    let posMatrix = GLUtils.multiplyMatrices(scaleMatrix, originMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, cameraTranslation)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, translationMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, projectionMatrix)\n\n    return posMatrix\n  }\n\n  private createTextCanvas() {\n    const canvas = document.createElement('canvas')\n\n    canvas.width = this.width\n    canvas.height = this.height\n\n    canvas.id = 'kilo-text-canvas'\n    canvas.style.zIndex = '1000'\n    canvas.style.position = 'absolute'\n    canvas.style.top = '0'\n    canvas.style.left = '0'\n\n    this.container.appendChild(canvas)\n    this.ctx = canvas.getContext('2d')\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/animations.ts\n            \n            class\n            Animations\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/assets.ts\n            \n            class\n            Assets\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/camera.ts\n            \n            class\n            Camera\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                lib/container.ts\n            \n            class\n            Container\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/controls/controls.ts\n            \n            interface\n            Controls\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/controls/gamepad-controls.ts\n            \n            class\n            GamepadControls\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/controls/key-controls.ts\n            \n            class\n            KeyControls\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/controls/mouse-controls.ts\n            \n            class\n            MouseControls\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/fx/one-up.ts\n            \n            class\n            OneUp\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                lib/fx/particle-emitter.ts\n            \n            class\n            ParticleEmitter\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                lib/fx/particle.ts\n            \n            class\n            Particle\n            \n                100 %\n                (25/25)\n            \n        \n        \n            \n                \n                lib/fx/particle.ts\n            \n            interface\n            ParticleOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            class\n            Game\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/renderer/canvas-renderer.ts\n            \n            class\n            CanvasRenderer\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/renderer/renderer.ts\n            \n            class\n            Renderer\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/renderer/webgl-renderer.ts\n            \n            class\n            WebGLRenderer\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/defaults.ts\n            \n            variable\n            defaults\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            class\n            BufferInfo\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            class\n            GlBuffer\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/shader-program.ts\n            \n            class\n            ShaderProgram\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/shader-program.ts\n            \n            interface\n            Scripts\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/utils.ts\n            \n            class\n            GLUtils\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/resolvers/stop-move.ts\n            \n            function\n            stopMovement\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            interface\n            Hits\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            interface\n            Resolution\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            function\n            wallSlide\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/scene.ts\n            \n            class\n            Scene\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                lib/sound/sound-group.ts\n            \n            class\n            SoundGroup\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/sound/sound-pool.ts\n            \n            class\n            SoundPool\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/sound/sound.ts\n            \n            class\n            Sound\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/sound/sound.ts\n            \n            interface\n            SoundOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/sound/web-audio.ts\n            \n            class\n            WebAudio\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/state.ts\n            \n            class\n            State\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/tile-map.ts\n            \n            class\n            TileMap\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                lib/tile-map.ts\n            \n            interface\n            HasFrame\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/tile-sprite.ts\n            \n            class\n            TileSprite\n            \n                100 %\n                (31/31)\n            \n        \n        \n            \n                \n                lib/timer.ts\n            \n            class\n            Timer\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/types/entity.ts\n            \n            class\n            Entity\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/types/hit-box.ts\n            \n            class\n            HitBox\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/types/rect.ts\n            \n            class\n            Rect\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                lib/types/rect.ts\n            \n            interface\n            RectStyleOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/types/sprite.ts\n            \n            class\n            Sprite\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                lib/types/text.ts\n            \n            class\n            Text\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                lib/types/text.ts\n            \n            interface\n            TextOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/texture.ts\n            \n            class\n            Texture\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Layer\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Map\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Object\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Property\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Tile\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Tileset\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/types/trigger.ts\n            \n            class\n            Trigger\n            \n                100 %\n                (49/49)\n            \n        \n        \n            \n                \n                lib/types/vec.ts\n            \n            class\n            Vec\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/types/vec.ts\n            \n            interface\n            Point\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            angle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            clamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            dirTo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            distance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            gauss\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            gaussDistance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            lerp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            mix\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            rand\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randf\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randomSeed\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randOneFrom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randOneIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            smoothStep\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            useSeededRandom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            variable\n            ease\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            interface\n            VecEntity\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyForce\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyFriction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyHorizontalFriction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyImpulse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            integrate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            integratePos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            speed\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            addDebug\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            angle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            bounds\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            center\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            distance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            hit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            hits\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            interface\n            ExtraLayer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            interface\n            TiledMap\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            function\n            tiledParser\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Speed   (lib/.../game.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/game.ts\n    \n        \n            \n                \n                    \n                        \n                        Speed\n                    \n                \n                    \n                        \n                            Enum of pre-defined speeds for a game.\nDefault game speed is \"Normal\".\nCan also be any number, but be careful.\n\n                        \n                    \n                        \n                            \n                                 Slow\n                            \n                        \n                        \n                            \n                                Value : 0.5\n                            \n                        \n                        \n                            \n                                 Normal\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Fast\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nkilo\nA 2D game engine library written in TypeScript.\nDevelopment\nInstall dependencies:\nnpm install --python=/path/to/python2.7Run tests:\nnpm testRun tests with coverage reporting:\nnpm run test:covTests with coverage must be run before docs to provide unit test coverage data.\nUpdate docs:\nnpm run docsTo serve docs locally (at localhost:5000):\nnpm run docs:serve\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2019-2020 Matthew Ross\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    19 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GameUpdate   (lib/.../game.ts)\n                        \n                        \n                            KeyMap   (lib/.../key-controls.ts)\n                        \n                        \n                            ProgressCallback   (lib/.../assets.ts)\n                        \n                        \n                            ReadyCallback   (lib/.../assets.ts)\n                        \n                        \n                            TickFunc   (lib/.../timer.ts)\n                        \n                        \n                            TileData   (lib/.../tiled-parser.ts)\n                        \n                        \n                            WalkableTest   (lib/.../wall-slide.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/game.ts\n    \n    \n        \n            \n                \n                    \n                    GameUpdate\n                \n            \n            \n                \n                    Function called on each update.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/controls/key-controls.ts\n    \n    \n        \n            \n                \n                    \n                    KeyMap\n                \n            \n            \n                \n                    Type to enforce that keys object uses strings as keys, and boolean as values.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/assets.ts\n    \n    \n        \n            \n                \n                    \n                    ProgressCallback\n                \n            \n            \n                \n                    Function that is called to provide progress status. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReadyCallback\n                \n            \n            \n                \n                    Function that is called when an asset is ready. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/timer.ts\n    \n    \n        \n            \n                \n                    \n                    TickFunc\n                \n            \n            \n                \n                    Function called on each tick of a Timer.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/utils/tiled-parser.ts\n    \n    \n        \n            \n                \n                    \n                    TileData\n                \n            \n            \n                \n                    Type for tile data. \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/resolvers/wall-slide.ts\n    \n    \n        \n            \n                \n                    \n                    WalkableTest\n                \n            \n            \n                \n                    Function used to provide collision resolver with walkable tile status. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/animations.ts\n            \n            \n                100 %\n                (26/26)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/assets.ts\n            \n            \n                100 %\n                (59/59)\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (19/19)\n            \n            \n                100 %\n                (55/55)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/camera.ts\n            \n            \n                100 %\n                (71/71)\n            \n            \n                100 %\n                (28/28)\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (71/71)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/container.ts\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/game.ts\n            \n            \n                100 %\n                (85/85)\n            \n            \n                100 %\n                (28/28)\n            \n            \n                100 %\n                (14/14)\n            \n            \n                100 %\n                (85/85)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/scene.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/state.ts\n            \n            \n                100 %\n                (25/25)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/tile-map.ts\n            \n            \n                100 %\n                (43/43)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/tile-sprite.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/timer.ts\n            \n            \n                100 %\n                (18/18)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/controls/gamepad-controls.ts\n            \n            \n                100 %\n                (35/35)\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/controls/key-controls.ts\n            \n            \n                100 %\n                (32/32)\n            \n            \n                100 %\n                (22/22)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/controls/mouse-controls.ts\n            \n            \n                100 %\n                (30/30)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/fx/one-up.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/fx/particle-emitter.ts\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/fx/particle.ts\n            \n            \n                100 %\n                (19/19)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/canvas-renderer.ts\n            \n            \n                100 %\n                (84/84)\n            \n            \n                100 %\n                (65/65)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (77/77)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/renderer.ts\n            \n            \n                100 %\n                (18/18)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl-renderer.ts\n            \n            \n                100 %\n                (175/175)\n            \n            \n                100 %\n                (91/91)\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (170/170)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/defaults.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/gl-buffer.ts\n            \n            \n                100 %\n                (25/25)\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/shader-program.ts\n            \n            \n                100 %\n                (61/61)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (59/59)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/utils.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/resolvers/stop-move.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/resolvers/wall-slide.ts\n            \n            \n                100 %\n                (39/39)\n            \n            \n                100 %\n                (34/34)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/sound/sound-group.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/sound/sound-pool.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/sound/sound.ts\n            \n            \n                100 %\n                (21/21)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/entity.ts\n            \n            \n                100 %\n                (18/18)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/hit-box.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/rect.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/sprite.ts\n            \n            \n                100 %\n                (18/18)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/text.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/texture.ts\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/trigger.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/vec.ts\n            \n            \n                100 %\n                (32/32)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/utils/math.ts\n            \n            \n                100 %\n                (58/58)\n            \n            \n                100 %\n                (21/21)\n            \n            \n                100 %\n                (22/22)\n            \n            \n                100 %\n                (57/57)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/utils/physics.ts\n            \n            \n                100 %\n                (26/26)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/utils/sprite.ts\n            \n            \n                100 %\n                (34/34)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/utils/tiled-parser.ts\n            \n            \n                100 %\n                (109/109)\n            \n            \n                100 %\n                (49/49)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (97/97)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaults   (lib/.../defaults.ts)\n                        \n                        \n                            ease   (lib/.../math.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/renderer/webgl/defaults.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaults\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /** Default shaders. */\n  shaders: {\n    /** Texture-based rendering vertex shader. */\n    vertexTexture: `\n  attribute vec2 a_position;\n  attribute vec2 a_texCoord;\n\n  uniform mat3 u_posMatrix;\n  uniform mat3 u_texMatrix;\n  uniform float u_texAlpha;\n\n  varying vec2 v_texCoord;\n  varying float v_texAlpha;\n\n  void main() {\n    v_texCoord = (u_texMatrix * vec3(a_texCoord, 1)).xy;\n    v_texAlpha = u_texAlpha;\n\n    gl_Position = vec4((u_posMatrix * vec3(a_position, 1)).xy, 0, 1);\n  }\n`,\n\n    /** Texture-based rendering fragment shader. */\n    fragmentTexture: `\n  precision highp float;\n\n  uniform sampler2D u_sampler;\n\n  varying vec2 v_texCoord;\n  varying float v_texAlpha;\n\n  void main() {\n    vec4 color = texture2D(u_sampler, v_texCoord);\n    color.a *= v_texAlpha;\n\n    gl_FragColor = color;\n  }\n`,\n\n    /** Color-based rendering vertex shader. */\n    vertexColor: `\n  attribute vec2 a_position;\n\n  uniform mat3 u_posMatrix;\n\n  void main() {\n    gl_Position = vec4((u_posMatrix * vec3(a_position, 1)).xy, 0, 1);\n  }\n`,\n\n    /** Color-based rendering fragment shader. */\n    fragmentColor: `\n  precision highp float;\n\n  uniform vec4 u_color;\n\n  void main() {\n    gl_FragColor = u_color;\n  }\n`,\n  },\n}\n                        \n                    \n\n                \n                    \n                        Default shader sources for both texture and color-based rendering. \n\n                    \n                \n\n            \n        \n\n    lib/utils/math.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ease\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  quadIn(x: number) {\n    return x * x\n  },\n\n  quadOut(x: number) {\n    return 1 - this.quadIn(1 - x)\n  },\n\n  cubicIn(x: number) {\n    return x * x * x\n  },\n\n  cubicOut(x: number) {\n    return 1 - this.cubicIn(1 - x)\n  },\n\n  cubicInOut(x: number) {\n    if (x \n                        \n                    \n\n                \n                    \n                        A collection of easing functions. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
