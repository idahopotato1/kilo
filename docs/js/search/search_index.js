var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/Animation.html",[0,0.178,1,2.642]],["body/classes/Animation.html",[0,0.299,1,5.262,2,0.578,3,0.133,4,0.133,5,0.114,6,2.898,7,0.713,8,0.06,9,0.255,10,1.553,11,5.057,12,5.057,13,3.737,14,5.683,15,6.022,16,0.791,17,4.29,18,2.033,19,0.703,20,4.435,21,3.122,22,0.424,23,1.039,24,5.144,25,0.791,26,0.018,27,0.637,28,0.144,29,0.569,30,3.757,31,3.757,32,3.757,33,3.757,34,3.757,35,0.832,36,0.962,37,2.169,38,3.757,39,1.976,40,0.549,41,1.106,42,2.898,43,3.239,44,5.057,45,3.967,46,3.239,47,4.435,48,0.726,49,5.057,50,3.239,51,3.239,52,3.239,53,4.096,54,0.268,55,1.106,56,1.998,57,3.967,58,0.783,59,1.485,60,1.485,61,2.643,62,2.643,63,3.239,64,2.125,65,3.619,66,2.898,67,2.125,68,3.239,69,0.608,70,1.998,71,3.619,72,3.239,73,0.343,74,1.529,75,0.254,76,2.898,77,1.106,78,3.239,79,3.811,80,0.997,81,0.467,82,0.54,83,3.239,84,3.239,85,5.696,86,2.909,87,1.156,88,2.643,89,2.643,90,3.239,91,2.643,92,3.239,93,1.384,94,1.457,95,3.119,96,3.239,97,3.239,98,2.643,99,2.898,100,1.815,101,1.583,102,3.239,103,3.239,104,3.239,105,0.949,106,3.239,107,1.448,108,2.643,109,5.438,110,1.998,111,3.239,112,3.239,113,2.909,114,1.886,115,2.125,116,1.784,117,3.239,118,1.266,119,0.366,120,3.239,121,3.239,122,3.239,123,3.239,124,3.239,125,3.239,126,0.008,127,0.011,128,0.008]],["title/classes/Animations.html",[0,0.178,53,2.438]],["body/classes/Animations.html",[0,0.312,1,5.399,2,0.515,3,0.119,4,0.119,5,0.102,6,2.584,7,0.765,8,0.053,9,0.266,10,1.508,11,2.888,12,2.888,13,3.395,14,5.704,15,4.756,16,0.73,17,3.582,18,2.128,19,0.627,20,2.888,21,3.05,22,0.407,23,1.01,25,0.923,26,0.018,27,0.675,28,0.14,29,0.663,35,0.971,36,1.032,37,2.04,39,1.859,40,0.489,41,0.986,42,2.584,43,2.888,44,4.756,45,3.663,46,2.888,47,4.094,48,0.757,49,4.756,50,2.888,51,2.888,52,4.094,53,4.489,54,0.301,55,1.397,56,2.526,57,4.255,58,0.817,59,1.627,60,1.627,61,3.341,62,3.341,63,4.094,64,2.686,65,4.222,66,3.663,67,2.686,68,4.094,69,0.768,70,2.526,71,4.222,72,4.094,73,0.306,74,1.364,75,0.226,76,4.255,77,1.186,78,4.756,79,4.249,80,1.175,81,0.59,82,0.521,83,4.094,84,2.888,85,5.462,86,2.686,87,1.847,88,3.341,89,3.341,90,4.094,91,3.341,92,4.094,93,1.615,94,1.841,95,3.37,96,4.094,97,4.094,98,3.341,99,3.663,100,2.118,101,1.847,102,4.094,103,2.888,104,2.888,105,0.892,106,2.888,107,1.689,108,3.341,109,5.462,110,3.192,111,4.094,112,2.888,113,3.722,114,2.383,115,1.895,116,1.591,117,2.888,118,1.6,119,0.327,120,2.888,121,2.888,122,2.888,123,2.888,124,2.888,125,2.888,126,0.007,127,0.011,128,0.007,129,0.464,130,4.749,131,3.35,132,3.35,133,3.35,134,3.35,135,3.35,136,3.35]],["title/classes/Assets.html",[0,0.178,137,2.269]],["body/classes/Assets.html",[0,0.146,2,0.473,3,0.109,4,0.109,5,0.186,7,0.426,8,0.049,9,0.181,10,1.57,16,0.687,19,0.984,22,0.36,23,1.08,25,1.014,26,0.018,27,0.602,28,0.152,29,0.729,35,1.132,36,1.196,40,0.449,48,0.6,54,0.264,58,0.555,71,3.141,73,0.281,74,1.251,75,0.208,80,1.248,81,0.555,82,0.485,105,1.132,116,3.035,119,0.643,126,0.007,127,0.01,128,0.007,129,0.468,137,4.33,138,2.372,139,4.754,140,1.314,141,1.855,142,4.465,143,4.465,144,4.465,145,4.465,146,4.465,147,3.85,148,6.516,149,5.258,150,5.258,151,5.258,152,5.258,153,5.258,154,5.77,155,5.77,156,3.31,157,4.931,158,4.497,159,4.465,160,4.465,161,4.465,162,3.4,163,1.91,164,5.283,165,3.075,166,3.075,167,1.005,168,3.075,169,5.511,170,3.075,171,5.511,172,3.075,173,3.075,174,3.075,175,3.075,176,4.465,177,3.075,178,6.287,179,4.497,180,5.511,181,3.85,182,4.465,183,3.075,184,4.465,185,3.075,186,6.757,187,6.393,188,3.075,189,1.576,190,1.257,191,1.775,192,1.799,193,3.075,194,3.075,195,4.465,196,3.075,197,5.77,198,5.77,199,4.311,200,4.059,201,4.533,202,6.128,203,3.444,204,3.747,205,4.465,206,3.075,207,3.444,208,4.465,209,3.075,210,3.141,211,3.075,212,3.075,213,3.177,214,2.651,215,3.075,216,5.77,217,3.075,218,3.075,219,3.075,220,4.465,221,5.258,222,3.075,223,3.075,224,3.075,225,3.141,226,2.372,227,3.075,228,2.698,229,4.465,230,5.258,231,5.258,232,3.075,233,3.075,234,3.141,235,3.075,236,3.075,237,3.075,238,3.075,239,3.075,240,3.075,241,3.075,242,3.075,243,3.075,244,1.693,245,3.075,246,3.699,247,3.075,248,5.258,249,3.075,250,3.075,251,3.075,252,3.075]],["title/classes/BufferInfo.html",[0,0.178,253,2.642]],["body/classes/BufferInfo.html",[0,0.269,2,0.668,3,0.154,4,0.154,5,0.132,8,0.069,9,0.229,10,1.295,22,0.391,23,0.922,26,0.018,27,0.678,28,0.13,48,0.753,54,0.198,58,0.83,62,3.055,69,1.15,73,0.396,75,0.293,80,1.178,81,0.539,82,0.563,105,1.02,107,1.222,108,3.055,119,0.676,126,0.01,127,0.013,128,0.01,140,1.668,192,1.222,253,4.879,254,4.704,255,3.055,256,5.979,257,2.698,258,5.438,259,4.343,260,4.343,261,4.343,262,3.987,263,3.35,264,3.055,265,3.055,266,3.055,267,1.606,268,3.744,269,3.744,270,3.744,271,2.82,272,3.424,273,4.04,274,3.812,275,3.055,276,3.744,277,3.744,278,3.055,279,2.624,280,3.055,281,1.337,282,2.332,283,6.334,284,3.744,285,4.886,286,4.886,287,4.886,288,2.624,289,3.744,290,3.744,291,4.886,292,3.744,293,3.744,294,3.744,295,3.744,296,3.744,297,3.744,298,2.31,299,4.886,300,3.744,301,3.68,302,3.744,303,3.744,304,4.886,305,2.82,306,3.35,307,5.764,308,3.35,309,2.457,310,3.744,311,1.956,312,1.956,313,3.744,314,2.624,315,4.886,316,3.744,317,3.744,318,3.744,319,3.744,320,3.744,321,3.744]],["title/classes/CanvasRenderer.html",[0,0.178,322,2.269]],["body/classes/CanvasRenderer.html",[0,0.178,2,0.578,3,0.133,4,0.133,5,0.114,7,0.521,8,0.06,9,0.208,10,1.513,16,0.791,19,0.703,22,0.401,23,1.093,25,1.016,26,0.018,27,0.603,28,0.154,29,0.73,35,1.02,36,1.097,40,0.857,41,1.106,54,0.288,73,0.343,75,0.254,81,0.639,82,0.523,87,1.583,94,2.274,126,0.008,127,0.011,128,0.008,129,0.462,140,1.106,141,1.326,167,1.32,189,1.326,190,1.057,192,1.057,244,1.656,256,4.524,282,2.169,322,3.811,323,6.022,324,2.643,325,2.567,326,3.317,327,3.967,328,3.967,329,4.04,330,1.815,331,4.128,332,4.126,333,5.865,334,4.739,335,2.879,336,2.074,337,2.002,338,4.43,339,4.435,340,3.967,341,2.094,342,2.909,343,4.43,344,5.144,345,2.299,346,3.809,347,4.865,348,3.757,349,3.757,350,3.072,351,3.239,352,3.108,353,3.239,354,2.27,355,3.239,356,3.239,357,4.126,358,5.003,359,3.757,360,2.094,361,2.094,362,3.967,363,1.266,364,3.619,365,3.239,366,1.72,367,4.122,368,3.757,369,2.094,370,2.898,371,3.239,372,2.898,373,1.457,374,2.125,375,3.967,376,2.898,377,3.239,378,2.898,379,2.898,380,2.125,381,2.643,382,2.898,383,3.757,384,2.44,385,3.757,386,3.239,387,3.757,388,3.239,389,2.898,390,3.757,391,3.757,392,3.757,393,3.239,394,3.757,395,3.757,396,2.898,397,2.898]],["title/classes/Container.html",[0,0.178,335,1.388]],["body/classes/Container.html",[0,0.174,2,0.778,3,0.13,4,0.13,5,0.111,7,0.802,8,0.058,9,0.205,16,0.96,18,2.235,22,0.417,23,1.081,25,1.087,26,0.018,27,0.618,28,0.157,29,0.748,35,1.095,36,1.083,37,2.141,39,1.951,40,0.536,41,1.079,48,0.526,54,0.335,55,1.488,58,0.628,69,0.593,73,0.335,74,1.492,75,0.247,77,1.087,82,0.494,87,2.209,100,2.043,101,1.782,105,0.818,118,1.951,119,0.493,126,0.008,127,0.011,128,0.008,129,0.508,141,2.389,167,1.138,191,1.558,267,1.87,325,1.492,330,1.785,335,2.685,341,2.059,350,3.231,360,1.492,361,2.357,363,1.245,366,1.901,373,2.245,398,3.161,399,5.057,400,5.057,401,5.057,402,3.901,403,3.056,404,5.057,405,4.36,406,5.057,407,5.057,408,5.057,409,5.057,410,5.057,411,5.057,412,2.164,413,2.949,414,1.961,415,2.607,416,4.091,417,1.84,418,1.294,419,2.811,420,1.84,421,1.032,422,3.658,423,1.421,424,1.741,425,1.84,426,1.557,427,1.84,428,1.355,429,1.84,430,1.84,431,2.749,432,3.666,433,3.271,434,3.284,435,3.666,436,3.666,437,2.357,438,3.284,439,3.284,440,3.284,441,2.749,442,2.245,443,1.84,444,1.568,445,1.741,446,1.741,447,1.84,448,1.741,449,1.741,450,1.741,451,1.84,452,1.741,453,1.568,454,3.161,455,2.579,456,3.666,457,3.666]],["title/interfaces/Controls.html",[458,0.232,459,2.642]],["body/interfaces/Controls.html",[3,0.191,4,0.191,5,0.164,8,0.086,9,0.263,26,0.018,28,0.144,29,0.847,40,1.018,54,0.297,73,0.493,75,0.365,93,1.749,126,0.012,127,0.014,128,0.012,129,0.396,141,2.292,267,2.402,354,3.926,458,0.334,459,5.346,460,1.52,461,4.655,462,6.496,463,6.496,464,5.601,465,6.378,466,6.234,467,6.378,468,5.087,469,5.087,470,5.087,471,3.799,472,4.165]],["title/classes/Entity.html",[0,0.178,366,0.924]],["body/classes/Entity.html",[0,0.281,2,0.912,3,0.136,4,0.136,5,0.117,7,0.531,8,0.083,9,0.211,16,0.802,18,2.199,19,1.109,22,0.413,23,1.08,25,0.912,26,0.018,27,0.541,28,0.153,29,0.655,35,1.029,36,1.19,37,1.928,39,1.757,40,0.56,48,0.616,54,0.291,58,0.648,69,1.029,73,0.35,75,0.259,77,1.121,81,0.648,82,0.503,87,1.958,100,1.84,101,1.605,105,0.959,118,1.757,119,0.509,126,0.013,127,0.012,128,0.009,129,0.466,163,2.231,167,1.58,191,1.89,192,1.079,244,1.235,325,2.123,341,2.794,360,2.123,361,2.708,363,1.69,366,1.9,373,2.58,412,2.536,413,3.091,414,2.298,415,2.996,418,1.84,419,3.218,421,1.468,422,3.616,423,2.661,424,2.476,426,2.113,428,1.928,431,2.476,433,2.864,437,2.123,441,2.476,442,2.022,444,2.231,445,2.476,446,1.821,448,2.476,449,2.476,450,2.476,452,2.476,453,2.231,454,3.306,455,2.697,473,2.957,474,5.215,475,5.927,476,3.834,477,3.834,478,3.834,479,3.834,480,3.834,481,3.834,482,3.834,483,3.834,484,3.834,485,3.834,486,3.834,487,3.834,488,1.924,489,3.834,490,3.306,491,2.957,492,2.697,493,3.306,494,3.834,495,3.834,496,3.834,497,3.834,498,3.834]],["title/interfaces/ExtraLayer.html",[458,0.232,499,2.438]],["body/interfaces/ExtraLayer.html",[3,0.124,4,0.124,5,0.107,8,0.103,9,0.199,13,1.986,21,2.1,22,0.42,26,0.018,27,0.664,28,0.145,40,0.513,41,1.033,48,0.727,54,0.305,58,0.703,59,1.155,60,1.155,64,1.986,69,0.568,73,0.559,75,0.435,77,1.474,80,1.135,82,0.51,87,1.511,105,0.991,114,1.762,119,0.693,126,0.008,127,0.011,128,0.011,129,0.257,157,2.709,158,3.453,167,1.451,191,0.945,192,1.593,244,1.131,257,1.502,267,2.266,281,1.511,312,2.548,314,2.122,336,1.593,337,1.593,345,1.654,354,2.966,363,1.509,366,0.865,402,3.786,421,1.593,423,2.376,458,0.399,460,0.988,471,2.471,499,3.675,500,2.28,501,2.28,502,4.232,503,3.088,504,4.311,505,4.311,506,3.786,507,4.922,508,3.08,509,5.283,510,2.173,511,1.581,512,4.727,513,3.786,514,3.259,515,3.188,516,2.421,517,2.421,518,2.993,519,3.675,520,3.675,521,2.709,522,3.675,523,4.727,524,4.365,525,4.187,526,3.028,527,2.84,528,3.028,529,2.471,530,2.548,531,3.786,532,3.786,533,2.687,534,3.028,535,3.028,536,3.028,537,3.028,538,3.028,539,3.028,540,4.365,541,3.028,542,3.028,543,3.028,544,3.028,545,3.028,546,3.028,547,3.786,548,3.028,549,3.028,550,3.028,551,2.471,552,3.028,553,4.365,554,2.777,555,3.786,556,3.786,557,3.786,558,4.365,559,3.786,560,2.471,561,2.709,562,2.709,563,2.709,564,3.786,565,2.471,566,4.365,567,2.709,568,2.709,569,2.709,570,2.709,571,2.709,572,2.709,573,2.709,574,2.709,575,2.709,576,2.28]],["title/classes/GLUtils.html",[0,0.178,577,2.438]],["body/classes/GLUtils.html",[0,0.14,2,0.453,3,0.104,4,0.104,5,0.09,7,0.408,8,0.047,16,0.87,22,0.436,23,0.951,25,1.001,26,0.018,27,0.594,28,0.135,29,0.719,35,1.053,40,0.632,41,0.867,48,0.775,54,0.198,59,1.631,60,1.704,64,2.448,67,2.448,69,1.08,73,0.269,75,0.199,82,0.568,94,2.524,98,4.43,99,4.857,105,1.053,119,0.422,126,0.007,127,0.01,128,0.007,129,0.489,271,1.913,281,2.187,282,2.469,311,1.949,336,2.052,337,1.977,345,2.25,366,1.644,367,3.933,415,3.199,428,1.6,510,0.993,577,2.81,578,2.539,579,2.172,580,5.326,581,4.327,582,2.615,583,4.327,584,4.327,585,4.327,586,4.327,587,4.327,588,4.327,589,4.327,590,4.327,591,2.946,592,3.338,593,3.044,594,4.327,595,4.327,596,7.341,597,4.327,598,5.654,599,4.327,600,2.946,601,6.677,602,4.327,603,4.327,604,2.946,605,3.338,606,5.972,607,4.327,608,4.327,609,2.946,610,4.327,611,3.977,612,6.677,613,4.327,614,2.301,615,2.419,616,2.946,617,2.055,618,4.327,619,2.946,620,3.044,621,4.327,622,4.237,623,2.946,624,3.338,625,4.327,626,4.327,627,2.302,628,5.654,629,3.957,630,2.272,631,2.272,632,2.946,633,2.946,634,3.957,635,4.327,636,2.946,637,2.946,638,2.946,639,4.327,640,4.327,641,5.654,642,5.654,643,5.654,644,5.654,645,5.654,646,5.654,647,5.654,648,5.654,649,5.654,650,5.654,651,5.654,652,5.654,653,5.654,654,5.654,655,5.654,656,5.654,657,5.654,658,5.654]],["title/classes/Game.html",[0,0.178,141,1.325]],["body/classes/Game.html",[0,0.119,2,0.385,3,0.089,4,0.089,5,0.076,7,0.645,8,0.04,9,0.155,10,1.549,14,4.569,16,0.589,18,1.432,19,0.468,22,0.422,23,1.089,25,0.864,26,0.018,27,0.512,28,0.149,29,0.621,35,0.908,36,1.108,39,1.893,40,0.68,42,4.019,48,0.677,54,0.175,55,1.127,58,0.84,65,2.694,67,2.948,69,0.752,70,2.772,73,0.349,74,1.559,75,0.259,79,2.314,81,0.476,82,0.488,86,1.416,93,1.031,95,3.769,101,1.179,105,0.958,107,0.704,116,1.188,118,1.568,119,0.62,126,0.006,127,0.009,128,0.006,129,0.382,137,4.087,141,2.697,163,1.638,167,1.387,189,2.243,190,1.789,191,1.252,192,1.309,244,0.806,246,1.761,281,2.047,298,2.037,306,2.954,308,4.019,311,1.127,322,1.512,329,3.598,331,3.686,335,2.459,336,1.976,337,1.872,338,2.487,342,2.166,343,3.021,346,2.487,352,3.149,363,1.283,384,1.625,403,2.811,433,2.529,437,1.019,442,1.485,580,4.827,582,2.314,659,1.625,660,3.83,661,3.83,662,3.83,663,3.83,664,3.83,665,3.83,666,3.272,667,4.652,668,3.272,669,5.616,670,4.652,671,4.652,672,4.652,673,5.616,674,4.652,675,5.616,676,3.83,677,4.652,678,4.493,679,3.83,680,4.164,681,6.164,682,2.503,683,6.358,684,3.83,685,3.302,686,3.83,687,2.503,688,2.503,689,2.503,690,2.503,691,3.83,692,3.302,693,2.954,694,2.503,695,1.922,696,3.83,697,2.503,698,2.503,699,2.503,700,4.842,701,2.503,702,2.503,703,2.503,704,2.503,705,5.107,706,2.503,707,2.503,708,2.503,709,3.83,710,5.107,711,2.503,712,3.83,713,3.83,714,6.164,715,2.503,716,5.211,717,1.761,718,2.503,719,1.761,720,2.503,721,2.503,722,2.503,723,2.503,724,2.503,725,2.503,726,2.503,727,5.217,728,2.503,729,2.503,730,1.625,731,3.302,732,2.158,733,2.158,734,2.694,735,2.158,736,2.158,737,2.158,738,4.019,739,3.302,740,2.954,741,2.954,742,2.954,743,4.652,744,2.503,745,2.503,746,2.503,747,2.503,748,3.83,749,3.83,750,2.503,751,2.503,752,3.83,753,5.616,754,4.652,755,2.503,756,4.01,757,4.652,758,3.83,759,2.954,760,2.503,761,2.503,762,2.503,763,2.503,764,3.83,765,3.83,766,3.83,767,3.83,768,4.01,769,2.503,770,2.503,771,2.503]],["title/classes/GamepadControls.html",[0,0.178,468,2.642]],["body/classes/GamepadControls.html",[0,0.183,2,0.593,3,0.137,4,0.137,5,0.117,7,0.535,8,0.062,9,0.212,10,1.558,16,0.805,19,1.112,22,0.403,23,1.103,25,0.914,26,0.018,27,0.542,28,0.142,29,0.657,35,0.962,36,0.721,48,0.663,54,0.239,59,1.655,60,1.655,69,0.962,75,0.26,81,0.65,86,2.962,105,1.197,119,0.376,126,0.009,127,0.012,128,0.009,163,2.24,167,0.868,189,1.848,190,1.085,192,1.876,213,4.432,228,3.853,244,1.242,257,1.65,281,2.324,465,6.063,468,4.486,622,3.684,772,6.542,773,2.331,774,5.945,775,5.945,776,6.667,777,4.514,778,3.265,779,5.236,780,5.945,781,5.125,782,5.945,783,5.945,784,5.945,785,3.325,786,3.325,787,3.857,788,3.325,789,5.236,790,5.236,791,3.857,792,3.857,793,5.236,794,3.857,795,5.236,796,6.667,797,6.377,798,3.325,799,3.857,800,2.975,801,6.324,802,7.335,803,3.325,804,3.857,805,3.857,806,3.857,807,3.857,808,3.857,809,3.857,810,3.857,811,5.236,812,2.975,813,3.857,814,4.918,815,2.975,816,3.857,817,3.857,818,3.857,819,3.857,820,3.857,821,3.325,822,3.857,823,3.857,824,3.857,825,3.857,826,3.857,827,3.857,828,3.857,829,6.667,830,3.857,831,5.236,832,3.857,833,3.857,834,5.236,835,3.857,836,3.857,837,5.236,838,3.857]],["title/classes/GlBuffer.html",[0,0.178,272,2.269]],["body/classes/GlBuffer.html",[0,0.244,2,0.58,3,0.133,4,0.133,5,0.115,7,0.522,8,0.06,9,0.209,10,1.482,16,0.793,19,0.705,22,0.407,23,1.021,25,0.971,26,0.018,27,0.693,28,0.145,29,0.698,35,0.95,36,0.964,48,0.727,54,0.235,58,0.821,62,4.443,69,1.104,73,0.344,75,0.254,80,1.241,81,0.64,82,0.54,105,1.021,107,1.06,108,3.626,119,0.645,126,0.008,127,0.011,128,0.008,129,0.484,140,1.858,189,1.33,190,1.06,192,1.06,253,4.803,254,5.007,255,2.651,256,6.008,257,1.612,258,5.064,262,3.626,263,2.906,264,3.626,265,3.626,266,3.626,267,1.906,268,4.443,269,4.443,270,4.443,271,2.447,272,3.816,273,4.224,274,4.224,275,4.132,276,5.064,277,4.443,278,3.626,279,2.277,280,2.651,281,1.586,282,2.525,283,6.356,284,4.443,285,4.443,286,4.443,287,4.443,288,3.114,289,4.443,290,3.248,291,4.443,292,3.248,293,3.248,294,3.248,295,3.248,296,3.248,297,3.248,298,2.741,299,5.064,300,4.443,301,4.101,302,4.443,303,4.443,304,5.444,305,3.347,306,3.975,307,6.026,308,3.975,309,2.915,310,4.443,311,2.321,312,1.697,313,3.248,314,2.277,315,4.443,316,3.248,317,3.248,318,3.248,319,3.248,320,3.248,321,3.248,839,5.154,840,5.154,841,3.768,842,3.768,843,3.768,844,3.768,845,3.768]],["title/interfaces/HasFrame.html",[458,0.232,846,2.896]],["body/interfaces/HasFrame.html",[0,0.191,3,0.143,4,0.143,5,0.123,8,0.086,9,0.218,13,4.317,16,0.62,21,3.043,22,0.382,26,0.018,28,0.083,40,0.888,41,1.186,48,0.704,54,0.246,58,0.501,59,0.949,60,0.949,73,0.368,74,1.641,75,0.272,77,1.16,81,0.501,82,0.59,89,4.568,93,1.085,105,0.983,107,1.518,114,2.707,119,0.593,126,0.009,127,0.012,128,0.009,140,1.186,267,1.995,281,1.998,298,2.869,305,4.523,330,1.422,335,2.401,336,1.518,337,1.518,345,1.818,374,3.051,405,3.475,414,2.092,421,1.134,426,1.998,455,2.836,458,0.249,460,1.134,503,1.815,507,3.795,508,2.308,510,2.547,511,2.738,515,3.948,516,1.724,517,1.724,518,3.164,519,2.617,520,2.617,521,3.109,522,2.617,579,2.023,614,2.475,617,2.887,695,2.023,778,2.562,846,4.69,847,3.109,848,3.475,849,3.923,850,3.397,851,2.28,852,4.031,853,4.031,854,3.795,855,5.394,856,4.031,857,1.815,858,5.394,859,4.031,860,4.031,861,4.031,862,3.475,863,4.031,864,3.475,865,4.031,866,4.031,867,4.031,868,5.394,869,4.031,870,4.031,871,5.394,872,6.08,873,4.031,874,4.031,875,4.031,876,4.031,877,4.031,878,4.031,879,4.031,880,4.031,881,4.031,882,5.394,883,4.031,884,3.109,885,4.031,886,4.161,887,4.651,888,5.394,889,4.161,890,4.031,891,6.492,892,6.492,893,5.394,894,5.394]],["title/classes/HitBox.html",[0,0.178,849,2.269]],["body/classes/HitBox.html",[0,0.187,2,0.605,3,0.139,4,0.139,5,0.12,7,0.545,8,0.063,9,0.215,10,1.537,16,0.816,19,0.736,22,0.445,23,1.076,25,0.816,26,0.018,27,0.484,28,0.143,29,0.587,35,0.636,36,0.736,54,0.242,58,0.659,59,1.791,60,1.816,75,0.266,81,0.659,82,0.569,105,1.04,107,1.809,126,0.009,127,0.012,128,0.009,129,0.389,163,2.27,281,2.212,336,2.172,337,2.172,393,6.452,666,4.225,668,4.225,717,2.768,719,2.768,741,4.632,742,4.632,778,3.553,812,3.034,815,3.034,849,4.649,887,6.452,895,6.404,896,3.392,897,6.006,898,6.006,899,4.093,900,3.934,901,5.265,902,3.934,903,3.934,904,3.934,905,3.934,906,4.093,907,3.934,908,3.002,909,3.934,910,6.429,911,3.934,912,3.934,913,3.934,914,6.006,915,6.006]],["title/interfaces/Hits.html",[458,0.232,916,2.642]],["body/interfaces/Hits.html",[3,0.141,4,0.141,5,0.121,8,0.085,9,0.217,22,0.365,26,0.018,28,0.14,40,0.783,41,1.175,48,0.76,59,1.698,60,1.698,69,0.867,73,0.364,75,0.437,77,1.153,82,0.534,93,1.075,94,2.508,105,0.646,119,0.523,126,0.009,127,0.012,128,0.009,129,0.293,140,1.175,167,1.698,191,1.629,192,2.111,199,2.81,200,2.81,213,2.413,244,1.726,363,1.776,366,0.983,374,2.259,458,0.332,460,1.124,504,3.772,505,3.772,510,1.346,518,2.767,576,2.594,614,2.463,778,3.072,851,2.259,854,4.258,884,3.081,886,4.989,889,5.204,901,4.992,916,4.887,917,2.81,918,2.81,919,4.989,920,5.577,921,6.42,922,4.747,923,5.474,924,3.817,925,5.239,926,4.135,927,4.135,928,5.358,929,3.443,930,3.081,931,3.443,932,3.443,933,3.081,934,3.772,935,4.622,936,3.772,937,3.443,938,3.443,939,3.443,940,3.772,941,4.622,942,3.443,943,3.443,944,5.817,945,3.081,946,3.443,947,4.622,948,4.622,949,3.443,950,4.622,951,3.443,952,3.443,953,3.443,954,3.443,955,3.443,956,3.443,957,3.443,958,3.443,959,3.443]],["title/classes/KeyControls.html",[0,0.178,469,2.642]],["body/classes/KeyControls.html",[0,0.176,2,0.57,3,0.131,4,0.131,5,0.113,7,0.513,8,0.059,9,0.206,10,1.196,16,0.783,17,4.071,19,1.089,23,1.051,25,0.783,26,0.018,27,0.465,28,0.13,29,0.563,35,1.014,36,0.953,48,0.529,54,0.233,59,1.638,60,1.547,69,1.099,73,0.338,75,0.25,80,1.065,81,0.633,82,0.403,105,1.125,107,1.042,119,0.361,126,0.008,127,0.011,128,0.008,129,0.373,163,2.179,167,1.595,190,2.086,192,1.638,213,4.104,228,3.078,244,1.193,281,2.24,282,1.883,298,3.613,363,1.254,369,1.508,466,5.667,469,4.411,471,5.41,472,2.857,554,2.095,579,2.556,773,2.238,777,5.019,778,2.977,781,5.019,800,2.857,803,3.193,812,2.857,814,4.836,815,2.857,901,4.411,922,4.779,923,3.929,924,3.546,960,5.12,961,3.929,962,5.094,963,5.094,964,3.704,965,5.019,966,5.094,967,3.704,968,5.094,969,5.094,970,4.391,971,5.094,972,6.27,973,5.094,974,4.391,975,3.704,976,5.094,977,5.094,978,2.709,979,3.704,980,3.704,981,6.27,982,3.704,983,3.704,984,3.704,985,3.704,986,6.27,987,6.27,988,7.088,989,5.094,990,3.704,991,4.49,992,2.857,993,3.193,994,3.193,995,5.094,996,3.704,997,3.704,998,7.088,999,3.704,1000,3.704,1001,3.704,1002,3.704,1003,3.704,1004,3.704,1005,3.704,1006,3.704,1007,3.704,1008,3.704,1009,5.094,1010,5.094,1011,5.094,1012,3.704,1013,5.094,1014,3.704]],["title/interfaces/Layer.html",[458,0.232,508,1.606]],["body/interfaces/Layer.html",[3,0.137,4,0.185,5,0.117,8,0.062,9,0.309,22,0.439,26,0.018,27,0.669,28,0.159,29,0.76,54,0.341,59,1.233,60,1.233,77,1.512,80,1.276,107,1.979,126,0.009,127,0.012,128,0.009,129,0.283,156,3.2,190,1.795,257,2.941,267,2.542,336,1.979,337,1.979,345,2.411,418,2.426,421,1.876,458,0.426,460,1.085,503,2.358,508,3.273,510,2.557,511,3.002,514,3.806,516,2.24,517,2.24,518,2.728,527,2.984,530,3.167,533,2.486,617,3.542,627,2.051,1015,2.182,1016,3.164,1017,2.331,1018,2.331,1019,3.164,1020,2.331,1021,2.331,1022,3.164,1023,2.331,1024,2.331,1025,2.331]],["title/interfaces/Map.html",[77,0.807,458,0.232]],["body/interfaces/Map.html",[3,0.136,4,0.185,5,0.117,8,0.061,9,0.309,22,0.442,26,0.018,27,0.627,28,0.157,29,0.577,54,0.338,59,1.229,60,1.229,77,1.623,80,1.232,107,1.977,126,0.009,127,0.012,128,0.009,129,0.281,156,3.195,190,1.792,257,2.938,267,1.931,336,2.098,337,2.098,345,2.47,418,1.843,421,1.67,458,0.425,460,1.081,503,3.092,508,3.165,510,2.556,511,2.352,514,3.802,516,2.848,517,2.848,518,2.938,527,1.928,530,3.264,533,3.261,617,3.54,627,2.043,1015,2.173,1016,2.321,1017,2.321,1018,2.321,1019,3.156,1020,2.321,1021,2.321,1022,3.156,1023,2.321,1024,2.321,1025,2.321]],["title/classes/MouseControls.html",[0,0.178,470,2.642]],["body/classes/MouseControls.html",[0,0.178,2,0.577,3,0.133,4,0.133,5,0.114,7,0.52,8,0.06,9,0.208,10,1.586,16,0.791,18,2.188,19,0.702,23,1.092,25,0.97,26,0.018,27,0.575,28,0.151,29,0.697,35,1.103,36,1.276,40,0.548,41,1.105,54,0.235,58,0.466,73,0.343,75,0.253,81,0.638,82,0.297,116,2.441,119,0.572,126,0.008,127,0.011,128,0.008,129,0.377,140,1.513,167,1.535,179,3.616,191,1.384,192,2.054,228,4.121,244,1.888,329,2.734,335,2.167,346,4.288,352,3.106,363,1.679,414,2.273,426,1.941,428,1.901,467,6.485,470,4.436,472,2.895,493,3.236,579,2.58,615,2.508,620,3.616,773,2.268,785,3.236,786,3.236,788,3.236,798,3.236,800,3.965,801,5.88,908,2.908,922,4.436,924,3.566,961,3.965,974,5.694,1026,6.485,1027,5.14,1028,5.862,1029,5.862,1030,6.604,1031,5.14,1032,4.432,1033,6.305,1034,5.14,1035,3.754,1036,3.754,1037,5.14,1038,5.14,1039,3.754,1040,5.14,1041,7.213,1042,5.14,1043,5.14,1044,3.754,1045,3.754,1046,3.754,1047,3.754,1048,4.432,1049,4.432,1050,3.754,1051,5.862,1052,5.862,1053,5.862,1054,5.14,1055,3.754,1056,3.754,1057,3.754,1058,2.908,1059,3.754,1060,3.754,1061,3.754,1062,3.754,1063,5.14,1064,3.754,1065,3.754,1066,5.14,1067,5.14,1068,5.14,1069,3.754,1070,3.754,1071,5.14,1072,3.754,1073,3.754,1074,3.754,1075,3.754,1076,3.754,1077,3.754]],["title/interfaces/Object.html",[54,0.172,458,0.232]],["body/interfaces/Object.html",[3,0.134,4,0.183,5,0.115,8,0.06,9,0.308,22,0.444,26,0.018,27,0.667,28,0.16,29,0.57,54,0.352,59,1.608,60,1.608,77,1.504,80,1.272,107,1.968,126,0.008,127,0.011,128,0.008,129,0.277,156,3.172,190,1.923,257,3.155,267,1.908,336,2.075,337,2.075,345,2.462,418,1.821,421,1.655,458,0.423,460,1.062,503,2.324,508,3.089,510,2.522,511,2.324,514,3.787,516,2.208,517,2.208,518,2.704,527,1.895,530,3.149,533,2.45,617,3.53,627,2.008,1015,2.135,1016,2.281,1017,2.281,1018,2.281,1019,3.553,1020,3.819,1021,3.118,1022,3.118,1023,2.281,1024,2.281,1025,2.281]],["title/classes/OneUp.html",[0,0.178,1078,2.896]],["body/classes/OneUp.html",[0,0.128,2,0.75,3,0.096,4,0.096,5,0.082,7,0.676,8,0.043,9,0.164,10,1.368,16,0.624,18,2.256,19,0.506,21,1.736,22,0.431,23,1.105,25,1.085,26,0.018,27,0.629,28,0.157,29,0.761,35,1.097,36,1.141,37,2.148,39,2.056,40,0.712,41,0.795,48,0.422,54,0.304,55,1.195,58,0.673,59,1.276,60,0.955,69,0.877,70,2.159,73,0.247,75,0.182,77,1.165,81,0.504,82,0.46,87,2.088,89,2.856,95,3.542,100,2.05,101,1.948,114,2.037,115,1.529,118,1.958,119,0.529,126,0.006,127,0.009,128,0.006,129,0.511,140,1.195,167,1.219,189,0.954,191,1.752,282,2.256,311,1.217,325,1.652,330,1.432,335,2.725,341,2.206,350,3.349,360,1.652,361,2.483,363,1.334,366,1.857,369,1.1,373,2.366,412,2.318,413,2.85,414,2.101,415,2.747,416,3.275,417,1.356,418,1.432,419,2.932,420,1.356,421,1.142,422,3.481,423,1.574,424,1.927,425,1.356,426,1.948,427,1.356,428,2.004,429,1.356,430,1.356,431,2.315,433,3.236,434,1.755,437,1.984,438,1.755,439,1.755,440,1.755,441,2.758,442,2.524,443,1.356,444,1.736,445,1.927,446,1.927,447,1.356,448,1.927,449,1.927,450,1.927,451,1.356,452,1.927,453,1.736,455,1.901,491,2.084,492,1.901,614,2.65,615,2.785,695,2.915,778,1.927,814,3.131,851,1.529,857,1.217,924,1.529,978,2.159,1032,3.499,1078,4.706,1079,5.26,1080,2.33,1081,3.499,1082,2.636,1083,4.18,1084,4.059,1085,4.059,1086,3.499,1087,5.939,1088,4.059,1089,4.059,1090,4.059,1091,4.059,1092,4.059,1093,5.42,1094,4.059,1095,3.76,1096,4.059,1097,4.059,1098,2.856,1099,4.059,1100,4.059,1101,4.059,1102,4.059,1103,3.76,1104,3.43,1105,3.131,1106,4.059,1107,3.499,1108,4.059,1109,4.059,1110,2.636,1111,4.059,1112,4.203,1113,2.702,1114,2.702,1115,1.901,1116,1.901,1117,1.901,1118,1.901,1119,2.856,1120,1.901,1121,2.702,1122,1.901,1123,1.901,1124,1.901,1125,1.901,1126,1.901,1127,2.702,1128,1.901,1129,2.084,1130,2.33,1131,2.702,1132,1.901,1133,2.084,1134,2.702,1135,3.499,1136,3.131,1137,2.702,1138,2.702,1139,1.529,1140,2.702,1141,2.702,1142,2.702,1143,2.702]],["title/classes/Particle.html",[0,0.178,1144,2.438]],["body/classes/Particle.html",[0,0.125,2,0.738,3,0.093,4,0.093,5,0.08,7,0.365,8,0.042,9,0.161,10,1.358,16,0.613,17,3.924,18,2.248,19,0.493,22,0.418,23,1.105,25,1.08,26,0.018,27,0.625,28,0.157,29,0.757,35,1.108,36,1.174,37,2.125,39,1.936,40,0.701,41,0.776,48,0.556,54,0.313,58,0.751,59,0.62,60,0.62,69,0.644,70,3.214,73,0.363,75,0.269,77,1.151,80,0.448,81,0.495,82,0.38,87,2.075,93,1.292,100,2.028,101,1.931,118,1.936,119,0.257,126,0.006,127,0.009,128,0.006,129,0.508,140,1.901,167,1.204,189,2.28,190,0.742,191,1.627,203,3.072,325,1.621,330,1.405,335,2.7,341,2.178,350,3.338,360,1.621,361,2.46,363,1.317,366,1.862,369,1.621,373,2.343,412,2.289,413,2.826,414,2.075,415,2.721,416,3.234,417,1.323,418,1.405,419,2.909,420,1.323,421,1.121,422,3.468,423,1.544,424,1.891,425,1.323,426,2.202,427,1.323,428,1.473,429,1.323,430,1.323,431,2.28,433,3.035,434,1.711,437,1.954,438,1.711,439,1.711,440,1.711,441,2.28,442,2.075,443,1.323,444,1.704,445,1.891,446,1.891,447,1.323,448,1.891,449,1.891,450,1.891,451,1.323,452,1.891,453,1.704,458,0.163,492,1.854,611,1.854,614,2.46,615,2.684,695,3.033,851,1.491,857,1.187,908,3.55,924,2.253,940,2.802,978,2.118,1103,4.128,1104,3.378,1105,3.072,1115,1.854,1116,1.854,1117,1.854,1118,1.854,1119,2.802,1120,1.854,1122,1.854,1123,1.854,1124,1.854,1125,1.854,1126,1.854,1128,2.802,1129,3.072,1132,2.802,1133,2.033,1136,3.704,1139,3.027,1144,4.645,1145,2.033,1146,3.434,1147,3.434,1148,3.434,1149,2.586,1150,3.434,1151,3.434,1152,3.084,1153,4.196,1154,3.983,1155,3.072,1156,3.704,1157,3.072,1158,4.128,1159,2.635,1160,2.635,1161,2.635,1162,2.407,1163,3.434,1164,3.434,1165,4.14,1166,2.635,1167,3.434,1168,3.434,1169,3.434,1170,1.711,1171,2.272,1172,2.272,1173,2.272,1174,4.14,1175,2.033,1176,3.072,1177,4.14,1178,2.272,1179,4.954,1180,4.14,1181,1.854,1182,3.434,1183,4.14,1184,3.434,1185,1.592,1186,3.434,1187,2.802,1188,2.272,1189,2.272,1190,2.272,1191,2.272,1192,2.272,1193,2.272,1194,2.272,1195,1.854,1196,2.272,1197,2.272,1198,2.272,1199,2.272,1200,2.272,1201,2.272,1202,2.272,1203,2.272,1204,2.272]],["title/classes/ParticleEmitter.html",[0,0.178,1149,2.438]],["body/classes/ParticleEmitter.html",[0,0.146,2,0.809,3,0.109,4,0.109,5,0.093,7,0.426,8,0.049,9,0.181,10,1.313,16,0.687,18,2.206,19,0.575,22,0.427,23,1.117,25,1.112,26,0.018,27,0.647,28,0.159,29,0.783,35,1.132,36,1.196,37,1.944,39,1.772,40,0.768,41,0.905,48,0.547,54,0.315,69,0.722,73,0.281,75,0.208,77,1.241,81,0.555,82,0.416,87,2.153,93,1.202,100,1.855,101,1.618,110,3.069,116,2.12,118,1.772,126,0.007,127,0.01,128,0.007,129,0.525,140,1.547,167,1.298,189,2.036,191,1.721,267,1.651,325,1.817,330,1.576,335,2.784,341,2.348,350,3.403,360,2.348,361,2.602,363,1.42,366,1.882,369,1.817,373,2.479,412,2.468,413,2.97,414,2.376,415,2.879,416,3.487,417,1.543,418,1.576,419,3.043,420,1.543,421,1.257,422,3.546,423,1.731,424,2.12,425,1.543,426,2.03,427,1.543,428,1.944,429,1.543,430,1.543,431,2.497,433,3.151,434,1.997,437,2.14,438,1.997,439,1.997,440,1.997,441,2.497,442,2.039,443,1.543,444,1.91,445,2.12,446,2.12,447,1.543,448,2.12,449,2.12,450,2.12,451,1.543,452,2.12,453,1.91,614,2.602,615,2.735,695,3.208,857,1.385,908,2.526,919,3.444,1081,2.651,1115,2.163,1116,2.163,1117,2.163,1118,2.163,1119,3.141,1120,2.163,1122,2.163,1123,2.163,1124,2.163,1125,2.163,1126,2.163,1132,2.163,1144,4.473,1149,3.747,1152,2.879,1153,4.151,1155,3.444,1156,3.444,1157,3.444,1158,3.444,1162,2.698,1205,5.283,1206,2.651,1207,4.465,1208,3.85,1209,3.699,1210,4.465,1211,5.258,1212,6.393,1213,4.465,1214,4.465,1215,4.465,1216,3.075,1217,3.075,1218,3.075,1219,2.372,1220,3.075,1221,3.075,1222,3.075]],["title/interfaces/ParticleOptions.html",[458,0.232,1153,2.438]],["body/interfaces/ParticleOptions.html",[0,0.179,3,0.134,4,0.134,5,0.115,8,0.06,9,0.209,10,1.207,17,3.351,18,1.588,22,0.291,26,0.018,28,0.137,37,1.396,39,1.272,40,0.859,41,1.111,48,0.536,54,0.302,58,0.849,59,1.215,60,1.215,70,3.841,73,0.471,75,0.348,80,0.999,81,0.469,82,0.465,93,1.583,100,1.332,101,1.588,118,1.272,119,0.368,126,0.008,127,0.011,128,0.008,129,0.277,140,2.203,189,2.641,190,1.968,203,2.912,330,1.332,335,1.908,366,0.929,426,2.365,442,2.001,458,0.234,460,1.062,492,2.656,611,3.63,614,2.393,615,2.704,695,3.429,851,2.135,857,1.7,908,4.027,924,2.135,940,2.656,978,2.008,1103,4.535,1104,2.656,1105,2.912,1128,2.656,1129,2.912,1132,3.63,1133,2.912,1136,4.535,1139,4.027,1144,4.827,1145,2.912,1146,3.255,1147,3.255,1148,3.255,1149,2.451,1150,3.255,1151,3.255,1152,3.149,1153,4.297,1155,2.912,1156,4.535,1157,2.912,1158,5.104,1162,2.281,1163,3.255,1164,3.255,1165,5.069,1167,3.255,1168,3.255,1169,3.255,1170,2.451,1171,4.449,1172,4.449,1173,4.449,1174,5.89,1175,3.98,1176,4.875,1177,5.89,1178,4.449,1179,6.138,1180,5.89,1181,3.63,1182,5.069,1183,5.89,1184,5.705,1185,3.118,1186,5.069,1187,3.63,1188,3.255,1189,3.255,1190,3.255,1191,3.255,1192,3.255,1193,3.255,1194,3.255,1195,2.656,1196,3.255,1197,3.255,1198,3.255,1199,3.255,1200,3.255,1201,3.255,1202,3.255,1203,3.255,1204,3.255]],["title/interfaces/Point.html",[21,1.606,458,0.232]],["body/interfaces/Point.html",[0,0.168,3,0.126,4,0.126,5,0.108,7,0.492,8,0.057,9,0.2,16,0.546,21,2.436,22,0.415,25,0.947,26,0.018,28,0.102,35,0.575,48,0.592,54,0.162,55,1.046,58,0.765,59,1.831,60,1.839,61,2.5,64,2.01,73,0.324,75,0.334,80,0.841,81,0.441,82,0.577,87,1.753,105,1.19,107,1,115,3.484,119,0.555,126,0.008,127,0.011,128,0.008,190,2.031,281,1.753,282,2.479,288,2.991,426,2.426,444,1.52,458,0.22,460,1,488,1.783,579,1.783,580,2.5,592,2.741,593,2.5,620,2.5,624,2.741,734,2.5,778,2.925,899,2.741,906,2.741,908,4.126,991,5.172,1170,2.307,1181,2.5,1195,2.5,1223,2.741,1224,6.223,1225,3.817,1226,3.063,1227,3.063,1228,3.063,1229,3.063,1230,3.063,1231,3.063,1232,3.063,1233,3.063,1234,5.583,1235,3.063,1236,3.063,1237,6.144,1238,6.223,1239,3.063,1240,5.31,1241,3.063,1242,3.063,1243,3.063,1244,3.063,1245,3.063,1246,4.91,1247,4.267,1248,3.063,1249,3.063,1250,3.063,1251,3.063,1252,3.063,1253,3.063,1254,4.91,1255,3.063,1256,3.063,1257,3.063,1258,3.063,1259,5.31,1260,4.91,1261,3.063,1262,3.063,1263,3.063,1264,3.063]],["title/interfaces/Property.html",[458,0.232,617,1.783]],["body/interfaces/Property.html",[3,0.142,4,0.19,5,0.122,8,0.064,9,0.304,22,0.437,26,0.018,27,0.674,28,0.158,54,0.343,59,1.265,60,1.265,77,1.527,80,1.296,107,1.957,126,0.009,127,0.012,128,0.009,129,0.293,156,3.25,190,2.031,257,2.974,267,1.986,336,1.999,337,1.999,345,2.432,418,1.896,421,1.706,458,0.43,460,1.127,503,2.419,508,3.128,510,2.545,511,2.419,514,3.839,516,2.298,517,2.298,518,2.771,527,2.011,530,3.198,533,2.551,617,3.621,627,2.131,1015,2.266,1016,2.421,1017,2.421,1018,2.421,1019,3.246,1020,2.421,1021,2.421,1022,3.246,1023,2.421,1024,2.421,1025,2.421]],["title/classes/Rect.html",[0,0.178,615,1.606]],["body/classes/Rect.html",[0,0.172,2,0.773,3,0.129,4,0.129,5,0.111,7,0.799,8,0.058,9,0.204,16,0.773,18,2.079,19,0.68,22,0.435,23,1.1,25,1.004,26,0.018,27,0.596,28,0.156,29,0.722,35,1.006,36,1.078,37,1.344,39,1.225,40,0.531,48,0.378,54,0.263,55,1.48,56,2.674,58,0.625,69,0.588,73,0.459,75,0.339,77,1.081,80,0.618,81,0.625,82,0.517,87,1.774,93,1.674,100,1.283,101,1.119,118,1.225,119,0.49,126,0.008,127,0.011,128,0.008,129,0.495,167,1.131,191,1.552,288,3.038,325,1.48,326,2.388,330,1.774,336,2.079,337,2.041,341,2.047,342,2.844,345,2.378,350,3.226,360,1.48,361,2.346,363,1.238,366,1.9,373,2.235,412,2.151,413,2.596,414,2.532,415,2.596,417,1.824,418,1.283,419,2.801,420,1.824,421,1.023,422,3.207,423,1.41,424,1.726,425,1.824,426,2.01,427,1.824,428,2.131,429,1.824,430,1.824,431,1.726,433,2.264,437,1.48,441,1.726,442,1.41,443,1.824,444,1.555,445,1.726,446,1.726,447,1.824,448,1.726,449,1.726,450,1.726,451,1.824,452,1.726,453,2.466,458,0.225,488,2.524,615,2.793,857,1.637,1058,2.844,1083,5.593,1139,3.693,1152,2.94,1185,4.496,1265,2.804,1266,4.335,1267,4.335,1268,4.335,1269,4.335,1270,4.751,1271,5.028,1272,3.635,1273,3.635,1274,3.635,1275,3.038,1276,3.759,1277,3.635,1278,3.038,1279,2.056,1280,2.558,1281,2.361,1282,2.361,1283,2.558]],["title/interfaces/RectStyleOptions.html",[458,0.232,1270,2.642]],["body/interfaces/RectStyleOptions.html",[0,0.23,3,0.172,4,0.172,5,0.147,7,0.672,8,0.077,9,0.246,22,0.413,26,0.018,28,0.1,40,0.708,54,0.221,55,1.426,56,2.578,58,0.602,73,0.555,75,0.41,80,1.129,81,0.602,82,0.568,93,1.636,119,0.473,126,0.011,127,0.014,128,0.011,129,0.355,288,2.929,326,2.301,330,1.71,336,2.06,337,2.019,342,2.742,345,2.347,366,1.635,414,1.879,426,1.871,428,1.792,453,2.073,458,0.3,460,1.364,488,3.051,615,2.979,857,2.182,1058,2.742,1083,5.533,1139,4.249,1152,3.136,1185,4.539,1265,3.738,1266,4.179,1267,4.179,1268,4.179,1269,4.179,1270,4.9,1275,2.929,1276,3.673,1278,2.929,1279,3.439,1280,3.41,1281,3.147,1282,3.147,1283,3.41]],["title/classes/Renderer.html",[0,0.178,331,2.124]],["body/classes/Renderer.html",[0,0.289,2,0.623,3,0.143,4,0.143,5,0.123,7,0.561,8,0.065,9,0.219,16,0.832,19,0.757,22,0.417,23,1.081,25,0.937,26,0.018,27,0.556,28,0.147,29,0.673,35,0.875,36,1.012,40,0.79,41,1.191,48,0.421,73,0.369,74,2.202,75,0.273,82,0.428,93,1.456,94,2.704,105,0.875,116,2.569,119,0.395,126,0.009,127,0.012,128,0.009,129,0.396,140,1.592,163,2.314,167,1.463,179,2.847,282,2,326,3.088,329,3.998,331,3.06,334,4.958,335,2.779,336,2.083,337,2.036,338,3.513,340,4.172,341,2.838,342,3.06,343,4.401,345,2.192,346,4.223,352,3.93,354,3.269,357,3.805,358,4.286,366,1.601,367,4.372,369,1.647,370,4.172,372,4.172,373,2.097,374,3.06,375,5.016,376,4.172,378,4.172,379,4.172,381,2.847,384,2.628,386,3.49,388,3.49,1281,3.513,1282,3.513,1284,3.49,1285,5.409,1286,5.409,1287,5.409,1288,6.093,1289,4.048,1290,5.409,1291,4.048,1292,4.048,1293,4.048,1294,4.048,1295,4.048,1296,4.048,1297,4.048,1298,4.048,1299,5.409,1300,4.048,1301,5.409,1302,4.048,1303,4.048,1304,4.048,1305,4.048,1306,5.409,1307,4.048,1308,4.048,1309,4.048,1310,4.048,1311,4.048,1312,4.048,1313,5.409,1314,4.048,1315,4.048,1316,4.048,1317,4.048]],["title/interfaces/Resolution.html",[458,0.232,934,2.642]],["body/interfaces/Resolution.html",[3,0.143,4,0.143,5,0.122,8,0.086,9,0.218,22,0.407,26,0.018,28,0.134,40,0.788,41,1.185,48,0.761,59,1.768,60,1.768,69,0.872,73,0.367,75,0.438,77,1.159,82,0.535,93,1.084,94,2.516,105,0.651,119,0.526,126,0.009,127,0.012,128,0.009,129,0.295,140,1.185,167,1.522,191,1.636,192,2.114,199,2.833,200,2.833,213,2.433,244,1.736,363,1.598,366,0.991,374,2.278,458,0.334,460,1.133,504,2.833,505,2.833,510,1.357,518,2.776,576,2.615,614,2.473,778,3.306,851,2.278,854,4.275,884,3.106,886,5.006,889,5.219,901,4.275,916,5.202,917,2.833,918,2.833,919,5.219,920,5.833,921,6.131,922,3.792,923,4.687,924,3.049,925,5.003,926,4.158,927,4.158,928,5.371,929,4.648,930,4.158,931,4.648,932,4.648,933,4.158,934,4.275,935,5.595,936,4.566,937,3.472,938,3.472,939,3.472,940,3.792,941,4.648,942,3.472,943,3.472,944,5.833,945,3.106,946,3.472,947,4.648,948,4.648,949,3.472,950,4.648,951,3.472,952,3.472,953,3.472,954,3.472,955,3.472,956,3.472,957,3.472,958,3.472,959,3.472]],["title/classes/Scene.html",[0,0.178,680,2.124]],["body/classes/Scene.html",[0,0.149,2,0.819,3,0.111,4,0.111,5,0.096,7,0.436,8,0.05,9,0.184,16,0.698,18,2.215,19,0.588,22,0.418,23,1.12,25,1.107,26,0.018,27,0.642,28,0.159,29,0.777,35,1.12,36,1.156,37,1.969,39,1.794,40,0.663,48,0.472,54,0.332,69,0.734,73,0.287,74,1.28,75,0.212,77,1.253,81,0.564,82,0.421,87,2.164,93,1.221,100,1.879,101,1.639,118,1.794,126,0.007,127,0.01,128,0.007,129,0.522,141,2.664,164,3.912,167,1.312,191,1.984,200,3.192,207,4.497,325,1.847,330,1.601,335,2.792,341,2.516,350,3.412,360,1.847,361,2.622,363,1.435,366,1.887,369,1.28,373,2.498,412,2.494,413,2.99,414,2.26,415,2.901,416,3.523,417,1.578,418,1.601,419,3.061,420,1.578,421,1.277,422,3.556,423,1.759,424,2.155,425,1.578,426,1.794,427,1.578,428,1.678,429,1.578,430,1.578,431,2.528,433,3.166,434,2.041,437,2.167,438,2.041,439,2.041,440,2.041,441,2.528,442,2.064,443,1.578,444,1.941,445,2.155,446,2.155,447,1.578,448,2.155,449,2.155,450,3.059,451,1.578,452,2.768,453,1.941,459,5.312,680,3.977,857,1.416,1115,2.212,1116,2.212,1117,2.212,1118,2.212,1119,3.192,1120,2.212,1122,2.212,1123,2.212,1124,2.212,1125,2.212,1126,2.212,1318,2.71,1319,5.83,1320,5.83,1321,4.537,1322,6.798,1323,4.537,1324,4.537,1325,3.912,1326,3.144,1327,3.144,1328,3.144,1329,3.144,1330,3.144,1331,3.144]],["title/interfaces/Scripts.html",[458,0.232,1332,2.642]],["body/interfaces/Scripts.html",[0,0.186,3,0.139,4,0.227,5,0.119,8,0.062,9,0.214,10,1.494,22,0.298,26,0.018,27,0.699,28,0.109,48,0.623,54,0.179,58,0.797,69,0.633,73,0.357,75,0.357,80,1.286,81,0.486,82,0.559,93,1.054,105,1.038,119,0.729,126,0.009,127,0.012,128,0.009,139,2.754,140,1.152,189,1.381,264,2.754,265,2.754,266,2.754,271,2.542,273,4.266,274,3.62,278,2.754,279,2.365,281,1.844,282,2.478,301,4.166,305,3.434,309,3.906,312,2.889,334,2.542,458,0.242,460,1.102,525,3.434,554,2.992,1332,4.714,1333,3.019,1334,3.019,1335,4.484,1336,5.164,1337,5.531,1338,3.375,1339,3.375,1340,3.196,1341,3.375,1342,3.375,1343,3.375,1344,3.375,1345,4.56,1346,6.087,1347,4.56,1348,4.08,1349,4.56,1350,3.375,1351,3.375,1352,3.375,1353,5.164,1354,3.375,1355,3.375,1356,3.375,1357,3.375,1358,4.56,1359,4.56,1360,3.375,1361,4.56,1362,4.56,1363,5.327,1364,4.949,1365,3.375,1366,4.56,1367,3.375,1368,4.56,1369,3.375,1370,4.56,1371,3.375,1372,3.375,1373,5.531,1374,3.375,1375,3.375,1376,3.375,1377,3.375,1378,3.375,1379,3.375,1380,3.375,1381,3.375,1382,3.375,1383,3.375,1384,3.375,1385,3.375,1386,3.375,1387,4.56,1388,3.375,1389,5.531,1390,3.375,1391,3.375,1392,4.56,1393,3.375,1394,3.375,1395,4.56,1396,3.375,1397,3.375,1398,3.375,1399,3.375,1400,3.375,1401,3.375,1402,3.375,1403,3.375,1404,3.375,1405,3.375,1406,3.375,1407,3.375,1408,3.375,1409,3.375,1410,3.375]],["title/classes/ShaderProgram.html",[0,0.178,1340,2.269]],["body/classes/ShaderProgram.html",[0,0.147,2,0.477,3,0.11,4,0.234,5,0.094,7,0.43,8,0.049,9,0.182,10,1.585,16,0.691,19,0.58,22,0.347,23,1.074,25,0.986,26,0.018,27,0.71,28,0.15,29,0.709,35,1.095,36,1.15,48,0.549,54,0.205,58,0.719,69,0.501,73,0.283,75,0.303,80,1.293,81,0.558,82,0.523,93,1.209,105,0.937,119,0.7,126,0.007,127,0.01,128,0.007,129,0.45,139,3.159,140,1.322,158,3.159,163,1.921,189,1.094,264,3.159,265,3.159,266,3.159,271,2.012,273,4.235,274,3.995,278,3.159,279,1.873,281,1.973,282,2.504,301,4.162,305,3.761,309,3.477,312,2.608,334,3.429,458,0.192,525,2.916,554,2.54,1332,4.764,1333,5.706,1334,2.39,1335,3.992,1336,5.526,1337,6.043,1338,3.872,1339,3.872,1340,3.499,1341,4.553,1342,4.553,1343,4.553,1344,2.672,1345,4.993,1346,6.187,1347,3.872,1348,4.467,1349,4.993,1350,3.872,1351,3.872,1352,3.872,1353,4.553,1354,2.672,1355,2.672,1356,2.672,1357,2.672,1358,4.993,1359,3.872,1360,3.872,1361,3.872,1362,3.872,1363,5.223,1364,4.944,1365,3.872,1366,3.872,1367,3.872,1368,4.993,1369,3.872,1370,4.553,1371,2.672,1372,2.672,1373,5.526,1374,2.672,1375,2.672,1376,2.672,1377,2.672,1378,4.993,1379,2.672,1380,2.672,1381,2.672,1382,2.672,1383,2.672,1384,2.672,1385,3.872,1386,2.672,1387,3.872,1388,2.672,1389,4.993,1390,2.672,1391,2.672,1392,3.872,1393,2.672,1394,2.672,1395,3.872,1396,2.672,1397,2.672,1398,3.872,1399,4.553,1400,2.672,1401,2.672,1402,2.672,1403,2.672,1404,2.672,1405,2.672,1406,2.672,1407,4.993,1408,2.672,1409,2.672,1410,2.672,1411,4.491,1412,5.281,1413,4.491,1414,4.491,1415,4.491,1416,3.099,1417,3.099,1418,3.872,1419,3.099,1420,3.099,1421,3.099,1422,3.099,1423,3.099,1424,3.099,1425,3.099,1426,3.099,1427,3.099,1428,3.099,1429,3.099,1430,3.099,1431,3.099,1432,3.099]],["title/classes/Sound.html",[0,0.178,162,1.997]],["body/classes/Sound.html",[0,0.185,2,0.6,3,0.138,4,0.212,5,0.119,7,0.829,8,0.062,9,0.214,10,1.417,16,0.811,19,0.729,22,0.22,23,1.048,25,0.919,26,0.018,27,0.545,28,0.138,29,0.661,35,0.967,36,1.118,40,0.57,48,0.548,54,0.273,55,1.552,58,0.742,69,0.853,73,0.481,75,0.356,79,3.187,80,1.016,81,0.655,82,0.473,91,4.206,101,1.2,105,0.631,107,1.097,110,3.669,113,3.902,119,0.653,126,0.009,127,0.012,128,0.009,129,0.438,137,3.87,141,1.861,162,4.139,163,2.257,167,1.345,192,1.941,210,3.711,234,4.853,244,1.255,281,1.624,298,2.806,312,1.756,363,1.472,369,1.587,403,3.187,458,0.241,579,2.647,693,3.007,1110,3.425,1152,3.387,1187,3.711,1433,3.007,1434,3.425,1435,4.069,1436,4.548,1437,4.069,1438,4.58,1439,5.257,1440,3.711,1441,4.393,1442,3.899,1443,4.206,1444,3.899,1445,3.899,1446,3.899,1447,4.548,1448,4.548,1449,3.899,1450,4.548,1451,4.069,1452,3.899,1453,3.899,1454,3.899,1455,4.548,1456,3.899,1457,3.899,1458,3.711,1459,3.361,1460,5.154,1461,3.361,1462,3.361,1463,5.522,1464,3.361,1465,3.361,1466,3.361,1467,3.361,1468,3.361,1469,3.361,1470,3.361,1471,3.007,1472,3.361,1473,3.361,1474,3.361,1475,3.361,1476,3.361,1477,3.361]],["title/classes/SoundGroup.html",[0,0.178,1478,2.896]],["body/classes/SoundGroup.html",[0,0.217,2,0.704,3,0.162,4,0.162,5,0.139,7,0.896,8,0.073,9,0.237,10,1.328,16,0.902,19,0.856,23,0.996,25,0.902,26,0.018,27,0.535,28,0.134,29,0.648,35,0.948,36,1.096,40,0.856,48,0.476,54,0.268,55,1.725,58,0.939,73,0.418,75,0.309,81,0.728,82,0.464,110,3.95,113,4.08,114,2.942,119,0.572,126,0.01,127,0.013,128,0.01,129,0.474,162,4.09,369,1.862,421,1.919,851,2.588,1152,2.639,1162,4.121,1170,2.971,1219,4.521,1434,5.014,1435,4.521,1437,4.521,1438,3.806,1441,4.121,1451,4.521,1458,3.219,1471,4.521,1478,5.563,1479,5.438,1480,3.945,1481,5.861,1482,5.861,1483,5.861,1484,5.861,1485,5.861,1486,5.861,1487,5.861,1488,5.861,1489,4.576,1490,5.861,1491,4.576,1492,3.945,1493,4.576]],["title/interfaces/SoundOptions.html",[458,0.232,1441,2.269]],["body/interfaces/SoundOptions.html",[0,0.207,3,0.155,4,0.201,5,0.133,7,0.605,8,0.07,9,0.23,10,1.168,22,0.357,26,0.018,28,0.118,40,0.638,48,0.657,54,0.289,55,1.285,58,0.706,69,1.023,73,0.519,75,0.384,79,2.639,80,0.742,81,0.542,82,0.5,91,4.001,101,1.344,105,0.706,107,1.229,110,3.025,113,3.217,119,0.653,126,0.01,127,0.013,128,0.01,129,0.32,137,4.049,141,1.541,162,4.113,167,1.508,192,2.005,210,3.072,234,4.714,244,1.406,281,1.344,298,2.323,312,1.966,363,1.557,403,4.198,458,0.27,460,1.229,579,2.192,693,3.368,1110,2.836,1152,3.312,1187,4.001,1433,3.368,1434,2.836,1435,3.368,1436,3.765,1437,3.368,1438,4.107,1439,5.316,1440,3.072,1441,4.198,1443,4.001,1447,3.765,1448,3.765,1450,3.765,1451,3.368,1455,3.765,1458,4.001,1459,4.903,1460,5.453,1461,3.765,1462,3.765,1463,5.776,1464,3.765,1465,3.765,1466,3.765,1467,3.765,1468,3.765,1469,3.765,1470,3.765,1471,3.368,1472,3.765,1473,3.765,1474,3.765,1475,3.765,1476,3.765,1477,3.765]],["title/classes/SoundPool.html",[0,0.178,1494,2.896]],["body/classes/SoundPool.html",[0,0.217,2,0.704,3,0.162,4,0.229,5,0.139,7,0.896,8,0.073,9,0.237,10,1.481,16,0.902,19,0.856,22,0.407,23,1.03,25,0.902,26,0.018,27,0.535,28,0.141,29,0.648,35,0.948,36,1.096,40,0.668,48,0.609,54,0.268,55,1.725,58,0.728,69,0.74,71,4.124,73,0.418,75,0.309,80,1.099,81,0.728,82,0.512,110,3.75,113,3.857,119,0.572,126,0.01,127,0.013,128,0.01,129,0.429,162,4.145,192,1.288,267,2.167,369,1.862,403,2.765,1110,3.806,1152,3.302,1208,6.218,1434,4.428,1438,4.428,1439,3.219,1440,4.124,1441,4.358,1443,4.124,1458,3.219,1479,5.563,1492,3.945,1494,5.26,1495,3.945,1496,5.053,1497,5.861,1498,5.861,1499,5.861,1500,5.861,1501,5.861,1502,6.467,1503,6.819,1504,5.861,1505,5.861,1506,4.576,1507,4.576,1508,4.576,1509,4.576,1510,4.576,1511,3.529,1512,4.576]],["title/classes/Sprite.html",[0,0.178,94,1.456]],["body/classes/Sprite.html",[0,0.144,2,0.68,3,0.107,4,0.107,5,0.092,7,0.723,8,0.048,9,0.258,10,1.505,16,0.68,18,1.958,19,0.568,21,2.453,22,0.42,23,1.116,25,1.01,26,0.018,27,0.599,28,0.154,29,0.726,35,1.029,36,1.14,37,1.122,39,1.023,40,0.443,48,0.683,54,0.238,55,1.301,56,2.352,58,0.853,69,0.491,73,0.277,75,0.205,77,0.951,81,0.549,82,0.413,87,1.606,93,1.713,94,2.821,100,1.071,101,0.934,105,0.986,107,1.614,114,2.219,118,1.023,119,0.621,126,0.007,127,0.01,128,0.007,129,0.466,156,2.219,163,1.892,167,0.995,190,1.614,191,1.405,204,2.872,281,2.147,298,3.05,311,1.991,325,1.235,330,1.561,336,1.849,337,1.849,341,1.8,350,3.091,360,1.235,361,2.124,363,1.089,366,1.875,373,2.023,412,1.892,413,2.35,414,1.715,415,2.35,417,1.523,418,1.071,419,2.582,420,1.523,421,0.854,422,3.022,423,1.177,424,1.441,425,1.523,426,2.113,427,1.523,428,1.122,429,1.523,430,1.523,431,1.441,433,1.991,437,1.235,441,1.441,442,1.177,443,1.523,444,1.298,445,1.441,446,1.441,447,1.523,448,1.441,449,1.441,450,1.441,451,1.523,452,1.441,453,2.232,488,1.523,605,4.702,666,3.671,668,3.671,695,2.219,717,2.135,719,2.135,741,4.025,742,4.025,821,3.813,849,4.068,850,3.8,857,1.366,925,3.111,970,3.813,1058,2.502,1107,3.813,1275,2.672,1276,3.465,1278,2.672,1513,2.616,1514,4.422,1515,4.422,1516,4.422,1517,5.734,1518,5.734,1519,4.422,1520,4.422,1521,4.422,1522,4.422,1523,4.422,1524,4.423,1525,4.422,1526,4.499,1527,4.499,1528,4.499,1529,5.486,1530,6.096,1531,6.096,1532,3.813,1533,3.034,1534,3.034,1535,3.034,1536,3.034,1537,3.034,1538,3.034,1539,3.034,1540,3.034,1541,3.034,1542,2.616,1543,3.034,1544,3.034,1545,3.034,1546,3.034,1547,3.034,1548,4.422,1549,3.034,1550,3.034,1551,3.034,1552,3.034,1553,3.034,1554,3.034,1555,4.422,1556,4.422,1557,4.422,1558,3.034,1559,3.034,1560,3.034,1561,3.034,1562,3.034]],["title/classes/State.html",[0,0.178,978,1.997]],["body/classes/State.html",[0,0.173,2,0.561,3,0.129,4,0.129,5,0.111,7,0.801,8,0.058,9,0.204,10,1.518,13,2.852,16,0.775,18,2.174,19,0.683,22,0.404,23,1.088,25,1.006,26,0.018,27,0.597,28,0.152,29,0.723,35,1.094,36,1.08,37,1.864,39,1.946,48,0.648,54,0.23,55,1.484,58,0.774,65,3.547,75,0.246,79,4.467,81,0.626,82,0.517,86,2.064,100,1.779,101,2.012,105,1.058,107,1.903,114,3.393,116,2.394,118,2.203,119,0.492,126,0.008,127,0.011,128,0.008,129,0.479,167,1.521,191,1.357,192,1.626,244,1.175,282,2.303,314,2.205,363,1.664,374,2.852,421,1.419,442,1.955,554,2.064,627,3.477,685,5.829,756,4.98,978,4.209,1048,4.346,1049,4.346,1110,3.274,1325,4.346,1496,4.346,1563,3.146,1564,5.776,1565,5.041,1566,5.041,1567,7.6,1568,5.041,1569,5.041,1570,3.649,1571,3.649,1572,3.649,1573,3.649,1574,3.649,1575,3.649,1576,6.23,1577,3.649,1578,5.041,1579,3.649,1580,5.041,1581,3.649,1582,6.761,1583,5.041,1584,3.649,1585,5.041,1586,5.041,1587,3.649,1588,3.649,1589,6.23,1590,6.538,1591,6.23,1592,5.041,1593,6.23,1594,5.041]],["title/classes/Text.html",[0,0.178,380,2.124]],["body/classes/Text.html",[0,0.176,2,0.786,3,0.132,4,0.132,5,0.113,7,0.809,8,0.059,9,0.207,16,0.786,18,2.094,19,0.696,22,0.418,23,1.091,25,1.013,26,0.018,27,0.601,28,0.154,29,0.728,35,1.016,36,1.092,37,1.376,39,1.254,40,0.544,48,0.387,54,0.267,55,1.504,56,2.718,58,0.635,67,2.105,69,0.602,73,0.466,75,0.345,77,1.099,80,1.184,81,0.635,82,0.497,87,1.796,88,2.618,93,1.938,100,1.313,101,1.145,115,2.105,118,1.254,119,0.498,126,0.008,127,0.011,128,0.008,129,0.498,140,1.095,167,1.15,191,1.571,325,1.515,326,1.767,329,3.104,330,1.803,341,2.08,350,3.242,360,1.515,361,2.375,363,1.258,366,1.904,373,2.263,380,4.409,412,2.186,413,2.628,414,1.981,415,2.628,417,1.868,418,1.313,419,2.829,420,1.868,421,1.047,422,3.23,423,1.443,424,1.767,425,1.868,426,1.573,427,1.868,428,1.376,429,1.868,430,1.868,431,1.767,433,2.301,437,1.515,441,1.767,442,1.443,443,1.868,444,1.592,445,1.767,446,1.767,447,1.868,448,1.767,449,1.767,450,1.767,451,1.868,452,1.767,453,2.497,458,0.23,488,2.565,582,2.249,695,3.304,857,1.676,1058,2.891,1139,2.891,1152,1.676,1185,4.288,1209,3.595,1275,3.088,1276,3.796,1278,3.088,1279,2.105,1280,3.595,1283,2.618,1595,2.871,1596,4.406,1597,4.406,1598,4.406,1599,4.406,1600,4.406,1601,4.406,1602,4.406,1603,4.785,1604,5.11,1605,5.416,1606,3.722,1607,3.722,1608,4.406,1609,3.208,1610,3.208,1611,3.208,1612,3.208]],["title/interfaces/TextOptions.html",[458,0.232,1603,2.642]],["body/interfaces/TextOptions.html",[0,0.225,3,0.168,4,0.168,5,0.144,7,0.657,8,0.076,9,0.243,22,0.338,26,0.018,28,0.136,29,0.663,40,0.693,54,0.217,55,1.395,56,2.522,58,0.589,67,2.682,73,0.547,75,0.405,80,1.271,81,0.589,82,0.547,88,3.336,93,1.918,115,2.682,119,0.462,126,0.011,127,0.013,128,0.011,129,0.347,140,1.764,326,2.251,329,3.189,330,1.673,366,1.619,380,4.434,453,2.028,458,0.293,460,1.334,488,3.009,582,2.865,695,3.468,857,2.135,1058,2.682,1139,4.118,1152,2.7,1185,4.175,1209,3.336,1275,2.865,1276,3.623,1278,2.865,1279,3.391,1280,3.336,1283,3.336,1595,3.657,1596,4.088,1597,4.088,1598,4.088,1599,4.088,1600,4.088,1601,4.088,1602,4.088,1603,4.861,1605,5.169,1608,6.276,1609,5.169,1610,5.957,1611,5.669,1612,4.088]],["title/classes/Texture.html",[0,0.178,850,1.884]],["body/classes/Texture.html",[0,0.249,2,0.807,3,0.186,4,0.186,5,0.209,7,0.954,8,0.084,9,0.259,19,0.982,23,0.933,25,0.807,26,0.018,27,0.479,28,0.132,29,0.58,40,0.767,54,0.292,55,1.879,58,0.793,73,0.479,75,0.354,80,1.17,81,0.793,82,0.415,119,0.623,126,0.012,127,0.014,128,0.012,129,0.468,139,4.492,141,1.852,156,3.746,178,5.505,179,4.492,180,5.505,181,6.174,204,4.146,225,4.842,488,2.634,579,3.205,850,3.746,961,4.925,1613,4.525,1614,6.386,1615,6.386,1616,6.386,1617,5.248,1618,5.248]],["title/interfaces/TextureInfo.html",[458,0.232,1619,2.642]],["body/interfaces/TextureInfo.html",[0,0.16,3,0.12,4,0.12,5,0.103,8,0.054,9,0.193,10,1.51,22,0.312,26,0.018,28,0.07,40,0.88,41,0.994,48,0.626,54,0.218,58,0.789,69,0.547,73,0.308,74,1.375,75,0.228,77,1.027,80,0.812,81,0.42,82,0.503,86,2.702,87,1.04,94,2.77,105,1.14,119,0.734,126,0.008,127,0.011,128,0.008,141,1.956,189,1.686,192,0.951,204,2.194,225,3.361,226,4.647,244,1.088,246,2.377,272,2.887,273,2.887,274,2.887,275,2.377,279,2.042,280,2.377,282,1.249,309,2.702,311,2.496,312,1.522,322,2.042,324,2.377,325,1.945,326,2.632,327,2.606,328,2.606,329,3.608,330,1.192,331,3.135,332,2.377,335,2.562,336,1.695,337,1.345,338,2.194,342,1.911,343,3.102,345,1.61,347,2.606,357,2.377,358,3.899,360,1.375,361,1.375,362,2.606,363,0.832,364,2.377,366,0.832,367,2.042,380,2.702,381,2.377,382,2.606,384,2.194,389,2.606,396,2.606,397,2.606,412,2.044,458,0.209,460,0.951,577,2.194,582,2.887,614,2.452,615,2.044,622,3.361,629,3.685,630,2.606,631,2.606,634,2.606,680,1.911,730,2.194,759,2.606,850,3.716,1082,2.194,1095,2.606,1098,2.377,1279,3.135,1281,3.102,1282,2.194,1335,3.102,1340,3.349,1511,2.606,1524,4.275,1619,3.361,1620,2.606,1621,4.778,1622,2.913,1623,2.913,1624,2.913,1625,2.913,1626,2.913,1627,2.913,1628,2.913,1629,2.913,1630,2.913,1631,2.913,1632,2.913,1633,2.913,1634,2.913,1635,2.913,1636,4.119,1637,2.913,1638,2.913,1639,2.913,1640,2.913,1641,2.913,1642,2.913,1643,2.913,1644,2.913,1645,2.913,1646,4.119,1647,2.913,1648,4.119,1649,4.119,1650,2.913,1651,2.913,1652,2.913,1653,3.685,1654,2.913,1655,4.778,1656,4.119,1657,2.913,1658,2.913,1659,2.913,1660,2.913,1661,2.913,1662,2.913,1663,2.913,1664,2.913,1665,2.913,1666,4.778,1667,4.119,1668,2.913,1669,2.913,1670,4.119,1671,2.913,1672,2.913,1673,2.913,1674,2.913,1675,5.194,1676,2.913,1677,4.119,1678,2.913,1679,2.913,1680,4.119,1681,2.913,1682,2.913,1683,2.913,1684,2.913,1685,2.913,1686,2.913,1687,2.913,1688,2.913,1689,4.119,1690,2.913,1691,4.119,1692,2.913,1693,4.119,1694,2.913,1695,3.685,1696,2.913,1697,2.913,1698,2.913,1699,2.913,1700,5.194,1701,4.119,1702,2.913,1703,2.913,1704,2.913,1705,4.119,1706,4.119,1707,2.913,1708,5.194,1709,2.913,1710,2.913,1711,4.119,1712,5.48,1713,2.913,1714,4.778,1715,2.913,1716,2.913,1717,2.913,1718,2.913,1719,2.913,1720,2.913,1721,2.913,1722,2.913,1723,2.913,1724,2.913,1725,2.913]],["title/interfaces/Tile.html",[458,0.232,510,1.265]],["body/interfaces/Tile.html",[3,0.141,4,0.19,5,0.121,8,0.064,9,0.31,22,0.439,26,0.018,27,0.634,28,0.158,29,0.593,54,0.34,59,1.262,60,1.262,77,1.526,80,1.265,107,1.997,126,0.009,127,0.012,128,0.009,129,0.293,156,3.246,190,1.82,257,3.159,267,1.982,336,1.997,337,1.997,345,2.431,418,1.892,421,1.703,458,0.43,460,1.124,503,2.414,508,3.126,510,2.597,511,2.414,514,3.837,516,2.294,517,2.294,518,2.767,527,2.004,530,3.248,533,2.546,617,3.562,627,2.124,1015,2.259,1016,2.413,1017,2.413,1018,2.413,1019,3.24,1020,2.413,1021,2.413,1022,3.24,1023,2.413,1024,2.413,1025,2.413]],["title/classes/TileSprite.html",[0,0.178,614,1.528]],["body/classes/TileSprite.html",[0,0.15,2,0.701,3,0.112,4,0.112,5,0.096,7,0.438,8,0.05,9,0.237,10,1.446,13,3.763,16,0.701,18,2.217,19,0.591,21,2.285,22,0.436,23,1.12,25,0.993,26,0.018,27,0.589,28,0.158,29,0.713,35,1.002,36,1.093,37,1.975,39,1.8,40,0.666,41,0.93,45,2.438,48,0.329,53,4.504,54,0.244,56,1.681,57,2.438,58,0.566,59,1.072,60,1.072,69,0.511,73,0.288,74,1.287,75,0.213,76,4.12,77,0.98,81,0.566,82,0.49,87,1.644,93,1.737,94,3.008,100,1.885,101,1.644,105,0.737,118,1.8,126,0.007,127,0.01,128,0.007,129,0.487,140,1.341,163,1.949,167,1.025,191,1.438,281,1.799,325,1.287,330,1.608,336,2.062,337,2.062,341,1.854,345,2.428,350,3.359,360,1.287,361,2.174,363,1.122,366,1.845,373,2.071,412,1.949,413,2.405,414,1.766,415,2.995,417,1.587,418,1.116,419,2.632,420,1.587,421,0.89,422,3.065,423,1.226,424,1.501,425,1.587,426,1.986,427,1.587,428,1.169,429,1.587,430,1.587,431,1.501,433,2.051,437,1.287,441,1.501,442,1.226,443,1.587,444,2.285,445,1.501,446,1.501,447,1.587,448,1.501,449,1.501,450,1.501,451,1.587,452,1.501,453,1.949,510,1.535,511,2.632,516,2.285,517,2.285,605,4.12,611,3.205,614,2.379,666,3.205,668,3.205,717,2.224,719,2.224,847,5.35,849,3.532,850,3.481,862,3.928,864,3.928,1058,3.505,1275,1.91,1276,2.753,1278,1.91,1526,3.928,1527,3.928,1528,3.928,1529,5.039,1532,3.928,1726,2.725,1727,4.556,1728,3.161,1729,3.161,1730,3.161,1731,4.556,1732,3.161,1733,3.161,1734,3.161,1735,3.161,1736,3.161,1737,3.161,1738,3.161,1739,3.161,1740,3.161,1741,3.161,1742,3.161,1743,3.161,1744,5.845,1745,3.161,1746,3.161,1747,3.161,1748,3.161,1749,3.161,1750,3.161,1751,3.161]],["title/interfaces/TiledMap.html",[458,0.232,515,2.438]],["body/interfaces/TiledMap.html",[3,0.114,4,0.114,5,0.098,8,0.103,9,0.187,13,1.817,16,0.709,21,1.972,22,0.432,23,0.673,25,0.709,26,0.018,27,0.665,28,0.155,29,0.509,35,0.746,40,0.469,41,0.946,48,0.711,54,0.323,58,0.669,59,1.085,60,1.085,64,1.817,69,0.52,73,0.537,75,0.421,77,1.554,80,1.162,82,0.493,87,0.989,105,0.952,114,1.612,119,0.679,126,0.007,127,0.01,128,0.012,129,0.395,157,2.478,158,2.26,167,1.504,191,0.865,192,1.517,244,1.035,257,1.375,267,2.471,281,1.812,312,2.427,314,1.942,336,1.755,337,1.755,345,1.984,354,2.785,363,1.535,366,0.791,369,1.876,402,2.478,421,1.826,423,2.283,458,0.386,460,0.904,471,2.26,499,2.993,500,3.5,501,2.086,502,2.77,503,2.922,504,3.243,505,3.243,506,2.478,507,4.702,508,2.925,509,2.77,510,2.304,511,1.447,512,4.542,513,4.542,514,3.316,515,3.5,516,2.776,517,2.776,518,3.142,519,4.214,520,4.214,521,3.555,522,4.214,523,5.274,524,4.542,525,4.34,526,3.974,527,3.129,528,3.974,529,2.26,530,2.427,531,3.555,532,3.555,533,2.559,534,2.77,535,2.77,536,2.77,537,2.77,538,2.77,539,2.77,540,4.158,541,2.77,542,2.77,543,2.77,544,2.77,545,2.77,546,2.77,547,3.555,548,2.77,549,2.77,550,2.77,551,2.26,552,2.77,553,4.158,554,2.607,555,3.555,556,3.555,557,3.555,558,4.158,559,3.555,560,2.26,561,2.478,562,2.478,563,2.478,564,3.555,565,2.26,566,4.158,567,2.478,568,2.478,569,2.478,570,2.478,571,2.478,572,2.478,573,2.478,574,2.478,575,2.478,576,2.086,1752,3.555,1753,3.555,1754,3.213,1755,3.213]],["title/interfaces/Tileset.html",[458,0.232,530,1.691]],["body/interfaces/Tileset.html",[3,0.133,4,0.207,5,0.114,8,0.06,9,0.308,22,0.444,26,0.018,27,0.622,28,0.158,29,0.696,54,0.336,59,1.208,60,1.208,77,1.501,80,1.251,107,2,126,0.008,127,0.011,128,0.008,129,0.274,156,3.661,190,1.773,257,2.986,267,1.898,336,2.029,337,2.029,345,2.502,418,1.811,421,1.773,458,0.422,460,1.054,503,2.312,508,3.084,510,2.579,511,2.637,514,3.78,516,2.823,517,2.823,518,3.04,527,1.88,530,3.343,533,2.438,617,3.525,627,2.73,1015,2.119,1016,2.264,1017,2.264,1018,2.264,1019,3.539,1020,2.264,1021,2.264,1022,4.119,1023,3.807,1024,3.807,1025,3.807]],["title/classes/Timer.html",[0,0.178,1756,2.896]],["body/classes/Timer.html",[0,0.169,2,0.549,3,0.126,4,0.126,5,0.109,7,0.791,8,0.057,9,0.201,10,1.542,16,0.764,18,2.067,19,0.668,22,0.425,23,1.042,25,0.764,26,0.018,27,0.453,28,0.149,29,0.549,35,0.577,36,0.929,37,1.836,39,2.08,48,0.593,54,0.282,55,1.461,58,0.617,66,3.83,67,2.808,69,0.803,70,2.641,73,0.326,74,1.453,75,0.241,81,0.617,82,0.513,93,1.661,94,1.925,100,1.752,101,2.067,105,0.803,116,3.189,118,1.673,119,0.557,126,0.008,127,0.011,128,0.008,129,0.418,141,1.752,147,5.32,167,1.389,191,1.997,192,1.737,207,4.76,244,1.149,311,2.779,326,2.358,364,4.341,369,1.453,373,2.213,403,4.245,413,2.921,416,3,428,1.836,437,2.512,442,2.604,490,3.077,491,3.83,678,4.28,680,2.808,705,4.28,768,4.28,936,3.493,978,2.641,1086,5.32,1087,6.056,1128,3.493,1130,4.28,1135,4.28,1653,2.753,1695,3.83,1756,5.76,1757,2.753,1758,4.965,1759,6.715,1760,4.965,1761,7.224,1762,4.965,1763,4.965,1764,6.171,1765,4.965,1766,5.709,1767,7.224,1768,7.025,1769,4.965,1770,5.32,1771,4.965,1772,7.025,1773,4.965,1774,3.569,1775,3.569,1776,3.569,1777,3.569,1778,3.569,1779,3.569,1780,4.965,1781,4.965,1782,4.965,1783,4.965,1784,3.569,1785,4.965,1786,4.28,1787,5.709,1788,5.709,1789,4.965,1790,5.709,1791,3.569]],["title/classes/Vec.html",[0,0.178,426,1.156]],["body/classes/Vec.html",[0,0.134,2,0.434,3,0.1,4,0.1,5,0.086,7,0.693,8,0.045,9,0.17,16,0.851,19,0.528,21,2.139,22,0.425,23,1.058,25,1.095,26,0.018,27,0.615,28,0.144,29,0.745,35,1.151,48,0.52,54,0.191,55,1.233,58,0.797,59,1.823,60,1.834,61,2.949,64,2.371,73,0.257,75,0.283,80,1.005,81,0.521,82,0.55,87,1.821,105,1.139,107,1.558,115,3.131,119,0.577,126,0.006,127,0.009,128,0.006,129,0.454,190,2.096,281,1.908,282,2.604,288,3.345,426,2.436,444,1.793,458,0.175,488,1.416,579,2.103,580,3.518,592,3.233,593,2.949,620,2.949,624,3.233,734,2.949,778,1.99,899,3.233,906,3.233,908,4.124,991,5.086,1170,2.722,1181,2.949,1195,2.949,1223,2.176,1224,6.192,1225,4.27,1226,3.613,1227,3.613,1228,3.613,1229,3.613,1230,3.613,1231,3.613,1232,3.613,1233,3.613,1234,5.808,1235,3.613,1236,2.432,1237,5.808,1238,5.911,1239,3.613,1240,4.773,1241,2.432,1242,3.613,1243,4.773,1244,2.432,1245,3.613,1246,5.1,1247,4.773,1248,4.773,1249,3.613,1250,3.613,1251,4.773,1252,3.613,1253,3.613,1254,5.345,1255,2.432,1256,4.773,1257,2.432,1258,2.432,1259,5.534,1260,4.773,1261,3.613,1262,3.613,1263,3.613,1264,4.773,1792,2.821,1793,2.821,1794,2.821,1795,2.821,1796,2.821,1797,2.821,1798,2.821,1799,2.821,1800,2.821,1801,2.821,1802,2.821,1803,2.821,1804,2.821,1805,2.821,1806,2.821,1807,2.821,1808,2.821,1809,2.821,1810,2.821]],["title/interfaces/VecEntity.html",[458,0.232,1811,2.896]],["body/interfaces/VecEntity.html",[3,0.131,4,0.131,5,0.112,8,0.059,9,0.253,18,1.787,22,0.399,26,0.018,28,0.129,39,2.513,40,0.539,41,1.085,48,0.528,59,1.473,60,1.367,73,0.646,75,0.478,82,0.594,95,2.7,100,2.316,101,2.02,105,0.939,107,1.038,118,1.957,119,0.678,126,0.008,127,0.011,128,0.008,129,0.27,140,1.494,191,1.871,228,4.199,282,2.618,311,2.286,414,2.426,426,2.322,428,2.147,458,0.359,460,1.038,512,5.461,778,1.751,930,5.36,936,3.572,1104,4.617,1175,2.844,1176,4.826,1225,5.36,1811,5.911,1812,3.178,1813,5.077,1814,6.257,1815,6.257,1816,6.783,1817,6.562,1818,6.257,1819,6.783,1820,6.257,1821,5.077,1822,5.077,1823,5.077,1824,5.077,1825,5.077,1826,7.271,1827,6.783,1828,3.687,1829,5.077,1830,5.077,1831,3.687,1832,3.687,1833,5.807,1834,3.687,1835,5.077,1836,4.377,1837,5.077,1838,5.077,1839,5.077,1840,5.807,1841,5.077,1842,3.687,1843,3.687,1844,3.178,1845,5.077,1846,3.687,1847,3.687,1848,3.687,1849,3.687,1850,3.687,1851,3.687,1852,5.077]],["title/classes/WebAudio.html",[0,0.178,1853,2.896]],["body/classes/WebAudio.html",[0,0.188,2,0.609,3,0.14,4,0.213,5,0.12,7,0.549,8,0.063,9,0.216,10,1.564,16,0.82,19,0.74,23,1.112,25,0.609,26,0.018,27,0.361,28,0.143,29,0.437,35,1.042,36,1.206,58,0.492,69,0.974,75,0.267,80,1.024,81,0.662,82,0.313,105,1.088,110,3.428,113,3.645,119,0.386,126,0.009,127,0.012,128,0.009,129,0.29,162,2.834,163,2.28,189,1.397,190,1.114,210,3.749,234,5.064,281,2.216,332,4.238,352,4.407,363,1.312,464,4.594,692,4.594,1098,2.784,1112,4.594,1219,4.11,1434,3.46,1438,3.46,1439,2.784,1440,3.749,1443,4.238,1853,5.344,1854,6.592,1855,3.412,1856,6.726,1857,6.024,1858,6.024,1859,6.024,1860,6.024,1861,6.445,1862,6.445,1863,7.08,1864,6.024,1865,6.726,1866,5.329,1867,6.024,1868,3.958,1869,3.958,1870,6.445,1871,5.329,1872,5.329,1873,3.958,1874,6.928,1875,3.958,1876,3.958,1877,3.958,1878,5.329,1879,3.958,1880,5.329,1881,7.198,1882,3.958,1883,3.958,1884,5.329,1885,3.958,1886,3.958,1887,3.958,1888,3.958,1889,3.958,1890,3.958,1891,5.329,1892,3.958,1893,3.958,1894,3.958,1895,3.958,1896,3.958,1897,3.958,1898,5.329,1899,5.329,1900,6.024,1901,3.958,1902,3.958,1903,5.329,1904,3.958,1905,3.958,1906,5.329,1907,3.958,1908,3.958,1909,3.958,1910,3.958,1911,3.958,1912,6.024,1913,3.958,1914,3.958,1915,3.958]],["title/classes/WebGLRenderer.html",[0,0.178,730,2.438]],["body/classes/WebGLRenderer.html",[0,0.113,2,0.367,3,0.084,4,0.084,5,0.073,7,0.331,8,0.038,9,0.149,10,1.595,16,0.568,19,0.446,22,0.383,23,1.093,25,1.028,26,0.018,27,0.61,28,0.153,29,0.739,35,1.097,36,1.134,40,0.742,41,0.702,48,0.528,54,0.232,58,0.683,69,0.597,73,0.218,74,0.971,75,0.161,77,0.971,80,0.934,81,0.458,82,0.435,86,2.088,87,1.136,94,2.882,105,1.039,119,0.696,126,0.005,127,0.008,128,0.005,129,0.372,140,0.702,141,2.05,167,1.016,189,1.793,190,1.039,192,0.671,204,1.549,225,2.597,226,3.919,244,1.188,246,1.678,272,2.728,273,3.321,274,3.321,275,3.176,279,1.442,280,1.678,282,1.669,309,2.088,311,2.033,312,1.074,322,2.23,324,1.678,325,2.068,326,2.877,327,2.847,328,2.847,329,3.822,330,1.302,331,3.713,332,3.176,334,4.263,335,2.727,336,1.848,337,1.705,338,3.773,339,3.182,340,2.847,341,1.502,342,2.088,343,3.773,345,1.958,346,1.549,347,2.847,350,2.617,351,2.057,352,2.23,353,2.057,354,1.442,355,2.057,356,2.057,357,3.176,358,4.404,360,1.502,361,1.502,362,2.847,363,0.909,364,2.597,365,2.057,366,1.353,367,4.438,369,1.502,370,1.84,371,2.057,372,1.84,373,0.925,374,1.349,375,2.847,376,1.84,377,2.057,378,1.84,379,1.84,380,2.088,381,1.678,382,1.84,384,1.549,389,1.84,396,1.84,397,1.84,412,2.174,458,0.148,577,1.549,582,2.728,614,2.672,615,2.592,622,2.597,629,2.847,630,1.84,631,1.84,634,1.84,680,1.349,730,2.397,759,1.84,850,3.354,1082,1.549,1095,1.84,1098,1.678,1279,2.874,1281,2.397,1282,1.549,1335,2.397,1340,3.321,1511,1.84,1524,3.482,1542,3.182,1619,1.678,1620,5.639,1621,2.057,1622,3.892,1623,3.892,1624,3.892,1625,3.892,1626,3.892,1627,2.057,1628,2.057,1629,2.057,1630,2.057,1631,2.057,1632,2.057,1633,2.057,1634,2.057,1635,2.057,1636,3.182,1637,2.057,1638,2.057,1639,2.057,1640,2.057,1641,2.057,1642,2.057,1643,2.057,1644,2.057,1645,2.057,1646,3.182,1647,2.057,1648,3.182,1649,3.182,1650,2.057,1651,2.057,1652,2.057,1653,2.847,1654,2.057,1655,3.892,1656,3.182,1657,2.057,1658,2.057,1659,3.182,1660,2.057,1661,2.057,1662,2.057,1663,2.057,1664,2.057,1665,2.057,1666,3.892,1667,3.182,1668,2.057,1669,2.057,1670,3.182,1671,2.057,1672,2.057,1673,4.381,1674,2.057,1675,4.381,1676,2.057,1677,3.182,1678,2.057,1679,2.057,1680,3.182,1681,2.057,1682,3.182,1683,2.057,1684,2.057,1685,2.057,1686,2.057,1687,2.057,1688,2.057,1689,3.182,1690,2.057,1691,3.182,1692,2.057,1693,3.182,1694,2.057,1695,2.847,1696,2.057,1697,2.057,1698,2.057,1699,2.057,1700,4.381,1701,3.182,1702,2.057,1703,2.057,1704,2.057,1705,3.182,1706,3.182,1707,2.057,1708,4.381,1709,2.057,1710,2.057,1711,3.182,1712,4.738,1713,2.057,1714,3.892,1715,4.381,1716,2.057,1717,2.057,1718,2.057,1719,2.057,1720,2.057,1721,2.057,1722,2.057,1723,2.057,1724,2.057,1725,2.057,1916,3.691,1917,3.691,1918,3.691,1919,3.691,1920,3.691,1921,3.691,1922,2.386,1923,2.386,1924,2.386,1925,2.386,1926,2.386,1927,2.386,1928,2.386,1929,2.386,1930,2.386,1931,2.386,1932,2.386,1933,2.386,1934,2.386,1935,2.386,1936,2.386,1937,2.386,1938,2.386,1939,2.386,1940,2.386,1941,2.386,1942,2.386,1943,2.386]],["title/coverage.html",[1944,4.433]],["body/coverage.html",[0,0.367,1,1.98,5,0.086,6,3.228,21,1.204,26,0.018,28,0.058,48,0.801,53,1.828,54,0.129,58,0.35,77,0.605,94,1.091,95,2.226,126,0.006,127,0.009,128,0.006,137,1.701,138,2.171,141,0.993,162,1.497,191,2.078,253,1.98,254,3.514,255,3.514,262,1.98,272,1.701,322,1.701,323,2.427,324,3.514,331,1.592,335,1.041,366,0.693,367,1.701,380,1.592,398,2.427,423,1.091,426,0.866,458,0.461,459,1.98,461,2.427,468,1.98,469,1.98,470,1.98,473,2.171,499,1.828,500,4.855,501,4.855,503,1.267,508,1.204,510,0.949,515,1.828,516,1.204,517,1.204,519,1.828,520,1.828,522,1.828,529,1.98,530,1.884,533,1.337,551,1.98,560,1.98,565,1.98,577,1.828,578,2.427,606,3.608,614,1.146,615,1.204,617,1.337,659,3.838,680,1.592,727,2.171,730,1.828,738,2.171,740,2.171,772,2.427,773,3.342,846,2.171,847,3.853,848,3.608,849,1.701,850,1.413,854,1.98,895,2.427,896,2.427,916,2.944,917,3.514,918,3.514,933,2.171,934,1.98,945,2.171,960,2.944,978,1.497,992,2.171,1015,3.504,1026,2.427,1078,2.171,1079,2.427,1080,2.427,1082,1.828,1144,1.828,1145,3.228,1149,1.828,1153,1.828,1162,1.701,1205,2.427,1206,2.427,1223,3.228,1265,3.228,1270,1.98,1284,2.427,1318,2.427,1332,1.98,1333,3.228,1334,3.228,1340,1.701,1433,3.228,1441,1.701,1478,2.171,1479,3.228,1480,2.427,1494,2.171,1495,2.427,1513,2.427,1563,2.427,1595,3.228,1603,1.98,1613,2.427,1619,1.98,1620,3.228,1726,2.427,1752,2.171,1753,2.171,1756,2.171,1757,2.171,1811,2.171,1812,5.681,1836,2.427,1844,2.427,1853,2.171,1854,2.427,1855,2.427,1944,2.427,1945,2.815,1946,2.815,1947,2.815,1948,2.815,1949,4.995,1950,2.815,1951,2.815,1952,2.815,1953,2.815,1954,2.815,1955,2.815,1956,7.898,1957,2.815,1958,4.185,1959,2.815,1960,2.815,1961,4.185,1962,4.185,1963,7.635,1964,7.635,1965,4.995,1966,2.815,1967,2.815,1968,2.815,1969,2.815,1970,2.815,1971,2.815,1972,2.815,1973,2.815,1974,2.815,1975,2.815,1976,2.815,1977,2.815,1978,4.995,1979,4.185,1980,2.815,1981,4.185,1982,2.427,1983,2.815,1984,2.815,1985,2.815,1986,2.815,1987,2.815,1988,2.815,1989,2.815,1990,2.815,1991,7.721,1992,4.185,1993,5.53,1994,2.815,1995,2.815,1996,2.815,1997,4.185,1998,2.815,1999,4.995,2000,2.815,2001,2.815,2002,2.815,2003,2.815,2004,2.815,2005,2.815,2006,2.815,2007,2.815,2008,2.815,2009,2.815,2010,4.185,2011,2.815,2012,2.815,2013,2.815,2014,2.815,2015,2.815,2016,4.185,2017,2.815,2018,2.815,2019,2.815,2020,2.815,2021,6.39,2022,2.815,2023,2.815,2024,4.185,2025,2.815,2026,2.815,2027,2.815,2028,2.815,2029,2.815,2030,2.815,2031,2.815,2032,2.815,2033,2.815,2034,2.815,2035,2.815,2036,2.815,2037,2.427,2038,2.427,2039,2.815,2040,2.815,2041,2.815,2042,2.815,2043,6.59,2044,2.815,2045,2.815,2046,2.815,2047,2.815,2048,2.815,2049,2.427,2050,2.427,2051,2.427,2052,2.815,2053,2.815]],["title/miscellaneous/enumerations.html",[2054,1.89,2055,3.898]],["body/miscellaneous/enumerations.html",[8,0.095,22,0.334,23,0.866,26,0.017,69,0.959,95,3.854,126,0.013,127,0.015,128,0.013,141,2.423,189,2.092,190,2.039,311,2.67,659,3.851,731,5.112,732,5.112,733,5.112,734,4.83,735,5.112,736,5.112,737,5.112,2054,3.583,2055,5.112,2056,4.574,2057,5.93]],["title/index.html",[8,0.05,2058,3.128,2059,3.128]],["body/index.html",[26,0.016,55,1.811,74,2.504,126,0.014,127,0.016,128,0.014,141,2.171,593,4.329,2060,6.153,2061,6.153]],["title/modules.html",[2062,4.433]],["body/modules.html",[26,0.016,126,0.014,127,0.016,128,0.014,2062,5.346]],["title/overview.html",[2063,4.433]],["body/overview.html",[2,0.948,26,0.016,126,0.014,127,0.016,128,0.014,460,1.734,1209,4.335,2063,5.313,2064,6.162]],["title/miscellaneous/typealiases.html",[2054,1.89,2065,4.521]],["body/miscellaneous/typealiases.html",[8,0.088,18,2.026,26,0.015,28,0.156,93,1.486,116,3.34,126,0.012,127,0.015,128,0.012,138,4.259,148,4.76,169,5.676,171,5.676,191,2.094,199,4.632,201,4.76,213,3.978,214,4.76,419,2.965,437,2.247,473,4.259,500,3.585,501,4.275,510,2.219,511,2.486,513,5.078,659,3.585,710,5.676,773,3.978,917,3.884,918,4.632,925,3.884,926,4.259,927,4.259,928,5.078,960,3.884,965,5.676,1418,6.065,1757,4.259,1770,5.676,2054,3.336,2056,4.259,2066,5.521,2067,5.521,2068,4.76,2069,6.584,2070,5.521,2071,4.76,2072,5.521]],["title/miscellaneous/variables.html",[2054,1.89,2073,3.898]],["body/miscellaneous/variables.html",[8,0.093,22,0.41,26,0.018,27,0.488,28,0.154,36,1.095,48,0.762,54,0.209,58,0.664,59,1.633,60,0.746,69,1.166,70,1.685,80,0.909,95,2.845,98,4.117,105,1.102,119,0.605,126,0.007,127,0.01,128,0.007,189,2.645,190,2.11,192,1.745,228,1.915,244,1.469,254,2.229,255,3.211,257,1.356,262,3.211,263,2.444,301,3.473,309,2.582,312,2.055,314,1.915,326,2.779,336,0.892,337,0.892,423,1.77,499,2.058,500,2.058,501,4.889,503,2.635,506,4.514,507,2.229,508,2.288,510,1.068,516,1.952,517,1.952,518,2.288,519,2.964,520,2.964,522,3.473,523,4.126,524,2.444,525,2.964,527,2.937,529,3.211,530,2.408,531,3.52,532,4.126,533,2.54,540,4.126,547,3.52,551,3.211,553,3.52,554,2.582,555,3.52,556,3.52,557,3.52,558,4.126,559,3.52,560,3.211,561,2.444,562,2.444,563,2.444,564,3.52,565,3.211,566,4.126,567,2.444,568,2.444,569,2.444,570,2.444,571,2.444,572,2.444,573,2.444,574,2.444,575,2.444,576,2.058,659,2.058,700,2.732,727,4.126,738,4.126,739,2.732,740,3.52,773,2.758,850,2.29,960,2.229,992,3.52,993,2.732,994,2.732,1082,2.964,1162,2.758,1279,3.31,1335,2.964,1348,2.444,1363,4.514,1364,4.982,1752,3.52,1753,3.52,1786,2.732,1982,2.732,2021,2.732,2037,3.935,2038,3.935,2049,3.935,2050,3.935,2051,3.935,2054,1.915,2056,4.514,2068,2.732,2071,6.463,2073,2.732,2074,3.169,2075,5.349,2076,3.169,2077,3.169,2078,6.202,2079,4.564,2080,3.169,2081,5.349,2082,4.564,2083,4.564,2084,6.202,2085,4.564,2086,5.852,2087,5.852,2088,5.852,2089,3.169,2090,5.349,2091,4.564,2092,4.564,2093,4.564,2094,3.169,2095,4.564,2096,4.564,2097,3.169,2098,3.169,2099,4.564,2100,3.169,2101,3.169,2102,4.564,2103,3.169,2104,3.169,2105,4.564,2106,3.169,2107,3.169,2108,3.169,2109,3.169,2110,3.169,2111,3.169,2112,3.169,2113,3.169,2114,3.169,2115,3.169,2116,3.169]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":48,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.21",{"_index":817,"title":{},"body":{"classes/GamepadControls.html":{}}}],["0.5",{"_index":2057,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["0.6",{"_index":1131,"title":{},"body":{"classes/OneUp.html":{}}}],["0/1",{"_index":1964,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1981,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1987,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1983,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1948,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":69,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1)).xy",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1).normalize().multiply(amount",{"_index":1830,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["1.5",{"_index":1182,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["1.6",{"_index":1765,"title":{},"body":{"classes/Timer.html":{}}}],["1/1",{"_index":1991,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1959,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1179,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["10/10",{"_index":2016,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1956,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":759,"title":{},"body":{"classes/Game.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["11",{"_index":819,"title":{},"body":{"classes/GamepadControls.html":{}}}],["11/11",{"_index":2007,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":821,"title":{},"body":{"classes/GamepadControls.html":{},"classes/Sprite.html":{}}}],["13",{"_index":823,"title":{},"body":{"classes/GamepadControls.html":{}}}],["13/13",{"_index":1957,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":825,"title":{},"body":{"classes/GamepadControls.html":{}}}],["14/14",{"_index":2014,"title":{},"body":{"coverage.html":{}}}],["14/19",{"_index":2013,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":1524,"title":{},"body":{"classes/Sprite.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["16/16",{"_index":2010,"title":{},"body":{"coverage.html":{}}}],["19/24",{"_index":2005,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":311,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/OneUp.html":{},"classes/Sprite.html":{},"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["2/2",{"_index":2011,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":2020,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":2009,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":1960,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1209,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"overview.html":{}}}],["20px",{"_index":1599,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["21",{"_index":832,"title":{},"body":{"classes/GamepadControls.html":{}}}],["22/38",{"_index":1955,"title":{},"body":{"coverage.html":{}}}],["23/32",{"_index":2019,"title":{},"body":{"coverage.html":{}}}],["24/26",{"_index":1970,"title":{},"body":{"coverage.html":{}}}],["24/27",{"_index":1968,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":1958,"title":{},"body":{"coverage.html":{}}}],["25/28",{"_index":1972,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":1655,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["26/26",{"_index":1995,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":2008,"title":{},"body":{"coverage.html":{}}}],["2d",{"_index":593,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"index.html":{}}}],["3",{"_index":1511,"title":{},"body":{"classes/SoundPool.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["3/3",{"_index":1999,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1138,"title":{},"body":{"classes/OneUp.html":{}}}],["32",{"_index":1268,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["32x32",{"_index":1516,"title":{},"body":{"classes/Sprite.html":{}}}],["33",{"_index":1979,"title":{},"body":{"coverage.html":{}}}],["333",{"_index":1280,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["35/35",{"_index":2003,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":2064,"title":{},"body":{"overview.html":{}}}],["4",{"_index":1098,"title":{},"body":{"classes/OneUp.html":{},"interfaces/TextureInfo.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["4/4",{"_index":1993,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1962,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1996,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["43",{"_index":1951,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1974,"title":{},"body":{"coverage.html":{}}}],["48",{"_index":1093,"title":{},"body":{"classes/OneUp.html":{}}}],["480",{"_index":664,"title":{},"body":{"classes/Game.html":{}}}],["5",{"_index":70,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["5/10",{"_index":2006,"title":{},"body":{"coverage.html":{}}}],["5/15",{"_index":1986,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1992,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1998,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":1985,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1965,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":1954,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1095,"title":{},"body":{"classes/OneUp.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["6/12",{"_index":2000,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":1973,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":1950,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":700,"title":{},"body":{"classes/Game.html":{},"miscellaneous/variables.html":{}}}],["62",{"_index":1984,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":2001,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1949,"title":{},"body":{"coverage.html":{}}}],["69",{"_index":1976,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1096,"title":{},"body":{"classes/OneUp.html":{}}}],["7/14",{"_index":1966,"title":{},"body":{"coverage.html":{}}}],["7/16",{"_index":1952,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":2015,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1997,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":2012,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":766,"title":{},"body":{"classes/Game.html":{}}}],["79",{"_index":2004,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1181,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["8/18",{"_index":1975,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1978,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1961,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1967,"title":{},"body":{"coverage.html":{}}}],["89",{"_index":1971,"title":{},"body":{"coverage.html":{}}}],["8].map(x",{"_index":1097,"title":{},"body":{"classes/OneUp.html":{}}}],["9/13",{"_index":1977,"title":{},"body":{"coverage.html":{}}}],["9/14",{"_index":2002,"title":{},"body":{"coverage.html":{}}}],["9/27",{"_index":1980,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2047,"title":{},"body":{"coverage.html":{}}}],["900",{"_index":1186,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["92",{"_index":1969,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":1058,"title":{},"body":{"classes/MouseControls.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["__",{"_index":1276,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["_anchor",{"_index":1526,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["_height",{"_index":666,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["_pivot",{"_index":1527,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["_program",{"_index":1341,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["_scene",{"_index":667,"title":{},"body":{"classes/Game.html":{}}}],["_texture",{"_index":1528,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["_width",{"_index":668,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["_x",{"_index":897,"title":{},"body":{"classes/HitBox.html":{}}}],["_y",{"_index":898,"title":{},"body":{"classes/HitBox.html":{}}}],["a00",{"_index":641,"title":{},"body":{"classes/GLUtils.html":{}}}],["a01",{"_index":642,"title":{},"body":{"classes/GLUtils.html":{}}}],["a02",{"_index":643,"title":{},"body":{"classes/GLUtils.html":{}}}],["a10",{"_index":644,"title":{},"body":{"classes/GLUtils.html":{}}}],["a11",{"_index":645,"title":{},"body":{"classes/GLUtils.html":{}}}],["a12",{"_index":646,"title":{},"body":{"classes/GLUtils.html":{}}}],["a20",{"_index":647,"title":{},"body":{"classes/GLUtils.html":{}}}],["a21",{"_index":648,"title":{},"body":{"classes/GLUtils.html":{}}}],["a22",{"_index":649,"title":{},"body":{"classes/GLUtils.html":{}}}],["a_position",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a_texcoord",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":504,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{}}}],["absolute",{"_index":1721,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["abstract",{"_index":341,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["acc",{"_index":1815,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["acceleration",{"_index":1817,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["access",{"_index":961,"title":{},"body":{"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/Texture.html":{}}}],["accessing",{"_index":853,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["accessors",{"_index":163,"title":{},"body":{"classes/Assets.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/Renderer.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"classes/WebAudio.html":{}}}],["accounting",{"_index":1744,"title":{},"body":{"classes/TileSprite.html":{}}}],["action",{"_index":777,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["action(...buttons",{"_index":790,"title":{},"body":{"classes/GamepadControls.html":{}}}],["action(value",{"_index":996,"title":{},"body":{"classes/KeyControls.html":{}}}],["actiona",{"_index":780,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actionb",{"_index":781,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["actionesc",{"_index":784,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actions",{"_index":277,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["actionx",{"_index":782,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actiony",{"_index":783,"title":{},"body":{"classes/GamepadControls.html":{}}}],["activate",{"_index":303,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["active",{"_index":299,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["activebuffer",{"_index":276,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["actual",{"_index":1240,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["add",{"_index":87,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"classes/WebGLRenderer.html":{}}}],["add(child",{"_index":431,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["add(name",{"_index":102,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["add(undefined",{"_index":1795,"title":{},"body":{"classes/Vec.html":{}}}],["adddebug",{"_index":2044,"title":{},"body":{"coverage.html":{}}}],["additional",{"_index":1514,"title":{},"body":{"classes/Sprite.html":{}}}],["adds",{"_index":444,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Vec.html":{}}}],["affecting",{"_index":1155,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["against",{"_index":888,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["aliases",{"_index":2066,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1610,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["alignment",{"_index":1609,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["allow",{"_index":1496,"title":{},"body":{"classes/SoundPool.html":{},"classes/State.html":{}}}],["allows",{"_index":197,"title":{},"body":{"classes/Assets.html":{}}}],["alone",{"_index":1150,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["along",{"_index":910,"title":{},"body":{"classes/HitBox.html":{}}}],["alpha",{"_index":412,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["already",{"_index":1500,"title":{},"body":{"classes/SoundPool.html":{}}}],["always",{"_index":1731,"title":{},"body":{"classes/TileSprite.html":{}}}],["amount",{"_index":1827,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["anchor",{"_index":1530,"title":{},"body":{"classes/Sprite.html":{}}}],["anchoring",{"_index":1221,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["and/or",{"_index":401,"title":{},"body":{"classes/Container.html":{}}}],["angle",{"_index":606,"title":{},"body":{"classes/GLUtils.html":{},"coverage.html":{}}}],["anim",{"_index":109,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["anim.frame.x",{"_index":123,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["anim.frame.y",{"_index":125,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["anim.update(dt",{"_index":121,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["animation",{"_index":1,"title":{"classes/Animation.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"coverage.html":{}}}],["animation(frames",{"_index":104,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["animations",{"_index":53,"title":{"classes/Animations.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/TileSprite.html":{},"coverage.html":{}}}],["animations(this.frame",{"_index":1750,"title":{},"body":{"classes/TileSprite.html":{}}}],["anims",{"_index":76,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/TileSprite.html":{}}}],["antialias",{"_index":1628,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["any).__spector_metadata",{"_index":293,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["any).anchor.x",{"_index":1694,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["any).anchor.y",{"_index":1696,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["any).audiocontext",{"_index":1871,"title":{},"body":{"classes/WebAudio.html":{}}}],["any).webkitaudiocontext",{"_index":1872,"title":{},"body":{"classes/WebAudio.html":{}}}],["append",{"_index":686,"title":{},"body":{"classes/Game.html":{}}}],["applies",{"_index":1818,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["apply",{"_index":930,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/VecEntity.html":{}}}],["applyforce",{"_index":2039,"title":{},"body":{"coverage.html":{}}}],["applyforce(e",{"_index":1820,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyfriction",{"_index":2040,"title":{},"body":{"coverage.html":{}}}],["applyfriction(e",{"_index":1828,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyhorizontalfriction",{"_index":2041,"title":{},"body":{"coverage.html":{}}}],["applyhorizontalfriction(e",{"_index":1831,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyimpulse",{"_index":2042,"title":{},"body":{"coverage.html":{}}}],["applyimpulse(e",{"_index":1834,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["around",{"_index":266,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["array",{"_index":421,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/SoundGroup.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["arrays",{"_index":521,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{}}}],["arrow",{"_index":988,"title":{},"body":{"classes/KeyControls.html":{}}}],["aspects",{"_index":661,"title":{},"body":{"classes/Game.html":{}}}],["asset",{"_index":148,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["assets",{"_index":137,"title":{"classes/Assets.html":{}},"body":{"classes/Assets.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"coverage.html":{}}}],["assets.sound(src",{"_index":1464,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["assetts",{"_index":691,"title":{},"body":{"classes/Game.html":{}}}],["assuming",{"_index":407,"title":{},"body":{"classes/Container.html":{}}}],["async",{"_index":237,"title":{},"body":{"classes/Assets.html":{}}}],["attribcount",{"_index":1408,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["attriblocation",{"_index":304,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["attribute",{"_index":301,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["attributes",{"_index":1342,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["audio",{"_index":234,"title":{},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/WebAudio.html":{}}}],["audio(url",{"_index":235,"title":{},"body":{"classes/Assets.html":{}}}],["audio.addeventlistener('canplay",{"_index":236,"title":{},"body":{"classes/Assets.html":{}}}],["audio.addeventlistener('ended",{"_index":1469,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.addeventlistener('error",{"_index":1467,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.loop",{"_index":1465,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.removeeventlistener('canplay",{"_index":233,"title":{},"body":{"classes/Assets.html":{}}}],["audio.ts",{"_index":1855,"title":{},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["audio.ts:25",{"_index":1873,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:27",{"_index":1869,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:28",{"_index":1868,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:29",{"_index":1875,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:30",{"_index":1876,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:31",{"_index":1866,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:61",{"_index":1882,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:66",{"_index":1883,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:73",{"_index":1886,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:78",{"_index":1888,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:83",{"_index":1890,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:88",{"_index":1893,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:93",{"_index":1879,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:98",{"_index":1877,"title":{},"body":{"classes/WebAudio.html":{}}}],["audiocontext",{"_index":1867,"title":{},"body":{"classes/WebAudio.html":{}}}],["auto",{"_index":1309,"title":{},"body":{"classes/Renderer.html":{}}}],["automatically",{"_index":438,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["await",{"_index":238,"title":{},"body":{"classes/Assets.html":{}}}],["away",{"_index":1085,"title":{},"body":{"classes/OneUp.html":{}}}],["axis",{"_index":778,"title":{},"body":{"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"interfaces/Resolution.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["axis(id",{"_index":793,"title":{},"body":{"classes/GamepadControls.html":{}}}],["b",{"_index":622,"title":{},"body":{"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["b00",{"_index":650,"title":{},"body":{"classes/GLUtils.html":{}}}],["b01",{"_index":651,"title":{},"body":{"classes/GLUtils.html":{}}}],["b02",{"_index":652,"title":{},"body":{"classes/GLUtils.html":{}}}],["b10",{"_index":653,"title":{},"body":{"classes/GLUtils.html":{}}}],["b11",{"_index":654,"title":{},"body":{"classes/GLUtils.html":{}}}],["b12",{"_index":655,"title":{},"body":{"classes/GLUtils.html":{}}}],["b20",{"_index":656,"title":{},"body":{"classes/GLUtils.html":{}}}],["b21",{"_index":657,"title":{},"body":{"classes/GLUtils.html":{}}}],["b22",{"_index":658,"title":{},"body":{"classes/GLUtils.html":{}}}],["back",{"_index":685,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{}}}],["base",{"_index":474,"title":{},"body":{"classes/Entity.html":{}}}],["based",{"_index":98,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/GLUtils.html":{},"miscellaneous/variables.html":{}}}],["basically",{"_index":404,"title":{},"body":{"classes/Container.html":{}}}],["before",{"_index":364,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["beginning",{"_index":1450,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["behavior",{"_index":1127,"title":{},"body":{"classes/OneUp.html":{}}}],["behaviors",{"_index":1156,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["below",{"_index":505,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{}}}],["between",{"_index":97,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["bl",{"_index":949,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["boolean",{"_index":167,"title":{},"body":{"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["boring",{"_index":662,"title":{},"body":{"classes/Game.html":{}}}],["both",{"_index":1350,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["bounds",{"_index":945,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["bounds.height",{"_index":954,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.width",{"_index":959,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.x",{"_index":958,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.y",{"_index":953,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["boundtexture",{"_index":1625,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["box",{"_index":883,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.height",{"_index":894,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.ts",{"_index":896,"title":{},"body":{"classes/HitBox.html":{},"coverage.html":{}}}],["box.ts:18",{"_index":904,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:19",{"_index":905,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:21",{"_index":902,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:22",{"_index":903,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:25",{"_index":909,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:30",{"_index":911,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:35",{"_index":912,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:40",{"_index":913,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:42",{"_index":900,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:68",{"_index":907,"title":{},"body":{"classes/HitBox.html":{}}}],["box.width",{"_index":893,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.x",{"_index":891,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["box.y",{"_index":892,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["br",{"_index":950,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["buff",{"_index":290,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.buffer",{"_index":291,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.id",{"_index":294,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.name",{"_index":296,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer",{"_index":256,"title":{},"body":{"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GlBuffer.html":{}}}],["buffer(buffername",{"_index":284,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer.buffer",{"_index":287,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer.ts",{"_index":255,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buffer.ts:18",{"_index":842,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:19",{"_index":841,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:20",{"_index":840,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:37",{"_index":843,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:48",{"_index":844,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:66",{"_index":845,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:7",{"_index":259,"title":{},"body":{"classes/BufferInfo.html":{}}}],["buffer.ts:8",{"_index":260,"title":{},"body":{"classes/BufferInfo.html":{}}}],["buffer.ts:9",{"_index":261,"title":{},"body":{"classes/BufferInfo.html":{}}}],["bufferinfo",{"_index":253,"title":{"classes/BufferInfo.html":{}},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{}}}],["buffername",{"_index":283,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffers",{"_index":275,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["bullet",{"_index":1518,"title":{},"body":{"classes/Sprite.html":{}}}],["bullet.anchor.set(16",{"_index":1525,"title":{},"body":{"classes/Sprite.html":{}}}],["bullet.hitbox.set(4",{"_index":1523,"title":{},"body":{"classes/Sprite.html":{}}}],["button",{"_index":801,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["buttons",{"_index":792,"title":{},"body":{"classes/GamepadControls.html":{}}}],["cache",{"_index":149,"title":{},"body":{"classes/Assets.html":{}}}],["cached",{"_index":142,"title":{},"body":{"classes/Assets.html":{}}}],["calculations",{"_index":1814,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["call",{"_index":450,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["callback",{"_index":200,"title":{},"body":{"classes/Assets.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{}}}],["called",{"_index":116,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/ParticleEmitter.html":{},"classes/Renderer.html":{},"classes/State.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["calls",{"_index":147,"title":{},"body":{"classes/Assets.html":{},"classes/Timer.html":{}}}],["camera",{"_index":367,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["camera.pos.x",{"_index":1315,"title":{},"body":{"classes/Renderer.html":{}}}],["camera.pos.y",{"_index":1316,"title":{},"body":{"classes/Renderer.html":{}}}],["cameratranslation",{"_index":629,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas",{"_index":329,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.getcontext('2d",{"_index":1725,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.height",{"_index":1717,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.id",{"_index":1718,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.style.left",{"_index":1723,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.style.position",{"_index":1720,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.style.top",{"_index":1722,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.style.zindex",{"_index":1719,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.width",{"_index":1716,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvaselement",{"_index":1288,"title":{},"body":{"classes/Renderer.html":{}}}],["canvasrenderer",{"_index":322,"title":{"classes/CanvasRenderer.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["canvasrenderer(width",{"_index":751,"title":{},"body":{"classes/Game.html":{}}}],["canvasrenderingcontext2d",{"_index":347,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["canvastextalign",{"_index":1611,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["careful",{"_index":735,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["catch(e",{"_index":245,"title":{},"body":{"classes/Assets.html":{}}}],["category",{"_index":73,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["cb",{"_index":202,"title":{},"body":{"classes/Assets.html":{}}}],["center",{"_index":2045,"title":{},"body":{"coverage.html":{}}}],["ch",{"_index":457,"title":{},"body":{"classes/Container.html":{}}}],["chainable",{"_index":1227,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["change",{"_index":65,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{},"classes/State.html":{}}}],["changed",{"_index":1782,"title":{},"body":{"classes/Timer.html":{}}}],["check",{"_index":374,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/State.html":{},"classes/WebGLRenderer.html":{}}}],["checks",{"_index":987,"title":{},"body":{"classes/KeyControls.html":{}}}],["checkwebgl",{"_index":676,"title":{},"body":{"classes/Game.html":{}}}],["checkwebgl(canvas",{"_index":706,"title":{},"body":{"classes/Game.html":{}}}],["child",{"_index":422,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["children",{"_index":361,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["clamp",{"_index":2022,"title":{},"body":{"coverage.html":{}}}],["class",{"_index":0,"title":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"overview.html":{}}}],["clear",{"_index":358,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["clientrect",{"_index":1037,"title":{},"body":{"classes/MouseControls.html":{}}}],["clientx",{"_index":1066,"title":{},"body":{"classes/MouseControls.html":{}}}],["clienty",{"_index":1067,"title":{},"body":{"classes/MouseControls.html":{}}}],["clone",{"_index":1243,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["cloned",{"_index":1242,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["code",{"_index":969,"title":{},"body":{"classes/KeyControls.html":{}}}],["coin",{"_index":1091,"title":{},"body":{"classes/OneUp.html":{}}}],["coin.anims.add('spin",{"_index":1094,"title":{},"body":{"classes/OneUp.html":{}}}],["coin.anims.play('spin",{"_index":1099,"title":{},"body":{"classes/OneUp.html":{}}}],["collection",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collision",{"_index":925,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Sprite.html":{},"miscellaneous/typealiases.html":{}}}],["collisions",{"_index":920,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["color",{"_index":1279,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["color.a",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color.split",{"_index":1643,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["columns",{"_index":1022,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["combined",{"_index":1520,"title":{},"body":{"classes/Sprite.html":{}}}],["compiled",{"_index":1345,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["complete",{"_index":215,"title":{},"body":{"classes/Assets.html":{}}}],["completed",{"_index":164,"title":{},"body":{"classes/Assets.html":{},"classes/Scene.html":{}}}],["completion",{"_index":207,"title":{},"body":{"classes/Assets.html":{},"classes/Scene.html":{},"classes/Timer.html":{}}}],["components",{"_index":307,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["concrete",{"_index":378,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["console.error(e",{"_index":247,"title":{},"body":{"classes/Assets.html":{}}}],["console.info('cached",{"_index":249,"title":{},"body":{"classes/Assets.html":{}}}],["console.info('load",{"_index":250,"title":{},"body":{"classes/Assets.html":{}}}],["console.warn(`image",{"_index":1663,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["const",{"_index":119,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["constructor(container",{"_index":1034,"title":{},"body":{"classes/MouseControls.html":{}}}],["constructor(display",{"_index":1105,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["constructor(frame",{"_index":83,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["constructor(frames",{"_index":20,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["constructor(game",{"_index":1323,"title":{},"body":{"classes/Scene.html":{}}}],["constructor(gl",{"_index":278,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["constructor(numparticles",{"_index":1213,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["constructor(ontick",{"_index":1769,"title":{},"body":{"classes/Timer.html":{}}}],["constructor(sounds",{"_index":1485,"title":{},"body":{"classes/SoundGroup.html":{}}}],["constructor(src",{"_index":1440,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["constructor(state",{"_index":1566,"title":{},"body":{"classes/State.html":{}}}],["constructor(text",{"_index":1602,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["constructor(texture",{"_index":1532,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["constructor(tiles",{"_index":856,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["constructor(url",{"_index":1615,"title":{},"body":{"classes/Texture.html":{}}}],["constructor(width",{"_index":342,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["constructor(x",{"_index":899,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["container",{"_index":335,"title":{"classes/Container.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["container.alpha",{"_index":397,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["container.appendchild(div",{"_index":1311,"title":{},"body":{"classes/Renderer.html":{}}}],["container.visible",{"_index":396,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["container:19",{"_index":1120,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:21",{"_index":1117,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:24",{"_index":1115,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:27",{"_index":1118,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:29",{"_index":1119,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:32",{"_index":1116,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:40",{"_index":1122,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:54",{"_index":1123,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:60",{"_index":1126,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:67",{"_index":1124,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:78",{"_index":1125,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["containing",{"_index":354,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/Renderer.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["contains",{"_index":660,"title":{},"body":{"classes/Game.html":{}}}],["context",{"_index":1856,"title":{},"body":{"classes/WebAudio.html":{}}}],["control",{"_index":462,"title":{},"body":{"interfaces/Controls.html":{}}}],["controlled",{"_index":1148,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["controller",{"_index":774,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controllers",{"_index":775,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls",{"_index":459,"title":{"interfaces/Controls.html":{}},"body":{"interfaces/Controls.html":{},"classes/Scene.html":{},"coverage.html":{}}}],["controls.ts",{"_index":773,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["controls.ts:111",{"_index":967,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:12",{"_index":1035,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:122",{"_index":975,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:13",{"_index":1039,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:16",{"_index":788,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:18",{"_index":786,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:19",{"_index":787,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:20",{"_index":1036,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:22",{"_index":800,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:25",{"_index":980,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:27",{"_index":804,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:30",{"_index":983,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:32",{"_index":806,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:35",{"_index":984,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:37",{"_index":808,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:42",{"_index":810,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:44",{"_index":985,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:47",{"_index":813,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:49",{"_index":1047,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:52",{"_index":816,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:54",{"_index":785,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:60",{"_index":1046,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:63",{"_index":990,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:65",{"_index":1044,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:69",{"_index":1045,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:73",{"_index":798,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:75",{"_index":964,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:86",{"_index":794,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:98",{"_index":791,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls/controls",{"_index":1328,"title":{},"body":{"classes/Scene.html":{}}}],["convert",{"_index":1848,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["convertentity",{"_index":2049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["converts",{"_index":1847,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["coordinate",{"_index":1224,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["coordinates",{"_index":620,"title":{},"body":{"classes/GLUtils.html":{},"classes/MouseControls.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copies",{"_index":1239,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copy",{"_index":1234,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copy(undefined",{"_index":1798,"title":{},"body":{"classes/Vec.html":{}}}],["core",{"_index":1772,"title":{},"body":{"classes/Timer.html":{}}}],["corner",{"_index":885,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["corners",{"_index":882,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["correction",{"_index":935,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["count",{"_index":1502,"title":{},"body":{"classes/SoundPool.html":{}}}],["countdown",{"_index":1758,"title":{},"body":{"classes/Timer.html":{}}}],["coverage",{"_index":1944,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":62,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["create(buffername",{"_index":289,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["created",{"_index":1107,"title":{},"body":{"classes/OneUp.html":{},"classes/Sprite.html":{}}}],["createprogram",{"_index":1411,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["createprogram(vertexshader",{"_index":1385,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["creates",{"_index":288,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Vec.html":{}}}],["createtextcanvas",{"_index":1715,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["createtexture",{"_index":1673,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["ctx",{"_index":332,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["ctx2",{"_index":333,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["cubicin(x",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cubicinout(x",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cubicout(x",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curframe",{"_index":11,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["current",{"_index":79,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{}}}],["currently",{"_index":1447,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["curtime",{"_index":12,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["custom",{"_index":61,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["customized",{"_index":852,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["d",{"_index":989,"title":{},"body":{"classes/KeyControls.html":{}}}],["data",{"_index":511,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"miscellaneous/typealiases.html":{}}}],["data.levelindex",{"_index":867,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["data.mapheight",{"_index":861,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["data.mapwidth",{"_index":859,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["data.tileheight",{"_index":865,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["data.tilewidth",{"_index":863,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["dead",{"_index":413,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{}}}],["deadzone",{"_index":789,"title":{},"body":{"classes/GamepadControls.html":{}}}],["debug",{"_index":669,"title":{},"body":{"classes/Game.html":{}}}],["debugging",{"_index":1352,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["declare",{"_index":1017,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["default",{"_index":189,"title":{},"body":{"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1082,"title":{},"body":{"classes/OneUp.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults.shaders.fragmentcolor",{"_index":1641,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["defaults.shaders.fragmenttexture",{"_index":1638,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["defaults.shaders.vertexcolor",{"_index":1640,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["defaults.shaders.vertextexture",{"_index":1637,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["defaultsize",{"_index":1184,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["delay",{"_index":1761,"title":{},"body":{"classes/Timer.html":{}}}],["delete",{"_index":836,"title":{},"body":{"classes/GamepadControls.html":{}}}],["delta",{"_index":100,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["description",{"_index":129,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["desired",{"_index":940,"title":{},"body":{"interfaces/Hits.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{}}}],["destination",{"_index":670,"title":{},"body":{"classes/Game.html":{}}}],["detected",{"_index":921,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["determine",{"_index":1171,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["determines",{"_index":372,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["determining",{"_index":376,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["dimension",{"_index":612,"title":{},"body":{"classes/GLUtils.html":{}}}],["dimensions",{"_index":597,"title":{},"body":{"classes/GLUtils.html":{}}}],["ding",{"_index":1435,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["ding.play",{"_index":1437,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["dings",{"_index":1498,"title":{},"body":{"classes/SoundPool.html":{}}}],["dings.play",{"_index":1501,"title":{},"body":{"classes/SoundPool.html":{}}}],["direction",{"_index":814,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{}}}],["directions",{"_index":919,"title":{},"body":{"interfaces/Hits.html":{},"classes/ParticleEmitter.html":{},"interfaces/Resolution.html":{}}}],["directly",{"_index":1290,"title":{},"body":{"classes/Renderer.html":{}}}],["dirto",{"_index":2023,"title":{},"body":{"coverage.html":{}}}],["dis",{"_index":1845,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["display",{"_index":695,"title":{},"body":{"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["displays",{"_index":1596,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["distance",{"_index":2024,"title":{},"body":{"coverage.html":{}}}],["div",{"_index":1301,"title":{},"body":{"classes/Renderer.html":{}}}],["div.appendchild(this.canvas",{"_index":1310,"title":{},"body":{"classes/Renderer.html":{}}}],["div.id",{"_index":1303,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.height",{"_index":1305,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.margin",{"_index":1308,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.position",{"_index":1304,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.width",{"_index":1307,"title":{},"body":{"classes/Renderer.html":{}}}],["divide",{"_index":1251,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["divide(s",{"_index":1252,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["divides",{"_index":1250,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["document.addeventlistener('keydown",{"_index":1008,"title":{},"body":{"classes/KeyControls.html":{}}}],["document.addeventlistener('keyup",{"_index":1012,"title":{},"body":{"classes/KeyControls.html":{}}}],["document.addeventlistener('mousedown",{"_index":1055,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('mousemove",{"_index":1060,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('mouseup",{"_index":1057,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('resize",{"_index":1062,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.body",{"_index":746,"title":{},"body":{"classes/Game.html":{}}}],["document.createelement('audio",{"_index":1896,"title":{},"body":{"classes/WebAudio.html":{}}}],["document.createelement('canvas",{"_index":384,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["document.createelement('div",{"_index":1302,"title":{},"body":{"classes/Renderer.html":{}}}],["documentation",{"_index":1945,"title":{},"body":{"coverage.html":{}}}],["domrect",{"_index":1038,"title":{},"body":{"classes/MouseControls.html":{}}}],["done",{"_index":155,"title":{},"body":{"classes/Assets.html":{}}}],["dot",{"_index":1259,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["dot(undefined",{"_index":1801,"title":{},"body":{"classes/Vec.html":{}}}],["down",{"_index":922,"title":{},"body":{"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{}}}],["down(e",{"_index":1040,"title":{},"body":{"classes/MouseControls.html":{}}}],["drawrect",{"_index":1916,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["drawrect(rect",{"_index":1932,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["drawsprite",{"_index":1917,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["drawsprite(sprite",{"_index":1934,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["drawtilesprite",{"_index":1918,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["drawtilesprite(sprite",{"_index":1936,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["dt",{"_index":39,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["duration",{"_index":1087,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["e",{"_index":228,"title":{},"body":{"classes/Assets.html":{},"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/VecEntity.html":{},"miscellaneous/variables.html":{}}}],["e.acc.set(0",{"_index":1843,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.acc.x",{"_index":1821,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.acc.y",{"_index":1824,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.g",{"_index":970,"title":{},"body":{"classes/KeyControls.html":{},"classes/Sprite.html":{}}}],["e.height",{"_index":573,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["e.mass",{"_index":1823,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.name",{"_index":571,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["e.pos.add(dis",{"_index":1846,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.preventdefault",{"_index":1011,"title":{},"body":{"classes/KeyControls.html":{}}}],["e.properties",{"_index":574,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["e.type",{"_index":570,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["e.vel.clone().multiply",{"_index":1829,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.set(vx",{"_index":1842,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.x",{"_index":1839,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.y",{"_index":1841,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.width",{"_index":572,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["e.x",{"_index":568,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["e.y",{"_index":569,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["each",{"_index":437,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["early",{"_index":1168,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["ease",{"_index":2037,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["easier",{"_index":269,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["easing",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effect",{"_index":1081,"title":{},"body":{"classes/OneUp.html":{},"classes/ParticleEmitter.html":{}}}],["effects",{"_index":1891,"title":{},"body":{"classes/WebAudio.html":{}}}],["el",{"_index":1028,"title":{},"body":{"classes/MouseControls.html":{}}}],["elapsed",{"_index":1766,"title":{},"body":{"classes/Timer.html":{}}}],["elasticout(r",{"_index":1763,"title":{},"body":{"classes/Timer.html":{}}}],["element",{"_index":352,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["emits",{"_index":1210,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter",{"_index":1220,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts",{"_index":1206,"title":{},"body":{"classes/ParticleEmitter.html":{},"coverage.html":{}}}],["emitter.ts:15",{"_index":1216,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts:16",{"_index":1214,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts:48",{"_index":1218,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["empty",{"_index":1278,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["enable",{"_index":306,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{}}}],["enables",{"_index":300,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["ent",{"_index":576,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["entire",{"_index":855,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["entities",{"_index":423,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entitieslayer",{"_index":549,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["entitieslayer.objects",{"_index":552,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["entity",{"_index":366,"title":{"classes/Entity.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["entity.pos.x",{"_index":1313,"title":{},"body":{"classes/Renderer.html":{}}}],["entity.pos.y",{"_index":1317,"title":{},"body":{"classes/Renderer.html":{}}}],["entity.width",{"_index":1314,"title":{},"body":{"classes/Renderer.html":{}}}],["entity:19",{"_index":430,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:21",{"_index":425,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:24",{"_index":417,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:27",{"_index":427,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:29",{"_index":429,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:32",{"_index":420,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:60",{"_index":451,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:67",{"_index":443,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["entity:78",{"_index":447,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["enum",{"_index":731,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2055,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumtype",{"_index":1567,"title":{},"body":{"classes/State.html":{}}}],["equivalent",{"_index":802,"title":{},"body":{"classes/GamepadControls.html":{}}}],["error",{"_index":525,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["error('tiled",{"_index":553,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["error(`error",{"_index":1468,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["error(`invalid",{"_index":1647,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["error(`no",{"_index":313,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["error(`unknown",{"_index":1362,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["error(message",{"_index":1395,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["es",{"_index":575,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["escape",{"_index":811,"title":{},"body":{"classes/GamepadControls.html":{}}}],["established",{"_index":1164,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["event",{"_index":232,"title":{},"body":{"classes/Assets.html":{}}}],["events",{"_index":1027,"title":{},"body":{"classes/MouseControls.html":{}}}],["example",{"_index":7,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["existing",{"_index":92,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["exits",{"_index":1167,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["export",{"_index":75,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["extend",{"_index":1285,"title":{},"body":{"classes/Renderer.html":{}}}],["extended",{"_index":1727,"title":{},"body":{"classes/TileSprite.html":{}}}],["extending",{"_index":453,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["extends",{"_index":330,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["extra",{"_index":502,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["extralayer",{"_index":499,"title":{"interfaces/ExtraLayer.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["extralayers",{"_index":540,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["extralayers.filter(layer",{"_index":555,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["f00",{"_index":1269,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["f12",{"_index":994,"title":{},"body":{"classes/KeyControls.html":{},"miscellaneous/variables.html":{}}}],["f5",{"_index":993,"title":{},"body":{"classes/KeyControls.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":186,"title":{},"body":{"classes/Assets.html":{}}}],["factory(url",{"_index":251,"title":{},"body":{"classes/Assets.html":{}}}],["fade",{"_index":1111,"title":{},"body":{"classes/OneUp.html":{}}}],["fadeduration",{"_index":671,"title":{},"body":{"classes/Game.html":{}}}],["fadeinseconds",{"_index":714,"title":{},"body":{"classes/Game.html":{}}}],["fadeout",{"_index":1861,"title":{},"body":{"classes/WebAudio.html":{}}}],["fades",{"_index":1878,"title":{},"body":{"classes/WebAudio.html":{}}}],["fadetime",{"_index":672,"title":{},"body":{"classes/Game.html":{}}}],["fading",{"_index":1129,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["falls",{"_index":684,"title":{},"body":{"classes/Game.html":{}}}],["false",{"_index":192,"title":{},"body":{"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"interfaces/TextureInfo.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":737,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["fetch(url",{"_index":239,"title":{},"body":{"classes/Assets.html":{}}}],["ff0",{"_index":1140,"title":{},"body":{"classes/OneUp.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["fill",{"_index":1139,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["findattributes",{"_index":1407,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["finduniforms",{"_index":1412,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["first",{"_index":627,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/State.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["firstgid",{"_index":1023,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["flat",{"_index":594,"title":{},"body":{"classes/GLUtils.html":{}}}],["float",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["float32array([0",{"_index":263,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"miscellaneous/variables.html":{}}}],["fn",{"_index":449,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["fn(child",{"_index":498,"title":{},"body":{"classes/Entity.html":{}}}],["font",{"_index":1608,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["force",{"_index":1819,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["force.x",{"_index":1822,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["force.y",{"_index":1825,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["foreach(layer",{"_index":557,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["form",{"_index":536,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["formatted",{"_index":1263,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["found",{"_index":314,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["four",{"_index":881,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["fps",{"_index":673,"title":{},"body":{"classes/Game.html":{}}}],["fragment",{"_index":1335,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["fragmentcolor",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fragmentshader",{"_index":1373,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["fragmentsource",{"_index":1368,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["fragmenttexture",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frame",{"_index":13,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"classes/State.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{}}}],["frames",{"_index":14,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{}}}],["framesource",{"_index":78,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["friction",{"_index":1826,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["friction.y",{"_index":1832,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["from(v",{"_index":1235,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["fullarea",{"_index":262,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":191,"title":{},"body":{"classes/Assets.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1786,"title":{},"body":{"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["g",{"_index":1656,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gainnode",{"_index":1874,"title":{},"body":{"classes/WebAudio.html":{}}}],["game",{"_index":141,"title":{"classes/Game.html":{}},"body":{"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["game(640",{"_index":663,"title":{},"body":{"classes/Game.html":{}}}],["game.assets.completed",{"_index":1660,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["game.assets.image(url",{"_index":1618,"title":{},"body":{"classes/Texture.html":{}}}],["game.debug",{"_index":246,"title":{},"body":{"classes/Assets.html":{},"classes/Game.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["game.fps",{"_index":764,"title":{},"body":{"classes/Game.html":{}}}],["game.height",{"_index":1764,"title":{},"body":{"classes/Timer.html":{}}}],["game.run",{"_index":665,"title":{},"body":{"classes/Game.html":{}}}],["game.ups",{"_index":767,"title":{},"body":{"classes/Game.html":{}}}],["gamepad",{"_index":465,"title":{},"body":{"interfaces/Controls.html":{},"classes/GamepadControls.html":{}}}],["gamepadcontrols",{"_index":468,"title":{"classes/GamepadControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/GamepadControls.html":{},"coverage.html":{}}}],["gamepadevent",{"_index":796,"title":{},"body":{"classes/GamepadControls.html":{}}}],["gameupdate",{"_index":710,"title":{},"body":{"classes/Game.html":{},"miscellaneous/typealiases.html":{}}}],["gameupdate(step",{"_index":762,"title":{},"body":{"classes/Game.html":{}}}],["gauss",{"_index":2025,"title":{},"body":{"coverage.html":{}}}],["gaussdistance",{"_index":2026,"title":{},"body":{"coverage.html":{}}}],["get2dprojectionmatrix",{"_index":583,"title":{},"body":{"classes/GLUtils.html":{}}}],["get2dprojectionmatrix(width",{"_index":590,"title":{},"body":{"classes/GLUtils.html":{}}}],["getaction",{"_index":979,"title":{},"body":{"classes/KeyControls.html":{}}}],["getactiona",{"_index":799,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactionb",{"_index":803,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["getactionesc",{"_index":809,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactionx",{"_index":805,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactiony",{"_index":807,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getanchor",{"_index":1544,"title":{},"body":{"classes/Sprite.html":{}}}],["getattriblocation",{"_index":1413,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getattriblocation(name",{"_index":1360,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["getcameratranslation",{"_index":584,"title":{},"body":{"classes/GLUtils.html":{}}}],["getcameratranslation(camera",{"_index":599,"title":{},"body":{"classes/GLUtils.html":{}}}],["getcanvas",{"_index":723,"title":{},"body":{"classes/Game.html":{}}}],["getcanvaselement",{"_index":1297,"title":{},"body":{"classes/Renderer.html":{}}}],["getcolorfromfillstring",{"_index":1919,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["getcolorfromfillstring(color",{"_index":1938,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["getcompleted",{"_index":211,"title":{},"body":{"classes/Assets.html":{}}}],["getctx",{"_index":1885,"title":{},"body":{"classes/WebAudio.html":{}}}],["gethaschildren",{"_index":486,"title":{},"body":{"classes/Entity.html":{}}}],["getheight",{"_index":719,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["getlayer",{"_index":2050,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getlayer('entities",{"_index":550,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getlayer('level",{"_index":548,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getlayer(layer.name",{"_index":559,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["getmaster",{"_index":1887,"title":{},"body":{"classes/WebAudio.html":{}}}],["getmusic",{"_index":1892,"title":{},"body":{"classes/WebAudio.html":{}}}],["getobjectbyname",{"_index":1752,"title":{},"body":{"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getobjectbyname(name",{"_index":526,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getobjectsbytype",{"_index":1753,"title":{},"body":{"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getobjectsbytype(type",{"_index":528,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getpivot",{"_index":1546,"title":{},"body":{"classes/Sprite.html":{}}}],["getpositionmatrix",{"_index":1920,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["getpositionmatrix(camera",{"_index":1682,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["getprogram",{"_index":1431,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getrotation",{"_index":585,"title":{},"body":{"classes/GLUtils.html":{}}}],["getrotation(angle",{"_index":603,"title":{},"body":{"classes/GLUtils.html":{}}}],["gets",{"_index":281,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Point.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{}}}],["getscale",{"_index":586,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscale(x",{"_index":608,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscalematrix",{"_index":587,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscalematrix(sprite",{"_index":613,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscene",{"_index":721,"title":{},"body":{"classes/Game.html":{}}}],["getsfx",{"_index":1889,"title":{},"body":{"classes/WebAudio.html":{}}}],["getspeed",{"_index":725,"title":{},"body":{"classes/Game.html":{}}}],["gettexture",{"_index":1542,"title":{},"body":{"classes/Sprite.html":{},"classes/WebGLRenderer.html":{}}}],["gettexture(gl",{"_index":1659,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gettileprops",{"_index":565,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettileset",{"_index":551,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":2058,"title":{"index.html":{}},"body":{}}],["gettranslation",{"_index":588,"title":{},"body":{"classes/GLUtils.html":{}}}],["gettranslation(x",{"_index":618,"title":{},"body":{"classes/GLUtils.html":{}}}],["getuniformlocation",{"_index":1414,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getuniformlocation(name",{"_index":1365,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["getvolume",{"_index":1453,"title":{},"body":{"classes/Sound.html":{}}}],["getwidth",{"_index":717,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["getx",{"_index":812,"title":{},"body":{"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{}}}],["gety",{"_index":815,"title":{},"body":{"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{}}}],["gid",{"_index":1020,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["gl",{"_index":273,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.active_attributes",{"_index":1410,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.attachshader(this.program",{"_index":1387,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.bindbuffer(gl.array_buffer",{"_index":316,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.bindtexture(gl.texture_2d",{"_index":1667,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.blendequation(gl.func_add",{"_index":1381,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.blendfunc(gl.src_alpha",{"_index":1382,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.bufferdata(gl.array_buffer",{"_index":317,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.clamp_to_edge",{"_index":1677,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.clearcolor(0",{"_index":1379,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.compile_status",{"_index":1404,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.compileshader(shader",{"_index":1402,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createprogram",{"_index":1386,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createshader(shadertype",{"_index":1400,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createtexture",{"_index":1674,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.deleteprogram(this.program",{"_index":1394,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.deleteshader(shader",{"_index":1406,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.disable(gl.depth_test",{"_index":1384,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.enable(gl.blend",{"_index":1380,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.enablevertexattribarray(attriblocation",{"_index":321,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.float",{"_index":320,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.getprograminfolog(this.program",{"_index":1393,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getprogramparameter(program",{"_index":1409,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getprogramparameter(this.program",{"_index":1390,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getshaderinfolog(shader",{"_index":1405,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getshaderparameter(shader",{"_index":1403,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.link_status",{"_index":1391,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.linkprogram(this.program",{"_index":1388,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.nearest",{"_index":1680,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.one_minus_src_alpha",{"_index":1383,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.rgba",{"_index":1670,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.shadersource(shader",{"_index":1401,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.static_draw",{"_index":318,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.teximage2d(gl.texture_2d",{"_index":1669,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.texparameteri(gl.texture_2d",{"_index":1675,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.texture_mag_filter",{"_index":1681,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.texture_min_filter",{"_index":1679,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.texture_wrap_s",{"_index":1676,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.texture_wrap_t",{"_index":1678,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.unsigned_byte",{"_index":1671,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["gl.vertexattribpointer(attriblocation",{"_index":319,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl_fragcolor",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gl_position",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glbuffer",{"_index":272,"title":{"classes/GlBuffer.html":{}},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["glbuffer(this.gl",{"_index":1629,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["global",{"_index":1019,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["globalalpha",{"_index":1626,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils",{"_index":577,"title":{"classes/GLUtils.html":{}},"body":{"classes/GLUtils.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["glutils.get2dprojectionmatrix(this.width",{"_index":1690,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.getcameratranslation(camera",{"_index":1688,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.getrotation(sprite.rotation",{"_index":1709,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.getscale(width",{"_index":635,"title":{},"body":{"classes/GLUtils.html":{}}}],["glutils.getscalematrix(sprite",{"_index":1697,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation",{"_index":631,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(0",{"_index":630,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(sprite.pivot.x",{"_index":1707,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(sprite.pos.x",{"_index":1693,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(originmatrix",{"_index":1711,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(pivotmatrix",{"_index":1710,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(posmatrix",{"_index":1714,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(scalematrix",{"_index":1713,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["going",{"_index":1586,"title":{},"body":{"classes/State.html":{}}}],["gotpickup",{"_index":1089,"title":{},"body":{"classes/OneUp.html":{}}}],["group",{"_index":1490,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts",{"_index":1480,"title":{},"body":{"classes/SoundGroup.html":{},"coverage.html":{}}}],["group.ts:26",{"_index":1486,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts:42",{"_index":1489,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts:49",{"_index":1491,"title":{},"body":{"classes/SoundGroup.html":{}}}],["h",{"_index":1194,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["h.y",{"_index":1199,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["half",{"_index":66,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Timer.html":{}}}],["handler",{"_index":779,"title":{},"body":{"classes/GamepadControls.html":{}}}],["handler(e",{"_index":795,"title":{},"body":{"classes/GamepadControls.html":{}}}],["handles",{"_index":52,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["hasanchor",{"_index":1683,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["hasanchor(sprite",{"_index":1692,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["haschildren",{"_index":475,"title":{},"body":{"classes/Entity.html":{}}}],["hasframe",{"_index":846,"title":{"interfaces/HasFrame.html":{}},"body":{"interfaces/HasFrame.html":{},"coverage.html":{}}}],["hasupdate",{"_index":419,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"miscellaneous/typealiases.html":{}}}],["hasupdate,index",{"_index":446,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["haswebaudio",{"_index":1857,"title":{},"body":{"classes/WebAudio.html":{}}}],["height",{"_index":336,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Sprite.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["height(value",{"_index":1558,"title":{},"body":{"classes/Sprite.html":{}}}],["helper",{"_index":405,"title":{},"body":{"classes/Container.html":{},"interfaces/HasFrame.html":{}}}],["helpers",{"_index":1226,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["hidden",{"_index":42,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{}}}],["highp",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hit",{"_index":933,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["hitbox",{"_index":849,"title":{"classes/HitBox.html":{}},"body":{"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"coverage.html":{}}}],["hitbox(0",{"_index":1561,"title":{},"body":{"classes/Sprite.html":{}}}],["hits",{"_index":916,"title":{"interfaces/Hits.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["hits.down",{"_index":951,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["hits.right",{"_index":956,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["holds",{"_index":399,"title":{},"body":{"classes/Container.html":{}}}],["horizontal",{"_index":1175,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["horizontalvelrange",{"_index":1177,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["html5",{"_index":328,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["htmlaudioelement",{"_index":210,"title":{},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/WebAudio.html":{}}}],["htmlcanvaselement",{"_index":346,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlelement",{"_index":343,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["htmlimageelement",{"_index":181,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["id",{"_index":257,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1946,"title":{},"body":{"coverage.html":{}}}],["idle",{"_index":63,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["ids",{"_index":1016,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["image",{"_index":156,"title":{},"body":{"classes/Assets.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Sprite.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["image(url",{"_index":176,"title":{},"body":{"classes/Assets.html":{}}}],["imageheight",{"_index":1024,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["imagewidth",{"_index":1025,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["img",{"_index":225,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["img.addeventlistener('load",{"_index":227,"title":{},"body":{"classes/Assets.html":{}}}],["img.complete",{"_index":1662,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["img.src",{"_index":226,"title":{},"body":{"classes/Assets.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["implementation",{"_index":56,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["implementations",{"_index":379,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["implemented",{"_index":452,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["implements",{"_index":1233,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["impulse",{"_index":1833,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["inherited",{"_index":350,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["initial",{"_index":1110,"title":{},"body":{"classes/OneUp.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{}}}],["initialize",{"_index":81,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["initwebgl",{"_index":1378,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["input",{"_index":986,"title":{},"body":{"classes/KeyControls.html":{}}}],["inputs",{"_index":963,"title":{},"body":{"classes/KeyControls.html":{}}}],["inside",{"_index":1088,"title":{},"body":{"classes/OneUp.html":{}}}],["instance",{"_index":692,"title":{},"body":{"classes/Game.html":{},"classes/WebAudio.html":{}}}],["instanceof",{"_index":1701,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["instances",{"_index":1505,"title":{},"body":{"classes/SoundPool.html":{}}}],["integrate",{"_index":1836,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["integrate(e",{"_index":1837,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["integratepos",{"_index":1844,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["integrates",{"_index":1835,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["interface",{"_index":458,"title":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"interfaces/VecEntity.html":{}},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["interfaces",{"_index":460,"title":{},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"interfaces/VecEntity.html":{},"overview.html":{}}}],["internal",{"_index":1785,"title":{},"body":{"classes/Timer.html":{}}}],["invalid",{"_index":938,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["is(state",{"_index":1578,"title":{},"body":{"classes/State.html":{}}}],["isabovelevel",{"_index":509,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["iscompleted",{"_index":150,"title":{},"body":{"classes/Assets.html":{}}}],["isconnect",{"_index":797,"title":{},"body":{"classes/GamepadControls.html":{}}}],["isdown",{"_index":1029,"title":{},"body":{"classes/MouseControls.html":{}}}],["ishit",{"_index":2046,"title":{},"body":{"coverage.html":{}}}],["isin",{"_index":1565,"title":{},"body":{"classes/State.html":{}}}],["isin(...states",{"_index":1580,"title":{},"body":{"classes/State.html":{}}}],["isincamera",{"_index":340,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["isincamera(entity",{"_index":370,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["isjson",{"_index":187,"title":{},"body":{"classes/Assets.html":{}}}],["iswebgl",{"_index":674,"title":{},"body":{"classes/Game.html":{}}}],["j",{"_index":868,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["json",{"_index":157,"title":{},"body":{"classes/Assets.html":{},"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["json(url",{"_index":182,"title":{},"body":{"classes/Assets.html":{}}}],["jsonobj",{"_index":537,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.height",{"_index":544,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.layers",{"_index":545,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tileheight",{"_index":542,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tilesets",{"_index":546,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tilewidth",{"_index":541,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.width",{"_index":543,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["justsetstate",{"_index":1564,"title":{},"body":{"classes/State.html":{}}}],["key",{"_index":471,"title":{},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/KeyControls.html":{},"interfaces/TiledMap.html":{}}}],["key's",{"_index":973,"title":{},"body":{"classes/KeyControls.html":{}}}],["key(key",{"_index":966,"title":{},"body":{"classes/KeyControls.html":{}}}],["keyboard",{"_index":962,"title":{},"body":{"classes/KeyControls.html":{}}}],["keyboardevent",{"_index":968,"title":{},"body":{"classes/KeyControls.html":{}}}],["keycontrols",{"_index":469,"title":{"classes/KeyControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{},"coverage.html":{}}}],["keymap",{"_index":965,"title":{},"body":{"classes/KeyControls.html":{},"miscellaneous/typealiases.html":{}}}],["keys",{"_index":466,"title":{},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{}}}],["keyw",{"_index":971,"title":{},"body":{"classes/KeyControls.html":{}}}],["kilo",{"_index":74,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/Container.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"index.html":{}}}],["kilo/controls",{"_index":472,"title":{},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{}}}],["kilo/fx",{"_index":1132,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["kilo/renderer",{"_index":381,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["kilo/renderer/webgl",{"_index":271,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GLUtils.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["kilo/resolvers",{"_index":942,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["kilo/sound",{"_index":1458,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{}}}],["kilo/types",{"_index":488,"title":{},"body":{"classes/Entity.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Vec.html":{}}}],["kilo/utils",{"_index":512,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"interfaces/VecEntity.html":{}}}],["l",{"_index":1196,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["l.y",{"_index":1203,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["last",{"_index":118,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["lastplay",{"_index":1211,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["lasttime",{"_index":756,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{}}}],["layer",{"_index":508,"title":{"interfaces/Layer.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["layer.data",{"_index":562,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["layer.isabovelevel",{"_index":556,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["layer.name",{"_index":563,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["layers",{"_index":503,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["left",{"_index":901,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{}}}],["lerp",{"_index":2027,"title":{},"body":{"coverage.html":{}}}],["level",{"_index":507,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["levelindex",{"_index":522,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["levellayer",{"_index":547,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["lib/.../assets.ts",{"_index":2069,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../defaults.ts",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../entity.ts",{"_index":2067,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../game.ts",{"_index":2056,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../gl",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../key",{"_index":2068,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../math.ts",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../tiled",{"_index":2071,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../timer.ts",{"_index":2070,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../wall",{"_index":2072,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/animations.ts",{"_index":6,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"coverage.html":{}}}],["lib/animations.ts:10",{"_index":31,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:101",{"_index":135,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:112",{"_index":136,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:12",{"_index":32,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:13",{"_index":33,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:14",{"_index":30,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:15",{"_index":24,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:22",{"_index":34,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:28",{"_index":38,"title":{},"body":{"classes/Animation.html":{}}}],["lib/animations.ts:54",{"_index":131,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:55",{"_index":132,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:56",{"_index":130,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:78",{"_index":133,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:89",{"_index":134,"title":{},"body":{"classes/Animations.html":{}}}],["lib/assets.ts",{"_index":138,"title":{},"body":{"classes/Assets.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/assets.ts:101",{"_index":209,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:122",{"_index":183,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:133",{"_index":175,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:141",{"_index":194,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:156",{"_index":188,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:24",{"_index":166,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:25",{"_index":172,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:26",{"_index":170,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:27",{"_index":168,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:29",{"_index":174,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:30",{"_index":173,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:35",{"_index":212,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:37",{"_index":165,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:57",{"_index":206,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:74",{"_index":196,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:83",{"_index":177,"title":{},"body":{"classes/Assets.html":{}}}],["lib/camera.ts",{"_index":1953,"title":{},"body":{"coverage.html":{}}}],["lib/container.ts",{"_index":398,"title":{},"body":{"classes/Container.html":{},"coverage.html":{}}}],["lib/container.ts:29",{"_index":432,"title":{},"body":{"classes/Container.html":{}}}],["lib/container.ts:40",{"_index":435,"title":{},"body":{"classes/Container.html":{}}}],["lib/container.ts:54",{"_index":436,"title":{},"body":{"classes/Container.html":{}}}],["lib/controls/controls.ts",{"_index":461,"title":{},"body":{"interfaces/Controls.html":{},"coverage.html":{}}}],["lib/controls/gamepad",{"_index":772,"title":{},"body":{"classes/GamepadControls.html":{},"coverage.html":{}}}],["lib/controls/key",{"_index":960,"title":{},"body":{"classes/KeyControls.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/controls/mouse",{"_index":1026,"title":{},"body":{"classes/MouseControls.html":{},"coverage.html":{}}}],["lib/fx/one",{"_index":1079,"title":{},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["lib/fx/particle",{"_index":1205,"title":{},"body":{"classes/ParticleEmitter.html":{},"coverage.html":{}}}],["lib/fx/particle.ts",{"_index":1145,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["lib/fx/particle.ts:112",{"_index":1166,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:55",{"_index":1159,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:56",{"_index":1160,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:57",{"_index":1154,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:90",{"_index":1161,"title":{},"body":{"classes/Particle.html":{}}}],["lib/game.ts",{"_index":659,"title":{},"body":{"classes/Game.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/game.ts:101",{"_index":729,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:104",{"_index":682,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:148",{"_index":715,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:164",{"_index":711,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:216",{"_index":707,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:228",{"_index":708,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:50",{"_index":689,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:51",{"_index":687,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:53",{"_index":699,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:54",{"_index":698,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:55",{"_index":697,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:57",{"_index":702,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:58",{"_index":703,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:59",{"_index":688,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:62",{"_index":690,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:64",{"_index":694,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:66",{"_index":701,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:68",{"_index":704,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:71",{"_index":718,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:76",{"_index":720,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:81",{"_index":722,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:86",{"_index":724,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:94",{"_index":726,"title":{},"body":{"classes/Game.html":{}}}],["lib/renderer/canvas",{"_index":323,"title":{},"body":{"classes/CanvasRenderer.html":{},"coverage.html":{}}}],["lib/renderer/renderer.ts",{"_index":1284,"title":{},"body":{"classes/Renderer.html":{},"coverage.html":{}}}],["lib/renderer/renderer.ts:14",{"_index":1294,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:16",{"_index":1293,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:18",{"_index":1291,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:20",{"_index":1292,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:25",{"_index":1298,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:27",{"_index":1289,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:53",{"_index":1296,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:61",{"_index":1295,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/webgl",{"_index":1620,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["lib/renderer/webgl/defaults.ts",{"_index":1982,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/renderer/webgl/gl",{"_index":254,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/renderer/webgl/shader",{"_index":1333,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["lib/renderer/webgl/utils.ts",{"_index":578,"title":{},"body":{"classes/GLUtils.html":{},"coverage.html":{}}}],["lib/renderer/webgl/utils.ts:109",{"_index":623,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:18",{"_index":600,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:36",{"_index":616,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:54",{"_index":609,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:68",{"_index":591,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:82",{"_index":619,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:95",{"_index":604,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/resolvers/stop",{"_index":1988,"title":{},"body":{"coverage.html":{}}}],["lib/resolvers/wall",{"_index":917,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/scene.ts",{"_index":1318,"title":{},"body":{"classes/Scene.html":{},"coverage.html":{}}}],["lib/scene.ts:17",{"_index":1327,"title":{},"body":{"classes/Scene.html":{}}}],["lib/scene.ts:19",{"_index":1326,"title":{},"body":{"classes/Scene.html":{}}}],["lib/scene.ts:21",{"_index":1324,"title":{},"body":{"classes/Scene.html":{}}}],["lib/sound/sound",{"_index":1479,"title":{},"body":{"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"coverage.html":{}}}],["lib/sound/sound.ts",{"_index":1433,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"coverage.html":{}}}],["lib/sound/sound.ts:33",{"_index":1446,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:35",{"_index":1445,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:36",{"_index":1444,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:41",{"_index":1454,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:48",{"_index":1457,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:50",{"_index":1442,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:83",{"_index":1449,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:96",{"_index":1452,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/web",{"_index":1854,"title":{},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["lib/state.ts",{"_index":1563,"title":{},"body":{"classes/State.html":{},"coverage.html":{}}}],["lib/state.ts:110",{"_index":1587,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:121",{"_index":1579,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:129",{"_index":1581,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:46",{"_index":1574,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:48",{"_index":1570,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:50",{"_index":1571,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:51",{"_index":1572,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:52",{"_index":1573,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:53",{"_index":1568,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:72",{"_index":1575,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:87",{"_index":1584,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:99",{"_index":1577,"title":{},"body":{"classes/State.html":{}}}],["lib/tile",{"_index":847,"title":{},"body":{"interfaces/HasFrame.html":{},"classes/TileSprite.html":{},"coverage.html":{}}}],["lib/timer.ts",{"_index":1757,"title":{},"body":{"classes/Timer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/timer.ts:28",{"_index":1774,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:30",{"_index":1779,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:32",{"_index":1777,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:33",{"_index":1776,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:34",{"_index":1775,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:36",{"_index":1778,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:37",{"_index":1771,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:66",{"_index":1784,"title":{},"body":{"classes/Timer.html":{}}}],["lib/types/entity.ts",{"_index":473,"title":{},"body":{"classes/Entity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/types/entity.ts:19",{"_index":482,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:21",{"_index":479,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:24",{"_index":477,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:27",{"_index":480,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:29",{"_index":481,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:32",{"_index":478,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:35",{"_index":487,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:37",{"_index":476,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:60",{"_index":485,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:67",{"_index":483,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:78",{"_index":484,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/hit",{"_index":895,"title":{},"body":{"classes/HitBox.html":{},"coverage.html":{}}}],["lib/types/rect.ts",{"_index":1265,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"coverage.html":{}}}],["lib/types/rect.ts:28",{"_index":1272,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:30",{"_index":1274,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:33",{"_index":1273,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:35",{"_index":1271,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:59",{"_index":1277,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/sprite.ts",{"_index":1513,"title":{},"body":{"classes/Sprite.html":{},"coverage.html":{}}}],["lib/types/sprite.ts:28",{"_index":1539,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:30",{"_index":1540,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:32",{"_index":1537,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:34",{"_index":1534,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:35",{"_index":1536,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:37",{"_index":1535,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:38",{"_index":1538,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:41",{"_index":1543,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:46",{"_index":1545,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:51",{"_index":1547,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:56",{"_index":1549,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:61",{"_index":1552,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:66",{"_index":1551,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:71",{"_index":1554,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:73",{"_index":1533,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:99",{"_index":1541,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/text.ts",{"_index":1595,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{},"coverage.html":{}}}],["lib/types/text.ts:34",{"_index":1606,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/text.ts:36",{"_index":1604,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/text.ts:57",{"_index":1607,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/texture.ts",{"_index":1613,"title":{},"body":{"classes/Texture.html":{},"coverage.html":{}}}],["lib/types/texture.ts:18",{"_index":1616,"title":{},"body":{"classes/Texture.html":{}}}],["lib/types/tiled.ts",{"_index":1015,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["lib/types/trigger.ts",{"_index":2017,"title":{},"body":{"coverage.html":{}}}],["lib/types/vec.ts",{"_index":1223,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"coverage.html":{}}}],["lib/types/vec.ts:107",{"_index":1809,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:119",{"_index":1805,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:131",{"_index":1800,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:141",{"_index":1804,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:148",{"_index":1806,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:164",{"_index":1802,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:173",{"_index":1810,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:34",{"_index":1793,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:36",{"_index":1794,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:43",{"_index":1803,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:45",{"_index":1792,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:64",{"_index":1807,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:77",{"_index":1799,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:84",{"_index":1797,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:94",{"_index":1796,"title":{},"body":{"classes/Vec.html":{}}}],["lib/utils/math.ts",{"_index":2021,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/utils/physics.ts",{"_index":1812,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["lib/utils/sprite.ts",{"_index":2043,"title":{},"body":{"coverage.html":{}}}],["lib/utils/tiled",{"_index":500,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["library",{"_index":2060,"title":{},"body":{"index.html":{}}}],["life",{"_index":1103,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["lifecycle",{"_index":1147,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["lifesecrange",{"_index":1183,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["line",{"_index":1521,"title":{},"body":{"classes/Sprite.html":{}}}],["listeners",{"_index":198,"title":{},"body":{"classes/Assets.html":{}}}],["literal",{"_index":1418,"title":{},"body":{"classes/ShaderProgram.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":158,"title":{},"body":{"classes/Assets.html":{},"interfaces/ExtraLayer.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["load(url",{"_index":185,"title":{},"body":{"classes/Assets.html":{}}}],["load(vertexsource",{"_index":1369,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loaded",{"_index":204,"title":{},"body":{"classes/Assets.html":{},"classes/Sprite.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["loading",{"_index":693,"title":{},"body":{"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["loads",{"_index":139,"title":{},"body":{"classes/Assets.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Texture.html":{}}}],["loadshader",{"_index":1415,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["loadshader(source",{"_index":1398,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loadtiles",{"_index":560,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadtiles(tiles",{"_index":558,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["loadtilesbylayer",{"_index":2051,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["local",{"_index":1021,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["locate",{"_index":1358,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["location",{"_index":305,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loginfo",{"_index":677,"title":{},"body":{"classes/Game.html":{}}}],["lookup",{"_index":872,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["loop",{"_index":403,"title":{},"body":{"classes/Container.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Timer.html":{}}}],["loops",{"_index":1459,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["mag",{"_index":1254,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["magnitude",{"_index":1253,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["main",{"_index":506,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":268,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["manage",{"_index":270,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["manages",{"_index":1207,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["mandatory",{"_index":523,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":77,"title":{"interfaces/Map.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["map(fn",{"_index":445,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["map.tilesatcorners(bounds",{"_index":947,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["map.ts",{"_index":848,"title":{},"body":{"interfaces/HasFrame.html":{},"coverage.html":{}}}],["mapdata.pickuplocations.foreach(pos",{"_index":409,"title":{},"body":{"classes/Container.html":{}}}],["mapheight",{"_index":520,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mappos",{"_index":875,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["mappos.x",{"_index":870,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["maps",{"_index":448,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["mapwidth",{"_index":519,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["marked",{"_index":440,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["mass",{"_index":1816,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["master",{"_index":1863,"title":{},"body":{"classes/WebAudio.html":{}}}],["masternode",{"_index":1858,"title":{},"body":{"classes/WebAudio.html":{}}}],["mat3",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":127,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math",{"_index":1170,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/SoundGroup.html":{},"classes/Vec.html":{}}}],["math.abs(this.scale.x",{"_index":1746,"title":{},"body":{"classes/TileSprite.html":{}}}],["math.abs(this.scale.y",{"_index":1747,"title":{},"body":{"classes/TileSprite.html":{}}}],["math.cos",{"_index":639,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.floor(camera.pos.x",{"_index":632,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.floor(camera.pos.y",{"_index":633,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.min(t",{"_index":760,"title":{},"body":{"classes/Game.html":{}}}],["math.randf(h.x",{"_index":1198,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randf(l.x",{"_index":1202,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randf(v.x",{"_index":1200,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.random",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.randonefrom(this.sounds).play(opts",{"_index":1493,"title":{},"body":{"classes/SoundGroup.html":{}}}],["math.round(.25",{"_index":765,"title":{},"body":{"classes/Game.html":{}}}],["math.sin",{"_index":640,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.sqrt(this.x",{"_index":1255,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["math.sqrt(vel.x",{"_index":1850,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["matrices",{"_index":625,"title":{},"body":{"classes/GLUtils.html":{}}}],["matrix",{"_index":596,"title":{},"body":{"classes/GLUtils.html":{}}}],["max_frame",{"_index":740,"title":{},"body":{"classes/Game.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1173,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["message",{"_index":1392,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["method",{"_index":360,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["methods",{"_index":16,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["minimum",{"_index":1172,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["miscellaneous",{"_index":2054,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":524,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["mix",{"_index":2028,"title":{},"body":{"coverage.html":{}}}],["modules",{"_index":2062,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monospace",{"_index":1600,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["mouse",{"_index":467,"title":{},"body":{"interfaces/Controls.html":{},"classes/MouseControls.html":{}}}],["mousecontrols",{"_index":470,"title":{"classes/MouseControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/MouseControls.html":{},"coverage.html":{}}}],["mouseevent",{"_index":1041,"title":{},"body":{"classes/MouseControls.html":{}}}],["mouseposfromevent",{"_index":1031,"title":{},"body":{"classes/MouseControls.html":{}}}],["mouseposfromevent(e",{"_index":1042,"title":{},"body":{"classes/MouseControls.html":{}}}],["move",{"_index":1032,"title":{},"body":{"classes/MouseControls.html":{},"classes/OneUp.html":{}}}],["move(e",{"_index":1043,"title":{},"body":{"classes/MouseControls.html":{}}}],["move.ts",{"_index":1989,"title":{},"body":{"coverage.html":{}}}],["moved",{"_index":1084,"title":{},"body":{"classes/OneUp.html":{}}}],["movement",{"_index":941,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["movements",{"_index":939,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["moving",{"_index":1128,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Timer.html":{}}}],["ms",{"_index":758,"title":{},"body":{"classes/Game.html":{}}}],["multiple",{"_index":145,"title":{},"body":{"classes/Assets.html":{}}}],["multiples",{"_index":1497,"title":{},"body":{"classes/SoundPool.html":{}}}],["multiplication",{"_index":628,"title":{},"body":{"classes/GLUtils.html":{}}}],["multiplier",{"_index":727,"title":{},"body":{"classes/Game.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiplies",{"_index":624,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiply",{"_index":1248,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiply(s",{"_index":1249,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiplymatrices",{"_index":589,"title":{},"body":{"classes/GLUtils.html":{}}}],["multiplymatrices(a",{"_index":621,"title":{},"body":{"classes/GLUtils.html":{}}}],["music",{"_index":1865,"title":{},"body":{"classes/WebAudio.html":{}}}],["musicnode",{"_index":1859,"title":{},"body":{"classes/WebAudio.html":{}}}],["mute",{"_index":1862,"title":{},"body":{"classes/WebAudio.html":{}}}],["mutes",{"_index":1880,"title":{},"body":{"classes/WebAudio.html":{}}}],["name",{"_index":27,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":108,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["namespace",{"_index":1018,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["needed",{"_index":936,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["network",{"_index":146,"title":{},"body":{"classes/Assets.html":{}}}],["new",{"_index":58,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":1509,"title":{},"body":{"classes/SoundPool.html":{}}}],["node",{"_index":1881,"title":{},"body":{"classes/WebAudio.html":{}}}],["normal",{"_index":734,"title":{},"body":{"classes/Game.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"miscellaneous/enumerations.html":{}}}],["normalize",{"_index":1256,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["null",{"_index":86,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/State.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["number",{"_index":22,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["numeric",{"_index":1108,"title":{},"body":{"classes/OneUp.html":{}}}],["numparticles",{"_index":1215,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["object",{"_index":54,"title":{"interfaces/Object.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":1049,"title":{},"body":{"classes/MouseControls.html":{},"classes/State.html":{}}}],["object.assign",{"_index":1472,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["objects",{"_index":267,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/SoundPool.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["offset",{"_index":887,"title":{},"body":{"interfaces/HasFrame.html":{},"classes/HitBox.html":{}}}],["offsets",{"_index":929,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["onassetload",{"_index":159,"title":{},"body":{"classes/Assets.html":{}}}],["onassetload(asset",{"_index":193,"title":{},"body":{"classes/Assets.html":{}}}],["ondone",{"_index":1767,"title":{},"body":{"classes/Timer.html":{}}}],["one",{"_index":114,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/SoundGroup.html":{},"classes/Sprite.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["one.pos.copy(this.player.pos",{"_index":1102,"title":{},"body":{"classes/OneUp.html":{}}}],["oneup",{"_index":1078,"title":{"classes/OneUp.html":{}},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["oneup(coin",{"_index":1101,"title":{},"body":{"classes/OneUp.html":{}}}],["onload",{"_index":231,"title":{},"body":{"classes/Assets.html":{}}}],["onprogress",{"_index":160,"title":{},"body":{"classes/Assets.html":{}}}],["onprogress(cb",{"_index":195,"title":{},"body":{"classes/Assets.html":{}}}],["onready",{"_index":161,"title":{},"body":{"classes/Assets.html":{}}}],["onready(cb",{"_index":205,"title":{},"body":{"classes/Assets.html":{}}}],["onscenecomplete",{"_index":1322,"title":{},"body":{"classes/Scene.html":{}}}],["ontick",{"_index":1768,"title":{},"body":{"classes/Timer.html":{}}}],["opacity",{"_index":418,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/Tileset.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["optionally",{"_index":1760,"title":{},"body":{"classes/Timer.html":{}}}],["options",{"_index":1152,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["options.loop",{"_index":1466,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["opts",{"_index":1471,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["opts.time",{"_index":1475,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["opts.volume",{"_index":1473,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["originmatrix",{"_index":1700,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["out",{"_index":1112,"title":{},"body":{"classes/OneUp.html":{},"classes/WebAudio.html":{}}}],["over",{"_index":1130,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["overrides",{"_index":91,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["overriding",{"_index":1451,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["overview",{"_index":2063,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":82,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["parent",{"_index":1048,"title":{},"body":{"classes/MouseControls.html":{},"classes/State.html":{}}}],["parsed",{"_index":184,"title":{},"body":{"classes/Assets.html":{}}}],["parsefloat(parts[3].replace",{"_index":1652,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(0",{"_index":1654,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(2",{"_index":1657,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(4",{"_index":1658,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(parts[0",{"_index":1648,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(parts[1",{"_index":1649,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(parts[2",{"_index":1651,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parseint(parts[2].replace",{"_index":1650,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parser.ts",{"_index":501,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["parser.ts:40",{"_index":1754,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["parser.ts:47",{"_index":1755,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["parses",{"_index":534,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["particle",{"_index":1144,"title":{"classes/Particle.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particle's",{"_index":1169,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["particleemitter",{"_index":1149,"title":{"classes/ParticleEmitter.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particleoptions",{"_index":1153,"title":{"interfaces/ParticleOptions.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particles",{"_index":1212,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["parts",{"_index":1642,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parts.length",{"_index":1646,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parts[0",{"_index":1644,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["parts[0].substr(parts[0].indexof",{"_index":1645,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["passed",{"_index":1158,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["passthroughkeys",{"_index":992,"title":{},"body":{"classes/KeyControls.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passthroughkeys.indexof(e.code.tostring",{"_index":1010,"title":{},"body":{"classes/KeyControls.html":{}}}],["path",{"_index":180,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["pauses",{"_index":1884,"title":{},"body":{"classes/WebAudio.html":{}}}],["per",{"_index":308,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{}}}],["physics",{"_index":1813,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["pickup",{"_index":408,"title":{},"body":{"classes/Container.html":{}}}],["pickup(pos",{"_index":411,"title":{},"body":{"classes/Container.html":{}}}],["pickups",{"_index":406,"title":{},"body":{"classes/Container.html":{}}}],["pickups.push(new",{"_index":410,"title":{},"body":{"classes/Container.html":{}}}],["pivot",{"_index":1531,"title":{},"body":{"classes/Sprite.html":{}}}],["pivotmatrix",{"_index":1703,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["pixel",{"_index":871,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["pixels",{"_index":345,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["play",{"_index":110,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/ParticleEmitter.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["play(anim",{"_index":111,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["play(options",{"_index":1507,"title":{},"body":{"classes/SoundPool.html":{}}}],["play(opts",{"_index":1488,"title":{},"body":{"classes/SoundGroup.html":{}}}],["play(overrides",{"_index":1448,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["play(pos",{"_index":1217,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["playing",{"_index":1438,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["plays",{"_index":1219,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/SoundGroup.html":{},"classes/WebAudio.html":{}}}],["point",{"_index":21,"title":{"interfaces/Point.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"coverage.html":{}}}],["pool",{"_index":1208,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/SoundPool.html":{}}}],["pool.ts",{"_index":1495,"title":{},"body":{"classes/SoundPool.html":{},"coverage.html":{}}}],["pool.ts:20",{"_index":1506,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:21",{"_index":1504,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:45",{"_index":1508,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:54",{"_index":1510,"title":{},"body":{"classes/SoundPool.html":{}}}],["poolsize",{"_index":1503,"title":{},"body":{"classes/SoundPool.html":{}}}],["pos",{"_index":414,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"interfaces/HasFrame.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/VecEntity.html":{}}}],["position",{"_index":428,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["posmatrix",{"_index":1712,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["possible",{"_index":1325,"title":{},"body":{"classes/Scene.html":{},"classes/State.html":{}}}],["pre",{"_index":732,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["precision",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepares",{"_index":302,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["pressed",{"_index":974,"title":{},"body":{"classes/KeyControls.html":{},"classes/MouseControls.html":{}}}],["prevent",{"_index":144,"title":{},"body":{"classes/Assets.html":{}}}],["prevents",{"_index":937,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["previous",{"_index":1576,"title":{},"body":{"classes/State.html":{}}}],["private",{"_index":10,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["product",{"_index":1260,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["program",{"_index":1346,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["program.ts",{"_index":1334,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["program.ts:106",{"_index":1423,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:126",{"_index":1430,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:144",{"_index":1424,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:158",{"_index":1425,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:19",{"_index":1420,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:20",{"_index":1417,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:21",{"_index":1419,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:22",{"_index":1422,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:23",{"_index":1421,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:28",{"_index":1432,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:30",{"_index":1416,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:55",{"_index":1426,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:70",{"_index":1427,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:84",{"_index":1429,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:94",{"_index":1428,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["progress",{"_index":201,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["progresscallback",{"_index":169,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["progresslisteners",{"_index":151,"title":{},"body":{"classes/Assets.html":{}}}],["projection",{"_index":595,"title":{},"body":{"classes/GLUtils.html":{}}}],["projectionmatrix",{"_index":1689,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["property",{"_index":617,"title":{"interfaces/Property.html":{}},"body":{"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["protected",{"_index":334,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["provide",{"_index":199,"title":{},"body":{"classes/Assets.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["provided",{"_index":282,"title":{},"body":{"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Renderer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"interfaces/TextureInfo.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["provides",{"_index":579,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Point.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Texture.html":{},"classes/Vec.html":{}}}],["public",{"_index":1529,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["px",{"_index":1306,"title":{},"body":{"classes/Renderer.html":{}}}],["quadin(x",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quadout(x",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quickly",{"_index":96,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["r",{"_index":1653,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["radians",{"_index":607,"title":{},"body":{"classes/GLUtils.html":{}}}],["rand",{"_index":2029,"title":{},"body":{"coverage.html":{}}}],["randf",{"_index":2030,"title":{},"body":{"coverage.html":{}}}],["random",{"_index":1162,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/SoundGroup.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["randomly",{"_index":1151,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["randomseed",{"_index":2031,"title":{},"body":{"coverage.html":{}}}],["randomseeded",{"_index":2032,"title":{},"body":{"coverage.html":{}}}],["randonefrom",{"_index":2033,"title":{},"body":{"coverage.html":{}}}],["randonein",{"_index":2034,"title":{},"body":{"coverage.html":{}}}],["range",{"_index":1174,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["ranges",{"_index":1165,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["rate",{"_index":15,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["ratio",{"_index":768,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["ready",{"_index":214,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["readycallback",{"_index":171,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["readylisteners",{"_index":152,"title":{},"body":{"classes/Assets.html":{}}}],["rect",{"_index":615,"title":{"classes/Rect.html":{}},"body":{"classes/GLUtils.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["rect(32",{"_index":1267,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["rect(40",{"_index":1137,"title":{},"body":{"classes/OneUp.html":{}}}],["rectangle",{"_index":1083,"title":{},"body":{"classes/OneUp.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["rectstyleoptions",{"_index":1270,"title":{"interfaces/RectStyleOptions.html":{}},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"coverage.html":{}}}],["recursive",{"_index":325,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{}}}],["recursively",{"_index":362,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["reference",{"_index":1320,"title":{},"body":{"classes/Scene.html":{}}}],["relative",{"_index":179,"title":{},"body":{"classes/Assets.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/Texture.html":{}}}],["released",{"_index":1030,"title":{},"body":{"classes/MouseControls.html":{}}}],["remaining",{"_index":153,"title":{},"body":{"classes/Assets.html":{}}}],["remarks",{"_index":115,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Vec.html":{}}}],["remove",{"_index":416,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{},"classes/Timer.html":{}}}],["remove(child",{"_index":434,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["removes",{"_index":439,"title":{},"body":{"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["render",{"_index":338,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["render(container",{"_index":357,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["rendered",{"_index":402,"title":{},"body":{"classes/Container.html":{},"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["renderer",{"_index":331,"title":{"classes/Renderer.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["renderer.ts",{"_index":324,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["renderer.ts:104",{"_index":1943,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:14",{"_index":348,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer.ts:15",{"_index":349,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer.ts:16",{"_index":344,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer.ts:168",{"_index":1935,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:19",{"_index":1925,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:191",{"_index":1937,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:20",{"_index":1924,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:21",{"_index":1928,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:22",{"_index":1927,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:225",{"_index":1933,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:24",{"_index":1923,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:240",{"_index":1939,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:25",{"_index":1929,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:26",{"_index":1922,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:27",{"_index":1926,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:277",{"_index":1941,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:28",{"_index":1921,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:312",{"_index":1931,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:325",{"_index":1940,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:360",{"_index":1930,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:46",{"_index":359,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer.ts:66",{"_index":1942,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:78",{"_index":368,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer:14",{"_index":356,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:16",{"_index":355,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:18",{"_index":351,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:20",{"_index":353,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:53",{"_index":377,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:61",{"_index":371,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderers",{"_index":1287,"title":{},"body":{"classes/Renderer.html":{}}}],["rendering",{"_index":326,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderrecursive",{"_index":339,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderrecursive(container",{"_index":365,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["representation",{"_index":1262,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["res.json",{"_index":241,"title":{},"body":{"classes/Assets.html":{}}}],["reset",{"_index":17,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/KeyControls.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["resets",{"_index":976,"title":{},"body":{"classes/KeyControls.html":{}}}],["resize",{"_index":1033,"title":{},"body":{"classes/MouseControls.html":{}}}],["resolution",{"_index":934,"title":{"interfaces/Resolution.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["resolve",{"_index":931,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["resolver",{"_index":926,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["result",{"_index":126,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result[i",{"_index":497,"title":{},"body":{"classes/Entity.html":{}}}],["results",{"_index":128,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":105,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Point.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":35,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["right",{"_index":923,"title":{},"body":{"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{}}}],["rotation",{"_index":605,"title":{},"body":{"classes/GLUtils.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["rotations",{"_index":1548,"title":{},"body":{"classes/Sprite.html":{}}}],["rotmatrix",{"_index":1708,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["run",{"_index":678,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["run(gameupdate",{"_index":709,"title":{},"body":{"classes/Game.html":{}}}],["s",{"_index":991,"title":{},"body":{"classes/KeyControls.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["same",{"_index":71,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/SoundPool.html":{}}}],["sampler2d",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalar",{"_index":1247,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["scale",{"_index":415,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["scalematrix",{"_index":634,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["scene",{"_index":680,"title":{"classes/Scene.html":{}},"body":{"classes/Game.html":{},"classes/Scene.html":{},"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["scenes",{"_index":1321,"title":{},"body":{"classes/Scene.html":{}}}],["screen",{"_index":683,"title":{},"body":{"classes/Game.html":{}}}],["scripts",{"_index":1332,"title":{"interfaces/Scripts.html":{}},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["scripts.fragment",{"_index":1357,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["second",{"_index":67,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Timer.html":{}}}],["seconds",{"_index":442,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{}}}],["see",{"_index":1157,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["seed",{"_index":2038,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":1487,"title":{},"body":{"classes/SoundGroup.html":{}}}],["set",{"_index":107,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["set(state",{"_index":1583,"title":{},"body":{"classes/State.html":{}}}],["set(x",{"_index":906,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["setaction(value",{"_index":982,"title":{},"body":{"classes/KeyControls.html":{}}}],["setactive",{"_index":839,"title":{},"body":{"classes/GlBuffer.html":{}}}],["setactive(buffername",{"_index":310,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["setheight(value",{"_index":1550,"title":{},"body":{"classes/Sprite.html":{}}}],["sets",{"_index":298,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/KeyControls.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{}}}],["setscene",{"_index":679,"title":{},"body":{"classes/Game.html":{}}}],["setscene(scene",{"_index":713,"title":{},"body":{"classes/Game.html":{}}}],["setspeed(value",{"_index":728,"title":{},"body":{"classes/Game.html":{}}}],["settileframeatmappos(mappos",{"_index":876,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["settileframeatpixelpos(pos",{"_index":879,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["setting",{"_index":1455,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["setvolume(volume",{"_index":1456,"title":{},"body":{"classes/Sound.html":{}}}],["setwidth(value",{"_index":1553,"title":{},"body":{"classes/Sprite.html":{}}}],["sfx",{"_index":1864,"title":{},"body":{"classes/WebAudio.html":{}}}],["sfxnode",{"_index":1860,"title":{},"body":{"classes/WebAudio.html":{}}}],["shader",{"_index":1363,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["shaderprogram",{"_index":1340,"title":{"classes/ShaderProgram.html":{}},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["shaderprogram(this.gl",{"_index":1636,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["shaderprogramcol",{"_index":1623,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["shaderprogramtex",{"_index":1622,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["shaders",{"_index":1348,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["shadertype",{"_index":1399,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["shows",{"_index":696,"title":{},"body":{"classes/Game.html":{}}}],["sign",{"_index":1109,"title":{},"body":{"classes/OneUp.html":{}}}],["similar",{"_index":1090,"title":{},"body":{"classes/OneUp.html":{}}}],["simple",{"_index":592,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["simpler",{"_index":535,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["simplify",{"_index":1338,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["single",{"_index":203,"title":{},"body":{"classes/Assets.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["size",{"_index":611,"title":{},"body":{"classes/GLUtils.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/TileSprite.html":{}}}],["sizes",{"_index":610,"title":{},"body":{"classes/GLUtils.html":{}}}],["skip",{"_index":1780,"title":{},"body":{"classes/Timer.html":{}}}],["slide.ts",{"_index":918,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["slow",{"_index":736,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["smoothstep",{"_index":2035,"title":{},"body":{"coverage.html":{}}}],["sound",{"_index":162,"title":{"classes/Sound.html":{}},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{},"coverage.html":{}}}],["sound('assets/sounds/ding.ogg",{"_index":1436,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["sound('assets/sounds/ding1.ogg",{"_index":1481,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding2.ogg",{"_index":1482,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding3.ogg",{"_index":1483,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding4.ogg",{"_index":1484,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound(url",{"_index":208,"title":{},"body":{"classes/Assets.html":{}}}],["soundgroup",{"_index":1478,"title":{"classes/SoundGroup.html":{}},"body":{"classes/SoundGroup.html":{},"coverage.html":{}}}],["soundoptions",{"_index":1441,"title":{"interfaces/SoundOptions.html":{}},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"coverage.html":{}}}],["soundpool",{"_index":1494,"title":{"classes/SoundPool.html":{}},"body":{"classes/SoundPool.html":{},"coverage.html":{}}}],["soundpool('assets/sounds/ding.ogg",{"_index":1499,"title":{},"body":{"classes/SoundPool.html":{}}}],["sounds",{"_index":1434,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["sources",{"_index":1349,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["sp",{"_index":1684,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sp.anchor",{"_index":1685,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sp.anchor.x",{"_index":1686,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sp.anchor.y",{"_index":1687,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["spacebar",{"_index":981,"title":{},"body":{"classes/KeyControls.html":{}}}],["specific",{"_index":1286,"title":{},"body":{"classes/Renderer.html":{}}}],["specified",{"_index":89,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{}}}],["speed",{"_index":95,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"interfaces/VecEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["speed(value",{"_index":745,"title":{},"body":{"classes/Game.html":{}}}],["speed(vel",{"_index":1849,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["speed.normal",{"_index":739,"title":{},"body":{"classes/Game.html":{},"miscellaneous/variables.html":{}}}],["speeds",{"_index":733,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["sprite",{"_index":94,"title":{"classes/Sprite.html":{}},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Sprite.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["sprite(new",{"_index":1522,"title":{},"body":{"classes/Sprite.html":{}}}],["sprite(texture",{"_index":1519,"title":{},"body":{"classes/Sprite.html":{}}}],["sprite.height",{"_index":1699,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.pivot.x",{"_index":1704,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.pivot.y",{"_index":1705,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.pos.y",{"_index":1695,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.rotation",{"_index":1702,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.scale",{"_index":636,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.scale.x",{"_index":637,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.scale.y",{"_index":638,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.texture",{"_index":1661,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.ts",{"_index":1726,"title":{},"body":{"classes/TileSprite.html":{},"coverage.html":{}}}],["sprite.ts:14",{"_index":1730,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:16",{"_index":1729,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:19",{"_index":1733,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:21",{"_index":1732,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:24",{"_index":1743,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:29",{"_index":1745,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:31",{"_index":1728,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:58",{"_index":1741,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.width",{"_index":1698,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["sprite:28",{"_index":1739,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:30",{"_index":1740,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:32",{"_index":1737,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:34",{"_index":1734,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:35",{"_index":1736,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:37",{"_index":1735,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:38",{"_index":1738,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite:99",{"_index":1742,"title":{},"body":{"classes/TileSprite.html":{}}}],["src",{"_index":1443,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["start",{"_index":712,"title":{},"body":{"classes/Game.html":{}}}],["started",{"_index":2059,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1086,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["state",{"_index":978,"title":{"classes/State.html":{}},"body":{"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/State.html":{},"classes/Timer.html":{},"coverage.html":{}}}],["state(myenum.stateone",{"_index":1569,"title":{},"body":{"classes/State.html":{}}}],["statements",{"_index":1947,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1582,"title":{},"body":{"classes/State.html":{}}}],["static",{"_index":580,"title":{},"body":{"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["status",{"_index":213,"title":{},"body":{"classes/Assets.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["step",{"_index":738,"title":{},"body":{"classes/Game.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stop",{"_index":113,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["stopmovement",{"_index":1990,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":1585,"title":{},"body":{"classes/State.html":{}}}],["string",{"_index":80,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":1185,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["styles",{"_index":1605,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["subtract",{"_index":1246,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["subtract(undefined",{"_index":1808,"title":{},"body":{"classes/Vec.html":{}}}],["subtracts",{"_index":1245,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["success",{"_index":1389,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["super",{"_index":857,"title":{},"body":{"interfaces/HasFrame.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["super(texture",{"_index":1748,"title":{},"body":{"classes/TileSprite.html":{}}}],["super(width",{"_index":382,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["super.update(dt",{"_index":1141,"title":{},"body":{"classes/OneUp.html":{}}}],["supported",{"_index":464,"title":{},"body":{"interfaces/Controls.html":{},"classes/WebAudio.html":{}}}],["t",{"_index":433,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["table",{"_index":2053,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2052,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":884,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["testing",{"_index":1515,"title":{},"body":{"classes/Sprite.html":{}}}],["testobj",{"_index":1266,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["text",{"_index":380,"title":{"classes/Text.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["text('hello",{"_index":1597,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["text.pos.set(20",{"_index":1601,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["textoptions",{"_index":1603,"title":{"interfaces/TextOptions.html":{}},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{},"coverage.html":{}}}],["texture",{"_index":850,"title":{"classes/Texture.html":{}},"body":{"interfaces/HasFrame.html":{},"classes/Sprite.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["texture('assets/images/bullet.png",{"_index":1517,"title":{},"body":{"classes/Sprite.html":{}}}],["texture('assets/images/tilesheet.png",{"_index":1614,"title":{},"body":{"classes/Texture.html":{}}}],["texture2d(u_sampler",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textureinfo",{"_index":1619,"title":{"interfaces/TextureInfo.html":{}},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["textures",{"_index":1624,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["then(json",{"_index":242,"title":{},"body":{"classes/Assets.html":{}}}],["then(res",{"_index":240,"title":{},"body":{"classes/Assets.html":{}}}],["thin",{"_index":264,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this._anchor",{"_index":1556,"title":{},"body":{"classes/Sprite.html":{}}}],["this._height",{"_index":742,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{}}}],["this._pivot",{"_index":1557,"title":{},"body":{"classes/Sprite.html":{}}}],["this._program",{"_index":1347,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this._scene",{"_index":743,"title":{},"body":{"classes/Game.html":{}}}],["this._texture",{"_index":1555,"title":{},"body":{"classes/Sprite.html":{}}}],["this._width",{"_index":741,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{}}}],["this._x",{"_index":914,"title":{},"body":{"classes/HitBox.html":{}}}],["this._y",{"_index":915,"title":{},"body":{"classes/HitBox.html":{}}}],["this.action(0",{"_index":818,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(1",{"_index":820,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(2",{"_index":822,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(3",{"_index":824,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(4",{"_index":826,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.activebuffer",{"_index":315,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.add(display",{"_index":1190,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.add(new",{"_index":1100,"title":{},"body":{"classes/OneUp.html":{}}}],["this.alpha",{"_index":492,"title":{},"body":{"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.anims",{"_index":57,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/TileSprite.html":{}}}],["this.anims.add('idle",{"_index":68,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.anims.get(anim).reset",{"_index":112,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.anims.get(name",{"_index":106,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.anims.get(this.current",{"_index":120,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.anims.play('idle",{"_index":72,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.anims.set(name",{"_index":103,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.anims.update(dt",{"_index":1751,"title":{},"body":{"classes/TileSprite.html":{}}}],["this.attributes",{"_index":1354,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.attributes[name",{"_index":1361,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.audio",{"_index":1470,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.currenttime",{"_index":1474,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.pause",{"_index":1477,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.play",{"_index":1476,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.volume",{"_index":1460,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.axis(0",{"_index":827,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.axis(1",{"_index":828,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.boundtexture",{"_index":1666,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffer",{"_index":383,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.getcontext('2d",{"_index":390,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.height",{"_index":387,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.width",{"_index":385,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffers",{"_index":280,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffers.create('position",{"_index":1630,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffers.create('rect",{"_index":1632,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffers.create('texture",{"_index":1631,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffers.find(x",{"_index":285,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.length",{"_index":295,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.push(buff",{"_index":297,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.cache",{"_index":217,"title":{},"body":{"classes/Assets.html":{}}}],["this.cache[url",{"_index":248,"title":{},"body":{"classes/Assets.html":{}}}],["this.canvas",{"_index":1299,"title":{},"body":{"classes/Renderer.html":{}}}],["this.canvas.getcontext('2d",{"_index":395,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.canvas.getcontext('webgl",{"_index":1627,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.canvas.height",{"_index":388,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{}}}],["this.canvas.id",{"_index":1300,"title":{},"body":{"classes/Renderer.html":{}}}],["this.canvas.width",{"_index":386,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{}}}],["this.checkwebgl(canvas",{"_index":747,"title":{},"body":{"classes/Game.html":{}}}],["this.children",{"_index":455,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"interfaces/HasFrame.html":{},"classes/OneUp.html":{}}}],["this.children.entries",{"_index":496,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.filter(ch",{"_index":456,"title":{},"body":{"classes/Container.html":{}}}],["this.children.length",{"_index":489,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.push(child",{"_index":454,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{}}}],["this.container",{"_index":1312,"title":{},"body":{"classes/Renderer.html":{}}}],["this.container.appendchild(canvas",{"_index":1724,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.context",{"_index":1898,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.context.creategain",{"_index":1900,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.context.currenttime",{"_index":1912,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.controller",{"_index":829,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controller.axes[id",{"_index":838,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controllers",{"_index":830,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controllers[gamepad.index",{"_index":837,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controls",{"_index":1330,"title":{},"body":{"classes/Scene.html":{}}}],["this.count",{"_index":1512,"title":{},"body":{"classes/SoundPool.html":{}}}],["this.createprogram(vertexshader",{"_index":1376,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.createtextcanvas",{"_index":1633,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.createtexture",{"_index":1668,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.ctx",{"_index":389,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.ctx.imagesmoothingenabled",{"_index":391,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.ctx.textbaseline",{"_index":392,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.ctx2",{"_index":394,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.cubicin(1",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.curframe",{"_index":47,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.current",{"_index":85,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.curtime",{"_index":49,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.dead",{"_index":491,"title":{},"body":{"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Timer.html":{}}}],["this.delay",{"_index":1788,"title":{},"body":{"classes/Timer.html":{}}}],["this.destination",{"_index":752,"title":{},"body":{"classes/Game.html":{}}}],["this.destination.alpha",{"_index":770,"title":{},"body":{"classes/Game.html":{}}}],["this.divide(mag",{"_index":1258,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.done",{"_index":223,"title":{},"body":{"classes/Assets.html":{}}}],["this.down(e",{"_index":1056,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.duration",{"_index":1135,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["this.el",{"_index":1050,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.clientheight",{"_index":1073,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.clientwidth",{"_index":1070,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.getboundingclientrect",{"_index":1065,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.height",{"_index":1072,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.width",{"_index":1069,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.elapsed",{"_index":1787,"title":{},"body":{"classes/Timer.html":{}}}],["this.element",{"_index":1895,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.pause",{"_index":1910,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.play",{"_index":1909,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.src",{"_index":1897,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.fadeduration",{"_index":754,"title":{},"body":{"classes/Game.html":{}}}],["this.fadetime",{"_index":753,"title":{},"body":{"classes/Game.html":{}}}],["this.findattributes",{"_index":1396,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.finduniforms",{"_index":1397,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.first",{"_index":1594,"title":{},"body":{"classes/State.html":{}}}],["this.frame",{"_index":45,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/TileSprite.html":{}}}],["this.frame.__proto__",{"_index":1749,"title":{},"body":{"classes/TileSprite.html":{}}}],["this.frames",{"_index":43,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.frames.length",{"_index":51,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.frames[0",{"_index":46,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.frames[this.curframe",{"_index":50,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.framesource",{"_index":84,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.framesource.x",{"_index":122,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.framesource.y",{"_index":124,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.game",{"_index":1329,"title":{},"body":{"classes/Scene.html":{}}}],["this.gl",{"_index":279,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.gl.createbuffer",{"_index":292,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.gl.fragment_shader",{"_index":1375,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.gl.vertex_shader",{"_index":1372,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.handler(e",{"_index":834,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.haswebaudio",{"_index":1894,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.height",{"_index":1281,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.hitbox",{"_index":1560,"title":{},"body":{"classes/Sprite.html":{}}}],["this.img",{"_index":1617,"title":{},"body":{"classes/Texture.html":{}}}],["this.initwebgl",{"_index":1377,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.iscompleted",{"_index":216,"title":{},"body":{"classes/Assets.html":{}}}],["this.isdown",{"_index":1051,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.iswebgl",{"_index":748,"title":{},"body":{"classes/Game.html":{}}}],["this.justsetstate",{"_index":1593,"title":{},"body":{"classes/State.html":{}}}],["this.keys",{"_index":1014,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowdown",{"_index":1005,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowleft",{"_index":999,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowright",{"_index":1001,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowup",{"_index":1003,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keya",{"_index":1000,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyd",{"_index":1002,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keys",{"_index":1006,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyw",{"_index":1004,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyx",{"_index":997,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.space",{"_index":995,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys[e.code",{"_index":1009,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys[key",{"_index":1013,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.last",{"_index":1589,"title":{},"body":{"classes/State.html":{}}}],["this.lasttime",{"_index":1592,"title":{},"body":{"classes/State.html":{}}}],["this.levelindex",{"_index":866,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.levelindex].children[mappos.y",{"_index":869,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.life",{"_index":1136,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.load(scripts.vertex",{"_index":1356,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.load(url",{"_index":230,"title":{},"body":{"classes/Assets.html":{}}}],["this.loadshader(fragmentsource",{"_index":1374,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.loadshader(vertexsource",{"_index":1371,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.loginfo",{"_index":755,"title":{},"body":{"classes/Game.html":{}}}],["this.mag",{"_index":1257,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.mapheight",{"_index":860,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.mapwidth",{"_index":858,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.master.connect(this.context.destination",{"_index":1902,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.master.gain.value",{"_index":1901,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode",{"_index":1899,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.linearramptovalueattime(0",{"_index":1915,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.setvalueattime(0",{"_index":1911,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.setvalueattime(volume",{"_index":1914,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.value",{"_index":1913,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.mouseposfromevent(e",{"_index":1063,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.move(e",{"_index":1061,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.music.connect(this.master",{"_index":1908,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.music.gain.value",{"_index":1907,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.musicnode",{"_index":1906,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.name",{"_index":1353,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.onassetload(asset",{"_index":252,"title":{},"body":{"classes/Assets.html":{}}}],["this.onassetload(e",{"_index":229,"title":{},"body":{"classes/Assets.html":{}}}],["this.onassetload(json",{"_index":243,"title":{},"body":{"classes/Assets.html":{}}}],["this.ondone",{"_index":1790,"title":{},"body":{"classes/Timer.html":{}}}],["this.onscenecomplete",{"_index":1331,"title":{},"body":{"classes/Scene.html":{}}}],["this.ontick",{"_index":1789,"title":{},"body":{"classes/Timer.html":{}}}],["this.ontick(ratio",{"_index":1791,"title":{},"body":{"classes/Timer.html":{}}}],["this.options",{"_index":1187,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.options.defaultsize.x",{"_index":1191,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.defaultsize.y",{"_index":1192,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.fill",{"_index":1193,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.volume",{"_index":1462,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.particles",{"_index":1222,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["this.playing",{"_index":1463,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.pos",{"_index":493,"title":{},"body":{"classes/Entity.html":{},"classes/MouseControls.html":{}}}],["this.pos.add(this.vel",{"_index":1143,"title":{},"body":{"classes/OneUp.html":{}}}],["this.pos.set(0",{"_index":1204,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.pos.x",{"_index":1074,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.pos.y",{"_index":1076,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.pressed",{"_index":1052,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.progresslisteners",{"_index":219,"title":{},"body":{"classes/Assets.html":{}}}],["this.progresslisteners.push(cb",{"_index":224,"title":{},"body":{"classes/Assets.html":{}}}],["this.quadin(1",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.rate",{"_index":44,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["this.readylisteners",{"_index":218,"title":{},"body":{"classes/Assets.html":{}}}],["this.readylisteners.push(cb",{"_index":222,"title":{},"body":{"classes/Assets.html":{}}}],["this.rect",{"_index":1064,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rect.left",{"_index":1075,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rect.top",{"_index":1077,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.released",{"_index":1053,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.remaining",{"_index":221,"title":{},"body":{"classes/Assets.html":{}}}],["this.renderer",{"_index":749,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.canvaselement",{"_index":744,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.render(this.destination",{"_index":771,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.render(this.scene",{"_index":763,"title":{},"body":{"classes/Game.html":{}}}],["this.reset",{"_index":1007,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.resize",{"_index":1054,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rotation",{"_index":1562,"title":{},"body":{"classes/Sprite.html":{}}}],["this.scale",{"_index":494,"title":{},"body":{"classes/Entity.html":{}}}],["this.scene.alpha",{"_index":769,"title":{},"body":{"classes/Game.html":{}}}],["this.scene.update(step",{"_index":761,"title":{},"body":{"classes/Game.html":{}}}],["this.set(state",{"_index":1588,"title":{},"body":{"classes/State.html":{}}}],["this.set(x",{"_index":1241,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.settileframeatmappos(this.pixeltomappos(pos",{"_index":880,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.sfx.connect(this.master",{"_index":1905,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.sfx.gain.value",{"_index":1904,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.sfxnode",{"_index":1903,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.shaderprogramcol",{"_index":1639,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.shaderprogramtex",{"_index":1635,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.sounds",{"_index":1492,"title":{},"body":{"classes/SoundGroup.html":{},"classes/SoundPool.html":{}}}],["this.state",{"_index":1590,"title":{},"body":{"classes/State.html":{}}}],["this.style",{"_index":1283,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["this.text",{"_index":1612,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["this.textures",{"_index":1634,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.textures.get(img.src).texture",{"_index":1665,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.textures.has(img.src",{"_index":1664,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.textures.set(img.src",{"_index":1672,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.threshold",{"_index":831,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.tileatmappos(mappos",{"_index":877,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.tileatmappos(this.pixeltomappos(pos",{"_index":874,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["this.tileheight",{"_index":864,"title":{},"body":{"interfaces/HasFrame.html":{},"classes/TileSprite.html":{}}}],["this.tilewidth",{"_index":862,"title":{},"body":{"interfaces/HasFrame.html":{},"classes/TileSprite.html":{}}}],["this.time",{"_index":1591,"title":{},"body":{"classes/State.html":{}}}],["this.total",{"_index":220,"title":{},"body":{"classes/Assets.html":{}}}],["this.uniforms",{"_index":1355,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.uniforms[name",{"_index":1366,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.up",{"_index":1059,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.vel",{"_index":1133,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.vel.set",{"_index":1197,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.visible",{"_index":490,"title":{},"body":{"classes/Entity.html":{},"classes/Timer.html":{}}}],["this.width",{"_index":1282,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["this.x",{"_index":1237,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.y",{"_index":1238,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["threshold",{"_index":776,"title":{},"body":{"classes/GamepadControls.html":{}}}],["throw",{"_index":312,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextureInfo.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["throws",{"_index":1359,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["tick",{"_index":1759,"title":{},"body":{"classes/Timer.html":{}}}],["tickfunc",{"_index":1770,"title":{},"body":{"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["tile",{"_index":510,"title":{"interfaces/Tile.html":{}},"body":{"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tile.frame",{"_index":878,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["tileatpixelpos(pos",{"_index":873,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["tiled",{"_index":514,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiled.layer",{"_index":532,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["tiled.map",{"_index":539,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiled.object",{"_index":527,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"miscellaneous/variables.html":{}}}],["tiled.tileset",{"_index":531,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["tiledata",{"_index":513,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/typealiases.html":{}}}],["tiledmap",{"_index":515,"title":{"interfaces/TiledMap.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/TiledMap.html":{},"coverage.html":{}}}],["tiledparser",{"_index":2048,"title":{},"body":{"coverage.html":{}}}],["tiledparser(jsonobj",{"_index":538,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tileedge",{"_index":944,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tileheight",{"_index":517,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tilemap",{"_index":854,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["tiles",{"_index":518,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"miscellaneous/variables.html":{}}}],["tiles.push",{"_index":561,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["tiles[1].pos.x",{"_index":957,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tiles[2].pos.y",{"_index":952,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tilesatcorners(box",{"_index":890,"title":{},"body":{"interfaces/HasFrame.html":{}}}],["tileset",{"_index":530,"title":{"interfaces/Tileset.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tileset.tiles",{"_index":567,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["tilesets",{"_index":533,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tilesets[0",{"_index":564,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["tilesperrow",{"_index":529,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tilesprite",{"_index":614,"title":{"classes/TileSprite.html":{}},"body":{"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["tilesprite(texture",{"_index":1092,"title":{},"body":{"classes/OneUp.html":{}}}],["tilesprite.update",{"_index":117,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["tilewidth",{"_index":516,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/HasFrame.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":101,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["timer",{"_index":1756,"title":{"classes/Timer.html":{}},"body":{"classes/Timer.html":{},"coverage.html":{}}}],["timer((r",{"_index":1762,"title":{},"body":{"classes/Timer.html":{}}}],["timestamp",{"_index":441,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["timing",{"_index":90,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{}}}],["tmp",{"_index":566,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["together",{"_index":626,"title":{},"body":{"classes/GLUtils.html":{}}}],["top",{"_index":393,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/HitBox.html":{}}}],["tostring",{"_index":1264,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["total",{"_index":154,"title":{},"body":{"classes/Assets.html":{}}}],["tr",{"_index":955,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["transition",{"_index":716,"title":{},"body":{"classes/Game.html":{}}}],["translate",{"_index":602,"title":{},"body":{"classes/GLUtils.html":{}}}],["translation",{"_index":601,"title":{},"body":{"classes/GLUtils.html":{}}}],["translationmatrix",{"_index":1691,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["trigger",{"_index":2018,"title":{},"body":{"coverage.html":{}}}],["true",{"_index":244,"title":{},"body":{"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"interfaces/TextureInfo.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":64,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Point.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{}}}],["type",{"_index":28,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2065,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":41,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["typescript",{"_index":55,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Vec.html":{},"index.html":{}}}],["u_color",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_posmatrix",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_sampler",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_texalpha",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_texmatrix",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":554,"title":{},"body":{"interfaces/ExtraLayer.html":{},"classes/KeyControls.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["uniform",{"_index":1364,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["uniforms",{"_index":1343,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["unique",{"_index":1319,"title":{},"body":{"classes/Scene.html":{}}}],["unless",{"_index":1781,"title":{},"body":{"classes/Timer.html":{}}}],["unpivotmatrix",{"_index":1706,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["unpressed",{"_index":977,"title":{},"body":{"classes/KeyControls.html":{}}}],["up",{"_index":924,"title":{},"body":{"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{}}}],["up.ts",{"_index":1080,"title":{},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["up.ts:29",{"_index":1114,"title":{},"body":{"classes/OneUp.html":{}}}],["up.ts:31",{"_index":1113,"title":{},"body":{"classes/OneUp.html":{}}}],["up.ts:32",{"_index":1106,"title":{},"body":{"classes/OneUp.html":{}}}],["up.ts:58",{"_index":1121,"title":{},"body":{"classes/OneUp.html":{}}}],["update",{"_index":18,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"miscellaneous/typealiases.html":{}}}],["update(_",{"_index":1275,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["update(dt",{"_index":37,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{}}}],["update/render",{"_index":424,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{}}}],["updated",{"_index":400,"title":{},"body":{"classes/Container.html":{}}}],["updates",{"_index":705,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["upon",{"_index":99,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/GLUtils.html":{}}}],["ups",{"_index":675,"title":{},"body":{"classes/Game.html":{}}}],["uri",{"_index":143,"title":{},"body":{"classes/Assets.html":{}}}],["url",{"_index":178,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["usage",{"_index":1339,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["use",{"_index":140,"title":{},"body":{"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GlBuffer.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["used",{"_index":93,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["useful",{"_index":1351,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["user",{"_index":1783,"title":{},"body":{"classes/Timer.html":{}}}],["useseededrandom",{"_index":2036,"title":{},"body":{"coverage.html":{}}}],["usewebgl",{"_index":681,"title":{},"body":{"classes/Game.html":{}}}],["using",{"_index":88,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["utilizing",{"_index":327,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["utils",{"_index":851,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{},"classes/SoundGroup.html":{}}}],["utils.math.clamp(this.life",{"_index":1142,"title":{},"body":{"classes/OneUp.html":{}}}],["utils.sprite.bounds(ent",{"_index":946,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["v",{"_index":1195,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["v.y",{"_index":1201,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["v_texalpha",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v_texcoord",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val",{"_index":998,"title":{},"body":{"classes/KeyControls.html":{}}}],["value",{"_index":190,"title":{},"body":{"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Sprite.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":908,"title":{},"body":{"classes/HitBox.html":{},"classes/MouseControls.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["variable",{"_index":1963,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2073,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec",{"_index":426,"title":{"classes/Vec.html":{}},"body":{"classes/Container.html":{},"classes/Entity.html":{},"interfaces/HasFrame.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"coverage.html":{}}}],["vec().copy(v",{"_index":1236,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec(.8",{"_index":1188,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["vec(0",{"_index":1134,"title":{},"body":{"classes/OneUp.html":{}}}],["vec(1",{"_index":495,"title":{},"body":{"classes/Entity.html":{}}}],["vec(10",{"_index":1189,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["vec(4",{"_index":1229,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec.from(this",{"_index":1244,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec.from(vector1",{"_index":1231,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec2",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec3(a_position",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec3(a_texcoord",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec4",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec4((u_posmatrix",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vecentity",{"_index":1811,"title":{"interfaces/VecEntity.html":{}},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["vecs",{"_index":1261,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector",{"_index":1225,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["vector1",{"_index":1228,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector1.add(vector2).multiply(3",{"_index":1232,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector2",{"_index":1230,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vel",{"_index":1104,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["vel.x",{"_index":1851,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["vel.y",{"_index":1852,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["velocity",{"_index":1176,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["vertex",{"_index":309,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["vertexcolor",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vertexshader",{"_index":1370,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["vertexsource",{"_index":1367,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["vertextexture",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":1178,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["verticalvelrange",{"_index":1180,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["view",{"_index":598,"title":{},"body":{"classes/GLUtils.html":{}}}],["visibility",{"_index":375,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["visible",{"_index":373,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["void",{"_index":36,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"classes/Assets.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["volume",{"_index":1439,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["volume(volume",{"_index":1461,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["vx",{"_index":1838,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["vy",{"_index":1840,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["w",{"_index":972,"title":{},"body":{"classes/KeyControls.html":{}}}],["wait",{"_index":1773,"title":{},"body":{"classes/Timer.html":{}}}],["walkable",{"_index":927,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["walkables",{"_index":948,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["walkabletest",{"_index":928,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["wallslide",{"_index":1994,"title":{},"body":{"coverage.html":{}}}],["wallslide(ent",{"_index":943,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["webaudio",{"_index":1853,"title":{"classes/WebAudio.html":{}},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["webgl",{"_index":582,"title":{},"body":{"classes/GLUtils.html":{},"classes/Game.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["webglbuffer",{"_index":258,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["webglprogram",{"_index":1336,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["webglrenderer",{"_index":730,"title":{"classes/WebGLRenderer.html":{}},"body":{"classes/Game.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["webglrenderer(width",{"_index":750,"title":{},"body":{"classes/Game.html":{}}}],["webglrenderingcontext",{"_index":274,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["webglshader",{"_index":1337,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["webgltexture",{"_index":1621,"title":{},"body":{"interfaces/TextureInfo.html":{},"classes/WebGLRenderer.html":{}}}],["webgluniformlocation",{"_index":1344,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["well",{"_index":932,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["whether",{"_index":363,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextureInfo.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["whose",{"_index":1146,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["width",{"_index":337,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Sprite.html":{},"interfaces/TextureInfo.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["width(value",{"_index":1559,"title":{},"body":{"classes/Sprite.html":{}}}],["window",{"_index":1870,"title":{},"body":{"classes/WebAudio.html":{}}}],["window.addeventlistener('gamepadconnected",{"_index":833,"title":{},"body":{"classes/GamepadControls.html":{}}}],["window.addeventlistener('gamepaddisconnected",{"_index":835,"title":{},"body":{"classes/GamepadControls.html":{}}}],["window.performance.now",{"_index":757,"title":{},"body":{"classes/Game.html":{}}}],["within",{"_index":1163,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["working",{"_index":581,"title":{},"body":{"classes/GLUtils.html":{}}}],["world",{"_index":1598,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["wrap",{"_index":463,"title":{},"body":{"interfaces/Controls.html":{}}}],["wrapper",{"_index":265,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["written",{"_index":2061,"title":{},"body":{"index.html":{}}}],["x",{"_index":59,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"miscellaneous/variables.html":{}}}],["x.name",{"_index":286,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["xo",{"_index":886,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["xr",{"_index":1068,"title":{},"body":{"classes/MouseControls.html":{}}}],["y",{"_index":60,"title":{},"body":{"classes/Animation.html":{},"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"interfaces/HasFrame.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":369,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["yo",{"_index":889,"title":{},"body":{"interfaces/HasFrame.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["yr",{"_index":1071,"title":{},"body":{"classes/MouseControls.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animation.html":{"url":"classes/Animation.html","title":"class - Animation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/animations.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                curFrame\n                            \n                            \n                                    Private\n                                curTime\n                            \n                            \n                                frame\n                            \n                            \n                                    Private\n                                frames\n                            \n                            \n                                    Private\n                                rate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(frames: Point[], rate: number)\n                    \n                \n                        \n                            \n                                Defined in lib/animations.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        frames\n                                                  \n                                                        \n                                                                        Point[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rate\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            curFrame\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            curTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frame\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Point\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            frames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Point[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            rate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from './types'\n\n/**\n * @hidden\n */\nclass Animation {\n  frame: Point\n\n  private frames: Point[]\n  private rate: number\n  private curFrame: number\n  private curTime: number\n\n  constructor(frames: Point[], rate: number) {\n    this.frames = frames\n    this.rate = rate\n  }\n\n  reset() {\n    this.frame = this.frames[0]\n    this.curFrame = 0\n    this.curTime = 0\n  }\n\n  update(dt: number) {\n    if ((this.curTime += dt) > this.rate) {\n      this.curFrame++\n      this.frame = this.frames[this.curFrame % this.frames.length]\n      this.curTime -= this.rate\n    }\n  }\n}\n\n/**\n * Handles animations for an object.\n *\n * ### Example\n * ```typescript\n * // In the implementation of a class\n * this.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n * // Create 'idle' animation with two frames that change every half second.\n * this.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n *\n * // In the update of the same class\n * this.anims.play('idle')\n * ```\n *\n * @category kilo\n */\nexport class Animations {\n  private anims: Map\n  private frameSource: any\n  private current: string\n\n  /**\n   * Initialize Animations object.\n   *\n   * @param frame An object with x and y properties.\n   */\n  constructor(frame: Point) {\n    this.anims = new Map()\n    this.frameSource = frame\n    this.current = null\n  }\n\n  /**\n   * Add a new animation by name, using specified frames and timing.\n   *\n   * Overrides existing animation if the same name is used.\n   *\n   * @param name The animation name.\n   * @param frames Sprite frames used in the animation.\n   * @param speed How quickly to change between frames (based upon delta time).\n   */\n  add(name: string, frames: Point[], speed: number): Animation {\n    this.anims.set(name, new Animation(frames, speed))\n\n    return this.anims.get(name)\n  }\n\n  /**\n   * Set the named animation as the current animation and reset it.\n   *\n   * @param anim The name of the animation to play.\n   */\n  play(anim: string) {\n    if (anim === this.current) {\n      return\n    }\n\n    this.current = anim\n    this.anims.get(anim).reset()\n  }\n\n  /**\n   * Stop the current animation.\n   */\n  stop() {\n    this.current = null\n  }\n\n  /**\n   * Update the current animation if one is set.\n   *\n   * @remarks Called by [[TileSprite.update]].\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (!this.current) {\n      return\n    }\n\n    const anim = this.anims.get(this.current)\n    anim.update(dt)\n\n    this.frameSource.x = anim.frame.x\n    this.frameSource.y = anim.frame.y\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Animations.html":{"url":"classes/Animations.html","title":"class - Animations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/animations.ts\n        \n\n            \n                Description\n            \n            \n                Handles animations for an object.\nExample\n```typescript\n\n// In the implementation of a class\nthis.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n// Create 'idle' animation with two frames that change every half second.\nthis.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n\n// In the update of the same class\nthis.anims.play('idle')\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                anims\n                            \n                            \n                                    Private\n                                current\n                            \n                            \n                                    Private\n                                frameSource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(frame: Point)\n                    \n                \n                        \n                            \n                                Defined in lib/animations.ts:56\n                            \n                        \n\n                \n                    \n                            Initialize Animations object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        frame\n                                                  \n                                                        \n                                                                        Point\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object with x and y properties.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            anims\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            current\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            frameSource\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/animations.ts:55\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(name: string, frames: Point[], speed: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:78\n                \n            \n\n\n            \n                \n                    Add a new animation by name, using specified frames and timing.\nOverrides existing animation if the same name is used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The animation name.\n\n                                    \n                                \n                                \n                                    frames\n                                    \n                                                Point[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite frames used in the animation.\n\n                                    \n                                \n                                \n                                    speed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        How quickly to change between frames (based upon delta time).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Animation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(anim: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:89\n                \n            \n\n\n            \n                \n                    Set the named animation as the current animation and reset it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    anim\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the animation to play.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:101\n                \n            \n\n\n            \n                \n                    Stop the current animation.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:112\n                \n            \n\n\n            \n                \n                    Update the current animation if one is set.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from './types'\n\n/**\n * @hidden\n */\nclass Animation {\n  frame: Point\n\n  private frames: Point[]\n  private rate: number\n  private curFrame: number\n  private curTime: number\n\n  constructor(frames: Point[], rate: number) {\n    this.frames = frames\n    this.rate = rate\n  }\n\n  reset() {\n    this.frame = this.frames[0]\n    this.curFrame = 0\n    this.curTime = 0\n  }\n\n  update(dt: number) {\n    if ((this.curTime += dt) > this.rate) {\n      this.curFrame++\n      this.frame = this.frames[this.curFrame % this.frames.length]\n      this.curTime -= this.rate\n    }\n  }\n}\n\n/**\n * Handles animations for an object.\n *\n * ### Example\n * ```typescript\n * // In the implementation of a class\n * this.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n * // Create 'idle' animation with two frames that change every half second.\n * this.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n *\n * // In the update of the same class\n * this.anims.play('idle')\n * ```\n *\n * @category kilo\n */\nexport class Animations {\n  private anims: Map\n  private frameSource: any\n  private current: string\n\n  /**\n   * Initialize Animations object.\n   *\n   * @param frame An object with x and y properties.\n   */\n  constructor(frame: Point) {\n    this.anims = new Map()\n    this.frameSource = frame\n    this.current = null\n  }\n\n  /**\n   * Add a new animation by name, using specified frames and timing.\n   *\n   * Overrides existing animation if the same name is used.\n   *\n   * @param name The animation name.\n   * @param frames Sprite frames used in the animation.\n   * @param speed How quickly to change between frames (based upon delta time).\n   */\n  add(name: string, frames: Point[], speed: number): Animation {\n    this.anims.set(name, new Animation(frames, speed))\n\n    return this.anims.get(name)\n  }\n\n  /**\n   * Set the named animation as the current animation and reset it.\n   *\n   * @param anim The name of the animation to play.\n   */\n  play(anim: string) {\n    if (anim === this.current) {\n      return\n    }\n\n    this.current = anim\n    this.anims.get(anim).reset()\n  }\n\n  /**\n   * Stop the current animation.\n   */\n  stop() {\n    this.current = null\n  }\n\n  /**\n   * Update the current animation if one is set.\n   *\n   * @remarks Called by [[TileSprite.update]].\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (!this.current) {\n      return\n    }\n\n    const anim = this.anims.get(this.current)\n    anim.update(dt)\n\n    this.frameSource.x = anim.frame.x\n    this.frameSource.y = anim.frame.y\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Assets.html":{"url":"classes/Assets.html","title":"class - Assets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Assets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/assets.ts\n        \n\n            \n                Description\n            \n            \n                Loads assets for use in a game.\nAssets are cached by URI to prevent multiple network calls for the same asset.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                isCompleted\n                            \n                            \n                                    Private\n                                progressListeners\n                            \n                            \n                                    Private\n                                readyListeners\n                            \n                            \n                                    Private\n                                remaining\n                            \n                            \n                                    Private\n                                total\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                done\n                            \n                            \n                                image\n                            \n                            \n                                json\n                            \n                            \n                                    Private\n                                load\n                            \n                            \n                                    Private\n                                onAssetLoad\n                            \n                            \n                                onProgress\n                            \n                            \n                                onReady\n                            \n                            \n                                sound\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/assets.ts:37\n                            \n                        \n\n                \n                    \n                            Initialize Assets object.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cache\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/assets.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isCompleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/assets.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            progressListeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ProgressCallback[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/assets.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            readyListeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReadyCallback[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/assets.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            remaining\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/assets.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            total\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/assets.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            done\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    done()\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            image\n                        \n                        \n                    \n                \n            \n            \n                \nimage(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:83\n                \n            \n\n\n            \n                \n                    Loads an image asset.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to image file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLImageElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            json\n                        \n                        \n                    \n                \n            \n            \n                \njson(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:122\n                \n            \n\n\n            \n                \n                    Loads a JSON asset and returns parsed object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to JSON asset.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(url: string, factory: (url: string) => void, isJson)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isJson\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            onAssetLoad\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onAssetLoad(asset: any, isJson)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    asset\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isJson\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \nonProgress(cb: ProgressCallback)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:74\n                \n            \n\n\n            \n                \n                    Allows listeners to provide a callback for asset load progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                ProgressCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when a single asset is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onReady\n                        \n                        \n                    \n                \n            \n            \n                \nonReady(cb: ReadyCallback)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:57\n                \n            \n\n\n            \n                \n                    Allows listeners to provide a callback for asset load completion.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                ReadyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when all assets are loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sound\n                        \n                        \n                    \n                \n            \n            \n                \nsound(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:101\n                \n            \n\n\n            \n                \n                    Loads a sound asset.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to sound file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLAudioElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/assets.ts:35\n                                \n                            \n                    \n                        \n                                Get completed status of all assets.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Game } from '.'\n\n/**\n * Function that is called when an asset is ready.\n */\ntype ReadyCallback = () => void\n\n/**\n * Function that is called to provide progress status.\n */\ntype ProgressCallback = (complete: number, total: number) => void\n\n/**\n * Loads assets for use in a game.\n *\n * Assets are cached by URI to prevent multiple network calls for the same asset.\n *\n * @category kilo\n */\nexport class Assets {\n  private cache: any\n  private readyListeners: ReadyCallback[]\n  private progressListeners: ProgressCallback[]\n  private isCompleted: boolean\n\n  private total: number\n  private remaining: number\n\n  /**\n   * Get completed status of all assets.\n   */\n  get completed() {\n    return this.isCompleted\n  }\n\n  /**\n   * Initialize Assets object.\n   */\n  constructor() {\n    this.cache = {}\n    this.readyListeners = []\n    this.progressListeners = []\n    this.isCompleted = false\n\n    this.total = 0\n    this.remaining = 0\n  }\n\n  /**\n   * Allows listeners to provide a callback for asset load completion.\n   *\n   * @param cb Function called when all assets are loaded.\n   */\n  onReady(cb: ReadyCallback) {\n    if (this.isCompleted) {\n      return cb()\n    }\n\n    this.readyListeners.push(cb)\n\n    if (this.remaining === 0) {\n      this.done()\n    }\n  }\n\n  /**\n   * Allows listeners to provide a callback for asset load progress.\n   *\n   * @param cb Function called when a single asset is loaded.\n   */\n  onProgress(cb: ProgressCallback) {\n    this.progressListeners.push(cb)\n  }\n\n  /**\n   * Loads an image asset.\n   *\n   * @param url Relative path to image file.\n   */\n  image(url: string): HTMLImageElement {\n    const factory = (url: string) => {\n      const img = new Image()\n\n      img.src = url\n      img.addEventListener('load', e => this.onAssetLoad(e), false)\n\n      return img\n    }\n\n    return this.load(url, factory)\n  }\n\n  /**\n   * Loads a sound asset.\n   *\n   * @param url Relative path to sound file.\n   */\n  sound(url: string): HTMLAudioElement {\n    const factory = (url: string) => {\n      const onLoad = (e: Event) => {\n        audio.removeEventListener('canplay', onLoad)\n        this.onAssetLoad(e)\n      }\n\n      const audio = new Audio(url)\n      audio.addEventListener('canplay', onLoad, false)\n\n      return audio\n    }\n\n    return this.load(url, factory)\n  }\n\n  /**\n   * Loads a JSON asset and returns parsed object.\n   *\n   * @param url Relative path to JSON asset.\n   */\n  json(url: string) {\n    const factory = async (url: string) => {\n      return await fetch(url)\n        .then(res => res.json())\n        .then(json => this.onAssetLoad(json, true))\n        .catch(e => Game.debug && console.error(e))\n    }\n\n    return this.load(url, factory, true)\n  }\n\n  private done() {\n    this.isCompleted = true\n\n    for (let i = 0; i  any, isJson = false) {\n    if (this.cache[url]) {\n      Game.debug && console.info('cached', url)\n      return this.cache[url]\n    }\n\n    Game.debug && console.info('load', url)\n\n    this.remaining++\n    this.total++\n\n    const asset = factory(url)\n    this.cache[url] = asset\n\n    this.onAssetLoad(asset, isJson)\n\n    return asset\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BufferInfo.html":{"url":"classes/BufferInfo.html","title":"class - BufferInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BufferInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/gl-buffer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buffer\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLBuffer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        const fullArea = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n\nclass BufferInfo {\n  buffer: WebGLBuffer\n  id: number\n  name: string\n}\n\n/**\n * Thin wrapper around WebGLBuffer objects, making them easier to manage.\n *\n * @category kilo/renderer/webgl\n */\nexport class GlBuffer {\n  private gl: WebGLRenderingContext\n  private buffers: BufferInfo[]\n  private activeBuffer: BufferInfo\n\n  /**\n   * Initialize GlBuffer object.\n   *\n   * @param gl WebGLRenderingContext to use for buffer actions.\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl\n    this.buffers = []\n  }\n\n  /**\n   * Gets the buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to return.\n   */\n  buffer(bufferName: string) {\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    return buffer.buffer\n  }\n\n  /**\n   * Creates a new buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to create.\n   */\n  create(bufferName: string) {\n    const buff = new BufferInfo()\n    buff.buffer = this.gl.createBuffer()\n    ; (buff.buffer as any).__SPECTOR_Metadata = { bufferName }\n    buff.id = this.buffers.length\n    buff.name = bufferName\n\n    this.buffers.push(buff)\n  }\n\n  /**\n   * Sets the named buffer as active, enables the provided attribute,\n   * and prepares the buffer for use.\n   *\n   * @param bufferName The name of the buffer to activate.\n   * @param attribLocation The location of the attribute to enable.\n   * @param components The number of components per vertex.\n   */\n  setActive(bufferName: string, attribLocation: number, components: number = 2) {\n    const { gl } = this\n\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    if (!buffer) {\n      throw new Error(`No buffer with name ${bufferName} found to set as active.`)\n    }\n\n    if (this.activeBuffer === buffer) {\n      return\n    }\n\n    this.activeBuffer = buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, fullArea, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(attribLocation, components, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(attribLocation)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CanvasRenderer.html":{"url":"classes/CanvasRenderer.html","title":"class - CanvasRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CanvasRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/canvas-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Recursive rendering utilizing HTML5 canvas.\n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buffer\n                            \n                            \n                                    Private\n                                ctx\n                            \n                            \n                                    Private\n                                ctx2\n                            \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                    Private\n                                renderRecursive\n                            \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/canvas-renderer.ts:16\n                            \n                        \n\n                \n                    \n                            Initialize CanvasRenderer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTMLElement to add the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            buffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/canvas-renderer.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ctx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/canvas-renderer.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ctx2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/canvas-renderer.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:18\n\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:20\n\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:16\n\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:14\n\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(container: Container, clear)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/canvas-renderer.ts:46\n                \n            \n\n\n            \n                \n                    Recursive method for rendering the provided container and all its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Container object to render recursively.\n\n                                    \n                                \n                                \n                                    clear\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to clear the canvas before rendering.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            renderRecursive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderRecursive(container: Entity | Container, camera?: Entity | Container)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/canvas-renderer.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                            Entity | Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    camera\n                                    \n                                            Entity | Container\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:61\n\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Container, Game } from '../'\nimport { Entity, Text } from '../types'\n\n/**\n * Recursive rendering utilizing HTML5 canvas.\n *\n * @category kilo/renderer\n */\nexport class CanvasRenderer extends Renderer {\n  private ctx: CanvasRenderingContext2D\n  private ctx2: CanvasRenderingContext2D\n  private buffer: HTMLCanvasElement\n\n  /**\n   * Initialize CanvasRenderer object.\n   *\n   * @param width Width of the canvas in pixels.\n   * @param height Height of the canvas in pixels.\n   * @param container The HTMLElement to add the canvas to.\n   */\n  constructor(width: number, height: number, container: HTMLElement) {\n    super(width, height, container)\n\n    this.buffer = document.createElement('canvas')\n\n    this.buffer.width = this.canvas.width = width\n    this.buffer.height = this.canvas.height = height\n\n    this.ctx = this.buffer.getContext('2d')\n    this.ctx.imageSmoothingEnabled = false\n    this.ctx.textBaseline = 'top'\n\n    this.ctx2 = this.canvas.getContext('2d')\n  }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Container.html":{"url":"classes/Container.html","title":"class - Container","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Container\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/container.ts\n        \n\n            \n                Description\n            \n            \n                Holds game objects updated and/or rendered in the game loop.\nBasically, just an [[Entity]] with some helper methods.\nExample\n```typescript\n\nconst pickups = new Container()\n\n// Assuming there is a 'Pickup' type in your game.\nmapData.pickupLocations.forEach(pos => {\npickups.push(new Pickup(pos))\n})\n```\n\n\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:40\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:54\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity } from './types'\n\n/**\n * Holds game objects updated and/or rendered in the game loop.\n *\n * Basically, just an [[Entity]] with some helper methods.\n *\n * ### Example\n * ```typescript\n * const pickups = new Container()\n *\n * // Assuming there is a 'Pickup' type in your game.\n * mapData.pickupLocations.forEach(pos => {\n *  pickups.push(new Pickup(pos))\n * })\n * ```\n *\n * @category kilo\n */\nexport class Container extends Entity {\n  /**\n   * Add a child object.\n   *\n   * @param child Object to add to the container.\n   */\n  add(child: any) {\n    this.children.push(child)\n\n    return child\n  }\n\n  /**\n   * Remove a child object.\n   *\n   * @param child Object to remove from the container.\n   */\n  remove(child: any) {\n    this.children = this.children.filter(ch => ch !== child)\n\n    return child\n  }\n\n  /**\n   * Update each child in the container.\n   *\n   * Automatically removes any child object marked as dead.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  update(dt: number, t: number) {\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controls.html":{"url":"interfaces/Controls.html","title":"interface - Controls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Controls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/controls.ts\n        \n\n            \n                Description\n            \n            \n                Object containing optional control objects.\nUsed to wrap supported controls for your game.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        gamepad\n                                \n                                \n                                            Optional\n                                        keys\n                                \n                                \n                                            Optional\n                                        mouse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gamepad\n                                    \n                                \n                                \n                                    \n                                        gamepad:         GamepadControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GamepadControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keys\n                                    \n                                \n                                \n                                    \n                                        keys:         KeyControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouse\n                                    \n                                \n                                \n                                    \n                                        mouse:         MouseControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MouseControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { KeyControls } from './key-controls'\nimport { MouseControls } from './mouse-controls'\nimport { GamepadControls } from './gamepad-controls'\n\n/**\n * Object containing optional control objects.\n *\n * Used to wrap supported controls for your game.\n *\n * @category kilo/controls\n */\nexport interface Controls {\n  keys?: KeyControls\n  mouse?: MouseControls\n  gamepad?: GamepadControls\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Entity.html":{"url":"classes/Entity.html","title":"class - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/entity.ts\n        \n\n            \n                Description\n            \n            \n                An abstract base class for all entities.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasChildren\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/types/entity.ts:37\n                            \n                        \n\n                \n                    \n                            Initialize an Entity object.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:24\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:32\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:27\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:29\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:19\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:67\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:78\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:60\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasChildren\n                    \n                \n\n                \n                    \n                        gethasChildren()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/entity.ts:35\n                                \n                            \n                    \n                        \n                                Whether or not there are any child entities. \n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Vec } from '.'\n\n/** A type with an update function. */\ntype HasUpdate = {\n  update: Function\n  dead: boolean\n}\n\n/**\n * An abstract base class for all entities.\n *\n * @category kilo/types\n */\nexport abstract class Entity {\n  /** Whether or not the entity is visible. */\n  visible: boolean\n  /** Whether or not the entity is dead. */\n  dead: boolean\n\n  /** The opacity of the entity (from 0 to 1) */\n  alpha: number\n\n  /** Position of the entity. */\n  pos: Vec\n  /** Scale of the entity. */\n  scale: Vec\n\n  /** An array of child entities for recursive update/render. */\n  children: HasUpdate[]\n\n  /** Whether or not there are any child entities. */\n  get hasChildren(): boolean {\n    return this.children.length > 0\n  }\n\n  /**\n   * Initialize an Entity object.\n   */\n  constructor() {\n    this.visible = true\n    this.dead = false\n\n    this.alpha = 1\n\n    this.pos = new Vec()\n    this.scale = new Vec(1, 1)\n\n    this.children = []\n  }\n\n  /**\n   * Update method to be implemented by classes extending Entity.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  abstract update(dt: number, t: number): void\n\n  /**\n   * Adds a child object to the entity.\n   *\n   * @param child Child to add to the entity.\n   */\n  add(child: HasUpdate) {\n    this.children.push(child)\n\n    return child\n  }\n\n  /**\n   * Maps a function across all children.\n   *\n   * @param fn Function to call for each child.\n   */\n  map(fn: (child: HasUpdate, index?: number) => void): any {\n    const result: any[] = []\n\n    for (const [i, child] of this.children.entries()) {\n      result[i] = fn(child, i)\n    }\n\n    return result\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtraLayer.html":{"url":"interfaces/ExtraLayer.html","title":"interface - ExtraLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExtraLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/tiled-parser.ts\n        \n\n            \n                Description\n            \n            \n                Interface to add extra layers above or below the main level layer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isAboveLevel\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isAboveLevel\n                                    \n                                \n                                \n                                    \n                                        isAboveLevel:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the layer is rendered above the level or below. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the layer to load. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Point } from '../types'\n\n/**\n * Type for tile data.\n *\n * @category kilo/utils\n */\nexport type TileData = { [key: string]: any, frame: Point, x: number, y: number }\n\n/**\n * Interface for a Tiled map object.\n *\n * @category kilo/utils\n */\nexport interface TiledMap {\n  /** Width of a tile in pixels. */\n  tileWidth: number\n  /** Height of a tile in pixels. */\n  tileHeight: number\n  /** Width of the map in tiles. */\n  mapWidth: number\n  /** Height of the map in tiles. */\n  mapHeight: number\n  /** Array of arrays of tile objects. */\n  tiles: TileData[][]\n  /** Index of the level layer in tiles array. */\n  levelIndex: number\n\n  /**\n   * Gets an object from the map by name.\n   *\n   * @param name Name of object to get.\n   * @param mandatory Whether a missing object is an error.\n   */\n  getObjectByName(name: string, mandatory?: boolean): Tiled.Object\n  /**\n   * Gets an array of objects from the map by type.\n   *\n   * @param type Type name of the objects to get.\n   * @param mandatory Whether no results is an error.\n   */\n  getObjectsByType(type: string, mandatory?: boolean): Tiled.Object[]\n}\n\n/**\n * Interface to add extra layers above or below the main level layer.\n *\n * @category kilo/utils\n */\nexport interface ExtraLayer {\n  /** Name of the layer to load. */\n  name: string\n  /** Whether the layer is rendered above the level or below. */\n  isAboveLevel: boolean\n}\n\nlet tileWidth: number\nlet tileHeight: number\nlet mapWidth: number\nlet mapHeight: number\nlet tilesPerRow: number\nlet levelIndex: number\n\nlet tileset: Tiled.Tileset\nlet layers: Tiled.Layer[]\nlet tilesets: Tiled.Tileset[]\nlet entities: Tiled.Object[]\n\n/**\n * Parses a Tiled map object into a simpler form.\n *\n * There must be at least two layers in the Tiled map:\n * \"level\"    - containing the tiles for the level\n * \"entities\" - containing at least one entity\n *\n * @param jsonObj Object from Tiled JSON export.\n *\n * @category kilo/utils\n */\nexport function tiledParser(jsonObj: Tiled.Map,\n                            extraLayers?: ExtraLayer[]): TiledMap {\n  tileWidth = jsonObj.tilewidth\n  tileHeight = jsonObj.tileheight\n  mapWidth = jsonObj.width\n  mapHeight = jsonObj.height\n  layers = jsonObj.layers\n  tilesets = jsonObj.tilesets\n\n  const levelLayer = getLayer('level')\n  const entitiesLayer = getLayer('entities')\n\n  tileset = getTileset()\n\n  if (!entitiesLayer.objects) {\n    throw new Error('Tiled Error: Missing entities objects.')\n  }\n\n  entities = []\n  for (let i = 0; i  {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i  {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n\nconst loadTiles = (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i  {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n\nconst getTileProps = (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i  {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i  {\n  const es = []\n  for (let i = 0; i  {\n  let ent: any\n\n  for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GLUtils.html":{"url":"classes/GLUtils.html","title":"class - GLUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GLUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/utils.ts\n        \n\n            \n                Description\n            \n            \n                Provides static methods for working with WebGL.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get2DProjectionMatrix\n                            \n                            \n                                    Static\n                                getCameraTranslation\n                            \n                            \n                                    Static\n                                getRotation\n                            \n                            \n                                    Static\n                                getScale\n                            \n                            \n                                    Static\n                                getScaleMatrix\n                            \n                            \n                                    Static\n                                getTranslation\n                            \n                            \n                                    Static\n                                multiplyMatrices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get2DProjectionMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get2DProjectionMatrix(width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:68\n                \n            \n\n\n            \n                \n                    Gets a simple 2D flat projection matrix from the provided dimensions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of view in pixels.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of view in pixels.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCameraTranslation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTranslation(camera: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:18\n                \n            \n\n\n            \n                \n                    Gets a translation matrix based upon camera position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera object to translate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getRotation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRotation(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:95\n                \n            \n\n\n            \n                \n                    Gets a rotation matrix from the provided angle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScale\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScale(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:54\n                \n            \n\n\n            \n                \n                    Gets a scale matrix based upon provided sizes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Size to scale to in x dimension.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Size to scale to in y dimension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleMatrix(sprite: Sprite | TileSprite | Rect, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:36\n                \n            \n\n\n            \n                \n                    Gets a scale matrix based upon entity scale.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                Sprite | TileSprite | Rect\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Entity with scale property.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of the entity in pixels.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of the entity in pixels.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTranslation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTranslation(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:82\n                \n            \n\n\n            \n                \n                    Gets a translation matrix from the provided coordinates.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translation for the x dimension.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translation for the y dimension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            multiplyMatrices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    multiplyMatrices(a: number[], b: number[])\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:109\n                \n            \n\n\n            \n                \n                    Multiplies two matrices together.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The first matrix for multiplication.\n\n                                    \n                                \n                                \n                                    b\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The second matrix for multiplication.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sprite, Rect } from '../../types'\nimport { TileSprite } from '../../tile-sprite'\n\n/**\n * Provides static methods for working with WebGL.\n *\n * @category kilo/renderer/webgl\n */\nexport class GLUtils {\n  /**\n   * Gets a translation matrix based upon camera position.\n   *\n   * @param camera Camera object to translate.\n   */\n  static getCameraTranslation(camera: any) {\n    let cameraTranslation = GLUtils.getTranslation(0, 0)\n\n    if (camera) {\n      cameraTranslation = GLUtils.getTranslation(\n        Math.floor(camera.pos.x), Math.floor(camera.pos.y))\n    }\n\n    return cameraTranslation\n  }\n\n  /**\n   * Gets a scale matrix based upon entity scale.\n   *\n   * @param sprite Entity with `scale` property.\n   * @param width Width of the entity in pixels.\n   * @param height Height of the entity in pixels.\n   */\n  static getScaleMatrix(sprite: Sprite | TileSprite | Rect,\n                        width: number, height: number) {\n    let scaleMatrix = GLUtils.getScale(width, height)\n\n    if (sprite.scale) {\n      scaleMatrix = GLUtils.getScale(width * sprite.scale.x,\n        height * sprite.scale.y)\n    }\n\n    return scaleMatrix\n  }\n\n  /**\n   * Gets a scale matrix based upon provided sizes.\n   *\n   * @param x Size to scale to in x dimension.\n   * @param y Size to scale to in y dimension.\n   */\n  static getScale(x: number, y: number) {\n    return [\n      x, 0, 0,\n      0, y, 0,\n      0, 0, 1\n    ]\n  }\n\n  /**\n   * Gets a simple 2D flat projection matrix from the provided dimensions.\n   *\n   * @param width Width of view in pixels.\n   * @param height Height of view in pixels.\n   */\n  static get2DProjectionMatrix(width: number, height: number) {\n    return [\n      2 / width, 0, 0,\n      0, -2 / height, 0,\n      -1, 1, 1\n    ]\n  }\n\n  /**\n   * Gets a translation matrix from the provided coordinates.\n   *\n   * @param x Translation for the x dimension.\n   * @param y Translation for the y dimension.\n   */\n  static getTranslation(x: number, y: number) {\n    return [\n      1, 0, 0,\n      0, 1, 0,\n      x, y, 1\n    ]\n  }\n\n  /**\n   * Gets a rotation matrix from the provided angle.\n   *\n   * @param angle Angle in radians.\n   */\n  static getRotation(angle: number) {\n    return [\n      Math.cos(-angle), -Math.sin(-angle), 0,\n      Math.sin(-angle), Math.cos(-angle), 0,\n      0, 0, 1\n    ]\n  }\n\n  /**\n   * Multiplies two matrices together.\n   *\n   * @param a The first matrix for multiplication.\n   * @param b The second matrix for multiplication.\n   */\n  static multiplyMatrices(a: number[], b: number[]) {\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = a\n    const [b00, b01, b02, b10, b11, b12, b20, b21, b22] = b\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22,\n    ]\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Game.html":{"url":"classes/Game.html","title":"class - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/game.ts\n        \n\n            \n                Description\n            \n            \n                Contains all aspects of a game.\nExample\n```typescript\n\n// This is a boring 'game'.\nconst game = new Game(640, 480)\n\ngame.run()\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _height\n                            \n                            \n                                    Private\n                                _scene\n                            \n                            \n                                    Private\n                                _width\n                            \n                            \n                                    Static\n                                assets\n                            \n                            \n                                    Static\n                                debug\n                            \n                            \n                                    Private\n                                destination\n                            \n                            \n                                    Private\n                                fadeDuration\n                            \n                            \n                                    Private\n                                fadeTime\n                            \n                            \n                                    Static\n                                FPS\n                            \n                            \n                                    Private\n                                isWebGL\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                UPS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkWebGL\n                            \n                            \n                                    Private\n                                logInfo\n                            \n                            \n                                run\n                            \n                            \n                                setScene\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                                \n                                    scene\n                                \n                                \n                                    canvas\n                                \n                                \n                                    speed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, useWebGL: boolean, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/game.ts:104\n                            \n                        \n\n                \n                    \n                            Initialize Game object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the game screen.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the game screen.\n\n                                                        \n                                                \n                                                \n                                                        useWebGL\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether or not to render with WebGL. Falls back to canvas.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The element to append the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene | Container\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            assets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Assets\n\n                        \n                    \n                    \n                        \n                            Default value : new Assets()\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:62\n                            \n                        \n\n                \n                    \n                        An Assetts instance for loading all game assets. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            debug\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:64\n                            \n                        \n\n                \n                    \n                        Whether or not to enable debug display (shows FPS and UPS). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            destination\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fadeDuration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fadeTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            FPS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 60\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:66\n                            \n                        \n\n                \n                    \n                        Frames per second. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isWebGL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Renderer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            UPS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 60\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:68\n                            \n                        \n\n                \n                    \n                        Updates per second. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkWebGL\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkWebGL(canvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            logInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logInfo()\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun(gameUpdate: GameUpdate)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:164\n                \n            \n\n\n            \n                \n                    Start the game loop.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    gameUpdate\n                                    \n                                                GameUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => {}\n                                    \n\n                                    \n                                        An update function to run for the game.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setScene\n                        \n                        \n                    \n                \n            \n            \n                \nsetScene(scene: Scene, fadeInSeconds: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:148\n                \n            \n\n\n            \n                \n                    Change to a new scene in the game.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                                Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The new scene to transition into.\n\n                                    \n                                \n                                \n                                    fadeInSeconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .5\n                                    \n\n                                    \n                                        Time in seconds for the transition.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:71\n                                \n                            \n                    \n                        \n                                Gets the width of the game screen. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:76\n                                \n                            \n                    \n                        \n                                Gets the height of the game screen. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        scene\n                    \n                \n\n                \n                    \n                        getscene()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:81\n                                \n                            \n                    \n                        \n                                Gets the game scene. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        canvas\n                    \n                \n\n                \n                    \n                        getcanvas()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:86\n                                \n                            \n                    \n                        \n                                Gets the canvas element used by the renderer. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        speed\n                    \n                \n\n                \n                    \n                        getspeed()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:94\n                                \n                            \n                    \n                        \n                                Gets the current speed multiplier of the game.\n\n\n                                \n                                \n                        \n                    \n\n                \n                    \n                        setspeed(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:101\n                                \n                            \n                    \n                        \n                                Sets the speed multiplier of the game.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Assets } from './assets'\nimport { Renderer, CanvasRenderer, WebGLRenderer } from './renderer'\nimport { Container, Scene } from '.'\n\n/**\n * Function called on each update.\n */\ntype GameUpdate = (dt: number, t: number) => void\n\n/**\n * Enum of pre-defined speeds for a game.\n * Default game speed is \"Normal\".\n *\n * Can also be any number, but be careful.\n *\n * @category kilo\n */\nexport enum Speed {\n  Slow = .5,\n  Normal = 1,\n  Fast = 2\n}\n\n/** @hidden */\nconst STEP = 1 / 60\n/** @hidden */\nlet MULTIPLIER = Speed.Normal\n/** @hidden */\nlet SPEED = STEP / MULTIPLIER\n/** @hidden */\nconst MAX_FRAME = SPEED * 5\n\n/**\n * Contains all aspects of a game.\n *\n * ### Example\n * ```typescript\n * // This is a boring 'game'.\n * const game = new Game(640, 480)\n *\n * game.run()\n * ```\n *\n * @category kilo\n */\nexport class Game {\n  private _width: number\n  private _height: number\n\n  private fadeTime: number\n  private fadeDuration: number\n  private destination: Scene\n\n  private isWebGL: boolean\n  private renderer: Renderer\n  private _scene: Scene | Container\n\n  /** An Assetts instance for loading all game assets. */\n  static assets: Assets = new Assets()\n  /** Whether or not to enable debug display (shows FPS and UPS). */\n  static debug: boolean = false\n  /** Frames per second. */\n  static FPS: number = 60\n  /** Updates per second. */\n  static UPS: number = 60\n\n  /** Gets the width of the game screen. */\n  get width() {\n    return this._width\n  }\n\n  /** Gets the height of the game screen. */\n  get height() {\n    return this._height\n  }\n\n  /** Gets the game scene. */\n  get scene() {\n    return this._scene\n  }\n\n  /** Gets the canvas element used by the renderer. */\n  get canvas() {\n    return this.renderer.canvasElement\n  }\n\n  /**\n   * Gets the current speed multiplier of the game.\n   * @default [[Speed.Normal]]\n   */\n  get speed() {\n    return MULTIPLIER\n  }\n\n  /**\n   * Sets the speed multiplier of the game.\n   */\n  set speed(value: Speed | number) {\n    MULTIPLIER = value\n    SPEED = STEP / MULTIPLIER\n  }\n\n  /**\n   * Initialize Game object.\n   *\n   * @param width Width of the game screen.\n   * @param height Height of the game screen.\n   * @param useWebGL Whether or not to render with WebGL. Falls back to canvas.\n   * @param container The element to append the canvas to.\n   */\n  constructor(width: number, height: number, useWebGL: boolean = true,\n              container: HTMLElement = document.body) {\n    this._width = width\n    this._height = height\n\n    const canvas = document.createElement('canvas')\n\n    if (useWebGL) {\n      this.checkWebGL(canvas)\n    }\n\n    if (useWebGL && this.isWebGL) {\n      this.renderer = new WebGLRenderer(width, height, container)\n    }\n\n    if (!useWebGL || !this.isWebGL) {\n      this.renderer = new CanvasRenderer(width, height, container)\n    }\n\n    this._scene = new Container()\n    this.destination = null\n\n    this.fadeTime = 0\n    this.fadeDuration = 0\n\n    this.logInfo()\n  }\n\n  /**\n   * Change to a new scene in the game.\n   *\n   * @param scene The new scene to transition into.\n   * @param fadeInSeconds Time in seconds for the transition.\n   */\n  setScene(scene: Scene, fadeInSeconds = .5) {\n    if (!fadeInSeconds) {\n      this._scene = scene\n      return\n    }\n\n    this.destination = scene\n    this.fadeTime = fadeInSeconds\n    this.fadeDuration = fadeInSeconds\n  }\n\n  /**\n   * Start the game loop.\n   *\n   * @param gameUpdate An update function to run for the game.\n   */\n  run(gameUpdate: GameUpdate = () => {}) {\n    let dt = 0\n    let last = 0\n\n    let lastTime = window.performance.now()\n    let frames = 0\n    let updates = 0\n\n    const loop = (ms: number) => {\n      const t = ms / 1000\n\n      dt += Math.min(t - last, MAX_FRAME)\n      last = t\n\n      while (dt >= SPEED) {\n        updates++\n        this.scene.update(STEP, t / MULTIPLIER)\n        gameUpdate(STEP, t / MULTIPLIER)\n        dt -= SPEED\n      }\n\n      frames++\n      this.renderer.render(this.scene)\n\n      if (Game.debug && window.performance.now() - lastTime >= 1000) {\n        Game.FPS = Math.round(.25 * frames + .75 * Game.FPS)\n        Game.UPS = Math.round(.25 * updates + .75 * Game.UPS)\n\n        frames = 0\n        updates = 0\n        lastTime = window.performance.now()\n      }\n\n      if (this.fadeTime > 0) {\n        const ratio = this.fadeTime / this.fadeDuration\n\n        this.scene.alpha = ratio\n        this.destination.alpha = 1 - ratio\n        this.renderer.render(this.destination, false)\n\n        if ((this.fadeTime -= STEP) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GamepadControls.html":{"url":"classes/GamepadControls.html","title":"class - GamepadControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GamepadControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/gamepad-controls.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller\n                            \n                            \n                                    Private\n                                controllers\n                            \n                            \n                                threshold\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                action\n                            \n                            \n                                    Private\n                                axis\n                            \n                            \n                                    Private\n                                handler\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actionA\n                                \n                                \n                                    actionB\n                                \n                                \n                                    actionX\n                                \n                                \n                                    actionY\n                                \n                                \n                                    actionEsc\n                                \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/controls/gamepad-controls.ts:54\n                            \n                        \n\n                \n                    \n                            Initialize GamepadControls object.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Gamepad\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/gamepad-controls.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Gamepad[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/gamepad-controls.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            threshold\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/gamepad-controls.ts:16\n                            \n                        \n\n                \n                    \n                        Deadzone threshold.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            action\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    action(...buttons: number[])\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/gamepad-controls.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    buttons\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            axis\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    axis(id: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/gamepad-controls.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     0 | 1 | -1\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handler(e: GamepadEvent, isConnect)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/gamepad-controls.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                GamepadEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isConnect\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actionA\n                    \n                \n\n                \n                    \n                        getactionA()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:22\n                                \n                            \n                    \n                        \n                                Gets status of A button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionB\n                    \n                \n\n                \n                    \n                        getactionB()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:27\n                                \n                            \n                    \n                        \n                                Gets status of B button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionX\n                    \n                \n\n                \n                    \n                        getactionX()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:32\n                                \n                            \n                    \n                        \n                                Gets status of X button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionY\n                    \n                \n\n                \n                    \n                        getactionY()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:37\n                                \n                            \n                    \n                        \n                                Gets status of Y button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionEsc\n                    \n                \n\n                \n                    \n                        getactionEsc()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:42\n                                \n                            \n                    \n                        \n                                Gets status of Escape-equivalent button. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:47\n                                \n                            \n                    \n                        \n                                Gets direction of x axis. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:52\n                                \n                            \n                    \n                        \n                                Gets direction of y axis. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class GamepadControls {\n  /**\n   * Deadzone threshold.\n   * @default 0.21\n   */\n  threshold: number\n\n  private controller: Gamepad\n  private controllers: Gamepad[]\n\n  /** Gets status of A button (or equivalent). */\n  get actionA() {\n    return this.action(0, 11)\n  }\n\n  /** Gets status of B button (or equivalent). */\n  get actionB() {\n    return this.action(1, 12)\n  }\n\n  /** Gets status of X button (or equivalent). */\n  get actionX() {\n    return this.action(2, 13)\n  }\n\n  /** Gets status of Y button (or equivalent). */\n  get actionY() {\n    return this.action(3, 14)\n  }\n\n  /** Gets status of Escape-equivalent button. */\n  get actionEsc() {\n    return this.action(4)\n  }\n\n  /** Gets direction of x axis. */\n  get x() {\n    return this.axis(0)\n  }\n\n  /** Gets direction of y axis. */\n  get y() {\n    return this.axis(1)\n  }\n\n  /**\n   * Initialize GamepadControls object.\n   */\n  constructor() {\n    this.controller = null\n    this.controllers = []\n    this.threshold = .21\n\n    window.addEventListener('gamepadconnected',\n      (e: GamepadEvent) => this.handler(e, true),\n      false)\n\n    window.addEventListener('gamepaddisconnected',\n      (e: GamepadEvent) => this.handler(e),\n      false)\n  }\n\n  private handler(e: GamepadEvent, isConnect = false) {\n    const { gamepad } = e\n\n    if (!isConnect) {\n      delete this.controllers[gamepad.index]\n      this.controller = null\n      return\n    }\n\n    this.controllers[gamepad.index] = gamepad\n    this.controller = gamepad\n  }\n\n  private axis(id: number) {\n    if (!this.controller) {\n      return 0\n    }\n\n    return (this.controller.axes[id]  this.threshold)\n        ? 1\n        : 0\n  }\n\n  private action(...buttons: number[]) {\n    if (!this.controller) {\n      return false\n    }\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlBuffer.html":{"url":"classes/GlBuffer.html","title":"class - GlBuffer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlBuffer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/gl-buffer.ts\n        \n\n            \n                Description\n            \n            \n                Thin wrapper around WebGLBuffer objects, making them easier to manage.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeBuffer\n                            \n                            \n                                    Private\n                                buffers\n                            \n                            \n                                    Private\n                                gl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buffer\n                            \n                            \n                                create\n                            \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gl: WebGLRenderingContext)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl/gl-buffer.ts:20\n                            \n                        \n\n                \n                    \n                            Initialize GlBuffer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gl\n                                                  \n                                                        \n                                                                    WebGLRenderingContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                WebGLRenderingContext to use for buffer actions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BufferInfo\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            buffers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BufferInfo[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderingContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buffer\n                        \n                        \n                    \n                \n            \n            \n                \nbuffer(bufferName: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:37\n                \n            \n\n\n            \n                \n                    Gets the buffer with the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the buffer to return.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(bufferName: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:48\n                \n            \n\n\n            \n                \n                    Creates a new buffer with the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the buffer to create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setActive\n                        \n                        \n                    \n                \n            \n            \n                \nsetActive(bufferName: string, attribLocation: number, components: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:66\n                \n            \n\n\n            \n                \n                    Sets the named buffer as active, enables the provided attribute,\nand prepares the buffer for use.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the buffer to activate.\n\n                                    \n                                \n                                \n                                    attribLocation\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The location of the attribute to enable.\n\n                                    \n                                \n                                \n                                    components\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        The number of components per vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        const fullArea = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n\nclass BufferInfo {\n  buffer: WebGLBuffer\n  id: number\n  name: string\n}\n\n/**\n * Thin wrapper around WebGLBuffer objects, making them easier to manage.\n *\n * @category kilo/renderer/webgl\n */\nexport class GlBuffer {\n  private gl: WebGLRenderingContext\n  private buffers: BufferInfo[]\n  private activeBuffer: BufferInfo\n\n  /**\n   * Initialize GlBuffer object.\n   *\n   * @param gl WebGLRenderingContext to use for buffer actions.\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl\n    this.buffers = []\n  }\n\n  /**\n   * Gets the buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to return.\n   */\n  buffer(bufferName: string) {\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    return buffer.buffer\n  }\n\n  /**\n   * Creates a new buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to create.\n   */\n  create(bufferName: string) {\n    const buff = new BufferInfo()\n    buff.buffer = this.gl.createBuffer()\n    ; (buff.buffer as any).__SPECTOR_Metadata = { bufferName }\n    buff.id = this.buffers.length\n    buff.name = bufferName\n\n    this.buffers.push(buff)\n  }\n\n  /**\n   * Sets the named buffer as active, enables the provided attribute,\n   * and prepares the buffer for use.\n   *\n   * @param bufferName The name of the buffer to activate.\n   * @param attribLocation The location of the attribute to enable.\n   * @param components The number of components per vertex.\n   */\n  setActive(bufferName: string, attribLocation: number, components: number = 2) {\n    const { gl } = this\n\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    if (!buffer) {\n      throw new Error(`No buffer with name ${bufferName} found to set as active.`)\n    }\n\n    if (this.activeBuffer === buffer) {\n      return\n    }\n\n    this.activeBuffer = buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, fullArea, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(attribLocation, components, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(attribLocation)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFrame.html":{"url":"interfaces/HasFrame.html","title":"interface - HasFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tile-map.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        frame\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        frame\n                                    \n                                \n                                \n                                    \n                                        frame:         Point\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Point\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Container, TileSprite } from '.'\nimport { HitBox, Point, Texture, Vec } from './types'\nimport { TiledMap } from './utils'\n\ninterface HasFrame {\n  frame: Point\n}\n\n/**\n * A customized Container of [[TileSprite]] objects that provides helper methods\n * for accessing tiles.\n *\n * Only tiles on the 'level' layer are used. Other layers are only for display.\n *\n * @category kilo\n */\nexport class TileMap extends Container {\n  /** Width of the entire map in tiles. */\n  mapWidth: number\n  /** Height of the entire map in tiles. */\n  mapHeight: number\n  /** Width of one tile in pixels. */\n  tileWidth: number\n  /** Height of one tile in pixels. */\n  tileHeight: number\n  /** Index of the level layer in tiles data. */\n  levelIndex: number\n\n  /**\n   * Initialize TileMap object.\n   *\n   * @param tiles Array of arrays of objects with at least a [[Point]] `frame` property.\n   * @param data TiledMap object.\n   * @param texture Texture to use for tiles.\n   */\n  constructor(tiles: HasFrame[][], data: TiledMap, texture: Texture) {\n    super()\n\n    this.mapWidth = data.mapWidth\n    this.mapHeight = data.mapHeight\n    this.tileWidth = data.tileWidth\n    this.tileHeight = data.tileHeight\n    this.levelIndex = data.levelIndex\n\n    for (let i = 0; i (new Container())\n\n      for (let j = 0; j (this.children as any)\n      [this.levelIndex].children[mapPos.y * this.mapWidth + mapPos.x]\n  }\n\n  /**\n   * Gets the tile at the specified location.\n   *\n   * @param pos Pixel location to lookup tile.\n   */\n  tileAtPixelPos(pos: Vec) {\n    return this.tileAtMapPos(this.pixelToMapPos(pos))\n  }\n\n  /**\n   * Gets the tile at the specified location and sets the `frame` property.\n   *\n   * @param mapPos Tile location to lookup tile.\n   * @param frame The frame to set on the tile.\n   */\n  setTileFrameAtMapPos(mapPos: Vec, frame: Point) {\n    const tile = this.tileAtMapPos(mapPos)\n\n    tile.frame = frame\n\n    return tile\n  }\n\n  /**\n   * Gets the tile at the specified location and sets the `frame` property.\n   *\n   * @param pos Pixel location to lookup tile.\n   * @param frame The frame to set on the tile.\n   */\n  setTileFrameAtPixelPos(pos: Vec, frame: Point) {\n    return this.setTileFrameAtMapPos(this.pixelToMapPos(pos), frame)\n  }\n\n  /**\n   * Gets the tiles at all four corners of the specified HitBox.\n   *\n   * @param box HitBox to test for corner tiles.\n   * @param xo X axis offset to check against.\n   * @param yo Y axis offset to check against.\n   */\n  tilesAtCorners(box: HitBox, xo = 0, yo = 0): TileSprite[] {\n    const tiles = []\n    const corners = [\n      [box.x, box.y],\n      [box.x + box.width, box.y],\n      [box.x, box.y + box.height],\n      [box.x + box.width, box.y + box.height]\n    ]\n\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HitBox.html":{"url":"classes/HitBox.html","title":"class - HitBox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HitBox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/hit-box.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _height\n                            \n                            \n                                    Private\n                                _width\n                            \n                            \n                                    Private\n                                _x\n                            \n                            \n                                    Private\n                                _y\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(x: number, y: number, width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in lib/types/hit-box.ts:42\n                            \n                        \n\n                \n                    \n                            Initialize HitBox object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        x\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                X axis offset from top left.\n\n                                                        \n                                                \n                                                \n                                                        y\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Y axis offset from top left.\n\n                                                        \n                                                \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of hitbox.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of hitbox.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/hit-box.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/hit-box.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/hit-box.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/hit-box.ts:19\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/hit-box.ts:68\n                \n            \n\n\n            \n                \n                    Set new values for the hitbox.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        X axis offset from top left.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Y axis offset from top left.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of hitbox.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of hitbox.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:25\n                                \n                            \n                    \n                        \n                                Gets the offset along the X axis from top left. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:30\n                                \n                            \n                    \n                        \n                                Gets the offset along the Y axis from top left. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:35\n                                \n                            \n                    \n                        \n                                Gets the width of the hitbox. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:40\n                                \n                            \n                    \n                        \n                                Gets the height of the hitbox. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class HitBox {\n  private _x: number\n  private _y: number\n\n  private _height: number\n  private _width: number\n\n  /** Gets the offset along the X axis from top left. */\n  get x() {\n    return this._x\n  }\n\n  /** Gets the offset along the Y axis from top left. */\n  get y() {\n    return this._y\n  }\n\n  /** Gets the width of the hitbox. */\n  get width() {\n    return this._width\n  }\n\n  /** Gets the height of the hitbox. */\n  get height() {\n    return  this._height\n  }\n\n  /**\n   * Initialize HitBox object.\n   *\n   * @param x X axis offset from top left.\n   * @param y Y axis offset from top left.\n   * @param width Width of hitbox.\n   * @param height Height of hitbox.\n   */\n  constructor(x: number, y: number, width: number, height: number) {\n    this._x = x\n    this._y = y\n\n    this._height = height\n    this._width = width\n  }\n\n  /**\n   * Set new values for the hitbox.\n   *\n   * @param x X axis offset from top left.\n   * @param y Y axis offset from top left.\n   * @param width Width of hitbox.\n   * @param height Height of hitbox.\n   */\n  set(x: number, y: number, width: number, height: number) {\n    this._x = x\n    this._y = y\n\n    this._height = height\n    this._width = width\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hits.html":{"url":"interfaces/Hits.html","title":"interface - Hits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Hits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/resolvers/wall-slide.ts\n        \n\n            \n                Description\n            \n            \n                Directions where collisions are detected.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        down\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        up\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        down\n                                    \n                                \n                                \n                                    \n                                        down:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from below.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from the left.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from the right.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        up\n                                    \n                                \n                                \n                                    \n                                        up:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from above.  \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Sprite } from '../types'\nimport { TileMap, Utils, TileSprite } from '..'\n\n/**\n * Function used to provide collision resolver with walkable tile status.\n */\nexport type WalkableTest = (sprite: TileSprite, index: number) => boolean\n\n/**\n * Directions where collisions are detected.\n */\nexport interface Hits {\n  /** Whether or not a collision was detected from above.  */\n  up: boolean\n  /** Whether or not a collision was detected from below.  */\n  down: boolean\n  /** Whether or not a collision was detected from the left.  */\n  left: boolean\n  /** Whether or not a collision was detected from the right.  */\n  right: boolean\n}\n\n/**\n * The offsets to apply to resolve collisions, as well as the hit directions.\n */\nexport interface Resolution {\n  /** Correction needed in the x axis. */\n  x: number\n  /** Correction needed in the y axis. */\n  y: number\n  /** Directions where collisions were detected. */\n  hits: Hits\n}\n\n/**\n * Collision resolver that only prevents invalid movements.\n *\n * @param ent The Sprite entity to check.\n * @param map The TileMap to use for collision.\n * @param x Desired movement in the X axis.\n * @param y Desired movement in the Y axis.\n * @param walkableTest Callback function to test for walkable tiles.\n *\n * @category kilo/resolvers\n */\nexport function wallSlide(ent: Sprite, map: TileMap, x = 0, y = 0,\n                          walkableTest?: WalkableTest): Resolution {\n  let tiles: TileSprite[]\n  let tileEdge: number\n\n  const bounds = Utils.sprite.bounds(ent)\n  const hits = { up: false, down: false, left: false, right: false }\n\n  let xo = x\n  let yo = y\n\n  if (y !== 0) {\n    tiles = map.tilesAtCorners(bounds, 0, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(bl && br)) {\n      hits.down = true\n      tileEdge = tiles[2].pos.y - 1\n      yo = tileEdge - (bounds.y + bounds.height)\n    }\n  }\n\n  if (x !== 0) {\n    tiles = map.tilesAtCorners(bounds, xo, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(tr && br)) {\n      hits.right = true\n      tileEdge = tiles[1].pos.x - 1\n      xo = tileEdge - (bounds.x + bounds.width)\n    }\n  }\n\n  return { x: xo, y: yo, hits }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyControls.html":{"url":"classes/KeyControls.html","title":"class - KeyControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/key-controls.ts\n        \n\n            \n                Description\n            \n            \n                Provides access to keyboard inputs.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                keys\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    action\n                                \n                                \n                                    actionB\n                                \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/controls/key-controls.ts:75\n                            \n                        \n\n                \n                    \n                            Initialize KeyControls object.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            keys\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         KeyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/key-controls.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            key\n                        \n                        \n                    \n                \n            \n            \n                \nkey(key: string, value?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/key-controls.ts:111\n                \n            \n\n\n            \n                \n                    Gets or sets the value of a key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        KeyboardEvent code for the key (e.g. 'KeyW' for W).\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        If provided, sets the key's value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not key is 'pressed'.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/key-controls.ts:122\n                \n            \n\n\n            \n                \n                    Resets all keys to 'unpressed' state.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        action\n                    \n                \n\n                \n                    \n                        getaction()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:25\n                                \n                            \n                    \n                        \n                                Gets status of the spacebar. \n\n\n                        \n                    \n\n                \n                    \n                        setaction(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:30\n                                \n                            \n                    \n                        \n                                Sets status of the spacebar. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        actionB\n                    \n                \n\n                \n                    \n                        getactionB()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:35\n                                \n                            \n                    \n                        \n                                Gets status of the X key. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:44\n                                \n                            \n                    \n                        \n                                Gets x axis input direction.\nChecks left arrow or A key for left, and right arrow or D key for down.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:63\n                                \n                            \n                    \n                        \n                                Gets y axis input direction.\nChecks up arrow or W key for up, and down arrow or S key for down.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        type KeyMap = {\n  [s: string]: boolean\n}\n\nconst passThroughKeys = [\n  'F5', 'F12'\n]\n\n/**\n * Provides access to keyboard inputs.\n *\n * @category kilo/controls\n */\nexport class KeyControls {\n  private keys: KeyMap\n\n  /** Gets status of the spacebar. */\n  get action() {\n    return this.keys.Space\n  }\n\n  /** Sets status of the spacebar. */\n  set action(value: boolean) {\n    this.keys.Space = value\n  }\n\n  /** Gets status of the X key. */\n  get actionB() {\n    return this.keys.KeyX\n  }\n\n  /**\n   * Gets x axis input direction.\n   *\n   * Checks left arrow or A key for left, and right arrow or D key for down.\n   */\n  get x() {\n    let val = 0\n\n    if (this.keys.ArrowLeft || this.keys.KeyA) {\n      val -= 1\n    }\n\n    if (this.keys.ArrowRight || this.keys.KeyD) {\n      val += 1\n    }\n\n    return val\n  }\n\n  /**\n   * Gets y axis input direction.\n   *\n   * Checks up arrow or W key for up, and down arrow or S key for down.\n   */\n  get y() {\n    let val = 0\n\n    if (this.keys.ArrowUp || this.keys.KeyW) {\n      val -= 1\n    }\n\n    if (this.keys.ArrowDown || this.keys.KeyS) {\n      val += 1\n    }\n\n    return val\n  }\n\n  /**\n   * Initialize KeyControls object.\n   */\n  constructor() {\n    this.reset()\n\n    document.addEventListener('keydown', e => {\n      this.keys[e.code] = true\n\n      if (passThroughKeys.indexOf(e.code.toString()) > -1) {\n        return\n      }\n\n      e.preventDefault()\n    }, false)\n\n    document.addEventListener('keyup', e => {\n      this.keys[e.code] = false\n\n      if (passThroughKeys.indexOf(e.code.toString()) > -1) {\n        return\n      }\n\n      e.preventDefault()\n    }, false)\n  }\n\n  /**\n   * Gets or sets the value of a key.\n   *\n   * @param key KeyboardEvent code for the key (e.g. 'KeyW' for W).\n   * @param value If provided, sets the key's value.\n   * @returns Whether or not key is 'pressed'.\n   */\n  key(key: string, value?: boolean) {\n    if (value !== undefined) {\n      this.keys[key] = value\n    }\n\n    return !!this.keys[key]\n  }\n\n  /**\n   * Resets all keys to 'unpressed' state.\n   */\n  reset() {\n    this.keys = {}\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Layer.html":{"url":"interfaces/Layer.html","title":"interface - Layer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Layer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Layer in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        objects\n                                \n                                \n                                        opacity\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a tile layer, this is an array of tile IDs. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                    \n                                \n                                \n                                    \n                                        objects:     Tiled.Object[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tiled.Object[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If an object layer, this is an array of Objects. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opacity\n                                    \n                                \n                                \n                                    \n                                        opacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The opacity of the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the layer. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /**\n   * The Tiled map.\n   */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /**\n   * A Property object in Tiled.\n   */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /**\n   * A Tile in Tiled.\n   */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Map.html":{"url":"interfaces/Map.html","title":"interface - Map","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Map\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                The Tiled map.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        layers\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        tileheight\n                                \n                                \n                                        tilesets\n                                \n                                \n                                        tilewidth\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layers\n                                    \n                                \n                                \n                                    \n                                        layers:         Layer[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Layers in map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileheight\n                                    \n                                \n                                \n                                    \n                                        tileheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilesets\n                                    \n                                \n                                \n                                    \n                                        tilesets:     Tileset[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tileset[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tilesets in the map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilewidth\n                                    \n                                \n                                \n                                    \n                                        tilewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the map in tiles. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /**\n   * The Tiled map.\n   */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /**\n   * A Property object in Tiled.\n   */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /**\n   * A Tile in Tiled.\n   */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MouseControls.html":{"url":"classes/MouseControls.html","title":"class - MouseControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MouseControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/mouse-controls.ts\n        \n\n            \n                Description\n            \n            \n                Provides access to mouse events.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                el\n                            \n                            \n                                isDown\n                            \n                            \n                                pos\n                            \n                            \n                                pressed\n                            \n                            \n                                    Private\n                                rect\n                            \n                            \n                                released\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                down\n                            \n                            \n                                    Private\n                                mousePosFromEvent\n                            \n                            \n                                    Private\n                                move\n                            \n                            \n                                    Private\n                                resize\n                            \n                            \n                                    Private\n                                up\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(container: HTMLCanvasElement)\n                    \n                \n                        \n                            \n                                Defined in lib/controls/mouse-controls.ts:22\n                            \n                        \n\n                \n                    \n                            Initialize MouseControls object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLCanvasElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The canvas element to use for relative mouse coordinates.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            el\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:18\n                            \n                        \n\n                \n                    \n                        Whether the mouse button is down. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:16\n                            \n                        \n\n                \n                    \n                        Position of the mouse. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pressed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:20\n                            \n                        \n\n                \n                    \n                        Whether the mouse button was just pressed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            rect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ClientRect | DOMRect\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            released\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:22\n                            \n                        \n\n                \n                    \n                        Whether the mouse button was just released. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(e: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            mousePosFromEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mousePosFromEvent(e: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            move\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    move(e: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resize()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:49\n                \n            \n\n\n            \n                \n                    Update mouse values.\nShould be called in parent object's update function.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vec } from '../types'\n\n/**\n * Provides access to mouse events.\n *\n * @category kilo/controls\n */\nexport class MouseControls {\n  private el: HTMLCanvasElement\n  private rect: ClientRect | DOMRect\n\n  /** Position of the mouse. */\n  pos: Vec\n  /** Whether the mouse button is down. */\n  isDown: boolean\n  /** Whether the mouse button was just pressed. */\n  pressed: boolean\n  /** Whether the mouse button was just released. */\n  released: boolean\n\n  /**\n   * Initialize MouseControls object.\n   *\n   * @param container The canvas element to use for relative mouse coordinates.\n   */\n  constructor(container: HTMLCanvasElement) {\n    this.el = container\n\n    this.pos = new Vec()\n    this.isDown = false\n    this.pressed = false\n    this.released = false\n    this.resize()\n\n    document.addEventListener('mousedown', e => this.down(e), false)\n    document.addEventListener('mouseup', _ => this.up(), false)\n    document.addEventListener('mousemove', e => this.move(e), false)\n    document.addEventListener('resize', _ => this.resize(), false)\n  }\n\n  /**\n   * Update mouse values.\n   *\n   * Should be called in parent object's update function.\n   */\n  update() {\n    this.released = false\n    this.pressed = false\n  }\n\n  private down(e: MouseEvent) {\n    this.isDown = true\n    this.pressed = true\n    this.mousePosFromEvent(e)\n  }\n\n  private up() {\n    this.isDown = false\n    this.released = true\n  }\n\n  private move(e: MouseEvent) {\n    this.mousePosFromEvent(e)\n  }\n\n  private resize() {\n    this.rect = this.el.getBoundingClientRect()\n  }\n\n  private mousePosFromEvent(e: MouseEvent) {\n    const { clientX, clientY } = e\n    const xr = this.el.width / this.el.clientWidth\n    const yr = this.el.height / this.el.clientHeight\n\n    this.pos.x = (clientX - this.rect.left) * xr\n    this.pos.y = (clientY - this.rect.top) * yr\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Object.html":{"url":"interfaces/Object.html","title":"interface - Object","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Object\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                An Object in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        gid\n                                \n                                \n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                                \n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gid\n                                    \n                                \n                                \n                                    \n                                        gid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The global ID of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The local Id of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X value of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y value of the object. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /**\n   * The Tiled map.\n   */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /**\n   * A Property object in Tiled.\n   */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /**\n   * A Tile in Tiled.\n   */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OneUp.html":{"url":"classes/OneUp.html","title":"class - OneUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OneUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/one-up.ts\n        \n\n            \n                Description\n            \n            \n                An effect where the provided [[TileSprite]] or [[Rect]] (defaults to rectangle\nif not provided) is moved away from its starting position at the specified\nspeed and duration.\nExample\n```typescript\n\n// Inside a 'gotPickup' or similar function\nconst coin = new TileSprite(texture, 48, 48)\ncoin.anims.add('spin', [5, 6, 7, 8].map(x => ({ x, y: 4 } as any)), .1)\ncoin.anims.play('spin')\n\nconst one = this.add(new OneUp(coin))\none.pos.copy(this.player.pos)\n```\n\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                duration\n                            \n                            \n                                    Private\n                                life\n                            \n                            \n                                    Private\n                                vel\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(display?: TileSprite | Rect, speed: number, duration: number)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/one-up.ts:32\n                            \n                        \n\n                \n                    \n                            Initialize OneUp object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        TileSprite | Rect\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\nRectangle created if not provided.\n\n                                                        \n                                                \n                                                \n                                                        speed\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Speed (and x-axis direction by numeric sign) to move from\ninitial point.\n\n                                                        \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds to fade out.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            duration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/one-up.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            life\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/one-up.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/one-up.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/one-up.ts:58\n                \n            \n\n\n            \n                \n                    Update the state of the OneUp.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:29\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:40\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:54\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container } from '../container'\nimport { Vec, Rect } from '../types'\nimport { TileSprite, Utils } from '..'\n\n/**\n * An effect where the provided [[TileSprite]] or [[Rect]] (defaults to rectangle\n * if not provided) is moved away from its starting position at the specified\n * speed and duration.\n *\n * ### Example\n *\n * ```typescript\n * // Inside a 'gotPickup' or similar function\n * const coin = new TileSprite(texture, 48, 48)\n * coin.anims.add('spin', [5, 6, 7, 8].map(x => ({ x, y: 4 } as any)), .1)\n * coin.anims.play('spin')\n *\n * const one = this.add(new OneUp(coin))\n * one.pos.copy(this.player.pos)\n * ```\n * @remarks Default behavior is moving up and fading out over 0.6 seconds.\n *\n * @category kilo/fx\n */\nexport class OneUp extends Container {\n  private vel: Vec\n\n  private duration: number\n  private life: number\n\n  /**\n   * Initialize OneUp object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * Rectangle created if not provided.\n   * @param speed Speed (and x-axis direction by numeric sign) to move from\n   * initial point.\n   * @param duration Time in seconds to fade out.\n   */\n  constructor(display?: TileSprite | Rect, speed = 2, duration = .6) {\n    super()\n\n    this.vel = new Vec(0, -speed)\n    this.duration = duration\n    this.life = duration\n    this.children = [display || new Rect(40, 30, { fill: '#ff0' })]\n  }\n\n  /**\n   * Update the state of the OneUp.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  update(dt: number, t: number) {\n    super.update(dt, t)\n\n    this.alpha = Utils.math.clamp(this.life / this.duration)\n    this.pos.add(this.vel)\n\n    this.dead = ((this.life -= dt) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Particle.html":{"url":"classes/Particle.html","title":"class - Particle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Particle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle.ts\n        \n\n            \n                Description\n            \n            \n                A single particle whose lifecycle is controlled by a [[ParticleEmitter]].\nCan be used alone if desired as a randomly moving and fading entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                life\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                vel\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(display?: Rect | TileSprite, options?: ParticleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/particle.ts:57\n                            \n                        \n\n                \n                    \n                            Initialize Particle object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        Rect | TileSprite\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParticleOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options affecting particle behaviors.\nSee [[ParticleOptions]] for default values if not passed in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            life\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/particle.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParticleOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/particle.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/particle.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle.ts:90\n                \n            \n\n\n            \n                \n                    Reset the particle with random values within established ranges.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle.ts:112\n                \n            \n\n\n            \n                \n                    Update state of the particle.\nExits early if the particle's time is up.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:29\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:40\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:54\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { math } from '../utils'\n\n/**\n * Options used to determine particle behaviors.\n *\n * Ranges use a [[Vec]] where the x value is the minimum, and y is the maximum.\n *\n * @category kilo/fx\n */\nexport interface ParticleOptions {\n  /**\n   * Range of values to use for horizontal velocity.\n   * @default -5 to 5\n   */\n  horizontalVelRange: Vec\n\n  /**\n   * Range of values to use for vertical velocity.\n   * @default -5 to -10\n   */\n  verticalVelRange: Vec\n\n  /**\n   * Range of values to use for particle life in seconds.\n   * @default .8 to 1.5\n   */\n  lifeSecRange: Vec\n\n  /**\n   * Default particle size to use if no display object passed in.\n   * @default 10 by 10\n   */\n  defaultSize: Vec\n\n  /**\n   * Fill style to use if no display object passed in.\n   * @default '#900'\n   */\n  fill: string\n}\n\n/**\n * A single particle whose lifecycle is controlled by a [[ParticleEmitter]].\n *\n * Can be used alone if desired as a randomly moving and fading entity.\n *\n * @category kilo/fx\n */\nexport class Particle extends Container {\n  private options: ParticleOptions\n  private vel: Vec\n  private life: number\n\n  /**\n   * Initialize Particle object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See [[ParticleOptions]] for default values if not passed in.\n   */\n  constructor(display?: Rect | TileSprite, options?: ParticleOptions) {\n    super()\n\n    this.vel = new Vec()\n    this.alpha = this.life = 0\n\n    this.options = options || {\n      horizontalVelRange: new Vec(-5, 5),\n      verticalVelRange: new Vec(-5, -10),\n      lifeSecRange: new Vec(.8, 1.5),\n      defaultSize: new Vec(10, 10),\n      fill: '#900'\n    }\n\n    this.add(display || new Rect(\n      this.options.defaultSize.x,\n      this.options.defaultSize.y,\n      { fill: this.options.fill }\n    ))\n  }\n\n  /**\n   * Reset the particle with random values within established ranges.\n   */\n  reset() {\n    const {\n      horizontalVelRange: h,\n      verticalVelRange: v,\n      lifeSecRange: l\n    } = this.options\n\n    this.vel.set(\n      math.randf(h.x, h.y), math.randf(v.x, v.y)\n    )\n\n    this.life = math.randf(l.x, l.y)\n    this.pos.set(0, 0)\n  }\n\n  /**\n   * Update state of the particle.\n   *\n   * Exits early if the particle's time is up.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.life \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticleEmitter.html":{"url":"classes/ParticleEmitter.html","title":"class - ParticleEmitter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticleEmitter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle-emitter.ts\n        \n\n            \n                Description\n            \n            \n                Container which manages a pool of [[Particle]] objects (20 by default)\nand emits them in random directions when the play method is called.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                lastPlay\n                            \n                            \n                                    Private\n                                particles\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(numParticles: number, display?: TileSprite | Rect, options?: ParticleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/particle-emitter.ts:16\n                            \n                        \n\n                \n                    \n                            Initialize ParticleEmitter object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        numParticles\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of particles used.\n\n                                                        \n                                                \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        TileSprite | Rect\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParticleOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options affecting particle behaviors.\nSee [[ParticleOptions]] for default values if not passed in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            lastPlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/particle-emitter.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Particle[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/fx/particle-emitter.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(pos: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle-emitter.ts:48\n                \n            \n\n\n            \n                \n                    'Plays' the particle emitter effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position to use for anchoring particles.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:29\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:40\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:54\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { Particle, ParticleOptions } from './particle'\n\n/**\n * Container which manages a pool of [[Particle]] objects (20 by default)\n * and emits them in random directions when the `play` method is called.\n *\n * @category kilo/fx\n */\nexport class ParticleEmitter extends Container {\n  private particles: Particle[]\n  private lastPlay: number\n\n  /**\n   * Initialize ParticleEmitter object.\n   *\n   * @param numParticles The number of particles used.\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See [[ParticleOptions]] for default values if not passed in.\n   */\n  constructor(numParticles = 20, display?: TileSprite | Rect,\n              options?: ParticleOptions) {\n    super()\n\n    this.particles = []\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParticleOptions.html":{"url":"interfaces/ParticleOptions.html","title":"interface - ParticleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParticleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle.ts\n        \n\n            \n                Description\n            \n            \n                Options used to determine particle behaviors.\nRanges use a [[Vec]] where the x value is the minimum, and y is the maximum.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        defaultSize\n                                \n                                \n                                        fill\n                                \n                                \n                                        horizontalVelRange\n                                \n                                \n                                        lifeSecRange\n                                \n                                \n                                        verticalVelRange\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultSize\n                                    \n                                \n                                \n                                    \n                                        defaultSize:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 10 by 10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default particle size to use if no display object passed in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : '#900'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fill style to use if no display object passed in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalVelRange\n                                    \n                                \n                                \n                                    \n                                        horizontalVelRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : -5 to 5\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for horizontal velocity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lifeSecRange\n                                    \n                                \n                                \n                                    \n                                        lifeSecRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : .8 to 1.5\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for particle life in seconds.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalVelRange\n                                    \n                                \n                                \n                                    \n                                        verticalVelRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : -5 to -10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for vertical velocity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { math } from '../utils'\n\n/**\n * Options used to determine particle behaviors.\n *\n * Ranges use a [[Vec]] where the x value is the minimum, and y is the maximum.\n *\n * @category kilo/fx\n */\nexport interface ParticleOptions {\n  /**\n   * Range of values to use for horizontal velocity.\n   * @default -5 to 5\n   */\n  horizontalVelRange: Vec\n\n  /**\n   * Range of values to use for vertical velocity.\n   * @default -5 to -10\n   */\n  verticalVelRange: Vec\n\n  /**\n   * Range of values to use for particle life in seconds.\n   * @default .8 to 1.5\n   */\n  lifeSecRange: Vec\n\n  /**\n   * Default particle size to use if no display object passed in.\n   * @default 10 by 10\n   */\n  defaultSize: Vec\n\n  /**\n   * Fill style to use if no display object passed in.\n   * @default '#900'\n   */\n  fill: string\n}\n\n/**\n * A single particle whose lifecycle is controlled by a [[ParticleEmitter]].\n *\n * Can be used alone if desired as a randomly moving and fading entity.\n *\n * @category kilo/fx\n */\nexport class Particle extends Container {\n  private options: ParticleOptions\n  private vel: Vec\n  private life: number\n\n  /**\n   * Initialize Particle object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See [[ParticleOptions]] for default values if not passed in.\n   */\n  constructor(display?: Rect | TileSprite, options?: ParticleOptions) {\n    super()\n\n    this.vel = new Vec()\n    this.alpha = this.life = 0\n\n    this.options = options || {\n      horizontalVelRange: new Vec(-5, 5),\n      verticalVelRange: new Vec(-5, -10),\n      lifeSecRange: new Vec(.8, 1.5),\n      defaultSize: new Vec(10, 10),\n      fill: '#900'\n    }\n\n    this.add(display || new Rect(\n      this.options.defaultSize.x,\n      this.options.defaultSize.y,\n      { fill: this.options.fill }\n    ))\n  }\n\n  /**\n   * Reset the particle with random values within established ranges.\n   */\n  reset() {\n    const {\n      horizontalVelRange: h,\n      verticalVelRange: v,\n      lifeSecRange: l\n    } = this.options\n\n    this.vel.set(\n      math.randf(h.x, h.y), math.randf(v.x, v.y)\n    )\n\n    this.life = math.randf(l.x, l.y)\n    this.pos.set(0, 0)\n  }\n\n  /**\n   * Update state of the particle.\n   *\n   * Exits early if the particle's time is up.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.life \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Point.html":{"url":"interfaces/Point.html","title":"interface - Point","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/vec.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X axis coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y axis coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n  /** X axis coordinate */\n  x: number\n  /** Y axis coordinate */\n  y: number\n}\n\n/**\n * Simple 2D vector that provides vector math helpers.\n *\n * Most methods are chainable.\n *\n * ### Example\n * ```typescript\n * const vector1 = new Vec(4, 8)\n * const vector2 = Vec.from(vector1)\n *\n * vector1.add(vector2).multiply(3)\n * ```\n *\n * @category kilo/types\n */\nexport class Vec implements Point {\n  /** X coordinate value. */\n  x: number\n  /** Y coordinate value. */\n  y: number\n\n  /**\n   * Creates a new Vec from the provided Vec.\n   *\n   * @param v Vec to copy into new Vec.\n   */\n  static from(v: Vec) {\n    return new Vec().copy(v)\n  }\n\n  /**\n   * Initialize Vec object.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the coordinates of the Vec.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  set(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Copies the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to copy values from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to copy values from.\n   */\n  copy({ x, y }: Vec) {\n    return this.set(x, y)\n  }\n\n  /**\n   * Creates a cloned copy of the Vec.\n   */\n  clone() {\n    return Vec.from(this)\n  }\n\n  /**\n   * Adds the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to add values from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to add values from.\n   */\n  add({ x, y }: Vec) {\n    this.x += x\n    this.y += y\n\n    return this\n  }\n\n  /**\n   * Subtracts the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to subtract values from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to subtract values from.\n   */\n  subtract({ x, y }: Vec) {\n    this.x -= x\n    this.y -= y\n\n    return this\n  }\n\n  /**\n   * Multiplies the x and y values by the provided value.\n   *\n   * @param s The scalar value to multiply.\n   */\n  multiply(s: number) {\n    this.x *= s\n    this.y *= s\n\n    return this\n  }\n\n  /**\n   * Divides the x and y values by the provided value.\n   *\n   * @param s The scalar value to divide by.\n   */\n  divide(s: number) {\n    this.x /= s\n    this.y /= s\n\n    return this\n  }\n\n  /**\n   * Gets the magnitude of the Vec.\n   */\n  mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /**\n   * Gets the normal of the Vec.\n   */\n  normalize() {\n    const mag = this.mag()\n\n    if (mag > 0) {\n      this.divide(mag)\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the dot product of two Vecs.\n   *\n   * @param vec The Vec to get dot product from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to get dot product from.\n   */\n  dot({ x, y }: Vec) {\n    return this.x * x + this.y * y\n  }\n\n  /**\n   * Custom string representation.\n   *\n   * @returns String formatted as \"(x, y)\"\n   */\n  toString() {\n    return `(${this.x}, ${this.y})`\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Property.html":{"url":"interfaces/Property.html","title":"interface - Property","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Property\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Property object in Tiled.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the property. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the property. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value of the property. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /**\n   * The Tiled map.\n   */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /**\n   * A Property object in Tiled.\n   */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /**\n   * A Tile in Tiled.\n   */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rect.html":{"url":"classes/Rect.html","title":"class - Rect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/rect.ts\n        \n\n            \n                Description\n            \n            \n                Creates a rectangle for rendering.\nExample\n```typescript\n\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n```\n\n\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                pos\n                            \n                            \n                                style\n                            \n                            \n                                width\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, style: RectStyleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/types/rect.ts:35\n                            \n                        \n\n                \n                    \n                            Initialize Rect object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height in pixels.\n\n                                                        \n                                                \n                                                \n                                                        style\n                                                  \n                                                        \n                                                                        RectStyleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Style options.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:28\n                            \n                        \n\n                \n                    \n                        Height of the rectangle in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:33\n                            \n                        \n\n                \n                    \n                        Position of the rectangle. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RectStyleOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:35\n                            \n                        \n\n                \n                    \n                        Style options for the rectangle. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:30\n                            \n                        \n\n                \n                    \n                        Width of the rectangle in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/rect.ts:59\n                \n            \n\n\n            \n                \n                    Empty implementation from extending [[Entity]].\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vec, Entity } from '.'\n\n/**\n * Style options for a Rect.\n *\n * @category kilo/types\n */\nexport interface RectStyleOptions {\n  /** The fill color. */\n  fill: string\n}\n\n/**\n * Creates a rectangle for rendering.\n *\n * ### Example\n * ```typescript\n * const testObj = new Rect(32, 32, { fill: '#f00' })\n * ```\n *\n * @category kilo/types\n */\nexport class Rect extends Entity {\n  /** Height of the rectangle in pixels. */\n  height: number\n  /** Width of the rectangle in pixels. */\n  width: number\n\n  /** Position of the rectangle. */\n  pos: Vec\n  /** Style options for the rectangle. */\n  style: RectStyleOptions\n\n  /**\n   * Initialize Rect object.\n   *\n   * @param width Width in pixels.\n   * @param height Height in pixels.\n   * @param style Style options.\n   */\n  constructor(width: number, height: number,\n              style: RectStyleOptions = { fill: '#333' }) {\n    super()\n\n    this.height = height\n    this.width = width\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending [[Entity]].\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RectStyleOptions.html":{"url":"interfaces/RectStyleOptions.html","title":"interface - RectStyleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RectStyleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/rect.ts\n        \n\n            \n                Description\n            \n            \n                Style options for a Rect.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fill\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The fill color. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Vec, Entity } from '.'\n\n/**\n * Style options for a Rect.\n *\n * @category kilo/types\n */\nexport interface RectStyleOptions {\n  /** The fill color. */\n  fill: string\n}\n\n/**\n * Creates a rectangle for rendering.\n *\n * ### Example\n * ```typescript\n * const testObj = new Rect(32, 32, { fill: '#f00' })\n * ```\n *\n * @category kilo/types\n */\nexport class Rect extends Entity {\n  /** Height of the rectangle in pixels. */\n  height: number\n  /** Width of the rectangle in pixels. */\n  width: number\n\n  /** Position of the rectangle. */\n  pos: Vec\n  /** Style options for the rectangle. */\n  style: RectStyleOptions\n\n  /**\n   * Initialize Rect object.\n   *\n   * @param width Width in pixels.\n   * @param height Height in pixels.\n   * @param style Style options.\n   */\n  constructor(width: number, height: number,\n              style: RectStyleOptions = { fill: '#333' }) {\n    super()\n\n    this.height = height\n    this.width = width\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending [[Entity]].\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/renderer.ts\n        \n\n            \n                Description\n            \n            \n                Abstract class to extend for specific renderers.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canvasElement\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/renderer.ts:27\n                            \n                        \n\n                \n                    \n                            Not to be called directly. \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:18\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:20\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:16\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:14\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/renderer.ts:61\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/renderer.ts:53\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        canvasElement\n                    \n                \n\n                \n                    \n                        getcanvasElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/renderer/renderer.ts:25\n                                \n                            \n                    \n                        \n                                Get the HTMLCanvasElement used for rendering.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Container } from '..'\nimport { Sprite } from '../types'\n\n/**\n * Abstract class to extend for specific renderers.\n *\n * @category kilo/renderer\n */\nexport abstract class Renderer {\n  /** Width of the canvas in pixels. */\n  protected width: number\n  /** Height of the canvas in pixels. */\n  protected height: number\n  /** Canvas element for rendering. */\n  protected canvas: HTMLCanvasElement\n  /** Containing element for the canvas. */\n  protected container: HTMLElement\n\n  /**\n   * Get the HTMLCanvasElement used for rendering.\n   */\n  get canvasElement() {\n    return this.canvas\n  }\n\n  /** Not to be called directly. */\n  constructor(width: number, height: number, container: HTMLElement) {\n    this.width = width\n    this.height = height\n\n    this.canvas = document.createElement('canvas')\n    this.canvas.id = 'kilo-canvas'\n    this.canvas.width = width\n    this.canvas.height = height\n\n    const div = document.createElement('div')\n    div.id = 'kilo-container'\n    div.style.position = 'relative'\n    div.style.height = this.height + 'px'\n    div.style.width = this.width + 'px'\n    div.style.margin = '0 auto'\n\n    div.appendChild(this.canvas)\n    container.appendChild(div)\n\n    this.container = div\n  }\n\n  /** To be defined by concrete implementations. */\n  abstract render(container: Container, clear?: boolean): void\n\n  /**\n   * Determines if the provided entity is visible to the camera.\n   *\n   * @param entity Sprite to check for visibility.\n   * @param camera Camera to use when determining visibility.\n   */\n  protected isInCamera(entity: Sprite, camera: any) {\n    return entity.pos.x + entity.width >= -camera.pos.x &&\n      entity.pos.x = -camera.pos.y &&\n      entity.pos.y \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resolution.html":{"url":"interfaces/Resolution.html","title":"interface - Resolution","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resolution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/resolvers/wall-slide.ts\n        \n\n            \n                Description\n            \n            \n                The offsets to apply to resolve collisions, as well as the hit directions.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hits\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                    \n                                \n                                \n                                    \n                                        hits:         Hits\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hits\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Directions where collisions were detected. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correction needed in the x axis. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correction needed in the y axis. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Sprite } from '../types'\nimport { TileMap, Utils, TileSprite } from '..'\n\n/**\n * Function used to provide collision resolver with walkable tile status.\n */\nexport type WalkableTest = (sprite: TileSprite, index: number) => boolean\n\n/**\n * Directions where collisions are detected.\n */\nexport interface Hits {\n  /** Whether or not a collision was detected from above.  */\n  up: boolean\n  /** Whether or not a collision was detected from below.  */\n  down: boolean\n  /** Whether or not a collision was detected from the left.  */\n  left: boolean\n  /** Whether or not a collision was detected from the right.  */\n  right: boolean\n}\n\n/**\n * The offsets to apply to resolve collisions, as well as the hit directions.\n */\nexport interface Resolution {\n  /** Correction needed in the x axis. */\n  x: number\n  /** Correction needed in the y axis. */\n  y: number\n  /** Directions where collisions were detected. */\n  hits: Hits\n}\n\n/**\n * Collision resolver that only prevents invalid movements.\n *\n * @param ent The Sprite entity to check.\n * @param map The TileMap to use for collision.\n * @param x Desired movement in the X axis.\n * @param y Desired movement in the Y axis.\n * @param walkableTest Callback function to test for walkable tiles.\n *\n * @category kilo/resolvers\n */\nexport function wallSlide(ent: Sprite, map: TileMap, x = 0, y = 0,\n                          walkableTest?: WalkableTest): Resolution {\n  let tiles: TileSprite[]\n  let tileEdge: number\n\n  const bounds = Utils.sprite.bounds(ent)\n  const hits = { up: false, down: false, left: false, right: false }\n\n  let xo = x\n  let yo = y\n\n  if (y !== 0) {\n    tiles = map.tilesAtCorners(bounds, 0, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(bl && br)) {\n      hits.down = true\n      tileEdge = tiles[2].pos.y - 1\n      yo = tileEdge - (bounds.y + bounds.height)\n    }\n  }\n\n  if (x !== 0) {\n    tiles = map.tilesAtCorners(bounds, xo, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(tr && br)) {\n      hits.right = true\n      tileEdge = tiles[1].pos.x - 1\n      xo = tileEdge - (bounds.x + bounds.width)\n    }\n  }\n\n  return { x: xo, y: yo, hits }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scene.html":{"url":"classes/Scene.html","title":"class - Scene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/scene.ts\n        \n\n            \n                Description\n            \n            \n                A unique [[Container]] with a reference to the game and controls,\nand a callback for the completion of the scene.\nTo be implemented as your unique scenes.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                controls\n                            \n                            \n                                game\n                            \n                            \n                                onSceneComplete\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(game: Game, onSceneComplete: Function, controls?: Controls)\n                    \n                \n                        \n                            \n                                Defined in lib/scene.ts:21\n                            \n                        \n\n                \n                    \n                            Initialize Scene object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        game\n                                                  \n                                                        \n                                                                        Game\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to the game.\n\n                                                        \n                                                \n                                                \n                                                        onSceneComplete\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Function to call on scene completion.\n\n                                                        \n                                                \n                                                \n                                                        controls\n                                                  \n                                                        \n                                                                        Controls\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object with possible controls.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            controls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Controls\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:19\n                            \n                        \n\n                \n                    \n                        The game controls to be used. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            game\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Game\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:17\n                            \n                        \n\n                \n                    \n                        The game object. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSceneComplete\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:21\n                            \n                        \n\n                \n                    \n                        Function to call when the scene is completed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:29\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:40\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:54\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, Game } from '.'\nimport { Controls } from './controls/controls'\n\n/**\n * A unique [[Container]] with a reference to the game and controls,\n * and a callback for the completion of the scene.\n *\n * To be implemented as your unique scenes.\n *\n * @category kilo\n */\nexport abstract class Scene extends Container {\n  /** The game object. */\n  game: Game\n  /** The game controls to be used. */\n  controls: Controls\n  /** Function to call when the scene is completed. */\n  onSceneComplete: Function\n\n  /**\n   * Initialize Scene object.\n   *\n   * @param game Reference to the game.\n   * @param onSceneComplete Function to call on scene completion.\n   * @param controls Object with possible controls.\n   */\n  constructor(game: Game, onSceneComplete: Function, controls?: Controls) {\n    super()\n\n    this.game = game\n    this.controls = controls\n\n    this.onSceneComplete = onSceneComplete\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Scripts.html":{"url":"interfaces/Scripts.html","title":"interface - Scripts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Scripts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/shader-program.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fragment\n                                \n                                \n                                        vertex\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fragment\n                                    \n                                \n                                \n                                    \n                                        fragment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vertex\n                                    \n                                \n                                \n                                    \n                                        vertex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Scripts {\n  vertex: string\n  fragment: string\n}\n\n/**\n * Thin wrapper around WebGLProgram, and WebGLShader to simplify usage.\n *\n * @category kilo/renderer/webgl\n */\nexport class ShaderProgram {\n  private gl: WebGLRenderingContext\n  private _program: WebGLProgram\n  private attributes: { [name: string]: number }\n  private uniforms: { [name: string]: WebGLUniformLocation }\n  private name: string\n\n  /**\n   * Gets the compiled WebGLProgram.\n   */\n  get program() {\n    return this._program\n  }\n\n  /**\n   * Initialize ShaderProgram object.\n   *\n   * @param gl WebGLRenderingContext to use for the shaders and program.\n   * @param scripts Sources for both vertex and fragment shaders to be used.\n   * @param name The name of the program (useful in debugging).\n   */\n  constructor(gl: WebGLRenderingContext, scripts: Scripts, name = 'default') {\n    this.gl = gl\n    this.name = name\n    this.attributes = {}\n    this.uniforms = {}\n\n    this.load(scripts.vertex, scripts.fragment)\n  }\n\n  /**\n   * Gets the attribute location for the provided name.\n   *\n   * @param name Name of the attribute to locate.\n   *\n   * @throws Error if no attribute with the provided name.\n   */\n  getAttribLocation(name: string) {\n    if (this.attributes[name] === undefined) {\n      throw new Error(`Unknown attribute ${name} in shader program ${this.name}.`)\n    }\n\n    return this.attributes[name]\n  }\n\n  /**\n   * Gets the uniform location for the provided name.\n   *\n   * @param name Name of the uniform to locate.\n   *\n   * @throws Error if no uniform with the provided name.\n   */\n  getUniformLocation(name: string) {\n    if (this.uniforms[name] === undefined) {\n      throw new Error(`Unknown uniform ${name} in shader program ${this.name}.`)\n    }\n\n    return this.uniforms[name]\n  }\n\n  /**\n   * Loads the provided sources into a compiled program.\n   *\n   * @param vertexSource Source for the vertex shader.\n   * @param fragmentSource Source for the fragment shader.\n   */\n  protected load(vertexSource: string, fragmentSource: string) {\n    const vertexShader =\n      this.loadShader(vertexSource, this.gl.VERTEX_SHADER)\n    const fragmentShader =\n      this.loadShader(fragmentSource, this.gl.FRAGMENT_SHADER)\n\n    this.createProgram(vertexShader, fragmentShader)\n    this.initWebGl()\n  }\n\n  private initWebGl() {\n    const { gl } = this\n\n    gl.clearColor(0, 0, 0, 1)\n\n    gl.enable(gl.BLEND)\n    gl.blendEquation(gl.FUNC_ADD)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.DEPTH_TEST)\n  }\n\n  private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const { gl } = this\n    this._program = gl.createProgram()\n\n    gl.attachShader(this.program, vertexShader)\n    gl.attachShader(this.program, fragmentShader)\n    gl.linkProgram(this.program)\n\n    const success = gl.getProgramParameter(this.program, gl.LINK_STATUS)\n    if (!success) {\n      const message = gl.getProgramInfoLog(this.program)\n      gl.deleteProgram(this.program)\n\n      throw new Error(message)\n    }\n\n    this.findAttributes()\n    this.findUniforms()\n  }\n\n  private loadShader(source: string, shaderType: number): WebGLShader {\n    const { gl } = this\n    const shader = gl.createShader(shaderType)\n\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n      const message = gl.getShaderInfoLog(shader)\n      gl.deleteShader(shader)\n\n      throw new Error(message)\n    }\n\n    return shader\n  }\n\n  private findAttributes() {\n    const { gl, program } = this\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShaderProgram.html":{"url":"classes/ShaderProgram.html","title":"class - ShaderProgram","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShaderProgram\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/shader-program.ts\n        \n\n            \n                Description\n            \n            \n                Thin wrapper around WebGLProgram, and WebGLShader to simplify usage.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _program\n                            \n                            \n                                    Private\n                                attributes\n                            \n                            \n                                    Private\n                                gl\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                uniforms\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createProgram\n                            \n                            \n                                    Private\n                                findAttributes\n                            \n                            \n                                    Private\n                                findUniforms\n                            \n                            \n                                getAttribLocation\n                            \n                            \n                                getUniformLocation\n                            \n                            \n                                    Private\n                                initWebGl\n                            \n                            \n                                    Protected\n                                load\n                            \n                            \n                                    Private\n                                loadShader\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    program\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gl: WebGLRenderingContext, scripts: Scripts, name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl/shader-program.ts:30\n                            \n                        \n\n                \n                    \n                            Initialize ShaderProgram object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gl\n                                                  \n                                                        \n                                                                    WebGLRenderingContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                WebGLRenderingContext to use for the shaders and program.\n\n                                                        \n                                                \n                                                \n                                                        scripts\n                                                  \n                                                        \n                                                                        Scripts\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sources for both vertex and fragment shaders to be used.\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the program (useful in debugging).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _program\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLProgram\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/shader-program.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            attributes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/shader-program.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderingContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/shader-program.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/shader-program.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            uniforms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/shader-program.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            createProgram\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertexShader\n                                    \n                                            WebGLShader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fragmentShader\n                                    \n                                            WebGLShader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            findAttributes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAttributes()\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            findUniforms\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUniforms()\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAttribLocation\n                        \n                        \n                    \n                \n            \n            \n                \ngetAttribLocation(name: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:55\n                \n            \n\n\n            \n                \n                    Gets the attribute location for the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the attribute to locate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUniformLocation\n                        \n                        \n                    \n                \n            \n            \n                \ngetUniformLocation(name: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:70\n                \n            \n\n\n            \n                \n                    Gets the uniform location for the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the uniform to locate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initWebGl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initWebGl()\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(vertexSource: string, fragmentSource: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:84\n                \n            \n\n\n            \n                \n                    Loads the provided sources into a compiled program.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexSource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Source for the vertex shader.\n\n                                    \n                                \n                                \n                                    fragmentSource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Source for the fragment shader.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadShader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadShader(source: string, shaderType: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shaderType\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     WebGLShader\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        program\n                    \n                \n\n                \n                    \n                        getprogram()\n                    \n                \n                            \n                                \n                                    Defined in lib/renderer/webgl/shader-program.ts:28\n                                \n                            \n                    \n                        \n                                Gets the compiled WebGLProgram.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export interface Scripts {\n  vertex: string\n  fragment: string\n}\n\n/**\n * Thin wrapper around WebGLProgram, and WebGLShader to simplify usage.\n *\n * @category kilo/renderer/webgl\n */\nexport class ShaderProgram {\n  private gl: WebGLRenderingContext\n  private _program: WebGLProgram\n  private attributes: { [name: string]: number }\n  private uniforms: { [name: string]: WebGLUniformLocation }\n  private name: string\n\n  /**\n   * Gets the compiled WebGLProgram.\n   */\n  get program() {\n    return this._program\n  }\n\n  /**\n   * Initialize ShaderProgram object.\n   *\n   * @param gl WebGLRenderingContext to use for the shaders and program.\n   * @param scripts Sources for both vertex and fragment shaders to be used.\n   * @param name The name of the program (useful in debugging).\n   */\n  constructor(gl: WebGLRenderingContext, scripts: Scripts, name = 'default') {\n    this.gl = gl\n    this.name = name\n    this.attributes = {}\n    this.uniforms = {}\n\n    this.load(scripts.vertex, scripts.fragment)\n  }\n\n  /**\n   * Gets the attribute location for the provided name.\n   *\n   * @param name Name of the attribute to locate.\n   *\n   * @throws Error if no attribute with the provided name.\n   */\n  getAttribLocation(name: string) {\n    if (this.attributes[name] === undefined) {\n      throw new Error(`Unknown attribute ${name} in shader program ${this.name}.`)\n    }\n\n    return this.attributes[name]\n  }\n\n  /**\n   * Gets the uniform location for the provided name.\n   *\n   * @param name Name of the uniform to locate.\n   *\n   * @throws Error if no uniform with the provided name.\n   */\n  getUniformLocation(name: string) {\n    if (this.uniforms[name] === undefined) {\n      throw new Error(`Unknown uniform ${name} in shader program ${this.name}.`)\n    }\n\n    return this.uniforms[name]\n  }\n\n  /**\n   * Loads the provided sources into a compiled program.\n   *\n   * @param vertexSource Source for the vertex shader.\n   * @param fragmentSource Source for the fragment shader.\n   */\n  protected load(vertexSource: string, fragmentSource: string) {\n    const vertexShader =\n      this.loadShader(vertexSource, this.gl.VERTEX_SHADER)\n    const fragmentShader =\n      this.loadShader(fragmentSource, this.gl.FRAGMENT_SHADER)\n\n    this.createProgram(vertexShader, fragmentShader)\n    this.initWebGl()\n  }\n\n  private initWebGl() {\n    const { gl } = this\n\n    gl.clearColor(0, 0, 0, 1)\n\n    gl.enable(gl.BLEND)\n    gl.blendEquation(gl.FUNC_ADD)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.DEPTH_TEST)\n  }\n\n  private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const { gl } = this\n    this._program = gl.createProgram()\n\n    gl.attachShader(this.program, vertexShader)\n    gl.attachShader(this.program, fragmentShader)\n    gl.linkProgram(this.program)\n\n    const success = gl.getProgramParameter(this.program, gl.LINK_STATUS)\n    if (!success) {\n      const message = gl.getProgramInfoLog(this.program)\n      gl.deleteProgram(this.program)\n\n      throw new Error(message)\n    }\n\n    this.findAttributes()\n    this.findUniforms()\n  }\n\n  private loadShader(source: string, shaderType: number): WebGLShader {\n    const { gl } = this\n    const shader = gl.createShader(shaderType)\n\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n      const message = gl.getShaderInfoLog(shader)\n      gl.deleteShader(shader)\n\n      throw new Error(message)\n    }\n\n    return shader\n  }\n\n  private findAttributes() {\n    const { gl, program } = this\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sound.html":{"url":"classes/Sound.html","title":"class - Sound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound.ts\n        \n\n            \n                Description\n            \n            \n                Provides sounds for your game!\nExample\n```typescript\n\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                audio\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                playing\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    volume\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string, options: SoundOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound.ts:50\n                            \n                        \n\n                \n                    \n                            Initialize Sound object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Source for the sound.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SoundOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initial options for the sound.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            audio\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLAudioElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SoundOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            playing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound.ts:33\n                            \n                        \n\n                \n                    \n                        Whether or not the sound is currently playing. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(overrides?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound.ts:83\n                \n            \n\n\n            \n                \n                    Play the sound from the beginning.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overrides\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Overriding options for the sound.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound.ts:96\n                \n            \n\n\n            \n                \n                    Stop the sound from playing.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        volume\n                    \n                \n\n                \n                    \n                        getvolume()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/sound.ts:41\n                                \n                            \n                    \n                        \n                                Gets the current volume setting.\n\n\n                        \n                    \n\n                \n                    \n                        setvolume(volume)\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/sound.ts:48\n                                \n                            \n                    \n                        \n                                Sets the volume of the sound.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            volume\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Assets } from '../assets'\n\n/**\n * Options for a Sound object.\n *\n * @category kilo/sound\n */\nexport interface SoundOptions {\n  /** Volume of the sound (from 0 to 1). */\n  volume: number,\n  /** Whether or not the sound loops. */\n  loop: boolean\n}\n\n/**\n * Provides sounds for your game!\n *\n * ### Example\n * ```typescript\n * const ding = new Sound('assets/sounds/ding.ogg')\n *\n * // When the sound should play.\n * ding.play()\n * ```\n *\n * @category kilo/sound\n */\nexport class Sound {\n  /** Whether or not the sound is currently playing. */\n  playing: boolean\n\n  private options: SoundOptions\n  private audio: HTMLAudioElement\n\n  /**\n   * Gets the current volume setting.\n   */\n  get volume() {\n    return this.audio.volume\n  }\n\n  /**\n   * Sets the volume of the sound.\n   */\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume\n  }\n\n  /**\n   * Initialize Sound object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   */\n  constructor(src: string, options: SoundOptions = { volume: 1, loop: false }) {\n    this.playing = false\n    this.options = options\n\n    const assets = new Assets()\n    const audio = assets.sound(src)\n\n    audio.loop = options.loop\n\n    audio.addEventListener('error', () => {\n      throw Error(`Error loading audio: ${src}`)\n    }, false)\n\n    audio.addEventListener('ended', () => {\n      this.playing = false\n    }, false)\n\n    this.audio = audio\n  }\n\n  /**\n   * Play the sound from the beginning.\n   *\n   * @param overrides Overriding options for the sound.\n   */\n  play(overrides?: SoundOptions) {\n    const opts = Object.assign({ time: 0 }, this.options, overrides)\n\n    this.audio.volume = opts.volume\n    this.audio.currentTime = opts.time\n\n    this.audio.play()\n    this.playing = true\n  }\n\n  /**\n   * Stop the sound from playing.\n   */\n  stop() {\n    this.audio.pause()\n    this.playing = false\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SoundGroup.html":{"url":"classes/SoundGroup.html","title":"class - SoundGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SoundGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound-group.ts\n        \n\n            \n                Description\n            \n            \n                Plays a random sound from an array of sounds.\nExample\n```typescript\n\nconst ding = new SoundGroup([\nnew Sound('assets/sounds/ding1.ogg'),\nnew Sound('assets/sounds/ding2.ogg'),\nnew Sound('assets/sounds/ding3.ogg'),\nnew Sound('assets/sounds/ding4.ogg')\n])\n\n// When one of the sounds should play.\nding.play()\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                sounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sounds: Sound[])\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound-group.ts:26\n                            \n                        \n\n                \n                    \n                            Initialize SoundGroup object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sounds\n                                                  \n                                                        \n                                                                        Sound[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Array of sounds to select from on play.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sound[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound-group.ts:26\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(opts?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-group.ts:42\n                \n            \n\n\n            \n                \n                    Play a random sound from the group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Overriding options for the sound.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-group.ts:49\n                \n            \n\n\n            \n                \n                    Stop all sounds from playing.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sound, SoundOptions } from './sound'\nimport { math } from '../utils'\n\n/**\n * Plays a random sound from an array of sounds.\n *\n * ### Example\n * ```typescript\n * const ding = new SoundGroup([\n *   new Sound('assets/sounds/ding1.ogg'),\n *   new Sound('assets/sounds/ding2.ogg'),\n *   new Sound('assets/sounds/ding3.ogg'),\n *   new Sound('assets/sounds/ding4.ogg')\n * ])\n *\n * // When one of the sounds should play.\n * ding.play()\n * ```\n *\n * @category kilo/sound\n */\nexport class SoundGroup {\n  private sounds: Sound[]\n\n  /**\n   * Initialize SoundGroup object.\n   *\n   * @param sounds Array of sounds to select from on play.\n   */\n  constructor(sounds: Sound[]) {\n    this.sounds = sounds\n  }\n\n  /**\n   * Play a random sound from the group.\n   *\n   * @param opts Overriding options for the sound.\n   */\n  play(opts?: SoundOptions) {\n    math.randOneFrom(this.sounds).play(opts)\n  }\n\n  /**\n   * Stop all sounds from playing.\n   */\n  stop() {\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoundOptions.html":{"url":"interfaces/SoundOptions.html","title":"interface - SoundOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoundOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound.ts\n        \n\n            \n                Description\n            \n            \n                Options for a Sound object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        loop\n                                \n                                \n                                        volume\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        loop\n                                    \n                                \n                                \n                                    \n                                        loop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the sound loops. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Volume of the sound (from 0 to 1). \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Assets } from '../assets'\n\n/**\n * Options for a Sound object.\n *\n * @category kilo/sound\n */\nexport interface SoundOptions {\n  /** Volume of the sound (from 0 to 1). */\n  volume: number,\n  /** Whether or not the sound loops. */\n  loop: boolean\n}\n\n/**\n * Provides sounds for your game!\n *\n * ### Example\n * ```typescript\n * const ding = new Sound('assets/sounds/ding.ogg')\n *\n * // When the sound should play.\n * ding.play()\n * ```\n *\n * @category kilo/sound\n */\nexport class Sound {\n  /** Whether or not the sound is currently playing. */\n  playing: boolean\n\n  private options: SoundOptions\n  private audio: HTMLAudioElement\n\n  /**\n   * Gets the current volume setting.\n   */\n  get volume() {\n    return this.audio.volume\n  }\n\n  /**\n   * Sets the volume of the sound.\n   */\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume\n  }\n\n  /**\n   * Initialize Sound object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   */\n  constructor(src: string, options: SoundOptions = { volume: 1, loop: false }) {\n    this.playing = false\n    this.options = options\n\n    const assets = new Assets()\n    const audio = assets.sound(src)\n\n    audio.loop = options.loop\n\n    audio.addEventListener('error', () => {\n      throw Error(`Error loading audio: ${src}`)\n    }, false)\n\n    audio.addEventListener('ended', () => {\n      this.playing = false\n    }, false)\n\n    this.audio = audio\n  }\n\n  /**\n   * Play the sound from the beginning.\n   *\n   * @param overrides Overriding options for the sound.\n   */\n  play(overrides?: SoundOptions) {\n    const opts = Object.assign({ time: 0 }, this.options, overrides)\n\n    this.audio.volume = opts.volume\n    this.audio.currentTime = opts.time\n\n    this.audio.play()\n    this.playing = true\n  }\n\n  /**\n   * Stop the sound from playing.\n   */\n  stop() {\n    this.audio.pause()\n    this.playing = false\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SoundPool.html":{"url":"classes/SoundPool.html","title":"class - SoundPool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SoundPool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound-pool.ts\n        \n\n            \n                Description\n            \n            \n                A pool of sound objects to allow playing multiples of the same sound.\nExample\n```typescript\n\nconst dings = new SoundPool('assets/sounds/ding.ogg')\n\n// When the sound should play (and may already be playing).\ndings.play()\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                count\n                            \n                            \n                                    Private\n                                sounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string, poolSize: number, options: SoundOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound-pool.ts:21\n                            \n                        \n\n                \n                    \n                            Initialize SoundPool object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Source for the sound.\n\n                                                        \n                                                \n                                                \n                                                        poolSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Number of sound instances in the pool.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SoundOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initial options for the sound.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound-pool.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sound[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound-pool.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(options?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-pool.ts:45\n                \n            \n\n\n            \n                \n                    Play the next sound in the pool.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-pool.ts:54\n                \n            \n\n\n            \n                \n                    Stop all sounds in the pool.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sound, SoundOptions } from './sound'\n\n/**\n * A pool of sound objects to allow playing multiples of the same sound.\n *\n * ### Example\n * ```typescript\n * const dings = new SoundPool('assets/sounds/ding.ogg')\n *\n * // When the sound should play (and may already be playing).\n * dings.play()\n * ```\n *\n * @category kilo/sound\n */\nexport class SoundPool {\n  private count: number\n  private sounds: Sound[]\n\n  /**\n   * Initialize SoundPool object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   * @param poolSize Number of sound instances in the pool.\n   */\n  constructor(src: string, poolSize = 3,\n              options: SoundOptions = { volume: 1, loop: false }) {\n    this.count = 0\n    this.sounds = []\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sprite.html":{"url":"classes/Sprite.html","title":"class - Sprite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sprite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/sprite.ts\n        \n\n            \n                Description\n            \n            \n                An entity with additional properties for collision testing and display.\nExample\n```typescript\n\n// A 32x32 image is loaded into a texture, then the sprite\n// is created from that texture\nconst texture = new Texture('assets/images/bullet.png')\nconst bullet = new Sprite(texture)\n\n// Can also be combined into one line, e.g.\n// const bullet = new Sprite(new Texture('assets/images/bullet.png'))\n\n// Properties can then be set on the sprite.\nbullet.hitBox.set(4, 2, 16, 12)\nbullet.anchor.set(16, 16)\n```\n\n\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _anchor\n                            \n                            \n                                    Private\n                                _height\n                            \n                            \n                                    Private\n                                _pivot\n                            \n                            \n                                    Private\n                                _texture\n                            \n                            \n                                    Private\n                                _width\n                            \n                            \n                                    Public\n                                hitBox\n                            \n                            \n                                    Public\n                                rotation\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    texture\n                                \n                                \n                                    anchor\n                                \n                                \n                                    pivot\n                                \n                                \n                                    height\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(texture: Texture)\n                    \n                \n                        \n                            \n                                Defined in lib/types/sprite.ts:73\n                            \n                        \n\n                \n                    \n                            Initialize Sprite object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        texture\n                                                  \n                                                        \n                                                                        Texture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The texture for the sprite.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _anchor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _pivot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _texture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Texture\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hitBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HitBox\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:28\n                            \n                        \n\n                \n                    \n                        The hitbox of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rotation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:30\n                            \n                        \n\n                \n                    \n                        The rotation of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/sprite.ts:99\n                \n            \n\n\n            \n                \n                    Empty implementation from extending [[Entity]].\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        texture\n                    \n                \n\n                \n                    \n                        gettexture()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:41\n                                \n                            \n                    \n                        \n                                Gets the texture. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        anchor\n                    \n                \n\n                \n                    \n                        getanchor()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:46\n                                \n                            \n                    \n                        \n                                Gets the anchor point. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pivot\n                    \n                \n\n                \n                    \n                        getpivot()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:51\n                                \n                            \n                    \n                        \n                                Gets the pivot point (used for rotations). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:56\n                                \n                            \n                    \n                        \n                                Gets the height. \n\n\n                        \n                    \n\n                \n                    \n                        setheight(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:66\n                                \n                            \n                    \n                        \n                                Sets the height. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:61\n                                \n                            \n                    \n                        \n                                Gets the width. \n\n\n                        \n                    \n\n                \n                    \n                        setwidth(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:71\n                                \n                            \n                    \n                        \n                                Sets the width. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Entity, Vec, Texture, HitBox } from '.'\n\n/**\n * An entity with additional properties for collision testing and display.\n *\n * ### Example\n * ```typescript\n * // A 32x32 image is loaded into a texture, then the sprite\n * // is created from that texture\n * const texture = new Texture('assets/images/bullet.png')\n * const bullet = new Sprite(texture)\n *\n * // Can also be combined into one line, e.g.\n * // const bullet = new Sprite(new Texture('assets/images/bullet.png'))\n *\n * // Properties can then be set on the sprite.\n * bullet.hitBox.set(4, 2, 16, 12)\n * bullet.anchor.set(16, 16)\n * ```\n *\n * @category kilo/types\n */\nexport class Sprite extends Entity {\n  /** The hitbox of the sprite. */\n  public hitBox: HitBox\n  /** The rotation of the sprite. */\n  public rotation: number\n\n  private _texture: Texture\n\n  private _anchor: Vec\n  private _pivot: Vec\n\n  private _height: number\n  private _width: number\n\n  /** Gets the texture. */\n  get texture() {\n    return this._texture\n  }\n\n  /** Gets the anchor point. */\n  get anchor() {\n    return this._anchor\n  }\n\n  /** Gets the pivot point (used for rotations). */\n  get pivot() {\n    return this._pivot\n  }\n\n  /** Gets the height. */\n  get height() {\n    return this._height\n  }\n\n  /** Gets the width. */\n  get width() {\n    return this._width\n  }\n\n  /** Sets the height. */\n  set height(value) {\n    this._height = value\n  }\n\n  /** Sets the width. */\n  set width(value) {\n    this._width = value\n  }\n\n  /**\n   * Initialize Sprite object.\n   *\n   * @param texture The texture for the sprite.\n   */\n  constructor(texture: Texture) {\n    super()\n\n    this._texture = texture\n    this._anchor = new Vec()\n    this._pivot = new Vec()\n    this._height = 0\n    this._width = 0\n\n    this.hitBox = new HitBox(0, 0, 0, 0)\n    this.rotation = 0\n  }\n\n  /**\n   * Empty implementation from extending [[Entity]].\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/state.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first\n                            \n                            \n                                    Private\n                                justSetState\n                            \n                            \n                                    Private\n                                last\n                            \n                            \n                                    Private\n                                lastTime\n                            \n                            \n                                    Private\n                                state\n                            \n                            \n                                time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                get\n                            \n                            \n                                is\n                            \n                            \n                                isIn\n                            \n                            \n                                set\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: EnumType)\n                    \n                \n                        \n                            \n                                Defined in lib/state.ts:53\n                            \n                        \n\n                \n                    \n                            Initialize State object.\nExample\n```typescript\n\nconst state = new State(MyEnum.StateOne)\n```\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                    EnumType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The initial state to set.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            first\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:48\n                            \n                        \n\n                \n                    \n                        Whether this is the first frame of the current state. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            justSetState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            last\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EnumType\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            lastTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EnumType\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:46\n                            \n                        \n\n                \n                    \n                        Number of seconds in the current state. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            back\n                        \n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:72\n                \n            \n\n\n            \n                \n                    Return to the previous state (if there is one).\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:99\n                \n            \n\n\n            \n                \n                    Get the current state.\n\n\n                    \n                        Returns :     EnumType\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            is\n                        \n                        \n                    \n                \n            \n            \n                \nis(state: EnumType)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:121\n                \n            \n\n\n            \n                \n                    Whether the current state is the one provided.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            EnumType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State to check for.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isIn\n                        \n                        \n                    \n                \n            \n            \n                \nisIn(...states: EnumType[])\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:129\n                \n            \n\n\n            \n                \n                    Whether the current state is one of the provided states.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    states\n                                    \n                                            EnumType[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of possible states.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(state: EnumType)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:87\n                \n            \n\n\n            \n                \n                    Set the current state and store the previous state to allow going back.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            EnumType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state to change to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:110\n                \n            \n\n\n            \n                \n                    Update the state.\nShould be called in parent object's update function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class State {\n  /** Number of seconds in the current state. */\n  time: number\n  /** Whether this is the first frame of the current state. */\n  first: boolean\n\n  private last: EnumType\n  private lastTime: number\n  private state: EnumType\n  private justSetState: boolean\n\n  /**\n   * Initialize State object.\n   *\n   * #### Example\n   * ```typescript\n   * const state = new State(MyEnum.StateOne)\n   * ```\n   *\n   * @param state The initial state to set.\n   */\n  constructor(state: EnumType) {\n    this.set(state)\n  }\n\n  /**\n   * Return to the previous state (if there is one).\n   */\n  back() {\n    if (this.last === undefined) return\n\n    this.state = this.last\n    this.last = null\n\n    this.time = this.lastTime\n    this.justSetState = false\n  }\n\n  /**\n   * Set the current state and store the previous state to allow going back.\n   *\n   * @param state The new state to change to.\n   */\n  set(state: EnumType) {\n    this.last = this.state\n    this.lastTime = this.time || 0\n\n    this.state = state\n    this.time = 0\n    this.justSetState = true\n  }\n\n  /**\n   * Get the current state.\n   */\n  get() {\n    return this.state\n  }\n\n  /**\n   * Update the state.\n   *\n   * Should be called in parent object's update function.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    this.first = this.justSetState\n    this.time += this.first ? 0 : dt\n    this.justSetState = false\n  }\n\n  /**\n   * Whether the current state is the one provided.\n   *\n   * @param state State to check for.\n   */\n  is(state: EnumType) {\n    return this.state === state\n  }\n\n  /**\n   * Whether the current state is one of the provided states.\n   * @param states Array of possible states.\n   */\n  isIn(...states: EnumType[]) {\n    let found = false\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Text.html":{"url":"classes/Text.html","title":"class - Text","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Text\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/text.ts\n        \n\n            \n                Description\n            \n            \n                Displays text on the canvas.\nExample\n```typescript\n\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n```\n\n\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                style\n                            \n                            \n                                text\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(text: string, style: TextOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/types/text.ts:36\n                            \n                        \n\n                \n                    \n                            Initialize Text object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The text to display.\n\n                                                        \n                                                \n                                                \n                                                        style\n                                                  \n                                                        \n                                                                        TextOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The styles used for the text.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TextOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/text.ts:36\n                            \n                        \n\n                \n                    \n                        The styles used for the text. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/text.ts:34\n                            \n                        \n\n                \n                    \n                        The text to display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/text.ts:57\n                \n            \n\n\n            \n                \n                    Empty implementation from extending [[Entity]].\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity } from '.'\n\n/**\n * Options for text display.\n *\n * @category kilo/types\n */\nexport interface TextOptions {\n  /** The font to use. */\n  font: string,\n  /** The text fill color. */\n  fill: string,\n  /** Alignment for the text. */\n  align?: CanvasTextAlign\n}\n\n/**\n * Displays text on the canvas.\n *\n * ### Example\n * ```typescript\n * const text = new Text('Hello world.', { '20px monospace', '#333' })\n * text.pos.set(20, 20)\n * ```\n *\n * @remarks When using WebGL for rendering a second canvas is used for text.\n * @category kilo/types\n */\nexport class Text extends Entity {\n  /** The text to display. */\n  text: string\n  /** The styles used for the text. */\n  style: TextOptions\n\n  /**\n   * Initialize Text object.\n   *\n   * @param text The text to display.\n   * @param style The styles used for the text.\n   */\n  constructor(text: string, style: TextOptions) {\n    super()\n\n    this.text = text\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending [[Entity]].\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextOptions.html":{"url":"interfaces/TextOptions.html","title":"interface - TextOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/text.ts\n        \n\n            \n                Description\n            \n            \n                Options for text display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        align\n                                \n                                \n                                        fill\n                                \n                                \n                                        font\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        align\n                                    \n                                \n                                \n                                    \n                                        align:         CanvasTextAlign\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CanvasTextAlign\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Alignment for the text. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text fill color. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        font\n                                    \n                                \n                                \n                                    \n                                        font:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The font to use. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Entity } from '.'\n\n/**\n * Options for text display.\n *\n * @category kilo/types\n */\nexport interface TextOptions {\n  /** The font to use. */\n  font: string,\n  /** The text fill color. */\n  fill: string,\n  /** Alignment for the text. */\n  align?: CanvasTextAlign\n}\n\n/**\n * Displays text on the canvas.\n *\n * ### Example\n * ```typescript\n * const text = new Text('Hello world.', { '20px monospace', '#333' })\n * text.pos.set(20, 20)\n * ```\n *\n * @remarks When using WebGL for rendering a second canvas is used for text.\n * @category kilo/types\n */\nexport class Text extends Entity {\n  /** The text to display. */\n  text: string\n  /** The styles used for the text. */\n  style: TextOptions\n\n  /**\n   * Initialize Text object.\n   *\n   * @param text The text to display.\n   * @param style The styles used for the text.\n   */\n  constructor(text: string, style: TextOptions) {\n    super()\n\n    this.text = text\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending [[Entity]].\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Texture.html":{"url":"classes/Texture.html","title":"class - Texture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Texture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/texture.ts\n        \n\n            \n                Description\n            \n            \n                Loads an image into an HTMLImageElement and provides access to it.\nExample\n```typescript\n\nconst texture = new Texture('assets/images/tilesheet.png')\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                img\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in lib/types/texture.ts:18\n                            \n                        \n\n                \n                    \n                            Initialize Texture object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Relative path to image file.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            img\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLImageElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/texture.ts:18\n                            \n                        \n\n                \n                    \n                        The loaded image. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Game } from '..'\n\n/**\n * Loads an image into an HTMLImageElement and provides access to it.\n *\n * ### Example\n * ```typescript\n * const texture = new Texture('assets/images/tilesheet.png')\n * ```\n *\n * @category kilo/types\n */\nexport class Texture {\n  /** The loaded image. */\n  img: HTMLImageElement\n\n  /**\n   * Initialize Texture object.\n   *\n   * @param url Relative path to image file.\n   */\n  constructor(url: string) {\n    this.img = Game.assets.image(url)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextureInfo.html":{"url":"interfaces/TextureInfo.html","title":"interface - TextureInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextureInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl-renderer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        texture\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        texture\n                                    \n                                \n                                \n                                    \n                                        texture:     WebGLTexture\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     WebGLTexture\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Camera, Container, Game, Scene, TileSprite } from '../'\nimport { Entity, Sprite, Text, Rect } from '../types'\nimport { defaults, ShaderProgram, GlBuffer,  GLUtils } from './webgl'\n\ninterface TextureInfo {\n  texture: WebGLTexture\n}\n\n/**\n * Recursive rendering utilizing HTML5 canvas and WebGL.\n *\n * @category kilo/renderer\n */\nexport class WebGLRenderer extends Renderer {\n  private gl: WebGLRenderingContext\n  private ctx: CanvasRenderingContext2D\n  private shaderProgramTex: ShaderProgram\n  private shaderProgramCol: ShaderProgram\n\n  private buffers: GlBuffer\n  private textures: Map\n  private boundTexture: string\n  private globalAlpha: number\n  private game: Game\n\n    /**\n     * Initialize CanvasRenderer object.\n     *\n     * @param width Width of the canvas in pixels.\n     * @param height Height of the canvas in pixels.\n     * @param container The HTMLElement to add the canvas to.\n     */\n    constructor(width: number, height: number, container: HTMLElement) {\n      super(width, height, container)\n\n      this.gl = this.canvas.getContext('webgl', { antialias: false })\n\n      this.buffers = new GlBuffer(this.gl)\n      this.buffers.create('position')\n      this.buffers.create('texture')\n      this.buffers.create('rect')\n\n      this.createTextCanvas()\n\n      this.textures = new Map()\n      this.shaderProgramTex = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexTexture,\n        fragment: defaults.shaders.fragmentTexture,\n      }, 'default-texture')\n      this.shaderProgramCol = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexColor,\n        fragment: defaults.shaders.fragmentColor,\n      }, 'default-color')\n    }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha  6) {\n      const parts = color.split(',')\n      parts[0] = parts[0].substr(parts[0].indexOf('(') + 1)\n\n      if (parts.length > 4) {\n        throw new Error(`Invalid color string ${color}`)\n      }\n\n      if (parts.length === 3) {\n        return [\n          parseInt(parts[0]), parseInt(parts[1]),\n          parseInt(parts[2].replace(')', '')), alpha\n        ]\n      }\n\n      return [\n        parseInt(parts[0]), parseInt(parts[1]),\n        parseInt(parts[2]), parseFloat(parts[3].replace(')', ''))\n      ]\n    }\n\n    const r = parseInt(color.substr(0, 2), 16) / 255\n    const g = parseInt(color.substr(2, 2), 16) / 255\n    const b = parseInt(color.substr(4, 2), 16) / 255\n\n    return [r, g, b, alpha]\n  }\n\n  private getTexture(gl: WebGLRenderingContext, sprite: Sprite | TileSprite) {\n    if (!Game.assets.completed) {\n      return null\n    }\n\n    const { img } = sprite.texture\n\n    if (!img.complete) {\n      if (Game.debug) {\n        console.warn(`Image ${img.src} not yet loaded...`)\n      }\n\n      return null\n    }\n\n    if (this.textures.has(img.src)) {\n      const texture = this.textures.get(img.src).texture\n\n      if (this.boundTexture !== img.src) {\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        this.boundTexture = img.src\n      }\n\n      return texture\n    }\n\n    const texture = this.createTexture()\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n\n    this.textures.set(img.src, { texture })\n    this.boundTexture = img.src\n\n    return texture\n  }\n\n  private createTexture() {\n    const { gl } = this\n    const texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n    return texture\n  }\n\n  private getPositionMatrix(camera: any, sprite: Sprite | TileSprite | Rect) {\n    const hasAnchor = (sp: any) => sp.anchor && (sp.anchor.x || sp.anchor.y)\n\n    const cameraTranslation = GLUtils.getCameraTranslation(camera)\n    const projectionMatrix =\n      GLUtils.get2DProjectionMatrix(this.width, this.height)\n    const translationMatrix = hasAnchor(sprite)\n      ? GLUtils.getTranslation(sprite.pos.x + (sprite as any).anchor.x,\n                               sprite.pos.y + (sprite as any).anchor.y)\n      : GLUtils.getTranslation(sprite.pos.x, sprite.pos.y)\n    const scaleMatrix =\n      GLUtils.getScaleMatrix(sprite, sprite.width, sprite.height)\n\n    let originMatrix = GLUtils.getTranslation(0, 0)\n\n    if ((sprite instanceof Sprite || sprite instanceof TileSprite)\n        && sprite.rotation) {\n      const pivotMatrix = GLUtils.getTranslation(-sprite.pivot.x, -sprite.pivot.y)\n      const unpivotMatrix = GLUtils.getTranslation(sprite.pivot.x, sprite.pivot.y)\n\n      let rotMatrix = GLUtils.getRotation(sprite.rotation)\n      rotMatrix = GLUtils.multiplyMatrices(pivotMatrix, rotMatrix)\n\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, rotMatrix)\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, unpivotMatrix)\n    }\n\n    let posMatrix = GLUtils.multiplyMatrices(scaleMatrix, originMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, cameraTranslation)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, translationMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, projectionMatrix)\n\n    return posMatrix\n  }\n\n  private createTextCanvas() {\n    const canvas = document.createElement('canvas')\n\n    canvas.width = this.width\n    canvas.height = this.height\n\n    canvas.id = 'kilo-text-canvas'\n    canvas.style.zIndex = '1000'\n    canvas.style.position = 'absolute'\n    canvas.style.top = '0'\n    canvas.style.left = '0'\n\n    this.container.appendChild(canvas)\n    this.ctx = canvas.getContext('2d')\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tile.html":{"url":"interfaces/Tile.html","title":"interface - Tile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Tile in Tiled.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the tile in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the tile. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the tile. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /**\n   * The Tiled map.\n   */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /**\n   * A Property object in Tiled.\n   */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /**\n   * A Tile in Tiled.\n   */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TileSprite.html":{"url":"classes/TileSprite.html","title":"class - TileSprite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TileSprite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tile-sprite.ts\n        \n\n            \n                Description\n            \n            \n                An extended [[Sprite]] that adds frame data, animations, and tile size.\n\n            \n\n            \n                Extends\n            \n            \n                        Sprite\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anims\n                            \n                            \n                                frame\n                            \n                            \n                                tileHeight\n                            \n                            \n                                tileWidth\n                            \n                            \n                                    Private\n                                _anchor\n                            \n                            \n                                    Private\n                                _height\n                            \n                            \n                                    Private\n                                _pivot\n                            \n                            \n                                    Private\n                                _texture\n                            \n                            \n                                    Private\n                                _width\n                            \n                            \n                                    Public\n                                hitBox\n                            \n                            \n                                    Public\n                                rotation\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(texture: Texture, width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in lib/tile-sprite.ts:31\n                            \n                        \n\n                \n                    \n                            Initialize TileSprite object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        texture\n                                                  \n                                                        \n                                                                        Texture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Texture to use for the sprite.\n\n                                                        \n                                                \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sprite width in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sprite height in pixels.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anims\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Animations\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:16\n                            \n                        \n\n                \n                    \n                        Animations used by the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frame\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any | Point\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:14\n                            \n                        \n\n                \n                    \n                        The frame data. Should always have x and y properties. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:21\n                            \n                        \n\n                \n                    \n                        Height of the sprite in pixels \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:19\n                            \n                        \n\n                \n                    \n                        Width of the sprite in pixels \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _anchor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _pivot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _texture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Texture\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:38\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hitBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HitBox\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:28\n\n                            \n                        \n\n                \n                    \n                        The hitbox of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rotation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:30\n\n                            \n                        \n\n                \n                    \n                        The rotation of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:24\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HasUpdate[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:32\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:21\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:27\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:29\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, _: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/tile-sprite.ts:58\n                \n            \n\n\n            \n                \n                    Update the animations.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Sprite\n\n                \n            \n            \n                \n                        Defined in         Sprite:99\n\n                \n            \n\n\n            \n                \n                    Empty implementation from extending [[Entity]].\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: HasUpdate)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:67\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                HasUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HasUpdate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: HasUpdate,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:78\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:60\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/tile-sprite.ts:24\n                                \n                            \n                    \n                        \n                                Gets the width of the sprite in pixels, accounting for scale. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/tile-sprite.ts:29\n                                \n                            \n                    \n                        \n                                Gets the height of the sprite in pixels, accounting for scale. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Animations } from '.'\nimport { Point, Sprite, Texture, Vec } from './types'\n\n/**\n * An extended [[Sprite]] that adds frame data, animations, and tile size.\n *\n * @category kilo\n */\nexport class TileSprite extends Sprite {\n  /** The frame data. Should always have `x` and `y` properties. */\n  frame: any | Point\n  /** Animations used by the sprite. */\n  anims: Animations\n\n  /** Width of the sprite in pixels */\n  tileWidth: number\n  /** Height of the sprite in pixels */\n  tileHeight: number\n\n  /** Gets the width of the sprite in pixels, accounting for scale. */\n  get width () {\n    return this.tileWidth * Math.abs(this.scale.x)\n  }\n\n  /** Gets the height of the sprite in pixels, accounting for scale. */\n  get height () {\n    return this.tileHeight * Math.abs(this.scale.y)\n  }\n\n  /**\n   * Initialize TileSprite object.\n   *\n   * @param texture Texture to use for the sprite.\n   * @param width Sprite width in pixels.\n   * @param height Sprite height in pixels.\n   */\n  constructor(texture: Texture, width: number, height: number) {\n    super(texture)\n\n    this.tileWidth = width\n    this.tileHeight = height\n\n    this.frame = {}\n    this.frame.__proto__ = new Vec()\n\n    this.anims = new Animations(this.frame)\n  }\n\n  /**\n   * Update the animations.\n   *\n   * @param dt Delta time since last update.\n   * @param _ Not used\n   */\n  update(dt: number, _: number) {\n    this.anims.update(dt)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TiledMap.html":{"url":"interfaces/TiledMap.html","title":"interface - TiledMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TiledMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/tiled-parser.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a Tiled map object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        levelIndex\n                                \n                                \n                                        mapHeight\n                                \n                                \n                                        mapWidth\n                                \n                                \n                                        tileHeight\n                                \n                                \n                                        tiles\n                                \n                                \n                                        tileWidth\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getObjectByName\n                                \n                                \n                                    getObjectsByType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObjectByName\n                        \n                        \n                    \n                \n            \n            \n                \ngetObjectByName(name: string, mandatory?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/utils/tiled-parser.ts:40\n                \n            \n\n\n            \n                \n                    Gets an object from the map by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of object to get.\n\n                                    \n                                \n                                \n                                    mandatory\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Whether a missing object is an error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Tiled.Object\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObjectsByType\n                        \n                        \n                    \n                \n            \n            \n                \ngetObjectsByType(type: string, mandatory?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/utils/tiled-parser.ts:47\n                \n            \n\n\n            \n                \n                    Gets an array of objects from the map by type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type name of the objects to get.\n\n                                    \n                                \n                                \n                                    mandatory\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Whether no results is an error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Tiled.Object[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelIndex\n                                    \n                                \n                                \n                                    \n                                        levelIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Index of the level layer in tiles array. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mapHeight\n                                    \n                                \n                                \n                                    \n                                        mapHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mapWidth\n                                    \n                                \n                                \n                                    \n                                        mapWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileHeight\n                                    \n                                \n                                \n                                    \n                                        tileHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tiles\n                                    \n                                \n                                \n                                    \n                                        tiles:         TileData[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TileData[][]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of arrays of tile objects. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileWidth\n                                    \n                                \n                                \n                                    \n                                        tileWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Point } from '../types'\n\n/**\n * Type for tile data.\n *\n * @category kilo/utils\n */\nexport type TileData = { [key: string]: any, frame: Point, x: number, y: number }\n\n/**\n * Interface for a Tiled map object.\n *\n * @category kilo/utils\n */\nexport interface TiledMap {\n  /** Width of a tile in pixels. */\n  tileWidth: number\n  /** Height of a tile in pixels. */\n  tileHeight: number\n  /** Width of the map in tiles. */\n  mapWidth: number\n  /** Height of the map in tiles. */\n  mapHeight: number\n  /** Array of arrays of tile objects. */\n  tiles: TileData[][]\n  /** Index of the level layer in tiles array. */\n  levelIndex: number\n\n  /**\n   * Gets an object from the map by name.\n   *\n   * @param name Name of object to get.\n   * @param mandatory Whether a missing object is an error.\n   */\n  getObjectByName(name: string, mandatory?: boolean): Tiled.Object\n  /**\n   * Gets an array of objects from the map by type.\n   *\n   * @param type Type name of the objects to get.\n   * @param mandatory Whether no results is an error.\n   */\n  getObjectsByType(type: string, mandatory?: boolean): Tiled.Object[]\n}\n\n/**\n * Interface to add extra layers above or below the main level layer.\n *\n * @category kilo/utils\n */\nexport interface ExtraLayer {\n  /** Name of the layer to load. */\n  name: string\n  /** Whether the layer is rendered above the level or below. */\n  isAboveLevel: boolean\n}\n\nlet tileWidth: number\nlet tileHeight: number\nlet mapWidth: number\nlet mapHeight: number\nlet tilesPerRow: number\nlet levelIndex: number\n\nlet tileset: Tiled.Tileset\nlet layers: Tiled.Layer[]\nlet tilesets: Tiled.Tileset[]\nlet entities: Tiled.Object[]\n\n/**\n * Parses a Tiled map object into a simpler form.\n *\n * There must be at least two layers in the Tiled map:\n * \"level\"    - containing the tiles for the level\n * \"entities\" - containing at least one entity\n *\n * @param jsonObj Object from Tiled JSON export.\n *\n * @category kilo/utils\n */\nexport function tiledParser(jsonObj: Tiled.Map,\n                            extraLayers?: ExtraLayer[]): TiledMap {\n  tileWidth = jsonObj.tilewidth\n  tileHeight = jsonObj.tileheight\n  mapWidth = jsonObj.width\n  mapHeight = jsonObj.height\n  layers = jsonObj.layers\n  tilesets = jsonObj.tilesets\n\n  const levelLayer = getLayer('level')\n  const entitiesLayer = getLayer('entities')\n\n  tileset = getTileset()\n\n  if (!entitiesLayer.objects) {\n    throw new Error('Tiled Error: Missing entities objects.')\n  }\n\n  entities = []\n  for (let i = 0; i  {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i  {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n\nconst loadTiles = (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i  {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n\nconst getTileProps = (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i  {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i  {\n  const es = []\n  for (let i = 0; i  {\n  let ent: any\n\n  for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tileset.html":{"url":"interfaces/Tileset.html","title":"interface - Tileset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tileset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Tileset in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        columns\n                                \n                                \n                                        firstgid\n                                \n                                \n                                        image\n                                \n                                \n                                        imageheight\n                                \n                                \n                                        imagewidth\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        tileheight\n                                \n                                \n                                            Optional\n                                        tiles\n                                \n                                \n                                        tilewidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                    \n                                \n                                \n                                    \n                                        columns:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of columns in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstgid\n                                    \n                                \n                                \n                                    \n                                        firstgid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The first global ID in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Source image for the tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageheight\n                                    \n                                \n                                \n                                    \n                                        imageheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the image in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagewidth\n                                    \n                                \n                                \n                                    \n                                        imagewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the image in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileheight\n                                    \n                                \n                                \n                                    \n                                        tileheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tiles\n                                    \n                                \n                                \n                                    \n                                        tiles:         Tile[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tile[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If set, an array of Tile data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilewidth\n                                    \n                                \n                                \n                                    \n                                        tilewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /**\n   * The Tiled map.\n   */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /**\n   * A Property object in Tiled.\n   */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /**\n   * A Tile in Tiled.\n   */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timer.html":{"url":"classes/Timer.html","title":"class - Timer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/timer.ts\n        \n\n            \n                Description\n            \n            \n                Countdown timer that calls a function on each tick, and optionally\non completion.\nExample\n```typescript\n\n// Moving a sprite into position on a game scene over 2 seconds,\n// with a half-second delay before starting.\nconst timer = new Timer((r: number) =>\n(sprite.pos.y = elasticOut(r) * game.height - game.height / 1.6),\n() => {}, 2, .5\n)\n```\n\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dead\n                            \n                            \n                                    Private\n                                delay\n                            \n                            \n                                    Private\n                                duration\n                            \n                            \n                                    Private\n                                elapsed\n                            \n                            \n                                    Private\n                                onDone\n                            \n                            \n                                    Private\n                                onTick\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(onTick: TickFunc, onDone?: Function, duration: number, delay: number)\n                    \n                \n                        \n                            \n                                Defined in lib/timer.ts:37\n                            \n                        \n\n                \n                    \n                            Initialize Timer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        onTick\n                                                  \n                                                        \n                                                                        TickFunc\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Function called every tick (core loop update).\n\n                                                        \n                                                \n                                                \n                                                        onDone\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function called on timer completion.\n\n                                                        \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds for the timer to run.\n\n                                                        \n                                                \n                                                \n                                                        delay\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds to wait before starting timer.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:28\n                            \n                        \n\n                \n                    \n                        Used by core loop to remove the object when dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            delay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            duration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            elapsed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTick\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:30\n                            \n                        \n\n                \n                    \n                        Used by core loop to skip rendering. False, unless changed by user. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/timer.ts:66\n                \n            \n\n\n            \n                \n                    Called by core loop each tick.\nUpdates internal state and calls onTick or onDone functions as needed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        type TickFunc = (r: number) => void\n\n/**\n * Countdown timer that calls a function on each tick, and optionally\n * on completion.\n *\n * ### Example\n * ```typescript\n * // Moving a sprite into position on a game scene over 2 seconds,\n * // with a half-second delay before starting.\n * const timer = new Timer((r: number) =>\n *   (sprite.pos.y = elasticOut(r) * game.height - game.height / 1.6),\n *   () => {}, 2, .5\n * )\n * ```\n *\n * @category kilo\n */\nexport class Timer {\n  /** Used by core loop to remove the object when dead. */\n  dead: boolean\n  /** Used by core loop to skip rendering. False, unless changed by user. */\n  visible: boolean\n\n  private elapsed: number\n  private duration: number\n  private delay: number\n\n  private onTick: Function\n  private onDone: Function\n\n  /**\n   * Initialize Timer object.\n   *\n   * @param duration Time in seconds for the timer to run.\n   * @param onTick Function called every tick (core loop update).\n   * @param onDone Function called on timer completion.\n   * @param delay Time in seconds to wait before starting timer.\n   */\n  constructor(onTick: TickFunc, onDone?: Function, duration = 1, delay = 0) {\n    this.elapsed = 0\n    this.duration = duration\n    this.delay = delay\n\n    this.dead = false\n    this.visible = false\n\n    this.onTick = onTick\n    this.onDone = onDone\n  }\n\n  /**\n   * Called by core loop each tick.\n   *\n   * Updates internal state and calls `onTick` or `onDone` functions as needed.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.delay > 0) {\n      this.delay -= dt\n      return\n    }\n\n    this.elapsed += dt\n    const ratio = this.elapsed / this.duration\n\n    if (ratio >= 1) {\n      this.onDone && this.onDone()\n      this.dead = true\n\n      return\n    }\n\n    this.onTick && this.onTick(ratio)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vec.html":{"url":"classes/Vec.html","title":"class - Vec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/vec.ts\n        \n\n            \n                Description\n            \n            \n                Simple 2D vector that provides vector math helpers.\nMost methods are chainable.\nExample\n```typescript\n\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n```\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            Point\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                copy\n                            \n                            \n                                divide\n                            \n                            \n                                dot\n                            \n                            \n                                    Static\n                                from\n                            \n                            \n                                mag\n                            \n                            \n                                multiply\n                            \n                            \n                                normalize\n                            \n                            \n                                set\n                            \n                            \n                                subtract\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(x: number, y: number)\n                    \n                \n                        \n                            \n                                Defined in lib/types/vec.ts:45\n                            \n                        \n\n                \n                    \n                            Initialize Vec object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        x\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                X coordinate value.\n\n                                                        \n                                                \n                                                \n                                                        y\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Y coordinate value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/vec.ts:34\n                            \n                        \n\n                \n                    \n                        X coordinate value. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/vec.ts:36\n                            \n                        \n\n                \n                    \n                        Y coordinate value. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(undefined: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:94\n                \n            \n\n\n            \n                \n                    Adds the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clone\n                        \n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:84\n                \n            \n\n\n            \n                \n                    Creates a cloned copy of the Vec.\n\n\n                    \n                        Returns :         Vec\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \ncopy(undefined: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:77\n                \n            \n\n\n            \n                \n                    Copies the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            divide\n                        \n                        \n                    \n                \n            \n            \n                \ndivide(s: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:131\n                \n            \n\n\n            \n                \n                    Divides the x and y values by the provided value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scalar value to divide by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dot\n                        \n                        \n                    \n                \n            \n            \n                \ndot(undefined: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:164\n                \n            \n\n\n            \n                \n                    Gets the dot product of two Vecs.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            from\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    from(v: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:43\n                \n            \n\n\n            \n                \n                    Creates a new Vec from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Vec to copy into new Vec.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Vec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mag\n                        \n                        \n                    \n                \n            \n            \n                \nmag()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:141\n                \n            \n\n\n            \n                \n                    Gets the magnitude of the Vec.\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            multiply\n                        \n                        \n                    \n                \n            \n            \n                \nmultiply(s: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:119\n                \n            \n\n\n            \n                \n                    Multiplies the x and y values by the provided value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scalar value to multiply.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            normalize\n                        \n                        \n                    \n                \n            \n            \n                \nnormalize()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:148\n                \n            \n\n\n            \n                \n                    Gets the normal of the Vec.\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:64\n                \n            \n\n\n            \n                \n                    Set the coordinates of the Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        X coordinate value.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Y coordinate value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subtract\n                        \n                        \n                    \n                \n            \n            \n                \nsubtract(undefined: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:107\n                \n            \n\n\n            \n                \n                    Subtracts the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:173\n                \n            \n\n\n            \n                \n                    Custom string representation.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        String formatted as \"(x, y)\"\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface Point {\n  /** X axis coordinate */\n  x: number\n  /** Y axis coordinate */\n  y: number\n}\n\n/**\n * Simple 2D vector that provides vector math helpers.\n *\n * Most methods are chainable.\n *\n * ### Example\n * ```typescript\n * const vector1 = new Vec(4, 8)\n * const vector2 = Vec.from(vector1)\n *\n * vector1.add(vector2).multiply(3)\n * ```\n *\n * @category kilo/types\n */\nexport class Vec implements Point {\n  /** X coordinate value. */\n  x: number\n  /** Y coordinate value. */\n  y: number\n\n  /**\n   * Creates a new Vec from the provided Vec.\n   *\n   * @param v Vec to copy into new Vec.\n   */\n  static from(v: Vec) {\n    return new Vec().copy(v)\n  }\n\n  /**\n   * Initialize Vec object.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the coordinates of the Vec.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  set(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Copies the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to copy values from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to copy values from.\n   */\n  copy({ x, y }: Vec) {\n    return this.set(x, y)\n  }\n\n  /**\n   * Creates a cloned copy of the Vec.\n   */\n  clone() {\n    return Vec.from(this)\n  }\n\n  /**\n   * Adds the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to add values from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to add values from.\n   */\n  add({ x, y }: Vec) {\n    this.x += x\n    this.y += y\n\n    return this\n  }\n\n  /**\n   * Subtracts the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to subtract values from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to subtract values from.\n   */\n  subtract({ x, y }: Vec) {\n    this.x -= x\n    this.y -= y\n\n    return this\n  }\n\n  /**\n   * Multiplies the x and y values by the provided value.\n   *\n   * @param s The scalar value to multiply.\n   */\n  multiply(s: number) {\n    this.x *= s\n    this.y *= s\n\n    return this\n  }\n\n  /**\n   * Divides the x and y values by the provided value.\n   *\n   * @param s The scalar value to divide by.\n   */\n  divide(s: number) {\n    this.x /= s\n    this.y /= s\n\n    return this\n  }\n\n  /**\n   * Gets the magnitude of the Vec.\n   */\n  mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /**\n   * Gets the normal of the Vec.\n   */\n  normalize() {\n    const mag = this.mag()\n\n    if (mag > 0) {\n      this.divide(mag)\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the dot product of two Vecs.\n   *\n   * @param vec The Vec to get dot product from.\n   * @remarks Actual Parameters: **vec**: *[[Vec]]* The Vec to get dot product from.\n   */\n  dot({ x, y }: Vec) {\n    return this.x * x + this.y * y\n  }\n\n  /**\n   * Custom string representation.\n   *\n   * @returns String formatted as \"(x, y)\"\n   */\n  toString() {\n    return `(${this.x}, ${this.y})`\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VecEntity.html":{"url":"interfaces/VecEntity.html","title":"interface - VecEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VecEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/physics.ts\n        \n\n            \n                Description\n            \n            \n                Interface for properties needed for physics calculations.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        acc\n                                \n                                \n                                        mass\n                                \n                                \n                                        pos\n                                \n                                \n                                        vel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        acc\n                                    \n                                \n                                \n                                    \n                                        acc:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for acceleration. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mass\n                                    \n                                \n                                \n                                    \n                                        mass:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mass to use in calculations. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pos\n                                    \n                                \n                                \n                                    \n                                        pos:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for position. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vel\n                                    \n                                \n                                \n                                    \n                                        vel:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for velocity. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Vec } from '../types'\n\n/**\n * Interface for properties needed for physics calculations.\n *\n * @category kilo/utils\n */\nexport interface VecEntity {\n  /** Vector for acceleration. */\n  acc: Vec,\n  /** Vector for velocity. */\n  vel: Vec,\n  /** Vector for position. */\n  pos: Vec,\n  /** Mass to use in calculations. */\n  mass: number\n}\n\n/**\n * Applies the provided force to the acceleration of the provided VecEntity.\n *\n * @param e VecEntity to set acceleration on.\n * @param force Force to apply to VecEntity.\n *\n * @category kilo/utils\n */\nexport function applyForce(e: VecEntity, force: Vec) {\n  e.acc.x += force.x / e.mass\n  e.acc.y += force.y / e.mass\n}\n\n/**\n * Applies the provided friction to the provided VecEntity.\n *\n * @param e VecEntity to apply friction to.\n * @param amount Amount of friction to apply.\n *\n * @category kilo/utils\n */\nexport function applyFriction(e: VecEntity, amount: number) {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount)\n  applyForce(e, friction)\n}\n\n/**\n * Applies the provided friction to the provided VecEntity in only the X axis.\n *\n * @param e VecEntity to apply horizontal friction to.\n * @param amount Amount of friction to apply.\n *\n * @category kilo/utils\n */\nexport function applyHorizontalFriction(e: VecEntity, amount: number) {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount)\n\n  friction.y = 0\n  applyForce(e, friction)\n}\n\n/**\n * Applies the provided impulse to the provided VecEntity.\n *\n * @param e VecEntity to apply impulse to.\n * @param force Vec to apply as impulse.\n * @param dt Delta time since last update.\n *\n * @category kilo/utils\n */\nexport function applyImpulse(e: VecEntity, force: Vec, dt: number) {\n  applyForce(e, { x: force.x / dt, y: force.y / dt })\n}\n\n/**\n * Integrates acceleration and velocity with delta time.\n *\n * @param e VecEntity to integrate.\n * @param dt Delta time since last update.\n *\n * @category kilo/utils\n */\nexport function integrate(e: VecEntity, dt: number) {\n  const vx = e.vel.x + e.acc.x * dt\n  const vy = e.vel.y + e.acc.y * dt\n  const x = (e.vel.x + vx) / 2 * dt\n  const y = (e.vel.y + vy) / 2 * dt\n\n  e.vel.set(vx, vy)\n  e.acc.set(0, 0)\n\n  return { x, y }\n}\n\n/**\n * Integrates the position with delta time.\n *\n * @param e VecEntity to integrate.\n * @param dt Delta time since last update.\n *\n * @category kilo/utils\n */\nexport function integratePos (e: VecEntity, dt: number) {\n  const dis = integrate(e, dt)\n  e.pos.add(dis)\n\n  return dis\n}\n\n/**\n * Converts a velocity vector to a speed.\n *\n * @param vel The Vec to convert to a speed.\n *\n * @category kilo/utils\n */\nexport function speed(vel: Vec) {\n  return Math.sqrt(vel.x * vel.x + vel.y * vel.y)\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebAudio.html":{"url":"classes/WebAudio.html","title":"class - WebAudio","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebAudio\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/web-audio.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                context\n                            \n                            \n                                    Private\n                                element\n                            \n                            \n                                hasWebAudio\n                            \n                            \n                                    Private\n                                masterNode\n                            \n                            \n                                    Private\n                                musicNode\n                            \n                            \n                                    Private\n                                sfxNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fadeOut\n                            \n                            \n                                mute\n                            \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ctx\n                                \n                                \n                                    master\n                                \n                                \n                                    sfx\n                                \n                                \n                                    music\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/web-audio.ts:31\n                            \n                        \n\n                \n                    \n                            Initialize WebAudio instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The source for the audio element.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AudioContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLAudioElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasWebAudio\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : !!((window as any).AudioContext || (window as any).webkitAudioContext)\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not WebAudio is supported. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            masterNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GainNode\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            musicNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GainNode\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sfxNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GainNode\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fadeOut\n                        \n                        \n                    \n                \n            \n            \n                \nfadeOut()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:98\n                \n            \n\n\n            \n                \n                    Fades out playing sounds. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mute\n                        \n                        \n                    \n                \n            \n            \n                \nmute()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:93\n                \n            \n\n\n            \n                \n                    Mutes the master node. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:61\n                \n            \n\n\n            \n                \n                    Plays the audio element. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:66\n                \n            \n\n\n            \n                \n                    Pauses the audio element. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ctx\n                    \n                \n\n                \n                    \n                        getctx()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:73\n                                \n                            \n                    \n                        \n                                Gets the audio context.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        master\n                    \n                \n\n                \n                    \n                        getmaster()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:78\n                                \n                            \n                    \n                        \n                                Gets the master node. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sfx\n                    \n                \n\n                \n                    \n                        getsfx()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:83\n                                \n                            \n                    \n                        \n                                Gets the sound effects node. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        music\n                    \n                \n\n                \n                    \n                        getmusic()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:88\n                                \n                            \n                    \n                        \n                                Gets the music node. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class WebAudio {\n  /** Whether or not WebAudio is supported. */\n  hasWebAudio = !!((window as any).AudioContext || (window as any).webkitAudioContext)\n\n  private element: HTMLAudioElement\n  private context: AudioContext\n  private masterNode: GainNode\n  private sfxNode: GainNode\n  private musicNode: GainNode\n\n  /**\n   * Initialize WebAudio instance.\n   *\n   * @param src The source for the audio element.\n   */\n  constructor(src: string) {\n    if (!this.hasWebAudio) {\n      return\n    }\n\n    this.element = document.createElement('audio')\n    this.element.src = src\n    this.context = new AudioContext()\n\n    this.masterNode = this.context.createGain()\n    this.master.gain.value = 1\n    this.master.connect(this.context.destination)\n\n    this.sfxNode = this.context.createGain()\n    this.sfx.gain.value = 1\n    this.sfx.connect(this.master)\n\n    this.musicNode = this.context.createGain()\n    this.music.gain.value = 1\n    this.music.connect(this.master)\n  }\n\n  /** Plays the audio element. */\n  play() {\n    this.element.play()\n  }\n\n  /** Pauses the audio element. */\n  stop() {\n    this.element.pause()\n  }\n\n  /**\n   * Gets the audio context.\n   */\n  get ctx() {\n    return this.context\n  }\n\n  /** Gets the master node. */\n  get master() {\n    return this.masterNode\n  }\n\n  /** Gets the sound effects node. */\n  get sfx() {\n    return this.sfxNode\n  }\n\n  /** Gets the music node. */\n  get music() {\n    return this.musicNode\n  }\n\n  /** Mutes the master node. */\n  mute() {\n    this.masterNode.gain.setValueAtTime(0, this.context.currentTime)\n  }\n\n  /** Fades out playing sounds. */\n  fadeOut() {\n    const volume = this.masterNode.gain.value\n\n    this.masterNode.gain.setValueAtTime(volume, this.context.currentTime)\n    this.masterNode.gain.linearRampToValueAtTime(0, this.context.currentTime + .4)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebGLRenderer.html":{"url":"classes/WebGLRenderer.html","title":"class - WebGLRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebGLRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Recursive rendering utilizing HTML5 canvas and WebGL.\n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                boundTexture\n                            \n                            \n                                    Private\n                                buffers\n                            \n                            \n                                    Private\n                                ctx\n                            \n                            \n                                    Private\n                                game\n                            \n                            \n                                    Private\n                                gl\n                            \n                            \n                                    Private\n                                globalAlpha\n                            \n                            \n                                    Private\n                                shaderProgramCol\n                            \n                            \n                                    Private\n                                shaderProgramTex\n                            \n                            \n                                    Private\n                                textures\n                            \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createTextCanvas\n                            \n                            \n                                    Private\n                                createTexture\n                            \n                            \n                                    Private\n                                drawRect\n                            \n                            \n                                    Private\n                                drawSprite\n                            \n                            \n                                    Private\n                                drawTileSprite\n                            \n                            \n                                    Private\n                                getColorFromFillString\n                            \n                            \n                                    Private\n                                getPositionMatrix\n                            \n                            \n                                    Private\n                                getTexture\n                            \n                            \n                                render\n                            \n                            \n                                    Private\n                                renderRecursive\n                            \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl-renderer.ts:28\n                            \n                        \n\n                \n                    \n                            Initialize CanvasRenderer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTMLElement to add the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            boundTexture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            buffers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GlBuffer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ctx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            game\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Game\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderingContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            globalAlpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            shaderProgramCol\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ShaderProgram\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            shaderProgramTex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ShaderProgram\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            textures\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl-renderer.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:18\n\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:20\n\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:16\n\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:14\n\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            createTextCanvas\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTextCanvas()\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            createTexture\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTexture()\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            drawRect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawRect(rect: Rect, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rect\n                                    \n                                                Rect\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    camera\n                                    \n                                                Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            drawSprite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawSprite(sprite: Sprite, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    camera\n                                    \n                                                Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            drawTileSprite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawTileSprite(sprite: TileSprite, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                TileSprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    camera\n                                    \n                                                Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getColorFromFillString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getColorFromFillString(color: string, alpha: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alpha\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getPositionMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPositionMatrix(camera: any, sprite: Sprite | TileSprite | Rect)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sprite\n                                    \n                                                Sprite | TileSprite | Rect\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getTexture\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexture(gl: WebGLRenderingContext, sprite: Sprite | TileSprite)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:277\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    gl\n                                    \n                                            WebGLRenderingContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sprite\n                                    \n                                                Sprite | TileSprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(container: Container, clear)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:66\n                \n            \n\n\n            \n                \n                    Recursive method for rendering the provided container and all its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Container object to render recursively.\n\n                                    \n                                \n                                \n                                    clear\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to clear the canvas before rendering.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            renderRecursive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderRecursive(container: Entity | Container, camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                            Entity | Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    camera\n                                    \n                                                Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:61\n\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Camera, Container, Game, Scene, TileSprite } from '../'\nimport { Entity, Sprite, Text, Rect } from '../types'\nimport { defaults, ShaderProgram, GlBuffer,  GLUtils } from './webgl'\n\ninterface TextureInfo {\n  texture: WebGLTexture\n}\n\n/**\n * Recursive rendering utilizing HTML5 canvas and WebGL.\n *\n * @category kilo/renderer\n */\nexport class WebGLRenderer extends Renderer {\n  private gl: WebGLRenderingContext\n  private ctx: CanvasRenderingContext2D\n  private shaderProgramTex: ShaderProgram\n  private shaderProgramCol: ShaderProgram\n\n  private buffers: GlBuffer\n  private textures: Map\n  private boundTexture: string\n  private globalAlpha: number\n  private game: Game\n\n    /**\n     * Initialize CanvasRenderer object.\n     *\n     * @param width Width of the canvas in pixels.\n     * @param height Height of the canvas in pixels.\n     * @param container The HTMLElement to add the canvas to.\n     */\n    constructor(width: number, height: number, container: HTMLElement) {\n      super(width, height, container)\n\n      this.gl = this.canvas.getContext('webgl', { antialias: false })\n\n      this.buffers = new GlBuffer(this.gl)\n      this.buffers.create('position')\n      this.buffers.create('texture')\n      this.buffers.create('rect')\n\n      this.createTextCanvas()\n\n      this.textures = new Map()\n      this.shaderProgramTex = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexTexture,\n        fragment: defaults.shaders.fragmentTexture,\n      }, 'default-texture')\n      this.shaderProgramCol = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexColor,\n        fragment: defaults.shaders.fragmentColor,\n      }, 'default-color')\n    }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha  6) {\n      const parts = color.split(',')\n      parts[0] = parts[0].substr(parts[0].indexOf('(') + 1)\n\n      if (parts.length > 4) {\n        throw new Error(`Invalid color string ${color}`)\n      }\n\n      if (parts.length === 3) {\n        return [\n          parseInt(parts[0]), parseInt(parts[1]),\n          parseInt(parts[2].replace(')', '')), alpha\n        ]\n      }\n\n      return [\n        parseInt(parts[0]), parseInt(parts[1]),\n        parseInt(parts[2]), parseFloat(parts[3].replace(')', ''))\n      ]\n    }\n\n    const r = parseInt(color.substr(0, 2), 16) / 255\n    const g = parseInt(color.substr(2, 2), 16) / 255\n    const b = parseInt(color.substr(4, 2), 16) / 255\n\n    return [r, g, b, alpha]\n  }\n\n  private getTexture(gl: WebGLRenderingContext, sprite: Sprite | TileSprite) {\n    if (!Game.assets.completed) {\n      return null\n    }\n\n    const { img } = sprite.texture\n\n    if (!img.complete) {\n      if (Game.debug) {\n        console.warn(`Image ${img.src} not yet loaded...`)\n      }\n\n      return null\n    }\n\n    if (this.textures.has(img.src)) {\n      const texture = this.textures.get(img.src).texture\n\n      if (this.boundTexture !== img.src) {\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        this.boundTexture = img.src\n      }\n\n      return texture\n    }\n\n    const texture = this.createTexture()\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n\n    this.textures.set(img.src, { texture })\n    this.boundTexture = img.src\n\n    return texture\n  }\n\n  private createTexture() {\n    const { gl } = this\n    const texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n    return texture\n  }\n\n  private getPositionMatrix(camera: any, sprite: Sprite | TileSprite | Rect) {\n    const hasAnchor = (sp: any) => sp.anchor && (sp.anchor.x || sp.anchor.y)\n\n    const cameraTranslation = GLUtils.getCameraTranslation(camera)\n    const projectionMatrix =\n      GLUtils.get2DProjectionMatrix(this.width, this.height)\n    const translationMatrix = hasAnchor(sprite)\n      ? GLUtils.getTranslation(sprite.pos.x + (sprite as any).anchor.x,\n                               sprite.pos.y + (sprite as any).anchor.y)\n      : GLUtils.getTranslation(sprite.pos.x, sprite.pos.y)\n    const scaleMatrix =\n      GLUtils.getScaleMatrix(sprite, sprite.width, sprite.height)\n\n    let originMatrix = GLUtils.getTranslation(0, 0)\n\n    if ((sprite instanceof Sprite || sprite instanceof TileSprite)\n        && sprite.rotation) {\n      const pivotMatrix = GLUtils.getTranslation(-sprite.pivot.x, -sprite.pivot.y)\n      const unpivotMatrix = GLUtils.getTranslation(sprite.pivot.x, sprite.pivot.y)\n\n      let rotMatrix = GLUtils.getRotation(sprite.rotation)\n      rotMatrix = GLUtils.multiplyMatrices(pivotMatrix, rotMatrix)\n\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, rotMatrix)\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, unpivotMatrix)\n    }\n\n    let posMatrix = GLUtils.multiplyMatrices(scaleMatrix, originMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, cameraTranslation)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, translationMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, projectionMatrix)\n\n    return posMatrix\n  }\n\n  private createTextCanvas() {\n    const canvas = document.createElement('canvas')\n\n    canvas.width = this.width\n    canvas.height = this.height\n\n    canvas.id = 'kilo-text-canvas'\n    canvas.style.zIndex = '1000'\n    canvas.style.position = 'absolute'\n    canvas.style.top = '0'\n    canvas.style.left = '0'\n\n    this.container.appendChild(canvas)\n    this.ctx = canvas.getContext('2d')\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/animations.ts\n            \n            class\n            Animation\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                lib/animations.ts\n            \n            class\n            Animations\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                lib/assets.ts\n            \n            class\n            Assets\n            \n                43 %\n                (7/16)\n            \n        \n        \n            \n                \n                lib/camera.ts\n            \n            class\n            Camera\n            \n                57 %\n                (22/38)\n            \n        \n        \n            \n                \n                lib/container.ts\n            \n            class\n            Container\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                lib/controls/controls.ts\n            \n            interface\n            Controls\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                lib/controls/gamepad-controls.ts\n            \n            class\n            GamepadControls\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                lib/controls/key-controls.ts\n            \n            class\n            KeyControls\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/controls/key-controls.ts\n            \n            variable\n            passThroughKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/controls/mouse-controls.ts\n            \n            class\n            MouseControls\n            \n                50 %\n                (7/14)\n            \n        \n        \n            \n                \n                lib/fx/one-up.ts\n            \n            class\n            OneUp\n            \n                88 %\n                (24/27)\n            \n        \n        \n            \n                \n                lib/fx/particle-emitter.ts\n            \n            class\n            ParticleEmitter\n            \n                92 %\n                (24/26)\n            \n        \n        \n            \n                \n                lib/fx/particle.ts\n            \n            class\n            Particle\n            \n                89 %\n                (25/28)\n            \n        \n        \n            \n                \n                lib/fx/particle.ts\n            \n            interface\n            ParticleOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            class\n            Game\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            variable\n            MAX_FRAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            variable\n            MULTIPLIER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            variable\n            SPEED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            variable\n            STEP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/renderer/canvas-renderer.ts\n            \n            class\n            CanvasRenderer\n            \n                69 %\n                (9/13)\n            \n        \n        \n            \n                \n                lib/renderer/renderer.ts\n            \n            class\n            Renderer\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/renderer/webgl-renderer.ts\n            \n            class\n            WebGLRenderer\n            \n                33 %\n                (9/27)\n            \n        \n        \n            \n                \n                lib/renderer/webgl-renderer.ts\n            \n            interface\n            TextureInfo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/defaults.ts\n            \n            variable\n            defaults\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            class\n            BufferInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            class\n            GlBuffer\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            variable\n            fullArea\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/shader-program.ts\n            \n            class\n            ShaderProgram\n            \n                33 %\n                (5/15)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/shader-program.ts\n            \n            interface\n            Scripts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/utils.ts\n            \n            class\n            GLUtils\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/resolvers/stop-move.ts\n            \n            function\n            stopMovement\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            interface\n            Hits\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            interface\n            Resolution\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            function\n            wallSlide\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/scene.ts\n            \n            class\n            Scene\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                lib/sound/sound-group.ts\n            \n            class\n            SoundGroup\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/sound/sound-pool.ts\n            \n            class\n            SoundPool\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/sound/sound.ts\n            \n            class\n            Sound\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                lib/sound/sound.ts\n            \n            interface\n            SoundOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/sound/web-audio.ts\n            \n            class\n            WebAudio\n            \n                50 %\n                (6/12)\n            \n        \n        \n            \n                \n                lib/state.ts\n            \n            class\n            State\n            \n                64 %\n                (9/14)\n            \n        \n        \n            \n                \n                lib/tile-map.ts\n            \n            class\n            TileMap\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                lib/tile-map.ts\n            \n            interface\n            HasFrame\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/tile-sprite.ts\n            \n            class\n            TileSprite\n            \n                79 %\n                (19/24)\n            \n        \n        \n            \n                \n                lib/timer.ts\n            \n            class\n            Timer\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                lib/types/entity.ts\n            \n            class\n            Entity\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                lib/types/hit-box.ts\n            \n            class\n            HitBox\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                lib/types/rect.ts\n            \n            class\n            Rect\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/types/rect.ts\n            \n            interface\n            RectStyleOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/types/sprite.ts\n            \n            class\n            Sprite\n            \n                73 %\n                (14/19)\n            \n        \n        \n            \n                \n                lib/types/text.ts\n            \n            class\n            Text\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/types/text.ts\n            \n            interface\n            TextOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/texture.ts\n            \n            class\n            Texture\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Layer\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Map\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Object\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Property\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Tile\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Tileset\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/types/trigger.ts\n            \n            class\n            Trigger\n            \n                71 %\n                (23/32)\n            \n        \n        \n            \n                \n                lib/types/vec.ts\n            \n            class\n            Vec\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/types/vec.ts\n            \n            interface\n            Point\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            angle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            clamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            dirTo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            distance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            gauss\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            gaussDistance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            lerp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            mix\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            rand\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randf\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randomSeed\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randomSeeded\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randOneFrom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randOneIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            smoothStep\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            useSeededRandom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            variable\n            ease\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            variable\n            random\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            variable\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            interface\n            VecEntity\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyForce\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyFriction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyHorizontalFriction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyImpulse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            integrate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            integratePos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            speed\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            addDebug\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            angle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            bounds\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            center\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            distance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            hit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            hits\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            isHit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            interface\n            ExtraLayer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            interface\n            TiledMap\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            function\n            tiledParser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            convertEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            entities\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            getLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            getObjectByName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            getObjectsByType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            getTileProps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            getTileset\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            layers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            levelIndex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            loadTiles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            loadTilesByLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            mapHeight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            mapWidth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            tileHeight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            tileset\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            tilesets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            tilesPerRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            variable\n            tileWidth\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Speed   (lib/.../game.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/game.ts\n    \n        \n            \n                \n                    \n                        \n                        Speed\n                    \n                \n                    \n                        \n                            Enum of pre-defined speeds for a game.\nDefault game speed is \"Normal\".\nCan also be any number, but be careful.\n\n                        \n                    \n                        \n                            \n                                 Slow\n                            \n                        \n                        \n                            \n                                Value : 0.5\n                            \n                        \n                        \n                            \n                                 Normal\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Fast\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nkilo\nA 2D game library written in TypeScript.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    36 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    20 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GameUpdate   (lib/.../game.ts)\n                        \n                        \n                            HasUpdate   (lib/.../entity.ts)\n                        \n                        \n                            KeyMap   (lib/.../key-controls.ts)\n                        \n                        \n                            ProgressCallback   (lib/.../assets.ts)\n                        \n                        \n                            ReadyCallback   (lib/.../assets.ts)\n                        \n                        \n                            TickFunc   (lib/.../timer.ts)\n                        \n                        \n                            TileData   (lib/.../tiled-parser.ts)\n                        \n                        \n                            WalkableTest   (lib/.../wall-slide.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/game.ts\n    \n    \n        \n            \n                \n                    \n                    GameUpdate\n                \n            \n            \n                \n                    Function called on each update.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/types/entity.ts\n    \n    \n        \n            \n                \n                    \n                    HasUpdate\n                \n            \n            \n                \n                    A type with an update function. \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/controls/key-controls.ts\n    \n    \n        \n            \n                \n                    \n                    KeyMap\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/assets.ts\n    \n    \n        \n            \n                \n                    \n                    ProgressCallback\n                \n            \n            \n                \n                    Function that is called to provide progress status.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReadyCallback\n                \n            \n            \n                \n                    Function that is called when an asset is ready.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/timer.ts\n    \n    \n        \n            \n                \n                    \n                    TickFunc\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/utils/tiled-parser.ts\n    \n    \n        \n            \n                \n                    \n                    TileData\n                \n            \n            \n                \n                    Type for tile data.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/resolvers/wall-slide.ts\n    \n    \n        \n            \n                \n                    \n                    WalkableTest\n                \n            \n            \n                \n                    Function used to provide collision resolver with walkable tile status.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            convertEntity   (lib/.../tiled-parser.ts)\n                        \n                        \n                            defaults   (lib/.../defaults.ts)\n                        \n                        \n                            ease   (lib/.../math.ts)\n                        \n                        \n                            entities   (lib/.../tiled-parser.ts)\n                        \n                        \n                            fullArea   (lib/.../gl-buffer.ts)\n                        \n                        \n                            getLayer   (lib/.../tiled-parser.ts)\n                        \n                        \n                            getObjectByName   (lib/.../tiled-parser.ts)\n                        \n                        \n                            getObjectsByType   (lib/.../tiled-parser.ts)\n                        \n                        \n                            getTileProps   (lib/.../tiled-parser.ts)\n                        \n                        \n                            getTileset   (lib/.../tiled-parser.ts)\n                        \n                        \n                            layers   (lib/.../tiled-parser.ts)\n                        \n                        \n                            levelIndex   (lib/.../tiled-parser.ts)\n                        \n                        \n                            loadTiles   (lib/.../tiled-parser.ts)\n                        \n                        \n                            loadTilesByLayer   (lib/.../tiled-parser.ts)\n                        \n                        \n                            mapHeight   (lib/.../tiled-parser.ts)\n                        \n                        \n                            mapWidth   (lib/.../tiled-parser.ts)\n                        \n                        \n                            MAX_FRAME   (lib/.../game.ts)\n                        \n                        \n                            MULTIPLIER   (lib/.../game.ts)\n                        \n                        \n                            passThroughKeys   (lib/.../key-controls.ts)\n                        \n                        \n                            random   (lib/.../math.ts)\n                        \n                        \n                            seed   (lib/.../math.ts)\n                        \n                        \n                            SPEED   (lib/.../game.ts)\n                        \n                        \n                            STEP   (lib/.../game.ts)\n                        \n                        \n                            tileHeight   (lib/.../tiled-parser.ts)\n                        \n                        \n                            tileset   (lib/.../tiled-parser.ts)\n                        \n                        \n                            tilesets   (lib/.../tiled-parser.ts)\n                        \n                        \n                            tilesPerRow   (lib/.../tiled-parser.ts)\n                        \n                        \n                            tileWidth   (lib/.../tiled-parser.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/utils/tiled-parser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            convertEntity\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (e: Tiled.Object) => {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i \n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Tiled.Object[]\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getLayer\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (name: string, mandatory = true) => {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i \n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getObjectByName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (name: string, mandatory = false): Tiled.Object => {\n  let ent: any\n\n  for (let i = 0; i \n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getObjectsByType\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (type: string, mandatory = false): Tiled.Object[] => {\n  const es = []\n  for (let i = 0; i \n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTileProps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i \n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTileset\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            layers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Tiled.Layer[]\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            levelIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadTiles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i \n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadTilesByLayer\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (levelLayer: Tiled.Layer,\n                       extraLayers: ExtraLayer[]) => {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Tiled.Tileset\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tilesets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Tiled.Tileset[]\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tilesPerRow\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n\n    lib/renderer/webgl/defaults.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaults\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  shaders: {\n    /** Texture-based rendering vertex shader. */\n    vertexTexture: `\n  attribute vec2 a_position;\n  attribute vec2 a_texCoord;\n\n  uniform mat3 u_posMatrix;\n  uniform mat3 u_texMatrix;\n  uniform float u_texAlpha;\n\n  varying vec2 v_texCoord;\n  varying float v_texAlpha;\n\n  void main() {\n    v_texCoord = (u_texMatrix * vec3(a_texCoord, 1)).xy;\n    v_texAlpha = u_texAlpha;\n\n    gl_Position = vec4((u_posMatrix * vec3(a_position, 1)).xy, 0, 1);\n  }\n`,\n\n    /** Texture-based rendering fragment shader. */\n    fragmentTexture: `\n  precision highp float;\n\n  uniform sampler2D u_sampler;\n\n  varying vec2 v_texCoord;\n  varying float v_texAlpha;\n\n  void main() {\n    vec4 color = texture2D(u_sampler, v_texCoord);\n    color.a *= v_texAlpha;\n\n    gl_FragColor = color;\n  }\n`,\n\n    /** Color-based rendering vertex shader. */\n    vertexColor: `\n  attribute vec2 a_position;\n\n  uniform mat3 u_posMatrix;\n\n  void main() {\n    gl_Position = vec4((u_posMatrix * vec3(a_position, 1)).xy, 0, 1);\n  }\n`,\n\n    /** Color-based rendering fragment shader. */\n    fragmentColor: `\n  precision highp float;\n\n  uniform vec4 u_color;\n\n  void main() {\n    gl_FragColor = u_color;\n  }\n`,\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    lib/utils/math.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ease\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  quadIn(x: number) {\n    return x * x\n  },\n\n  quadOut(x: number) {\n    return 1 - this.quadIn(1 - x)\n  },\n\n  cubicIn(x: number) {\n    return x * x * x\n  },\n\n  cubicOut(x: number) {\n    return 1 - this.cubicIn(1 - x)\n  },\n\n  cubicInOut(x: number) {\n    if (x \n                        \n                    \n\n                \n                    \n                        A collection of easing functions.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            random\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Math.random\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 42\n                        \n                    \n\n\n            \n        \n\n    lib/renderer/webgl/gl-buffer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fullArea\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n                        \n                    \n\n\n            \n        \n\n    lib/game.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MAX_FRAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SPEED * 5\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MULTIPLIER\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Speed.Normal\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SPEED\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : STEP / MULTIPLIER\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            STEP\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 1 / 60\n                        \n                    \n\n\n            \n        \n\n    lib/controls/key-controls.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passThroughKeys\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  'F5', 'F12'\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
