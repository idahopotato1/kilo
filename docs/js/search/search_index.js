var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/Animations.html",[0,0.168,1,2.683]],["body/classes/Animations.html",[0,0.294,1,4.914,2,0.512,3,0.153,4,0.153,5,0.118,6,2.95,7,0.286,8,4.824,9,0.331,10,1.64,11,0.018,12,2.576,13,4.822,14,0.851,15,1.739,16,0.889,17,1.817,18,3.726,19,0.541,20,3.726,21,4.824,22,7.72,23,2.923,24,6.424,25,4.689,26,4.162,27,2.923,28,4.824,29,0.798,30,2.576,31,1.984,32,4.689,33,4.824,34,0.085,35,0.798,36,1.887,37,3.241,38,4.026,39,0.622,40,4.824,41,3.429,42,0.911,43,3.419,44,0.652,45,1.004,46,0.756,47,0.181,48,0.695,49,3.951,50,4.824,51,1.301,52,3.88,53,0.479,54,3.419,55,3.4,56,4.162,57,4.824,58,3.726,59,4.824,60,1.653,61,1.797,62,4.824,63,4.824,64,3.726,65,4.162,66,1.973,67,1.805,68,1.004,69,4.824,70,3.419,71,1.728,72,3.726,73,4.444,74,3.939,75,6.402,76,1.065,77,3.419,78,1.988,79,3.419,80,2.738,81,2.431,82,3.419,83,1.816,84,1.568,85,0.539,86,1.111,87,2.072,88,2.95,89,1.491,90,5.589,91,3.419,92,3.419,93,3.419,94,3.419,95,5.589,96,4.162,97,3.419,98,4.824,99,5.589,100,3.419,101,3.419,102,0.931,103,0.264,104,2.95,105,1.102,106,3.419,107,0.592,108,3.419,109,6.402,110,2.923,111,3.419,112,3.419,113,0.97,114,3.419,115,3.419,116,3.419,117,3.419,118,0.369,119,3.419,120,3.419,121,3.419,122,3.419,123,3.419,124,3.419,125,0.007,126,0.01,127,0.007]],["title/classes/Assets.html",[0,0.168,128,2.307]],["body/classes/Assets.html",[0,0.148,2,0.502,3,0.15,4,0.15,5,0.22,7,0.295,9,0.3,11,0.018,14,0.609,16,0.729,32,3.674,34,0.084,35,0.787,39,1.006,42,0.966,44,0.643,45,1.051,46,0.645,47,0.202,48,0.727,51,1.393,53,0.397,68,1.123,76,1.147,81,3.327,85,0.528,89,1.483,103,0.259,107,0.566,113,1.242,118,0.732,125,0.007,126,0.01,127,0.007,128,4.429,129,2.589,130,4.889,131,1.354,132,1.879,133,4.757,134,4.757,135,4.757,136,4.757,137,4.757,138,4.104,139,6.589,140,3.422,141,5.098,142,4.757,143,4.757,144,3.524,145,1.949,146,5.482,147,3.352,148,4.757,149,3.352,150,6.306,151,4.652,152,5.695,153,4.104,154,4.757,155,3.352,156,4.757,157,4.757,158,5.482,159,3.352,160,4.648,161,6.018,162,3.851,163,3.917,164,4.241,165,4.77,166,6.355,167,1.647,168,3.674,169,4.241,170,4.757,171,5.482,172,3.352,173,3.674,174,4.757,175,3.352,176,3.353,177,3.352,178,3.352,179,2.952,180,2.589,181,3.352,182,4.757,183,3.352,184,3.352,185,3.352,186,3.352,187,0.7,188,3.352,189,6.018,190,3.352,191,3.352,192,3.352,193,1.79,194,4.757,195,5.529,196,3.352,197,3.352,198,3.352,199,6.601,200,3.674,201,2.892,202,3.352,203,3.096,204,4.757,205,5.529,206,5.529,207,2.892,208,3.352,209,3.353,210,3.352,211,3.352,212,3.352,213,3.352,214,3.352,215,3.352,216,3.352,217,3.352,218,3.352,219,1.797,220,3.352,221,4.271,222,3.352,223,3.352,224,4.757,225,5.529,226,3.352,227,3.352,228,3.352,229,3.352]],["title/classes/BufferInfo.html",[0,0.168,230,2.683]],["body/classes/BufferInfo.html",[0,0.245,2,0.628,3,0.187,4,0.187,5,0.145,7,0.187,9,0.209,11,0.018,14,0.846,16,0.873,19,0.494,20,3.237,29,1.169,34,0.105,42,0.885,44,0.566,46,0.765,47,0.185,51,1.311,53,0.454,71,1.193,72,3.237,89,1.357,103,0.324,107,0.63,113,1.078,118,0.742,125,0.009,126,0.012,127,0.009,131,1.578,193,1.246,230,4.847,231,5.107,232,2.954,233,2.271,234,2.96,235,6.072,236,3.281,237,5.933,238,4.192,239,4.192,240,3.908,241,4.192,242,4.784,243,4.784,244,3.616,245,2.954,246,2.954,247,2.954,248,1.636,249,3.616,250,3.616,251,3.616,252,3.609,253,4.304,254,4.044,255,3.237,256,3.616,257,3.616,258,2.954,259,2.728,260,3.237,261,1.362,262,2.21,263,6.312,264,3.616,265,4.784,266,4.784,267,4.784,268,2.379,269,3.616,270,3.616,271,4.784,272,3.616,273,3.616,274,3.616,275,3.616,276,3.616,277,3.616,278,2.238,279,4.784,280,3.616,281,3.609,282,3.616,283,3.616,284,4.784,285,2.54,286,3.237,287,5.704,288,2.954,289,2.54,290,3.616,291,1.898,292,2.113,293,3.616,294,2.728,295,4.784,296,3.616,297,3.616,298,3.616,299,3.616,300,3.616,301,3.616]],["title/classes/Camera.html",[0,0.168,302,2.16]],["body/classes/Camera.html",[0,0.094,2,0.504,3,0.095,4,0.095,5,0.073,7,0.307,9,0.3,10,1.143,11,0.018,14,0.831,15,1.044,16,0.849,17,1.091,19,0.425,29,1.074,30,2.546,31,2.01,34,0.053,35,0.556,36,1.93,39,0.385,42,1.026,44,0.454,45,1.168,46,0.69,47,0.216,48,0.778,51,0.641,53,0.502,60,1.299,61,2.37,66,1.36,67,1.846,68,1.11,71,0.957,76,1.213,78,1.489,83,1.36,84,1.36,85,0.53,86,0.688,89,1.465,102,0.577,103,0.164,105,0.768,107,0.598,110,1.283,113,0.367,118,0.626,125,0.005,126,0.007,127,0.005,132,1.883,162,2.039,167,1.044,179,1.796,187,0.703,219,1.8,288,2.371,291,2.88,302,4.151,303,1.826,304,3.364,305,6.281,306,6.494,307,3.683,308,3.364,309,1.796,310,3.364,311,1.805,312,3.364,313,1.805,314,2.902,315,2.87,316,3.364,317,3.364,318,3.364,319,3.364,320,3.364,321,3.364,322,1.197,323,2.424,324,3.611,325,1.378,326,1.634,327,1.953,328,1.253,329,1.715,330,1.489,331,5.54,332,4.769,333,3.364,334,3.364,335,3.364,336,6.027,337,2.706,338,1.253,339,3.364,340,2.593,341,5.54,342,2.117,343,3.364,344,3.104,345,3.364,346,4.114,347,2.902,348,2.144,349,2.117,350,2.902,351,2.902,352,3.364,353,3.683,354,3.104,355,2.902,356,2.95,357,2.707,358,1.672,359,0.958,360,0.688,361,1.801,362,0.958,363,0.577,364,2.844,365,0.826,366,0.826,367,0.911,368,0.958,369,1.265,370,1.846,371,0.958,372,0.719,373,0.958,374,0.958,375,3.364,376,3.296,377,2.117,378,3.364,379,4.769,380,1.418,381,4.795,382,2.066,383,2.902,384,2.371,385,3.364,386,3.364,387,5.808,388,2.117,389,2.598,390,4.769,391,6.494,392,3.364,393,3.364,394,2.117,395,4.279,396,2.19,397,2.598,398,2.902,399,3.364,400,2.371,401,1.715,402,3.364,403,3.364,404,3.364,405,2.598,406,3.364,407,2.117,408,3.364,409,3.364,410,3.364,411,3.364,412,3.364,413,4.019,414,2.117,415,2.598,416,2.598,417,4.489,418,4.769,419,4.769,420,2.275,421,3.364,422,2.117,423,2.598,424,3.364,425,4.769,426,1.143,427,2.606,428,2.117,429,1.801,430,1.447,431,1.378,432,1.283,433,1.378,434,1.378,435,1.253,436,1.283,437,1.283,438,1.283,439,0.958,440,0.826,441,0.911,442,0.911,443,0.958,444,0.911,445,0.911,446,0.958,447,0.826,448,0.911,449,0.826,450,1.201,451,1.862,452,2.117,453,2.117,454,2.117,455,2.117,456,2.117,457,2.117,458,2.117,459,0.958,460,3.104,461,2.117,462,3.387,463,2.117,464,2.117,465,3.364,466,3.364,467,2.117,468,3.364,469,3.364,470,4.186,471,2.117,472,2.117,473,1.826,474,2.117,475,2.902,476,3.364,477,3.364,478,3.364,479,1.696,480,1.826,481,2.117,482,2.117,483,2.117,484,2.117,485,3.364,486,2.117,487,2.117,488,4.186,489,1.826,490,4.186,491,1.826,492,2.117,493,2.117,494,2.117,495,2.117,496,2.117,497,2.117,498,2.117,499,3.364,500,2.117,501,2.117,502,2.117,503,2.117,504,3.364,505,2.117,506,2.117,507,2.117,508,2.902,509,1.826,510,2.117]],["title/classes/CanvasRenderer.html",[0,0.168,511,2.477]],["body/classes/CanvasRenderer.html",[0,0.176,2,0.596,3,0.178,4,0.178,5,0.138,7,0.289,9,0.323,11,0.017,19,0.477,34,0.099,35,0.885,36,1.664,39,0.723,42,1.043,44,0.723,45,1.071,46,0.657,47,0.215,48,0.741,53,0.477,61,2.254,68,1.001,76,1.02,85,0.953,86,1.292,89,1.322,103,0.307,107,0.602,125,0.009,126,0.012,127,0.009,131,1.131,132,1.351,187,1.264,193,1.182,219,1.739,235,3.071,262,2.152,302,3.674,311,2.247,313,2.321,322,1.904,323,3.036,326,2.09,330,1.414,338,1.994,348,1.414,357,2.851,358,1.445,366,2.527,369,1.222,380,1.182,426,2.365,447,2.09,511,4.213,512,5.22,513,2.802,514,3.584,515,4.618,516,4.618,517,4.358,518,4.486,519,4.819,520,4.905,521,4.134,522,3.244,523,4.905,524,3.976,525,3.773,526,3.43,527,3.244,528,3.43,529,2.409,530,3.43,531,3.43,532,4.673,533,5.584,534,3.976,535,4.618,536,3.773,537,3.071,538,3.43,539,3.071,540,2.256,541,4.134,542,3.071,543,3.43,544,3.071,545,3.071,546,1.629,547,2.409,548,3.071,549,4.618,550,3.976,551,3.43,552,3.976,553,2.802,554,3.976,555,3.43,556,3.976,557,3.43,558,3.43,559,3.976,560,3.976,561,3.976,562,3.43,563,3.976,564,3.976,565,3.43,566,3.43]],["title/classes/Container.html",[0,0.168,323,1.486]],["body/classes/Container.html",[0,0.162,2,0.759,3,0.164,4,0.164,5,0.127,7,0.311,9,0.367,10,1.722,11,0.018,14,0.649,16,0.614,19,0.451,29,0.607,31,2.074,34,0.092,35,1.035,36,2.238,42,1.057,45,1.174,46,0.689,47,0.226,48,0.777,53,0.49,66,1.886,67,1.726,68,1.124,76,1.106,78,2.064,83,1.886,84,1.886,85,0.578,86,1.192,102,0.999,103,0.284,105,1.157,107,0.558,113,0.879,118,0.546,125,0.008,126,0.011,127,0.008,132,2.309,167,1.448,187,1.058,248,1.978,322,1.802,323,2.846,325,2.075,326,2.266,327,2.691,328,1.887,329,2.377,330,2.064,337,3.855,338,1.887,357,2.95,358,1.851,359,1.66,360,1.192,361,2.497,362,1.66,363,0.999,364,3.328,365,1.432,366,1.432,367,1.578,368,1.66,369,1.157,370,1.506,371,1.66,372,1.247,373,1.66,374,1.66,382,2.064,401,1.502,427,2.986,429,2.497,430,2.497,432,3.07,435,2.162,436,3.07,437,3.07,438,3.07,439,1.66,440,1.432,441,1.578,442,1.578,443,1.66,444,1.578,445,1.578,446,1.66,447,1.432,448,1.578,449,1.432,451,1.432,567,3.164,568,5.066,569,4.371,570,3.913,571,3.913,572,3.07,573,5.066,574,5.066,575,5.066,576,5.066,577,5.066,578,5.066,579,5.066,580,5.066,581,3.668,582,3.668,583,3.668,584,3.164,585,2.833,586,3.668,587,3.668]],["title/interfaces/Controls.html",[588,0.339,589,2.683]],["body/interfaces/Controls.html",[3,0.219,4,0.219,5,0.17,7,0.219,9,0.306,10,2.085,11,0.017,14,0.943,19,0.547,34,0.122,47,0.199,48,0.864,60,2.058,85,1.054,102,1.335,103,0.379,118,0.662,125,0.011,126,0.013,127,0.011,132,2.384,248,2.394,262,2.62,309,3.275,529,3.717,588,0.437,589,5.524,590,1.524,591,4.23,592,6.133,593,6.133,594,5.291,595,5.291,596,6.658,597,6.133,598,5.688,599,5.191,600,5.191,601,6.447,602,4.717,603,4.943]],["title/classes/Entity.html",[0,0.168,358,0.909]],["body/classes/Entity.html",[0,0.264,2,0.895,3,0.173,4,0.173,5,0.134,7,0.286,9,0.319,11,0.018,14,0.673,16,0.723,19,0.469,29,1.059,31,1.965,34,0.131,35,0.87,36,1.991,39,1.086,42,1.058,44,0.711,45,0.988,46,0.606,47,0.217,48,0.683,53,0.486,66,1.709,67,1.564,68,1.059,76,1.221,78,1.871,83,1.709,84,1.709,85,0.61,103,0.299,105,1.201,107,0.571,113,1.036,118,0.567,125,0.013,126,0.011,127,0.008,145,2.154,167,1.671,187,1.442,193,1.152,219,1.259,325,2.446,326,2.614,327,2.743,328,2.224,329,2.743,330,2.382,338,2.572,358,1.852,360,1.709,361,2.972,363,1.432,364,3.294,365,2.696,366,2.053,367,2.263,369,1.577,370,2.054,372,1.788,382,1.871,401,2.154,427,2.624,429,2.263,430,2.263,435,1.959,440,2.053,441,2.263,442,1.667,444,2.263,445,2.263,447,2.053,448,2.263,449,2.053,584,3.342,585,2.992,604,3.342,605,5.26,606,5.971,607,3.874,608,3.874,609,3.874,610,3.874,611,3.874,612,3.874,613,3.874,614,3.874,615,3.874,616,3.874,617,3.874,618,3.874,619,3.874,620,3.342,621,2.992,622,2.731,623,3.342,624,3.874,625,3.874,626,3.874,627,3.874,628,3.874]],["title/interfaces/ExtraLayer.html",[588,0.339,629,2.683]],["body/interfaces/ExtraLayer.html",[3,0.15,4,0.15,5,0.116,7,0.15,9,0.329,11,0.018,14,0.708,15,1.188,16,0.841,17,1.241,19,0.424,23,2.033,29,0.555,34,0.159,36,1.479,41,2.271,46,0.735,47,0.206,49,2.184,51,1.259,53,0.49,80,1.904,85,0.528,86,1.09,87,4.43,103,0.491,105,1.551,107,0.566,113,1.045,118,0.761,125,0.007,126,0.01,127,0.01,141,2.592,164,3.355,167,0.837,187,1.328,193,1.645,219,1.09,233,1.374,236,1.601,248,2.35,261,1.547,285,2.033,292,2.788,294,2.184,311,1.719,313,1.719,358,0.801,363,1.507,365,2.35,369,1.375,426,1.618,529,2.885,571,3.676,588,0.566,590,1.043,602,2.365,629,3.899,630,2.365,631,2.184,632,4.107,633,3.626,634,3.918,635,4.243,636,3.676,637,5.986,638,3.415,639,5.194,640,2.368,641,3.676,642,3.214,643,3.355,644,2.788,645,2.788,646,3.311,647,4.773,648,4.773,649,2.895,650,4.773,651,5.194,652,4.773,653,4.48,654,2.895,655,2.954,656,2.895,657,2.895,658,2.64,659,4.107,660,4.107,661,2.954,662,2.895,663,2.895,664,2.895,665,2.895,666,2.895,667,2.365,668,2.895,669,2.895,670,2.895,671,4.773,672,2.895,673,2.895,674,2.895,675,2.895,676,2.895,677,2.895,678,4.107,679,2.895,680,2.895,681,2.895,682,2.895,683,2.895,684,4.773,685,2.885,686,4.107,687,4.107,688,4.107,689,4.773,690,4.107,691,2.895,692,2.895,693,2.895,694,2.895,695,4.107,696,2.895,697,4.773,698,2.895,699,2.895,700,2.895,701,2.895,702,2.895,703,2.895,704,2.895,705,2.895,706,2.895,707,2.365]],["title/classes/GLUtils.html",[0,0.168,708,2.683]],["body/classes/GLUtils.html",[0,0.128,2,0.436,3,0.13,4,0.13,5,0.101,7,0.298,9,0.214,11,0.018,15,1.729,16,0.905,17,1.889,23,2.6,27,2.6,29,1.104,34,0.073,35,0.931,42,0.925,45,1.075,46,0.66,47,0.193,48,0.744,53,0.512,61,2.421,64,4.854,65,5.422,68,1.075,85,0.676,86,0.945,103,0.225,107,0.64,113,1.128,118,0.463,125,0.006,126,0.009,127,0.006,234,2.291,261,2.311,262,2.373,291,1.942,302,3.689,311,2.184,313,2.27,315,2.306,329,2.913,340,2.423,344,3.665,346,4.858,358,1.593,372,1.458,426,2.268,640,1.083,708,3.024,709,2.508,710,2.047,711,5.348,712,3.702,713,4.291,714,4.291,715,4.291,716,4.291,717,4.291,718,4.291,719,4.291,720,4.291,721,2.907,722,3.314,723,3.024,724,4.291,725,4.291,726,7.353,727,4.291,728,4.291,729,2.907,730,6.673,731,4.291,732,4.291,733,2.907,734,3.024,735,5.978,736,4.291,737,4.291,738,2.907,739,4.291,740,6.673,741,4.291,742,2.907,743,2.163,744,4.291,745,2.907,746,3.024,747,4.291,748,4.638,749,2.907,750,3.314,751,4.291,752,4.291,753,2.163,754,5.631,755,4.4,756,2.508,757,2.508,758,2.907,759,2.907,760,4.4,761,4.291,762,2.907,763,2.907,764,2.907,765,4.291,766,4.291,767,5.631,768,5.631,769,5.631,770,5.631,771,5.631,772,5.631,773,5.631,774,5.631,775,5.631,776,5.631,777,5.631,778,5.631,779,5.631,780,5.631,781,5.631,782,5.631,783,5.631,784,5.631]],["title/classes/Game.html",[0,0.168,132,1.294]],["body/classes/Game.html",[0,0.114,2,0.387,3,0.115,4,0.115,5,0.089,7,0.237,9,0.196,10,1.334,11,0.018,14,0.875,16,0.799,19,0.35,24,5.187,25,3.032,27,3.216,29,0.786,30,2.833,31,1.352,34,0.064,35,0.649,39,0.47,42,1.009,44,0.53,45,0.878,46,0.538,47,0.192,48,0.607,52,4.334,53,0.49,60,1.069,66,0.839,67,1.578,68,0.786,71,0.735,73,2.555,76,1.012,81,1.301,83,1.954,84,1.724,85,0.748,87,3.216,89,1.407,102,0.703,103,0.303,107,0.588,110,1.565,113,1.043,118,0.695,125,0.006,126,0.009,127,0.006,128,4.252,132,2.616,145,1.608,167,1.185,187,1.256,193,1.412,219,2.031,221,1.994,234,2.096,261,2.186,278,2.096,286,3.032,288,3.74,291,1.169,309,3.923,311,2.091,313,2.203,314,3.387,323,2.575,348,2.466,369,1.212,380,1.915,382,1.396,395,5.095,398,5.556,401,1.058,427,2.463,435,0.962,451,1.008,511,1.68,517,3.818,518,3.643,520,2.767,522,2.379,523,3.348,527,3.216,553,1.82,569,4.579,572,2.878,711,4.887,785,1.82,786,3.926,787,3.926,788,3.926,789,3.926,790,3.926,791,5.709,792,5.709,793,4.099,794,3.926,795,6.249,796,2.582,797,3.926,798,3.387,799,3.926,800,4.75,801,2.582,802,3.387,803,3.032,804,2.582,805,1.979,806,3.926,807,5.709,808,2.582,809,2.582,810,5.187,811,3.926,812,5.187,813,2.582,814,4.75,815,3.926,816,6.249,817,2.582,818,5.307,819,1.82,820,2.582,821,1.82,822,2.582,823,2.582,824,2.582,825,2.582,826,2.582,827,2.582,828,2.582,829,6.838,830,2.582,831,2.582,832,1.82,833,2.227,834,3.032,835,2.227,836,2.227,837,2.767,838,2.227,839,2.227,840,2.227,841,5.307,842,3.926,843,3.926,844,1.994,845,1.994,846,2.582,847,2.582,848,2.582,849,2.582,850,2.582,851,3.032,852,3.032,853,4.75,854,2.582,855,2.582,856,2.582,857,3.926,858,3.926,859,2.582,860,2.582,861,3.926,862,5.709,863,4.75,864,2.582,865,4.098,866,4.75,867,3.926,868,3.387,869,2.582,870,2.582,871,2.582,872,2.582,873,3.926,874,3.926,875,3.926,876,3.926,877,4.098,878,2.582,879,2.582,880,2.582]],["title/classes/GamepadControls.html",[0,0.168,600,2.683]],["body/classes/GamepadControls.html",[0,0.184,2,0.624,3,0.186,4,0.186,5,0.144,7,0.186,9,0.275,11,0.018,15,1.795,16,0.75,17,1.875,19,0.492,29,0.689,34,0.104,39,1.127,42,1.053,44,0.746,47,0.124,53,0.435,89,1.499,103,0.322,110,3.345,113,1.306,118,0.449,125,0.009,126,0.012,127,0.009,145,2.261,179,3.986,193,1.961,203,4.031,219,1.353,261,2.489,348,1.964,420,3.147,596,6.084,600,4.648,712,3.592,748,4.264,881,6.441,882,2.523,883,4.164,884,3.592,885,6.862,886,6.193,887,5.343,888,6.193,889,6.193,890,6.193,891,4.164,892,4.164,893,5.52,894,6.193,895,4.164,896,3.592,897,6.441,898,7.466,899,3.592,900,4.164,901,4.164,902,4.164,903,4.164,904,4.164,905,4.164,906,4.164,907,5.52,908,3.216,909,4.164,910,5.093,911,3.216,912,4.164,913,4.164,914,4.164,915,4.164,916,4.164,917,4.164,918,3.592,919,4.164,920,4.164,921,4.164,922,4.164,923,4.164,924,4.164,925,4.164,926,6.862,927,4.164,928,5.52,929,4.164,930,6.193,931,5.52,932,4.164,933,4.164,934,5.52,935,4.164,936,5.52,937,4.164,938,4.164,939,4.164]],["title/classes/GlBuffer.html",[0,0.168,252,2.477]],["body/classes/GlBuffer.html",[0,0.229,2,0.569,3,0.17,4,0.17,5,0.132,7,0.297,9,0.259,11,0.018,14,0.851,16,0.851,20,4.905,29,1.135,34,0.095,35,0.858,39,0.691,42,0.904,44,0.701,45,1.051,46,0.778,47,0.189,48,0.727,51,1.399,53,0.479,68,0.977,71,1.08,72,4.006,76,0.989,89,1.291,103,0.293,107,0.612,113,1.102,118,0.717,125,0.008,126,0.011,127,0.008,131,1.807,193,1.129,230,4.476,231,5.136,232,2.676,233,1.555,234,2.027,235,6.073,236,2.475,237,5.479,240,2.676,242,3.275,243,4.475,244,3.275,245,3.656,246,3.656,247,3.656,248,2.025,249,4.475,250,4.475,251,4.475,252,4.134,253,4.328,254,4.468,255,2.932,256,3.275,257,4.475,258,3.656,259,2.471,260,2.932,261,1.686,262,2.442,263,6.392,264,4.475,265,4.475,266,4.475,267,4.475,268,2.944,269,4.475,270,3.275,271,4.475,272,3.275,273,3.275,274,3.275,275,3.275,276,3.275,277,3.275,278,2.77,279,5.098,280,4.475,281,4.134,282,4.475,283,4.475,284,5.479,285,3.144,286,4.006,287,6.062,288,3.656,289,3.144,290,4.475,291,2.348,292,1.914,293,3.275,294,2.471,295,4.475,296,3.275,297,3.275,298,3.275,299,3.275,300,3.275,301,3.275,348,1.35,380,1.129,940,5.187,941,3.796,942,3.796,943,3.796,944,3.796]],["title/classes/HitBox.html",[0,0.168,945,2.307]],["body/classes/HitBox.html",[0,0.174,2,0.591,3,0.176,4,0.176,5,0.137,7,0.269,9,0.265,11,0.017,14,0.771,15,1.906,17,2.02,34,0.098,35,0.88,39,0.717,42,0.988,44,0.719,45,0.88,46,0.54,47,0.158,48,0.609,53,0.52,61,1.469,68,0.652,71,1.836,76,0.752,89,1.409,103,0.305,107,0.643,113,1.12,125,0.009,126,0.012,127,0.009,145,2.18,160,3.045,261,2.345,268,2.238,311,2.415,313,2.415,417,6.482,420,3.585,426,2.048,562,6.524,819,2.779,821,2.779,844,3.045,845,3.045,851,4.654,852,4.654,908,3.045,911,3.045,945,4.696,946,6.122,947,3.045,948,3.943,949,3.943,950,2.389,951,3.943,952,3.751,953,2.779,954,2.566,955,5.329,956,4.111,957,5.322,958,3.943,959,3.943,960,4.111,961,3.943,962,4.111,963,3.943,964,2.842,965,3.943,966,6.451,967,3.943,968,3.943,969,3.943,970,3.943,971,3.943,972,6.025,973,6.025]],["title/interfaces/Hits.html",[588,0.339,974,2.683]],["body/interfaces/Hits.html",[3,0.178,4,0.178,5,0.138,7,0.178,11,0.018,15,1.804,16,0.888,17,1.885,19,0.477,29,0.886,34,0.134,47,0.201,53,0.427,60,1.084,61,2.412,85,0.844,86,1.293,103,0.501,105,1.223,107,0.602,113,0.691,118,0.578,125,0.009,126,0.012,127,0.009,131,1.133,162,2.412,163,2.591,167,1.51,179,2.125,187,1.581,193,2.238,219,1.741,340,2.605,358,0.95,369,1.652,400,2.805,413,5.22,415,3.074,416,5.002,420,3.09,450,2.259,540,2.259,588,0.477,590,1.237,634,3.486,635,3.775,640,1.483,646,3.09,707,2.805,950,4.527,953,5.014,954,4.399,955,5.014,974,4.906,975,2.805,976,2.591,977,5.002,978,5.587,979,6.444,980,3.836,981,4.676,982,4.137,983,4.137,984,5.376,985,3.074,986,3.434,987,3.434,988,3.074,989,3.775,990,4.621,991,3.775,992,3.434,993,3.434,994,3.434,995,3.775,996,4.621,997,2.591,998,3.434,999,5.831,1000,3.434,1001,4.621,1002,4.621,1003,3.434,1004,4.621,1005,3.434,1006,3.434,1007,3.434,1008,3.434,1009,3.434,1010,3.434,1011,3.434,1012,3.434,1013,3.434]],["title/classes/KeyControls.html",[0,0.168,599,2.683]],["body/classes/KeyControls.html",[0,0.164,2,0.557,3,0.166,4,0.166,5,0.129,7,0.228,9,0.255,11,0.018,15,1.743,16,0.619,17,1.72,29,1.128,34,0.093,35,0.845,39,1.063,42,1.013,44,0.69,45,0.845,46,0.519,47,0.174,48,0.585,51,1.2,68,1.041,71,1.057,74,4.435,76,0.974,87,2.251,89,0.811,103,0.287,107,0.455,113,1.212,118,0.401,125,0.008,126,0.011,127,0.008,145,2.093,179,3.641,187,1.486,193,1.737,203,3.326,219,1.207,261,2.375,262,1.818,278,3.641,369,1.167,380,2.213,420,3.003,546,1.521,595,4.409,598,4.512,599,4.435,602,5.443,685,2.251,710,2.438,882,2.251,887,5.04,899,3.205,908,2.869,910,4.86,911,2.869,953,3.602,954,4.438,955,4.435,980,3.572,1014,5.577,1015,3.947,1016,5.11,1017,5.04,1018,3.714,1019,5.11,1020,3.714,1021,5.11,1022,5.11,1023,3.947,1024,5.11,1025,6.293,1026,5.11,1027,4.409,1028,3.714,1029,5.11,1030,5.11,1031,2.576,1032,3.714,1033,3.714,1034,6.293,1035,3.714,1036,3.714,1037,3.714,1038,3.714,1039,6.293,1040,5.429,1041,7.116,1042,5.11,1043,3.714,1044,4.512,1045,4.409,1046,3.714,1047,3.714,1048,3.714,1049,5.11,1050,3.714,1051,3.714,1052,6.14,1053,3.714,1054,3.714,1055,3.714,1056,3.714,1057,3.714,1058,3.714,1059,3.714,1060,3.714,1061,3.714,1062,3.714,1063,5.11,1064,5.11,1065,5.11,1066,3.714,1067,5.11,1068,3.714]],["title/interfaces/Layer.html",[588,0.339,638,1.816]],["body/interfaces/Layer.html",[3,0.171,4,0.233,5,0.132,7,0.171,9,0.373,11,0.018,15,1.3,17,1.359,19,0.681,34,0.095,46,0.746,47,0.229,48,0.787,51,1.435,53,0.516,71,2.003,105,1.608,125,0.008,126,0.011,127,0.008,140,3.211,233,2.73,236,3.282,248,2.686,311,2.188,313,2.188,360,2.235,363,1.815,380,1.894,426,2.435,588,0.613,590,1.188,633,2.783,638,3.661,640,2.834,642,3.826,644,2.627,645,2.627,646,3.039,655,3.167,658,3.359,661,2.783,743,3.768,753,1.927,1069,2.17,1070,3.159,1071,2.317,1072,2.317,1073,3.159,1074,2.317,1075,2.317,1076,3.159,1077,2.317,1078,2.317,1079,2.317]],["title/interfaces/Map.html",[105,0.869,588,0.339]],["body/interfaces/Map.html",[3,0.17,4,0.232,5,0.132,7,0.17,9,0.37,11,0.018,15,1.297,17,1.355,19,0.681,34,0.095,46,0.697,47,0.226,48,0.595,51,1.384,53,0.519,71,2.001,105,1.728,125,0.008,126,0.011,127,0.008,140,3.205,233,2.129,236,3.278,248,2.029,311,2.322,313,2.322,360,1.689,363,1.612,380,1.891,426,2.496,588,0.612,590,1.184,633,3.668,638,3.537,640,2.833,642,3.822,644,3.355,645,3.355,646,3.278,655,2.033,658,3.464,661,3.668,743,3.766,753,1.919,1069,2.161,1070,2.308,1071,2.308,1072,2.308,1073,3.15,1074,2.308,1075,2.308,1076,3.15,1077,2.308,1078,2.308,1079,2.308]],["title/classes/MouseControls.html",[0,0.168,603,2.683]],["body/classes/MouseControls.html",[0,0.183,2,0.62,3,0.185,4,0.185,5,0.143,7,0.246,9,0.274,11,0.018,14,0.53,19,0.49,31,2.076,34,0.103,35,0.91,39,0.753,42,1.002,44,0.743,45,0.685,46,0.42,47,0.204,48,0.474,68,0.685,76,0.789,81,2.772,85,0.652,86,1.346,89,1.569,103,0.32,107,0.369,118,0.666,125,0.009,126,0.012,127,0.009,131,1.565,151,3.877,167,1.372,187,1.47,193,2.218,203,4.02,219,2.007,315,1.696,323,2.411,328,2.301,369,1.608,370,1.957,372,1.869,508,3.573,509,3.573,517,3.122,525,4.638,527,3.333,601,6.603,603,4.638,623,3.573,710,2.624,746,3.877,882,2.51,896,3.573,897,6.075,954,3.58,964,2.937,980,2.35,1015,4.248,1027,5.909,1080,6.199,1081,5.5,1082,6.176,1083,6.849,1084,5.5,1085,5.5,1086,4.141,1087,4.141,1088,4.141,1089,4.745,1090,4.745,1091,4.141,1092,4.141,1093,4.141,1094,4.141,1095,6.176,1096,6.176,1097,6.176,1098,5.5,1099,4.141,1100,4.141,1101,4.141,1102,2.937,1103,4.141,1104,4.141,1105,4.141,1106,4.141,1107,4.141,1108,6.176,1109,5.5,1110,4.141,1111,4.141,1112,4.141,1113,4.141,1114,4.141,1115,5.5,1116,5.5,1117,5.5,1118,4.141,1119,4.141,1120,5.5,1121,4.141,1122,4.141,1123,4.141,1124,4.141]],["title/interfaces/Object.html",[9,0.19,588,0.339]],["body/interfaces/Object.html",[3,0.167,4,0.229,5,0.13,7,0.167,9,0.385,11,0.018,15,1.705,17,1.781,19,0.679,34,0.093,46,0.742,47,0.231,48,0.588,51,1.43,53,0.521,71,1.992,105,1.598,125,0.008,126,0.011,127,0.008,140,3.181,233,2.103,236,3.526,248,2.005,311,2.297,313,2.297,360,1.669,363,1.597,380,2.032,426,2.487,588,0.609,590,1.162,633,2.742,638,3.451,640,2.794,642,3.806,644,2.588,645,2.588,646,3.011,655,1.997,658,3.339,661,2.742,743,3.755,753,1.885,1069,2.123,1070,2.267,1071,2.267,1072,2.267,1073,3.553,1074,3.825,1075,3.112,1076,3.112,1077,2.267,1078,2.267,1079,2.267]],["title/classes/OneUp.html",[0,0.168,1125,2.94]],["body/classes/OneUp.html",[0,0.12,2,0.735,3,0.122,4,0.122,5,0.094,7,0.313,9,0.334,10,1.388,11,0.017,14,0.698,15,1.36,16,0.495,17,1.065,19,0.364,29,0.902,30,2.181,31,2.096,34,0.068,35,0.676,36,2.119,39,0.495,41,1.949,42,1.072,44,0.552,45,1.173,46,0.702,47,0.226,48,0.792,52,4.056,53,0.504,56,3.524,66,1.898,67,1.892,68,1.128,76,1.169,78,2.078,80,2.318,83,1.993,84,1.898,85,0.772,86,0.884,89,1.071,102,0.741,103,0.21,105,1.245,107,0.52,118,0.588,125,0.006,126,0.009,127,0.006,131,1.162,167,1.633,187,1.138,262,2.182,291,1.232,315,2.681,322,1.453,323,2.891,325,2.232,326,2.395,327,2.606,328,2.03,329,2.512,330,2.182,337,3.093,338,2.03,340,2.816,348,1.453,351,3.524,354,2.659,357,3.061,358,1.809,359,1.232,360,1.327,361,2.639,362,1.232,363,1.112,364,3.169,365,1.595,366,1.595,367,1.758,368,1.232,369,1.245,370,1.824,371,1.232,372,1.852,373,1.232,374,1.232,381,5.17,382,2.381,383,3.524,384,3.841,396,3.547,401,1.673,420,1.949,427,2.958,429,2.513,430,2.11,431,1.771,432,1.649,433,1.771,434,1.771,435,1.827,436,1.649,437,1.649,438,1.649,439,1.232,440,1.595,441,1.758,442,1.758,443,1.232,444,1.758,445,1.758,446,1.232,447,1.595,448,1.758,449,1.595,450,1.544,451,1.595,459,1.232,473,4.702,479,1.371,546,1.115,585,2.102,621,2.102,622,1.918,667,2.879,805,2.944,910,3.155,952,2.879,980,2.318,1031,2.059,1125,4.737,1126,4.231,1127,2.102,1128,3.524,1129,2.879,1130,4.085,1131,4.085,1132,4.085,1133,3.155,1134,3.524,1135,4.085,1136,4.085,1137,4.085,1138,4.085,1139,4.085,1140,4.085,1141,4.085,1142,4.231,1143,4.085,1144,4.085,1145,4.085,1146,4.085,1147,4.085,1148,4.085,1149,3.155,1150,2.721,1151,3.524,1152,4.085,1153,4.085,1154,2.659,1155,1.918,1156,1.918,1157,1.918,1158,1.918,1159,1.918,1160,1.918,1161,2.721,1162,1.918,1163,1.918,1164,1.918,1165,1.918,1166,2.102,1167,2.102,1168,2.721,1169,3.524,1170,3.155,1171,2.721,1172,2.721,1173,2.721,1174,2.721,1175,2.721,1176,2.721]],["title/classes/Particle.html",[0,0.168,1177,2.477]],["body/classes/Particle.html",[0,0.117,2,0.723,3,0.118,4,0.118,5,0.092,7,0.312,9,0.343,11,0.018,14,0.778,15,0.661,16,0.652,17,0.691,19,0.357,29,0.662,30,3.243,31,2.088,34,0.066,35,0.662,36,2.105,39,0.482,42,1.072,44,0.541,45,1.167,46,0.698,47,0.225,48,0.787,51,0.505,53,0.489,60,1.315,66,1.877,67,1.875,68,1.138,74,4.28,76,1.202,78,2.054,83,1.877,84,1.877,85,0.76,86,0.861,89,1.054,103,0.31,105,1.228,107,0.43,118,0.286,125,0.006,126,0.009,127,0.006,131,1.848,167,1.515,168,3.093,187,1.123,315,2.583,322,1.424,323,2.864,325,2.203,326,2.371,327,2.583,328,2.003,329,2.488,330,2.16,337,3.053,338,2.003,340,2.613,344,1.725,348,2.309,353,3.728,354,2.607,357,3.05,358,1.814,359,1.2,360,1.301,361,2.613,362,1.2,363,1.091,364,3.157,365,1.563,366,1.563,367,1.723,368,1.2,369,1.228,370,2.119,371,1.2,372,1.361,373,1.2,374,1.2,380,0.788,382,1.913,401,1.64,423,3.093,427,2.774,429,2.077,430,2.077,431,1.725,432,1.606,433,1.725,434,1.725,435,1.798,436,1.606,437,1.606,438,1.606,439,1.2,440,1.563,441,1.723,442,1.723,443,1.2,444,1.723,445,1.723,446,1.2,447,1.563,448,1.723,449,1.563,450,1.504,451,1.563,459,1.2,479,2.711,546,1.64,588,0.236,622,1.868,805,3.061,964,3.367,980,2.273,995,2.822,1031,2.018,1133,3.093,1149,3.093,1155,1.868,1156,1.868,1157,1.868,1158,1.868,1159,1.868,1160,1.868,1162,1.868,1163,1.868,1164,1.868,1165,1.868,1166,3.093,1167,2.047,1170,3.728,1177,4.678,1178,2.047,1179,3.455,1180,3.455,1181,3.455,1182,2.607,1183,3.455,1184,3.008,1185,4.104,1186,2.65,1187,3.093,1188,3.728,1189,3.093,1190,4.154,1191,2.65,1192,2.822,1193,3.455,1194,3.455,1195,4.164,1196,2.65,1197,3.093,1198,3.455,1199,3.455,1200,1.725,1201,2.287,1202,2.287,1203,2.287,1204,2.047,1205,3.093,1206,4.164,1207,2.287,1208,4.46,1209,4.164,1210,1.868,1211,3.093,1212,4.164,1213,3.455,1214,1.606,1215,3.455,1216,2.822,1217,2.287,1218,2.287,1219,2.287,1220,2.287,1221,2.287,1222,2.287,1223,2.287,1224,1.868,1225,2.287,1226,2.287,1227,2.287,1228,2.287,1229,2.287,1230,2.287,1231,2.287,1232,2.287,1233,2.287]],["title/classes/ParticleEmitter.html",[0,0.168,1182,2.477]],["body/classes/ParticleEmitter.html",[0,0.136,2,0.791,3,0.138,4,0.138,5,0.107,7,0.322,9,0.345,11,0.017,16,0.64,19,0.4,29,0.742,31,2.048,34,0.077,35,0.742,36,2.184,37,3.094,39,0.562,42,1.087,44,0.606,45,1.202,46,0.722,47,0.229,48,0.815,53,0.501,60,1.221,66,1.716,67,1.57,68,1.162,76,1.224,78,1.878,81,2.26,83,1.716,84,1.716,85,0.832,86,1.003,89,0.979,103,0.239,105,1.323,107,0.471,125,0.007,126,0.01,127,0.007,131,1.503,167,1.602,187,1.21,248,1.751,315,2.63,322,1.595,323,2.953,325,2.373,326,2.506,327,2.713,328,2.292,329,2.63,330,2.284,337,3.289,338,2.158,340,2.762,348,2.061,357,3.109,358,1.833,359,1.398,360,1.457,361,2.762,362,1.398,363,1.221,364,3.227,365,1.751,366,1.751,367,1.929,368,1.398,369,1.323,370,1.97,371,1.398,372,1.795,373,1.398,374,1.398,382,1.878,401,1.837,427,2.878,429,2.272,430,2.272,431,2.009,432,1.871,433,2.009,434,2.009,435,1.967,436,1.871,437,1.871,438,1.871,439,1.398,440,1.751,441,1.929,442,1.929,443,1.398,444,1.929,445,1.929,446,1.398,447,2.262,448,1.929,449,1.751,451,1.205,459,1.398,546,1.837,805,3.236,964,2.394,977,3.463,1128,2.663,1155,2.176,1156,2.176,1157,2.176,1158,2.176,1159,2.176,1160,2.176,1162,2.176,1163,2.176,1164,2.176,1177,4.417,1182,3.772,1184,2.906,1185,4.179,1187,3.463,1188,3.463,1189,3.463,1190,3.463,1192,3.16,1234,4.555,1235,2.384,1236,4.484,1237,3.868,1238,4.078,1239,4.484,1240,4.484,1241,3.087,1242,4.484,1243,5.794,1244,3.087,1245,3.087,1246,2.384,1247,3.087,1248,3.087,1249,3.087,1250,3.087]],["title/interfaces/ParticleOptions.html",[588,0.339,1185,2.477]],["body/interfaces/ParticleOptions.html",[0,0.166,3,0.168,4,0.168,5,0.13,7,0.168,9,0.33,11,0.018,14,0.876,15,1.284,16,0.624,17,1.342,19,0.459,30,3.865,31,1.465,34,0.094,44,0.507,47,0.197,51,1.12,53,0.34,60,1.6,66,1.22,67,1.531,74,3.629,78,1.336,83,1.22,84,1.22,85,0.925,86,1.22,89,1.283,103,0.398,107,0.524,118,0.405,125,0.008,126,0.011,127,0.008,131,2.136,168,2.9,315,2.59,322,1.336,323,2.01,340,2.528,344,3.351,348,2.67,353,5.284,354,2.444,358,0.896,370,2.292,380,2.083,382,1.831,423,2.9,450,2.131,451,2.01,459,1.7,479,3.596,588,0.335,590,1.167,622,2.647,805,3.448,964,3.809,980,2.131,995,2.647,1031,1.893,1133,2.9,1149,2.9,1165,2.647,1166,4.538,1167,2.9,1170,4.538,1177,4.852,1178,2.9,1179,3.24,1180,3.24,1181,3.24,1182,2.444,1183,3.24,1184,3.172,1185,4.311,1187,2.9,1188,4.538,1189,2.9,1190,5.116,1192,2.647,1193,3.24,1194,3.24,1195,5.069,1197,2.9,1198,3.24,1199,3.24,1200,2.444,1201,4.442,1202,4.442,1203,4.442,1204,3.976,1205,4.883,1206,5.903,1207,4.442,1208,5.51,1209,5.903,1210,3.629,1211,4.538,1212,5.903,1213,5.715,1214,3.12,1215,5.069,1216,3.629,1217,3.24,1218,3.24,1219,3.24,1220,3.24,1221,3.24,1222,3.24,1223,3.24,1224,2.647,1225,3.24,1226,3.24,1227,3.24,1228,3.24,1229,3.24,1230,3.24,1231,3.24,1232,3.24,1233,3.24]],["title/interfaces/Point.html",[41,1.816,588,0.339]],["body/interfaces/Point.html",[0,0.159,3,0.161,4,0.161,5,0.125,7,0.161,9,0.18,11,0.018,14,0.795,15,1.954,16,0.697,17,2.05,18,2.784,19,0.446,23,2.184,34,0.09,35,0.596,36,1.12,41,2.744,44,0.487,47,0.149,51,0.954,53,0.489,68,0.596,71,1.026,102,0.982,103,0.387,107,0.654,113,1.285,118,0.747,125,0.008,126,0.011,127,0.008,261,1.869,262,2.403,268,2.841,370,2.336,380,2.16,420,2.964,440,1.407,588,0.446,590,1.12,710,1.72,711,2.541,722,2.784,723,2.541,746,3.528,750,2.784,837,2.541,960,2.784,962,2.784,964,3.772,1044,5.218,1200,2.346,1210,2.541,1224,2.541,1251,2.784,1252,6.267,1253,3.866,1254,3.11,1255,3.11,1256,3.11,1257,3.11,1258,3.11,1259,3.11,1260,3.11,1261,3.11,1262,4.441,1263,3.11,1264,3.11,1265,6.19,1266,6.267,1267,2.784,1268,3.11,1269,3.11,1270,3.11,1271,3.11,1272,3.11,1273,3.11,1274,3.11,1275,3.11,1276,3.11,1277,4.319,1278,3.11,1279,3.11,1280,3.11,1281,3.11,1282,3.11,1283,3.11,1284,4.961,1285,3.11,1286,3.11,1287,3.11,1288,3.11,1289,4.319,1290,4.319,1291,3.11,1292,3.11,1293,3.11,1294,3.11,1295,3.11]],["title/interfaces/Property.html",[588,0.339,743,1.918]],["body/interfaces/Property.html",[3,0.178,4,0.239,5,0.138,7,0.178,9,0.375,11,0.018,15,1.335,17,1.395,19,0.67,34,0.099,46,0.751,47,0.228,51,1.458,53,0.513,71,1.98,105,1.624,125,0.009,126,0.012,127,0.009,140,3.263,233,2.192,236,3.32,248,2.09,311,2.21,313,2.21,360,1.739,363,1.648,380,2.15,426,2.457,588,0.62,590,1.236,633,2.858,638,3.495,640,2.82,642,3.86,644,2.698,645,2.698,646,3.089,655,2.123,658,3.393,661,2.858,743,3.855,753,2.004,1069,2.256,1070,2.409,1071,2.409,1072,2.409,1073,3.244,1074,2.409,1075,2.409,1076,3.244,1077,2.409,1078,2.409,1079,2.409]],["title/classes/Rect.html",[0,0.168,315,1.559]],["body/classes/Rect.html",[0,0.161,2,0.756,3,0.163,4,0.163,5,0.126,7,0.303,9,0.289,11,0.018,12,2.696,14,0.646,16,0.442,19,0.45,29,0.604,31,1.93,34,0.091,35,0.835,36,1.799,39,0.664,42,1.076,44,0.682,45,1.085,46,0.665,47,0.225,48,0.75,51,0.696,53,0.511,60,1.701,66,1.186,67,1.085,68,1.033,76,1.103,78,1.298,83,1.186,84,1.186,85,0.575,102,0.994,103,0.39,105,1.153,107,0.584,118,0.545,125,0.008,126,0.011,127,0.008,167,1.444,187,1.054,268,2.866,311,2.263,313,2.306,315,2.686,322,1.796,325,2.068,326,2.26,327,2.371,328,2.443,329,2.371,330,2.059,338,1.881,357,2.947,358,1.85,359,1.652,360,1.186,361,2.491,362,1.652,363,0.994,364,2.918,365,1.425,366,1.425,367,1.571,368,1.652,369,1.153,370,1.95,371,1.652,372,1.968,373,1.652,374,1.652,376,2.072,382,1.298,396,4.74,401,1.495,426,2.409,427,2.068,429,1.571,430,1.571,435,1.36,439,1.652,440,1.425,441,1.571,442,1.571,443,1.652,444,1.571,445,1.571,446,1.652,447,1.425,448,1.571,449,2.26,451,1.425,459,1.652,460,2.376,462,2.376,479,3.305,514,2.545,522,3.06,588,0.325,956,3.9,1102,2.696,1184,2.968,1214,4.529,1296,2.819,1297,4.356,1298,4.356,1299,4.356,1300,4.78,1301,5.049,1302,3.65,1303,3.65,1304,3.65,1305,2.866,1306,3.545,1307,3.65,1308,2.866,1309,2.573,1310,2.573]],["title/interfaces/RectStyleOptions.html",[588,0.339,1300,2.683]],["body/interfaces/RectStyleOptions.html",[0,0.217,3,0.219,4,0.219,5,0.17,7,0.219,9,0.244,11,0.018,12,2.618,14,0.628,19,0.547,34,0.122,44,0.662,47,0.146,51,1.276,53,0.486,60,1.67,85,0.772,102,1.335,103,0.474,107,0.643,118,0.529,125,0.011,126,0.013,127,0.011,268,2.783,311,2.244,313,2.289,315,2.873,322,1.744,328,1.826,358,1.598,370,1.824,372,1.666,376,3.481,396,4.7,426,2.384,449,1.914,451,1.914,459,2.22,460,3.191,462,3.191,479,3.808,514,2.471,522,2.971,588,0.437,590,1.524,956,3.787,1102,2.618,1184,3.175,1214,4.578,1296,3.787,1297,4.23,1298,4.23,1299,4.23,1300,4.943,1305,2.783,1306,3.481,1308,2.783,1309,3.456,1310,3.456]],["title/classes/Renderer.html",[0,0.168,518,2.307]],["body/classes/Renderer.html",[0,0.3,2,0.602,3,0.18,4,0.18,5,0.139,7,0.241,11,0.018,16,0.487,19,0.48,34,0.1,35,0.892,39,0.731,42,1.056,45,1.006,46,0.617,47,0.212,48,0.696,53,0.489,60,1.468,61,2.6,68,0.892,76,1.028,81,2.717,85,0.849,86,1.306,103,0.311,107,0.48,113,0.936,118,0.433,125,0.009,126,0.012,127,0.009,131,1.534,145,2.208,151,2.832,187,1.358,262,1.917,302,4.113,311,2.253,313,2.306,323,2.942,330,1.917,338,2.7,358,1.552,426,2.21,460,3.509,462,3.509,514,3.277,517,4.277,518,3.267,519,4.984,520,3.799,521,4.163,522,3.267,523,4.779,525,4.582,527,3.94,529,3.267,532,4.163,533,4.698,537,4.163,539,4.163,540,3.059,541,5.021,542,4.163,544,4.163,545,4.163,546,1.646,553,2.832,555,3.467,557,3.467,1311,3.467,1312,5.391,1313,5.391,1314,5.391,1315,6.083,1316,4.018,1317,5.391,1318,4.018,1319,4.018,1320,4.018,1321,4.018,1322,4.018,1323,4.018,1324,4.018,1325,4.018,1326,5.391,1327,4.018,1328,4.163,1329,5.391,1330,4.018,1331,4.018,1332,4.018,1333,4.018,1334,5.391,1335,4.018,1336,4.018,1337,4.018,1338,4.018,1339,4.018,1340,4.018,1341,5.391,1342,4.018,1343,4.018,1344,4.018,1345,4.018]],["title/interfaces/Resolution.html",[588,0.339,989,2.683]],["body/interfaces/Resolution.html",[3,0.179,4,0.179,5,0.139,7,0.179,11,0.018,15,1.88,16,0.889,17,1.964,19,0.48,29,0.891,34,0.134,47,0.193,53,0.478,60,1.093,61,2.421,85,0.848,86,1.304,103,0.502,105,1.23,107,0.604,113,0.697,118,0.581,125,0.009,126,0.012,127,0.009,131,1.142,162,2.432,163,2.613,167,1.517,179,2.143,187,1.416,193,2.241,219,1.75,340,2.616,358,0.958,369,1.484,400,2.829,413,5.235,415,4.16,416,5.019,420,3.33,450,2.278,540,2.278,588,0.48,590,1.248,634,2.613,635,2.829,640,1.495,646,3.101,707,2.829,950,4.32,953,4.285,954,3.506,955,4.285,974,5.227,975,2.829,976,2.613,977,5.235,978,5.848,979,6.15,980,3.057,981,4.696,982,4.16,983,4.16,984,5.39,985,4.16,986,4.647,987,4.647,988,4.16,989,4.285,990,5.606,991,4.58,992,3.463,993,3.463,994,3.463,995,3.797,996,4.647,997,2.613,998,3.463,999,5.848,1000,3.463,1001,4.647,1002,4.647,1003,3.463,1004,4.647,1005,3.463,1006,3.463,1007,3.463,1008,3.463,1009,3.463,1010,3.463,1011,3.463,1012,3.463,1013,3.463]],["title/classes/Scene.html",[0,0.168,309,2.032]],["body/classes/Scene.html",[0,0.137,2,0.794,3,0.139,4,0.139,5,0.108,7,0.319,9,0.363,11,0.017,16,0.546,19,0.401,29,0.745,31,2.051,34,0.078,35,0.745,36,2.187,39,0.565,42,1.094,44,0.609,45,1.192,46,0.714,47,0.23,48,0.805,53,0.49,60,1.227,66,1.722,67,1.576,68,1.146,76,1.176,78,1.885,83,1.722,84,1.722,85,0.71,103,0.24,105,1.327,107,0.472,125,0.007,126,0.01,127,0.007,132,2.573,146,3.887,163,2.932,167,1.842,173,4.489,187,1.214,309,3.757,322,1.602,323,2.955,325,2.381,326,2.512,327,2.719,328,2.165,329,2.636,330,2.289,337,3.299,338,2.298,357,3.112,358,1.835,359,1.407,360,1.464,361,2.769,362,1.407,363,1.227,364,3.23,365,1.759,366,1.759,367,1.939,368,1.407,369,1.327,370,1.728,371,1.407,372,1.531,373,1.407,374,1.407,382,1.885,401,2.636,427,2.883,429,2.28,430,2.28,431,2.023,432,1.883,433,2.023,434,2.023,435,1.974,436,1.883,437,1.883,438,1.883,439,1.407,440,1.759,441,1.939,442,1.939,443,1.407,444,1.939,445,1.939,446,1.407,447,1.759,448,2.501,449,1.759,451,1.213,459,1.407,546,1.273,589,5.335,1155,2.19,1156,2.19,1157,2.19,1158,2.19,1159,2.19,1160,2.19,1162,2.19,1163,2.19,1164,2.19,1346,2.681,1347,5.812,1348,5.812,1349,4.505,1350,6.798,1351,4.505,1352,4.505,1353,3.887,1354,3.108,1355,3.108,1356,3.108,1357,3.108,1358,3.108,1359,3.108]],["title/interfaces/Scripts.html",[588,0.339,1360,2.683]],["body/interfaces/Scripts.html",[0,0.168,3,0.17,4,0.32,5,0.132,7,0.17,9,0.19,11,0.018,14,0.814,16,0.717,19,0.463,29,0.63,34,0.095,44,0.514,46,0.778,47,0.155,51,1.442,53,0.343,60,1.037,89,1.586,103,0.402,107,0.627,113,1.104,118,0.806,125,0.008,126,0.011,127,0.008,130,2.684,131,1.084,234,2.033,240,4.956,245,2.684,246,2.684,247,2.684,253,4.577,254,3.852,258,2.684,259,2.478,261,1.923,262,2.368,281,4.139,285,3.15,289,4.338,292,3.205,348,1.354,405,2.941,519,2.478,588,0.463,590,1.184,653,3.664,685,3.15,1360,4.691,1361,2.941,1362,2.684,1363,5.725,1364,3.808,1365,4.571,1366,5.045,1367,5.106,1368,5.486,1369,3.285,1370,3.285,1371,3.383,1372,3.285,1373,3.285,1374,3.285,1375,3.285,1376,4.485,1377,4.485,1378,4.015,1379,2.941,1380,3.285,1381,5.106,1382,3.285,1383,3.285,1384,3.285,1385,3.285,1386,4.485,1387,4.485,1388,3.285,1389,4.485,1390,4.485,1391,4.911,1392,3.285,1393,4.485,1394,3.285,1395,4.485,1396,3.285,1397,4.485,1398,3.285,1399,3.285,1400,5.486,1401,3.285,1402,3.285,1403,3.285,1404,3.285,1405,3.285,1406,3.285,1407,3.285,1408,3.285,1409,3.285,1410,3.285,1411,3.285,1412,3.285,1413,3.285,1414,4.485,1415,3.285,1416,5.486,1417,3.285,1418,3.285,1419,4.485,1420,3.285,1421,3.285,1422,4.485,1423,3.285,1424,3.285,1425,3.285,1426,3.285,1427,3.285,1428,3.285,1429,3.285,1430,3.285,1431,3.285,1432,3.285,1433,3.285,1434,3.285,1435,3.285,1436,3.285,1437,3.285]],["title/classes/ShaderProgram.html",[0,0.168,1371,2.477]],["body/classes/ShaderProgram.html",[0,0.15,2,0.51,3,0.152,4,0.311,5,0.118,7,0.286,9,0.24,11,0.018,14,0.776,16,0.675,29,0.563,34,0.085,35,0.795,39,0.619,42,0.91,44,0.65,45,1.002,46,0.794,47,0.18,48,0.693,51,1.458,53,0.368,60,1.31,68,0.922,76,0.649,89,1.547,103,0.372,107,0.608,113,1.052,118,0.791,125,0.007,126,0.01,127,0.007,130,3.389,131,1.368,145,1.97,164,3.389,240,5.166,245,3.389,246,3.389,247,3.389,253,4.533,254,4.318,258,3.389,259,2.215,261,2.156,262,2.477,281,4.318,285,3.672,289,4.02,292,3.054,348,1.211,405,3.714,519,3.629,588,0.303,653,3.389,685,2.914,1360,4.908,1361,5.123,1362,2.399,1363,5.544,1365,4.679,1366,4.676,1367,5.514,1368,5.514,1369,4.149,1370,4.149,1371,3.944,1372,2.937,1373,2.937,1374,2.937,1375,2.937,1376,5.227,1377,4.149,1378,4.679,1379,3.714,1380,4.149,1381,4.81,1382,2.937,1383,2.937,1384,2.937,1385,2.937,1386,5.227,1387,4.149,1388,4.149,1389,4.149,1390,4.149,1391,5.123,1392,4.149,1393,4.149,1394,4.149,1395,5.227,1396,4.149,1397,4.149,1398,2.937,1399,2.937,1400,5.227,1401,2.937,1402,2.937,1403,2.937,1404,2.937,1405,2.937,1406,2.937,1407,2.937,1408,2.937,1409,2.937,1410,2.937,1411,2.937,1412,2.937,1413,2.937,1414,4.149,1415,2.937,1416,5.227,1417,2.937,1418,2.937,1419,4.149,1420,2.937,1421,2.937,1422,4.149,1423,2.937,1424,2.937,1425,2.937,1426,2.937,1427,2.937,1428,2.937,1429,2.937,1430,2.937,1431,2.937,1432,2.937,1433,2.937,1434,2.937,1435,2.937,1436,2.937,1437,2.937,1438,4.809,1439,4.809,1440,3.404,1441,3.404,1442,3.404,1443,3.404,1444,3.404,1445,3.404]],["title/classes/Sound.html",[0,0.168,144,2.032]],["body/classes/Sound.html",[0,0.177,2,0.601,3,0.179,4,0.272,5,0.139,7,0.272,9,0.303,10,1.83,11,0.018,14,0.778,16,0.652,19,0.48,29,0.89,34,0.1,35,0.89,37,3.725,38,4.228,39,0.73,42,0.993,44,0.727,45,1.005,46,0.617,47,0.181,48,0.695,51,1.158,53,0.265,58,4.693,67,1.192,68,1.005,71,1.141,73,3.504,76,1.158,85,0.632,89,1.176,102,1.092,103,0.416,107,0.542,113,0.696,118,0.731,125,0.009,126,0.012,127,0.009,128,3.936,132,1.83,144,4.182,145,2.205,176,2.826,187,1.269,193,2.074,209,4.578,219,1.303,261,1.749,278,2.874,292,2.021,369,1.388,546,1.642,572,3.262,588,0.357,710,2.568,803,3.097,1154,3.504,1184,3.386,1216,3.794,1446,3.097,1447,3.504,1448,4.157,1449,4.644,1450,4.157,1451,4.319,1452,5.31,1453,3.794,1454,4.39,1455,4.01,1456,4.283,1457,4.01,1458,4.644,1459,4.644,1460,4.01,1461,4.644,1462,4.157,1463,4.01,1464,4.01,1465,4.01,1466,4.644,1467,4.01,1468,4.01,1469,3.459,1470,5.243,1471,3.459,1472,3.459,1473,5.604,1474,3.459,1475,3.459,1476,3.459,1477,3.459,1478,3.459,1479,3.459,1480,3.459,1481,3.097,1482,3.459,1483,3.459,1484,3.459,1485,3.459,1486,3.459,1487,3.459]],["title/classes/SoundGroup.html",[0,0.168,1488,2.94]],["body/classes/SoundGroup.html",[0,0.208,2,0.704,3,0.21,4,0.21,5,0.163,7,0.293,9,0.298,10,2.03,11,0.018,14,0.976,16,0.57,34,0.117,35,0.988,37,4.001,38,4.416,39,0.856,42,0.935,44,0.807,45,0.988,46,0.606,47,0.178,48,0.683,68,0.988,76,1.139,80,3.39,85,0.941,89,1.027,102,1.281,103,0.363,107,0.532,118,0.644,125,0.01,126,0.013,127,0.01,144,4.117,363,1.881,450,2.669,546,1.926,1184,2.704,1192,4.868,1200,3.06,1246,4.614,1447,5.019,1448,4.614,1450,4.614,1451,3.62,1454,4.186,1462,4.614,1481,4.614,1488,5.628,1489,5.335,1490,3.631,1491,5.974,1492,5.974,1493,5.974,1494,5.974,1495,5.974,1496,4.702,1497,5.974,1498,5.974,1499,4.702,1500,6.907,1501,4.702,1502,4.057,1503,4.702]],["title/interfaces/SoundOptions.html",[588,0.339,1454,2.307]],["body/interfaces/SoundOptions.html",[0,0.195,3,0.197,4,0.256,5,0.153,7,0.197,9,0.318,10,1.501,11,0.018,14,0.735,16,0.772,19,0.511,29,1.054,34,0.11,37,3.064,38,3.477,44,0.597,47,0.171,51,0.842,53,0.421,58,4.432,67,1.313,71,1.257,73,2.875,85,0.696,89,1.253,102,1.203,103,0.444,107,0.568,113,0.767,118,0.728,125,0.01,126,0.012,127,0.01,128,4.089,132,1.501,144,4.15,176,3.113,187,1.409,193,2.131,209,4.756,219,1.435,261,1.435,278,2.358,292,2.226,369,1.456,572,4.238,588,0.394,590,1.373,710,2.107,803,3.411,1154,2.875,1184,3.349,1216,4.044,1446,3.411,1447,2.875,1448,3.411,1449,3.81,1450,3.411,1451,3.862,1452,5.355,1453,3.113,1454,4.238,1456,4.044,1458,3.81,1459,3.81,1461,3.81,1462,3.411,1466,3.81,1469,4.95,1470,5.499,1471,3.81,1472,3.81,1473,5.821,1474,3.81,1475,3.81,1476,3.81,1477,3.81,1478,3.81,1479,3.81,1480,3.81,1481,3.411,1482,3.81,1483,3.81,1484,3.81,1485,3.81,1486,3.81,1487,3.81]],["title/classes/SoundPool.html",[0,0.168,1504,2.94]],["body/classes/SoundPool.html",[0,0.209,2,0.71,3,0.212,4,0.294,5,0.164,7,0.268,9,0.299,10,2.04,11,0.017,14,0.768,16,0.727,29,0.784,32,4.635,34,0.118,35,0.993,37,3.816,38,4.197,39,0.862,42,0.938,44,0.811,45,0.993,46,0.609,47,0.179,48,0.687,51,1.256,53,0.472,68,0.993,76,1.144,85,0.746,89,1.311,102,1.29,103,0.366,107,0.587,118,0.647,125,0.01,126,0.013,127,0.01,144,4.181,193,1.409,248,2.343,356,3.339,546,1.94,572,2.871,1154,3.907,1184,3.357,1237,6.299,1447,3.907,1451,4.197,1452,3.339,1453,4.23,1454,4.425,1456,4.23,1489,5.35,1502,4.087,1504,5.35,1505,3.659,1506,5.178,1507,6.002,1508,6.002,1509,6.002,1510,6.002,1511,6.002,1512,6.926,1513,4.737,1514,6.002,1515,4.737,1516,4.737,1517,4.737,1518,4.737,1519,4.737,1520,4.737]],["title/classes/Sprite.html",[0,0.168,61,1.418]],["body/classes/Sprite.html",[0,0.139,2,0.68,3,0.14,4,0.14,5,0.109,7,0.289,9,0.266,10,1.543,11,0.018,12,2.424,14,0.889,16,0.807,19,0.576,29,0.52,31,1.838,34,0.078,35,0.751,36,1.657,39,0.572,41,2.787,42,1.079,44,0.613,45,1.101,46,0.676,47,0.217,48,0.762,53,0.491,60,1.759,61,2.736,66,1.021,67,0.934,68,1.068,71,1.662,76,1.181,78,1.117,80,2.577,83,1.021,84,1.021,85,0.495,89,1.354,102,0.855,103,0.243,105,1.037,107,0.475,113,1.075,118,0.697,125,0.007,126,0.01,127,0.007,140,2.288,145,1.86,167,1.33,169,3.2,187,0.948,261,2.292,278,3.119,291,2.055,311,2.07,313,2.07,322,1.615,325,1.86,326,2.082,327,2.184,328,1.691,329,2.184,330,1.897,338,1.691,357,2.846,358,1.832,359,1.422,360,1.021,361,2.294,362,1.422,363,0.855,364,2.779,365,1.226,366,1.226,367,1.352,368,1.422,369,1.037,370,1.98,371,1.422,372,1.068,373,1.422,374,1.422,380,1.737,382,1.117,401,1.287,427,1.86,429,1.352,430,1.352,435,1.17,439,1.422,440,1.226,441,1.352,442,1.352,443,1.422,444,1.352,445,1.352,446,1.422,447,1.226,448,1.352,449,2.082,451,1.226,459,1.422,734,4.367,805,2.288,819,2.214,821,2.214,844,2.426,845,2.426,851,4.118,852,4.118,918,3.917,945,4.132,950,2.751,1023,3.507,1102,2.424,1151,3.917,1305,2.577,1306,3.315,1308,2.577,1521,2.71,1522,4.54,1523,4.54,1524,4.54,1525,4.317,1526,5.841,1527,5.841,1528,4.54,1529,4.54,1530,4.54,1531,4.54,1532,4.54,1533,5.04,1534,4.54,1535,4.988,1536,6.197,1537,6.197,1538,3.917,1539,3.141,1540,3.141,1541,3.141,1542,3.141,1543,3.141,1544,3.141,1545,3.141,1546,3.141,1547,3.141,1548,3.141,1549,4.54,1550,3.141,1551,3.141,1552,3.141,1553,3.141,1554,3.141,1555,3.141,1556,3.141,1557,3.141,1558,3.141,1559,4.54,1560,4.54,1561,4.54,1562,3.141,1563,3.141,1564,3.141,1565,2.71,1566,3.141]],["title/classes/State.html",[0,0.168,1031,1.918]],["body/classes/State.html",[0,0.155,2,0.526,3,0.157,4,0.157,5,0.122,7,0.299,9,0.245,10,1.927,11,0.018,14,0.828,16,0.744,19,0.438,25,3.796,31,2.03,34,0.088,35,0.813,37,1.875,39,0.894,42,1.015,44,0.664,45,1.069,46,0.656,47,0.205,48,0.74,49,3.691,53,0.463,66,1.597,67,1.923,68,1.108,71,1.907,73,4.834,76,1.081,78,1.748,80,3.803,81,2.477,83,1.843,84,1.843,89,1.342,102,0.956,103,0.271,107,0.576,110,2.128,113,1.122,118,0.53,125,0.008,126,0.011,127,0.008,132,1.193,160,2.712,167,1.226,179,1.875,180,2.712,187,1.35,193,1.686,219,1.141,262,2.3,294,2.285,348,1.249,363,1.339,369,1.53,382,2.017,540,2.789,685,2.128,710,1.675,753,3.259,798,5.935,834,2.712,865,3.029,1023,2.712,1031,4.011,1089,4.24,1090,4.24,1154,3.199,1211,3.796,1353,4.24,1451,2.978,1506,4.24,1567,3.029,1568,3.511,1569,3.511,1570,3.511,1571,3.511,1572,3.511,1573,3.511,1574,3.511,1575,3.511,1576,3.511,1577,3.511,1578,3.511,1579,3.511,1580,6.879,1581,3.511,1582,3.511,1583,3.511,1584,3.511,1585,3.511,1586,3.511,1587,3.511,1588,3.511,1589,3.511,1590,3.511,1591,3.511,1592,3.511,1593,3.511,1594,4.915,1595,4.915,1596,7.52,1597,3.511,1598,4.915,1599,3.511,1600,3.511,1601,3.511,1602,6.142,1603,3.511,1604,4.915,1605,3.511,1606,4.915,1607,3.511,1608,6.7,1609,4.915,1610,3.511,1611,4.915,1612,4.915,1613,3.511,1614,3.511,1615,3.511,1616,6.142,1617,6.142,1618,4.915,1619,6.142,1620,4.915]],["title/classes/Text.html",[0,0.168,547,2.307]],["body/classes/Text.html",[0,0.164,2,0.764,3,0.166,4,0.166,5,0.128,7,0.304,9,0.291,10,1.733,11,0.018,12,2.723,14,0.653,16,0.449,19,0.454,27,3.091,29,0.613,31,1.939,34,0.092,35,0.844,36,1.813,39,0.674,42,1.066,44,0.689,45,1.09,46,0.669,47,0.223,48,0.754,51,1.331,53,0.491,55,3.595,60,1.989,66,1.203,67,1.101,68,1.04,76,1.112,78,1.317,83,1.203,84,1.203,85,0.583,102,1.009,103,0.394,105,1.165,107,0.56,118,0.55,125,0.008,126,0.011,127,0.008,131,1.054,167,1.455,187,1.065,234,2.723,307,3.939,322,1.814,325,2.089,326,2.277,327,2.389,328,1.9,329,2.389,330,2.075,338,1.9,357,2.956,358,1.853,359,1.677,360,1.203,361,2.51,362,1.677,363,1.009,364,2.932,365,1.446,366,1.446,367,1.594,368,1.677,369,1.165,370,1.517,371,1.677,372,1.259,373,1.677,374,1.677,376,2.102,382,1.317,397,3.939,401,1.517,427,2.089,429,1.594,430,1.594,435,1.38,439,1.677,440,1.446,441,1.594,442,1.594,443,1.677,444,1.594,445,1.594,446,1.677,447,1.446,448,1.594,449,2.277,451,1.446,459,1.677,479,2.571,514,2.571,517,3.567,547,4.749,588,0.33,805,3.322,1102,2.723,1184,1.677,1214,4.309,1238,3.939,1305,2.895,1306,3.567,1308,2.895,1309,3.595,1310,2.61,1621,2.86,1622,4.4,1623,4.4,1624,4.4,1625,4.4,1626,4.4,1627,4.802,1628,5.1,1629,5.422,1630,3.704,1631,3.704,1632,4.4,1633,3.195,1634,3.195,1635,3.195,1636,3.195]],["title/interfaces/TextOptions.html",[588,0.339,1627,2.683]],["body/interfaces/TextOptions.html",[0,0.211,3,0.214,4,0.214,5,0.166,7,0.214,9,0.238,10,1.624,11,0.018,12,2.552,14,0.612,19,0.538,27,2.896,34,0.119,44,0.646,47,0.197,48,0.691,51,1.433,53,0.398,55,3.368,60,1.952,85,0.753,102,1.302,103,0.467,107,0.619,118,0.516,125,0.01,126,0.013,127,0.01,131,1.718,234,2.552,307,3.691,322,1.7,358,1.579,376,3.425,397,3.691,449,1.866,451,1.866,459,2.164,479,3.688,514,2.409,517,3.425,547,4.773,588,0.426,590,1.485,805,3.502,1102,2.552,1184,2.732,1214,4.211,1238,3.691,1305,2.712,1306,3.425,1308,2.712,1309,3.368,1310,3.368,1621,3.691,1622,4.123,1623,4.123,1624,4.123,1625,4.123,1626,4.123,1627,4.897,1629,5.207,1632,6.313,1633,5.207,1634,5.995,1635,5.707,1636,4.123]],["title/classes/Texture.html",[0,0.168,1525,2.16]],["body/classes/Texture.html",[0,0.234,2,0.794,3,0.237,4,0.237,5,0.24,7,0.288,9,0.321,10,2.187,11,0.017,14,0.824,19,0.573,34,0.132,39,0.965,42,0.916,44,0.869,45,0.877,46,0.538,47,0.192,48,0.607,51,1.321,85,0.835,102,1.444,103,0.41,107,0.472,118,0.694,125,0.012,126,0.014,127,0.012,130,4.536,132,1.802,140,3.784,150,5.552,151,4.536,152,5.552,153,6.218,169,4.536,200,5.352,710,3.071,1015,4.97,1525,4.26,1637,4.574,1638,6.436,1639,6.436,1640,6.436,1641,5.301,1642,5.301]],["title/interfaces/Tile.html",[588,0.339,640,1.418]],["body/interfaces/Tile.html",[3,0.177,4,0.239,5,0.137,7,0.177,9,0.372,11,0.018,15,1.333,17,1.392,19,0.684,34,0.099,46,0.705,47,0.227,48,0.611,51,1.423,53,0.515,71,2.022,105,1.623,125,0.009,126,0.012,127,0.009,140,3.259,233,2.188,236,3.53,248,2.085,311,2.209,313,2.209,360,1.736,363,1.645,380,1.922,426,2.456,588,0.62,590,1.232,633,2.852,638,3.493,640,2.879,642,3.858,644,2.692,645,2.692,646,3.085,655,2.116,658,3.447,661,2.852,743,3.79,753,1.998,1069,2.249,1070,2.402,1071,2.402,1072,2.402,1073,3.237,1074,2.402,1075,2.402,1076,3.237,1077,2.402,1078,2.402,1079,2.402]],["title/classes/TileSprite.html",[0,0.168,340,1.638]],["body/classes/TileSprite.html",[0,0.145,1,4.945,2,0.7,3,0.146,4,0.146,5,0.113,7,0.301,9,0.272,11,0.017,12,1.747,13,2.822,14,0.599,15,1.166,16,0.396,17,1.219,19,0.53,29,0.541,31,2.071,34,0.082,35,0.773,36,1.695,39,0.595,41,2.603,42,1.084,44,0.632,45,1.083,46,0.664,47,0.225,48,0.749,49,4.387,53,0.512,60,1.783,61,2.883,66,1.773,67,1.622,68,1.041,76,1.134,78,1.94,83,1.773,84,1.773,85,0.736,86,1.063,96,2.822,103,0.253,104,4.706,105,1.068,107,0.561,113,0.811,125,0.007,126,0.01,127,0.007,131,1.33,145,1.915,167,1.361,187,0.976,233,2.438,261,1.934,311,2.298,313,2.298,322,1.663,325,1.915,326,2.13,327,2.234,328,1.741,329,2.761,330,1.94,338,1.741,340,2.561,344,3.043,355,4.033,357,2.981,358,1.804,359,1.481,360,1.063,361,2.347,362,1.481,363,0.891,364,2.817,365,1.277,366,1.277,367,1.408,368,1.481,369,1.068,370,1.77,371,1.481,372,1.112,373,1.481,374,1.481,382,1.164,401,1.34,426,2.473,427,1.915,429,1.408,430,1.408,435,1.219,439,1.481,440,2.13,441,1.408,442,1.408,443,1.481,444,1.408,445,1.408,446,1.481,447,1.277,448,1.408,449,1.825,451,1.277,640,1.741,644,2.75,645,2.75,734,3.845,819,2.306,821,2.306,945,3.607,1102,3.361,1305,1.857,1306,2.653,1308,1.857,1525,3.912,1535,4.597,1538,4.033,1643,6.053,1644,2.527,1645,4.675,1646,3.271,1647,3.271,1648,3.271,1649,3.271,1650,3.271,1651,2.822,1652,2.822,1653,3.271,1654,2.822,1655,3.271,1656,5.952,1657,3.271,1658,4.675,1659,3.271,1660,4.675,1661,3.271,1662,3.271,1663,3.271,1664,3.271,1665,3.271]],["title/interfaces/TiledMap.html",[588,0.339,643,2.683]],["body/interfaces/TiledMap.html",[3,0.137,4,0.137,5,0.106,7,0.235,9,0.35,11,0.018,14,0.674,15,1.115,16,0.821,17,1.165,19,0.398,23,1.862,29,0.508,34,0.16,35,0.739,36,0.955,41,2.132,42,0.636,45,0.739,46,0.736,47,0.222,48,0.511,49,2,51,1.292,53,0.505,68,0.739,80,1.744,85,0.484,86,0.998,87,4.357,103,0.475,105,1.642,107,0.547,113,1.003,118,0.745,125,0.007,126,0.01,127,0.011,141,2.373,164,2.165,167,0.766,187,1.381,193,1.566,219,0.998,233,1.258,236,1.466,248,2.582,261,1.879,285,1.862,292,2.654,294,2,311,1.909,313,1.909,358,0.733,363,1.746,365,2.257,369,1.403,426,1.965,529,2.708,546,1.83,571,2.373,588,0.547,590,0.955,602,2.165,629,3.149,630,3.711,631,2,632,2.651,633,3.422,634,2.908,635,3.149,636,2.373,637,5.706,638,3.234,639,2.651,640,2.524,641,4.465,642,3.279,643,3.711,644,3.23,645,3.23,646,3.491,647,5.529,648,5.529,649,3.855,650,5.529,651,5.847,652,4.988,653,4.662,654,3.855,655,3.279,656,3.855,657,2.651,658,2.512,659,3.855,660,3.855,661,2.811,662,2.651,663,2.651,664,2.651,665,2.651,666,2.651,667,2.165,668,2.651,669,2.651,670,2.651,671,4.543,672,2.651,673,2.651,674,2.651,675,2.651,676,2.651,677,2.651,678,3.855,679,2.651,680,2.651,681,2.651,682,2.651,683,2.651,684,4.543,685,2.708,686,3.855,687,3.855,688,3.855,689,4.543,690,3.855,691,2.651,692,2.651,693,2.651,694,2.651,695,3.855,696,2.651,697,4.543,698,2.651,699,2.651,700,2.651,701,2.651,702,2.651,703,2.651,704,2.651,705,2.651,706,2.651,707,2.165,1666,4.468,1667,4.468,1668,3.072,1669,3.072]],["title/interfaces/Tileset.html",[588,0.339,658,1.816]],["body/interfaces/Tileset.html",[3,0.166,4,0.261,5,0.129,7,0.166,9,0.368,11,0.018,15,1.274,17,1.331,19,0.678,34,0.093,46,0.692,47,0.228,48,0.72,51,1.406,53,0.521,71,2.025,105,1.595,125,0.008,126,0.011,127,0.008,140,3.683,233,2.392,236,3.332,248,1.994,311,2.244,313,2.244,360,1.66,363,1.713,380,1.871,426,2.529,588,0.607,590,1.153,633,2.727,638,3.445,640,2.858,642,3.799,644,3.325,645,3.325,646,3.395,655,1.981,658,3.55,661,2.727,743,3.75,753,2.574,1069,2.106,1070,2.249,1071,2.249,1072,2.249,1073,3.539,1074,2.249,1075,2.249,1076,4.131,1077,3.812,1078,3.812,1079,3.812]],["title/classes/Timer.html",[0,0.168,1670,2.683]],["body/classes/Timer.html",[0,0.165,2,0.558,3,0.166,4,0.166,5,0.129,7,0.261,9,0.314,10,1.74,11,0.018,14,0.656,16,0.709,19,0.456,26,4.418,27,3.103,29,0.847,30,2.734,31,1.942,34,0.093,35,0.847,39,0.678,42,0.897,44,0.692,45,0.847,46,0.52,47,0.197,48,0.586,53,0.495,60,1.716,61,1.907,66,1.664,67,2.03,68,0.616,76,0.976,78,1.821,81,3.44,83,2.047,84,1.664,88,4.418,89,1.443,102,1.015,103,0.288,107,0.589,113,0.889,118,0.631,125,0.008,126,0.011,127,0.008,132,1.74,138,5.436,167,1.842,173,4.866,187,1.316,193,1.874,219,1.211,291,2.852,309,2.734,327,2.706,330,2.081,337,2.906,354,3.333,372,1.74,381,5.271,382,2.428,435,2.347,514,2.581,536,4.441,546,1.526,572,4.316,620,3.214,621,3.955,667,4.441,793,3.955,810,4.418,833,3.214,877,4.418,991,3.609,1031,2.581,1134,4.418,1169,4.418,1670,5.316,1671,2.877,1672,5.121,1673,5.888,1674,5.121,1675,7.121,1676,5.121,1677,4.418,1678,5.121,1679,6.301,1680,5.121,1681,5.121,1682,5.436,1683,7.121,1684,3.725,1685,6.825,1686,7.121,1687,5.121,1688,3.725,1689,3.725,1690,5.121,1691,5.121,1692,5.121,1693,5.121,1694,3.725,1695,3.955,1696,3.214,1697,5.851,1698,5.851,1699,5.121,1700,5.851,1701,3.725]],["title/classes/Trigger.html",[0,0.168,1702,2.94]],["body/classes/Trigger.html",[0,0.121,2,0.738,3,0.122,4,0.122,5,0.095,7,0.3,9,0.307,10,1.395,11,0.018,12,1.462,14,0.7,16,0.71,19,0.366,29,0.679,30,1.462,31,1.943,34,0.068,35,0.679,36,1.911,39,0.498,42,1.08,44,0.555,45,1.147,46,0.704,47,0.226,48,0.793,53,0.484,60,1.675,61,2.786,66,1.334,67,1.626,68,1.13,71,0.779,76,1.172,78,1.46,83,1.334,84,1.334,85,0.431,89,0.897,102,0.746,103,0.212,105,1.249,107,0.487,113,1.016,118,0.443,125,0.006,126,0.009,127,0.006,131,1.168,145,1.681,163,4.268,167,1.788,187,1.331,193,1.464,219,1.334,278,2.191,315,1.122,322,1.46,325,2.24,326,2.401,327,2.519,328,2.037,329,2.519,330,2.187,338,2.037,357,3.064,358,1.816,359,1.24,360,1.334,361,2.646,362,1.24,363,1.118,364,3.022,365,1.602,366,1.602,367,1.766,368,1.24,369,1.404,370,1.626,371,1.24,372,1.395,373,1.24,374,1.24,382,1.46,395,5.355,396,2.672,401,2.797,427,2.24,429,1.766,430,1.766,435,1.529,439,1.24,440,1.602,441,1.766,442,1.766,443,1.24,444,1.766,445,1.766,446,1.24,447,1.602,448,1.766,449,1.922,475,2.363,479,1.38,480,2.363,540,2.33,570,3.17,734,3.47,753,2.069,805,2.069,945,4.256,950,3.314,1031,2.069,1040,3.541,1052,3.541,1102,1.462,1197,3.17,1208,4.223,1305,1.554,1306,2.33,1308,1.554,1535,4.223,1565,3.541,1651,2.363,1652,2.363,1654,2.363,1702,5.694,1703,2.363,1704,6.149,1705,4.105,1706,4.105,1707,4.105,1708,4.105,1709,5.468,1710,5.468,1711,6.149,1712,5.468,1713,4.105,1714,6.934,1715,4.105,1716,6.557,1717,4.105,1718,4.105,1719,6.934,1720,4.105,1721,4.105,1722,4.105,1723,2.739,1724,2.739,1725,2.739,1726,2.739,1727,2.739,1728,2.739,1729,2.739,1730,4.105,1731,2.739,1732,4.105,1733,4.105,1734,2.739,1735,2.739,1736,2.739,1737,2.739,1738,2.739,1739,2.739,1740,2.739,1741,2.739,1742,2.739,1743,2.739,1744,2.739,1745,2.739,1746,2.739,1747,2.739,1748,2.739,1749,2.739,1750,2.739,1751,2.739,1752,2.739,1753,2.739,1754,2.363,1755,2.739,1756,2.739]],["title/classes/Vec.html",[0,0.168,370,1.132]],["body/classes/Vec.html",[0,0.124,2,0.421,3,0.125,4,0.125,5,0.097,7,0.307,9,0.208,11,0.018,14,0.823,15,1.939,16,0.605,17,2.039,18,3.23,19,0.373,23,2.534,34,0.07,35,0.916,36,1.721,39,0.511,41,2.384,42,1.034,44,0.565,45,1.117,46,0.685,47,0.208,48,0.772,51,1.128,53,0.499,68,1.18,71,1.575,102,0.765,103,0.323,107,0.621,113,1.225,118,0.728,125,0.006,126,0.009,127,0.006,261,2.017,262,2.511,268,3.142,370,2.363,380,2.222,420,1.995,440,1.633,588,0.25,710,1.995,711,3.522,722,3.23,723,2.947,746,2.947,750,3.23,837,2.947,960,3.23,962,3.23,964,3.904,1044,5.102,1200,2.722,1210,2.947,1224,2.947,1251,2.169,1252,6.213,1253,4.276,1254,3.608,1255,3.608,1256,3.608,1257,3.608,1258,3.608,1259,3.608,1260,3.608,1261,3.608,1262,5.102,1263,3.608,1264,2.422,1265,5.824,1266,5.928,1267,3.23,1268,3.608,1269,2.422,1270,3.608,1271,4.776,1272,2.422,1273,3.608,1274,3.608,1275,4.776,1276,3.608,1277,4.776,1278,4.776,1279,3.608,1280,3.608,1281,4.776,1282,3.608,1283,3.608,1284,5.354,1285,2.422,1286,4.776,1287,2.422,1288,2.422,1289,5.354,1290,4.776,1291,3.608,1292,3.608,1293,3.608,1294,3.608,1295,4.776,1757,2.808,1758,2.808,1759,2.808,1760,2.808,1761,2.808,1762,2.808,1763,2.808,1764,2.808,1765,2.808,1766,2.808,1767,2.808,1768,2.808,1769,2.808,1770,2.808,1771,2.808]],["title/interfaces/VecEntity.html",[588,0.339,1772,2.94]],["body/interfaces/VecEntity.html",[3,0.168,4,0.168,5,0.13,7,0.168,11,0.018,15,1.578,16,0.624,17,1.532,19,0.564,31,1.673,34,0.094,47,0.188,52,3.122,53,0.471,66,2.153,67,1.97,71,1.07,83,2.439,84,1.91,85,0.592,86,1.221,103,0.552,107,0.673,113,1.02,118,0.756,125,0.008,126,0.011,127,0.008,131,1.466,167,1.748,203,4.561,262,2.538,291,2.332,328,2.356,350,5.904,370,2.257,372,1.998,420,1.793,588,0.524,590,1.168,985,5.413,991,3.631,1165,4.67,1204,2.903,1205,4.885,1253,5.413,1772,5.954,1773,3.243,1774,5.152,1775,6.325,1776,6.325,1777,6.844,1778,6.626,1779,6.325,1780,6.844,1781,6.325,1782,5.152,1783,5.152,1784,5.152,1785,5.152,1786,5.152,1787,7.325,1788,3.759,1789,5.152,1790,5.152,1791,3.759,1792,3.759,1793,5.879,1794,3.759,1795,5.152,1796,4.445,1797,5.152,1798,5.152,1799,5.152,1800,5.879,1801,5.152,1802,3.759,1803,3.759,1804,3.243,1805,5.152,1806,3.759,1807,3.759,1808,3.759,1809,3.759,1810,3.759,1811,3.759,1812,5.152]],["title/classes/WebAudio.html",[0,0.168,1813,2.94]],["body/classes/WebAudio.html",[0,0.178,2,0.602,3,0.18,4,0.272,5,0.139,7,0.241,11,0.018,14,0.69,19,0.48,29,1.006,34,0.1,35,0.892,37,3.471,38,3.94,39,0.731,42,1.056,44,0.728,45,0.665,46,0.408,47,0.12,48,0.46,51,1.16,55,2.832,68,1.075,76,1.239,89,1.481,103,0.311,107,0.358,113,1.177,118,0.581,125,0.009,126,0.012,127,0.009,144,2.878,145,2.208,176,2.832,209,5.228,261,2.355,348,1.429,356,2.832,369,1.231,380,1.195,384,3.799,527,4.321,548,4.698,594,4.651,710,1.917,802,4.651,884,3.467,952,2.832,1246,4.163,1447,4.231,1451,3.687,1452,3.799,1453,3.799,1456,4.288,1813,5.391,1814,6.455,1815,3.467,1816,4.018,1817,4.018,1818,4.018,1819,4.018,1820,4.018,1821,4.018,1822,4.018,1823,4.018,1824,6.083,1825,6.501,1826,6.501,1827,7.131,1828,6.083,1829,6.78,1830,4.018,1831,6.501,1832,5.391,1833,5.391,1834,4.018,1835,4.018,1836,5.391,1837,4.018,1838,5.391,1839,7.248,1840,4.018,1841,4.018,1842,5.391,1843,4.018,1844,4.018,1845,6.083,1846,4.018,1847,4.018,1848,4.018,1849,4.018,1850,5.391,1851,4.018,1852,4.018,1853,5.391,1854,4.018,1855,6.083,1856,4.018,1857,4.018,1858,5.391,1859,5.391,1860,5.391,1861,5.391,1862,4.018,1863,4.018,1864,4.018,1865,4.018,1866,6.083,1867,4.018,1868,4.018,1869,4.018,1870,4.018,1871,4.018,1872,4.018,1873,4.018,1874,4.018,1875,4.018,1876,6.083,1877,4.018,1878,4.018,1879,4.018]],["title/classes/WebGLRenderer.html",[0,0.168,832,2.683]],["body/classes/WebGLRenderer.html",[0,0.125,2,0.423,3,0.126,4,0.126,5,0.098,7,0.248,9,0.277,11,0.018,14,0.759,16,0.753,19,0.374,29,0.467,34,0.07,35,0.694,36,1.304,39,0.513,42,0.962,44,0.567,45,0.918,46,0.563,47,0.197,48,0.635,51,0.8,53,0.446,61,2.66,68,0.829,76,0.8,85,0.874,86,0.916,87,1.709,89,1.56,103,0.218,105,0.958,107,0.528,110,2.542,113,1.173,118,0.794,125,0.006,126,0.009,127,0.006,131,0.803,132,1.703,169,1.988,187,1.046,193,0.839,200,3.24,201,4.787,219,1.363,221,2.178,234,2.675,252,2.731,253,2.731,254,2.731,255,2.178,259,1.836,260,2.178,262,1.782,289,2.542,291,2.268,292,1.422,302,3.366,309,1.506,311,2.001,313,2.138,315,1.719,322,1.492,323,2.919,325,1.719,326,1.638,330,1.003,338,1.563,340,2.387,348,1.782,356,1.988,357,2.546,358,1.196,366,2.166,369,0.958,376,2.843,380,0.839,426,2.113,447,1.638,460,1.836,462,2.731,489,2.433,491,2.433,511,2.731,513,1.988,514,3.245,515,3.62,516,3.62,517,4.203,518,4.168,519,4.477,520,4.381,521,3.24,522,2.542,523,4.381,525,1.988,526,2.433,527,2.542,528,2.433,529,1.709,530,2.433,531,2.433,532,3.869,533,5.108,535,3.62,536,2.957,537,2.178,538,2.433,539,2.178,540,1.601,541,3.24,542,2.178,543,2.433,544,2.178,545,2.178,546,1.155,547,2.542,548,2.178,549,2.433,551,2.433,553,1.988,558,2.433,565,2.433,566,3.62,588,0.251,708,1.988,748,3.24,755,3.62,756,2.433,757,2.433,760,2.433,832,2.957,868,2.433,952,1.988,1129,1.988,1142,2.433,1328,2.178,1366,2.957,1371,3.261,1525,3.962,1533,4.322,1677,3.62,1696,3.62,1754,4.322,1880,4.322,1881,2.82,1882,2.82,1883,2.82,1884,2.82,1885,2.82,1886,2.82,1887,2.82,1888,2.82,1889,2.82,1890,2.82,1891,2.82,1892,2.82,1893,2.82,1894,2.82,1895,2.82,1896,2.82,1897,2.82,1898,2.82,1899,4.196,1900,2.82,1901,2.82,1902,2.82,1903,2.82,1904,2.82,1905,2.82,1906,2.82,1907,2.82,1908,2.82,1909,2.82,1910,2.82,1911,2.82,1912,4.196,1913,2.82,1914,4.196,1915,4.196,1916,2.82,1917,2.82,1918,2.82,1919,2.82,1920,4.196,1921,2.82,1922,2.82,1923,2.82,1924,2.82,1925,2.82,1926,2.82,1927,2.82,1928,2.82,1929,2.82,1930,5.01,1931,4.196,1932,2.82,1933,2.82,1934,4.196,1935,2.82,1936,2.82,1937,2.82,1938,2.82,1939,5.548,1940,2.82,1941,4.196,1942,2.82,1943,2.82,1944,4.196,1945,2.82,1946,2.82,1947,2.82,1948,2.82,1949,2.82,1950,2.82,1951,2.82,1952,2.82,1953,4.196,1954,2.82,1955,4.196,1956,2.82,1957,4.196,1958,2.82,1959,2.82,1960,2.82,1961,5.548,1962,4.196,1963,2.82,1964,2.82,1965,2.82,1966,4.196,1967,4.196,1968,2.82,1969,5.548,1970,2.82,1971,2.82,1972,4.196,1973,5.93,1974,2.82,1975,5.01,1976,2.82,1977,2.82,1978,2.82,1979,2.82,1980,2.82,1981,2.82,1982,2.82,1983,2.82,1984,2.82,1985,2.82,1986,2.82]],["title/coverage.html",[1987,3.663]],["body/coverage.html",[0,0.347,1,2.296,5,0.113,6,2.81,9,0.162,11,0.018,14,0.417,41,1.554,47,0.097,52,1.974,61,1.213,105,0.744,125,0.007,126,0.01,127,0.007,128,1.974,129,2.516,132,1.107,144,1.739,167,1.95,230,2.296,231,3.599,232,3.285,252,2.12,302,1.849,303,2.81,309,1.739,315,1.334,323,1.272,340,1.402,358,0.778,370,0.969,389,2.516,400,2.296,511,2.12,512,2.81,513,3.285,518,1.974,547,1.974,567,2.81,588,0.673,589,2.296,591,2.81,599,2.296,600,2.296,603,2.296,604,2.81,629,2.296,630,3.836,631,3.542,638,1.554,640,1.213,643,2.296,658,1.554,708,2.296,709,2.81,735,4.021,743,1.642,785,2.296,832,2.296,881,2.81,882,3.298,945,1.974,946,2.81,947,2.516,974,3.285,975,3.836,976,3.542,981,2.516,988,2.516,989,2.296,1014,2.516,1031,1.642,1069,3.711,1080,2.81,1125,2.516,1126,2.81,1127,2.516,1129,2.296,1177,2.12,1178,3.599,1182,2.12,1185,2.12,1234,2.81,1235,2.516,1251,3.599,1296,3.599,1300,2.296,1311,2.81,1346,2.81,1360,2.296,1361,3.599,1362,3.285,1371,2.12,1446,3.599,1454,1.974,1488,2.516,1489,3.599,1490,2.516,1504,2.516,1505,2.516,1521,2.81,1525,1.849,1567,2.81,1621,3.599,1627,2.296,1637,2.81,1643,4.021,1644,2.516,1670,2.296,1671,2.516,1702,2.516,1703,2.81,1772,2.516,1773,5.94,1796,2.81,1804,2.81,1813,2.516,1814,2.81,1815,2.81,1880,2.81,1987,2.296,1988,2.81,1989,3.257,1990,2.81,1991,6.943,1992,4.021,1993,5.125,1994,2.81,1995,2.81,1996,6.047,1997,5.808,1998,4.66,1999,4.021,2000,5.125,2001,4.695,2002,2.81,2003,4.66,2004,6.763,2005,5.641,2006,3.257,2007,2.81,2008,3.257,2009,3.257,2010,2.81,2011,4.695,2012,2.81,2013,2.81,2014,2.81,2015,2.81,2016,4.021,2017,2.81,2018,4.021,2019,6.453,2020,3.257,2021,3.257,2022,4.66,2023,3.257,2024,3.257,2025,3.257,2026,3.257,2027,3.257,2028,3.257,2029,3.257,2030,3.257,2031,3.257,2032,3.257,2033,3.257,2034,3.257,2035,3.257,2036,3.257,2037,3.257,2038,6.732,2039,3.257,2040,3.257,2041,3.257,2042,2.81,2043,2.81]],["title/miscellaneous/enumerations.html",[2044,1.926,2045,3.95]],["body/miscellaneous/enumerations.html",[11,0.017,29,0.983,34,0.148,42,0.846,52,4.407,53,0.392,125,0.013,126,0.015,127,0.013,132,2.341,291,2.69,348,2.114,380,2.162,785,4.188,834,4.589,835,5.127,836,5.127,837,4.854,838,5.127,839,5.127,840,5.127,2044,3.601,2045,5.127,2046,5.127,2047,5.942]],["title/index.html",[34,0.079,2048,2.741,2049,2.741]],["body/index.html",[11,0.015,31,1.657,102,1.586,125,0.013,126,0.015,127,0.013,132,1.979,162,3.529,233,2.385,536,4.104,723,4.104,793,5.741,997,3.79,1328,4.498,1987,5.083,2050,5.823,2051,5.823,2052,5.823,2053,5.823,2054,6.806,2055,5.823,2056,7.573,2057,5.823,2058,6.806,2059,5.823,2060,5.823,2061,5.823,2062,7.212,2063,4.498,2064,5.823,2065,5.823,2066,5.823,2067,5.823,2068,5.823]],["title/license.html",[2048,2.741,2049,2.741,2069,2.741]],["body/license.html",[11,0.014,125,0.012,126,0.014,127,0.012,131,1.85,207,4.652,262,1.918,305,4.652,369,1.231,384,3.8,570,4.164,634,3.51,1017,4.652,1262,5.022,1267,5.022,1988,4.652,2069,4.652,2070,6.502,2071,6.981,2072,5.392,2073,5.392,2074,5.392,2075,5.392,2076,5.392,2077,6.502,2078,5.392,2079,5.392,2080,5.392,2081,5.392,2082,5.392,2083,5.392,2084,7.742,2085,5.392,2086,5.392,2087,5.392,2088,6.981,2089,5.392,2090,6.502,2091,5.392,2092,5.392,2093,5.392,2094,5.392,2095,5.392,2096,5.392,2097,5.392,2098,5.392,2099,5.392,2100,5.392,2101,5.392,2102,5.392,2103,5.392,2104,6.502,2105,6.502,2106,5.392,2107,5.392,2108,5.392,2109,5.392,2110,5.392,2111,5.392,2112,5.392,2113,5.392,2114,5.392,2115,5.392,2116,5.392,2117,5.392,2118,5.392,2119,5.392,2120,5.392,2121,5.392,2122,5.392,2123,5.392,2124,5.392,2125,5.392,2126,5.392,2127,5.392,2128,5.392,2129,5.392,2130,5.392,2131,5.392]],["title/modules.html",[2132,4.483]],["body/modules.html",[11,0.015,125,0.014,126,0.015,127,0.014,2132,5.371]],["title/overview.html",[2133,4.483]],["body/overview.html",[2,0.927,11,0.015,125,0.013,126,0.015,127,0.013,590,1.922,2133,5.336,2134,6.185,2135,6.185]],["title/miscellaneous/typealiases.html",[2044,1.926,2136,4.578]],["body/miscellaneous/typealiases.html",[9,0.273,11,0.014,31,1.559,34,0.137,47,0.222,60,1.492,81,3.673,125,0.012,126,0.014,127,0.012,129,4.231,139,4.726,158,5.663,162,3.978,165,4.726,167,1.946,171,5.663,179,3.505,180,4.231,187,1.144,233,2.244,347,4.726,435,2.445,598,5.07,630,3.861,631,4.272,640,2.445,641,5.07,785,3.861,812,5.663,882,3.978,950,3.32,964,2.925,975,3.861,976,4.272,982,4.231,983,4.231,984,5.07,1014,4.231,1045,5.663,1670,3.861,1671,4.231,1673,4.726,1682,5.663,2044,3.32,2046,4.726,2137,5.478,2138,5.478,2139,6.564,2140,5.478,2141,5.478,2142,5.478,2143,5.478,2144,5.478,2145,6.564]],["title/unit-test.html",[997,2.663,2063,3.16]],["body/unit-test.html",[5,0.114,11,0.018,14,0.42,125,0.007,126,0.01,127,0.007,232,2.31,513,3.299,631,2.133,882,3.309,947,2.531,976,2.133,997,2.133,1127,2.531,1235,2.531,1362,2.31,1490,2.531,1505,2.531,1644,2.531,1695,2.531,1987,2.31,1990,2.827,1991,6.998,1992,6.056,1993,5.435,1994,4.038,1995,6.217,1996,5.949,1997,6.056,1999,4.038,2000,5.139,2001,4.038,2004,5.949,2005,4.711,2007,2.827,2010,5.435,2011,5.435,2012,2.827,2013,2.827,2014,4.711,2015,4.038,2016,4.711,2017,5.949,2018,4.038,2042,2.827,2043,2.827,2063,2.531,2146,3.277,2147,3.277,2148,3.277,2149,3.277,2150,4.681,2151,4.681,2152,3.277,2153,3.277,2154,4.681,2155,4.681,2156,3.277,2157,6.3,2158,3.277,2159,4.681,2160,3.277,2161,7.279,2162,3.277,2163,4.681,2164,4.681,2165,4.681,2166,4.681,2167,5.956,2168,3.277,2169,5.956,2170,3.277,2171,3.277,2172,5.956,2173,3.277,2174,3.277,2175,3.277,2176,3.277,2177,3.277,2178,3.277,2179,3.277,2180,3.277,2181,3.277,2182,3.277,2183,3.277,2184,3.277,2185,3.277,2186,3.277,2187,3.277,2188,3.277,2189,3.277,2190,3.277,2191,3.277,2192,3.277,2193,3.277,2194,5.46,2195,3.277,2196,4.681,2197,3.277,2198,5.46,2199,3.277,2200,3.277,2201,3.277,2202,3.277,2203,4.681,2204,3.277,2205,3.277,2206,3.277,2207,3.277,2208,3.277,2209,3.277,2210,3.277,2211,3.277,2212,3.277,2213,3.277,2214,3.277,2215,3.277,2216,3.277]],["title/miscellaneous/variables.html",[2044,1.926,2217,3.95]],["body/miscellaneous/variables.html",[9,0.292,11,0.018,15,1.858,16,0.71,29,1.13,34,0.114,47,0.174,53,0.466,64,5.458,76,1.302,113,1.186,125,0.01,126,0.013,127,0.01,281,4.215,289,3.553,324,3.939,348,2.43,376,4.011,380,1.743,389,4.528,514,3.562,636,5.277,1129,4.132,1363,5.458,1365,3.526,1366,4.132,1378,4.528,1379,3.526,1391,5.585,1525,3.675,1695,3.526,2002,3.939,2019,3.939,2044,2.767,2217,3.939,2218,4.566,2219,4.566,2220,4.566,2221,7.067,2222,5.862,2223,4.566,2224,6.475,2225,5.862,2226,5.862,2227,7.067,2228,5.862,2229,6.833,2230,6.833,2231,6.833,2232,4.566,2233,6.475,2234,5.862,2235,5.862,2236,5.862,2237,4.566,2238,5.862,2239,5.862,2240,4.566,2241,4.566,2242,5.862,2243,4.566,2244,4.566,2245,5.862,2246,4.566,2247,4.566,2248,5.862,2249,4.566,2250,4.566,2251,4.566,2252,4.566,2253,4.566,2254,4.566,2255,4.566,2256,4.566]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":16,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["0.2",{"_index":481,"title":{},"body":{"classes/Camera.html":{}}}],["0.5",{"_index":2047,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["0.6",{"_index":1135,"title":{},"body":{"classes/OneUp.html":{}}}],["0/0",{"_index":2161,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":29,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1)).xy",{"_index":2233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1).normalize().multiply(amount",{"_index":1790,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["1.5",{"_index":1211,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/State.html":{}}}],["1.6",{"_index":1680,"title":{},"body":{"classes/Timer.html":{}}}],["1/1",{"_index":2004,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10",{"_index":1208,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Trigger.html":{}}}],["10/10",{"_index":2011,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["100",{"_index":1991,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1000",{"_index":868,"title":{},"body":{"classes/Game.html":{},"classes/WebGLRenderer.html":{}}}],["109/109",{"_index":2214,"title":{},"body":{"unit-test.html":{}}}],["11",{"_index":916,"title":{},"body":{"classes/GamepadControls.html":{}}}],["11/11",{"_index":2015,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["12",{"_index":918,"title":{},"body":{"classes/GamepadControls.html":{},"classes/Sprite.html":{}}}],["12/12",{"_index":2167,"title":{},"body":{"unit-test.html":{}}}],["13",{"_index":920,"title":{},"body":{"classes/GamepadControls.html":{}}}],["13/13",{"_index":1995,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["14",{"_index":922,"title":{},"body":{"classes/GamepadControls.html":{}}}],["14/14",{"_index":2018,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["15/15",{"_index":2157,"title":{},"body":{"unit-test.html":{}}}],["16",{"_index":1533,"title":{},"body":{"classes/Sprite.html":{},"classes/WebGLRenderer.html":{}}}],["16/16",{"_index":2016,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["17/17",{"_index":2203,"title":{},"body":{"unit-test.html":{}}}],["170/170",{"_index":2185,"title":{},"body":{"unit-test.html":{}}}],["175/175",{"_index":2183,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":2135,"title":{},"body":{"overview.html":{}}}],["18/18",{"_index":2169,"title":{},"body":{"unit-test.html":{}}}],["19/19",{"_index":2014,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["2",{"_index":291,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/OneUp.html":{},"classes/Sprite.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["2/2",{"_index":2017,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20",{"_index":1238,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["20/20",{"_index":2151,"title":{},"body":{"unit-test.html":{}}}],["2019",{"_index":2073,"title":{},"body":{"license.html":{}}}],["2020",{"_index":2074,"title":{},"body":{"license.html":{}}}],["20px",{"_index":1623,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["21",{"_index":894,"title":{},"body":{"classes/GamepadControls.html":{}}}],["21/21",{"_index":2198,"title":{},"body":{"unit-test.html":{}}}],["22/22",{"_index":1994,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["23/23",{"_index":2163,"title":{},"body":{"unit-test.html":{}}}],["24/24",{"_index":1998,"title":{},"body":{"coverage.html":{}}}],["25/25",{"_index":1999,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["255",{"_index":1754,"title":{},"body":{"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["26/26",{"_index":2010,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["28/28",{"_index":2155,"title":{},"body":{"unit-test.html":{}}}],["2d",{"_index":723,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"index.html":{}}}],["3",{"_index":356,"title":{},"body":{"classes/Camera.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["3/3",{"_index":1997,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["30",{"_index":1172,"title":{},"body":{"classes/OneUp.html":{}}}],["30/30",{"_index":2166,"title":{},"body":{"unit-test.html":{}}}],["32",{"_index":956,"title":{},"body":{"classes/HitBox.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["32/32",{"_index":2172,"title":{},"body":{"unit-test.html":{}}}],["32x32",{"_index":1524,"title":{},"body":{"classes/Sprite.html":{}}}],["33/33",{"_index":2165,"title":{},"body":{"unit-test.html":{}}}],["333",{"_index":1309,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["34/34",{"_index":2194,"title":{},"body":{"unit-test.html":{}}}],["35",{"_index":2134,"title":{},"body":{"overview.html":{}}}],["35/35",{"_index":2013,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["37/37",{"_index":2195,"title":{},"body":{"unit-test.html":{}}}],["39/39",{"_index":2193,"title":{},"body":{"unit-test.html":{}}}],["4",{"_index":952,"title":{},"body":{"classes/HitBox.html":{},"classes/OneUp.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["4/4",{"_index":1996,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["40",{"_index":957,"title":{},"body":{"classes/HitBox.html":{}}}],["48",{"_index":473,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{}}}],["480",{"_index":314,"title":{},"body":{"classes/Camera.html":{},"classes/Game.html":{}}}],["49/49",{"_index":2215,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":30,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Timer.html":{},"classes/Trigger.html":{}}}],["5/5",{"_index":2005,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["55/55",{"_index":2152,"title":{},"body":{"unit-test.html":{}}}],["57/57",{"_index":2210,"title":{},"body":{"unit-test.html":{}}}],["58/58",{"_index":2209,"title":{},"body":{"unit-test.html":{}}}],["59/59",{"_index":2150,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":1142,"title":{},"body":{"classes/OneUp.html":{},"classes/WebGLRenderer.html":{}}}],["6/6",{"_index":1992,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["60",{"_index":807,"title":{},"body":{"classes/Game.html":{}}}],["61/61",{"_index":2189,"title":{},"body":{"unit-test.html":{}}}],["640",{"_index":312,"title":{},"body":{"classes/Camera.html":{}}}],["65/65",{"_index":2179,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":1143,"title":{},"body":{"classes/OneUp.html":{}}}],["7/7",{"_index":1993,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["71/71",{"_index":2154,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":875,"title":{},"body":{"classes/Game.html":{}}}],["77/77",{"_index":2180,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":1210,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["8/8",{"_index":2000,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["84/84",{"_index":2178,"title":{},"body":{"unit-test.html":{}}}],["85/85",{"_index":2159,"title":{},"body":{"unit-test.html":{}}}],["8].map(x",{"_index":1144,"title":{},"body":{"classes/OneUp.html":{}}}],["9/9",{"_index":2001,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["900",{"_index":1215,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["91/91",{"_index":2184,"title":{},"body":{"unit-test.html":{}}}],["97/97",{"_index":2216,"title":{},"body":{"unit-test.html":{}}}],["_",{"_index":1102,"title":{},"body":{"classes/MouseControls.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["__",{"_index":1306,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["_anchor",{"_index":1557,"title":{},"body":{"classes/Sprite.html":{}}}],["_height",{"_index":845,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{}}}],["_onenter",{"_index":1740,"title":{},"body":{"classes/Trigger.html":{}}}],["_onexit",{"_index":1741,"title":{},"body":{"classes/Trigger.html":{}}}],["_pivot",{"_index":1558,"title":{},"body":{"classes/Sprite.html":{}}}],["_program",{"_index":1372,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["_scene",{"_index":850,"title":{},"body":{"classes/Game.html":{}}}],["_texture",{"_index":1556,"title":{},"body":{"classes/Sprite.html":{}}}],["_width",{"_index":844,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{}}}],["_x",{"_index":970,"title":{},"body":{"classes/HitBox.html":{}}}],["_y",{"_index":971,"title":{},"body":{"classes/HitBox.html":{}}}],["a00",{"_index":767,"title":{},"body":{"classes/GLUtils.html":{}}}],["a01",{"_index":768,"title":{},"body":{"classes/GLUtils.html":{}}}],["a02",{"_index":769,"title":{},"body":{"classes/GLUtils.html":{}}}],["a10",{"_index":770,"title":{},"body":{"classes/GLUtils.html":{}}}],["a11",{"_index":771,"title":{},"body":{"classes/GLUtils.html":{}}}],["a12",{"_index":772,"title":{},"body":{"classes/GLUtils.html":{}}}],["a20",{"_index":773,"title":{},"body":{"classes/GLUtils.html":{}}}],["a21",{"_index":774,"title":{},"body":{"classes/GLUtils.html":{}}}],["a22",{"_index":775,"title":{},"body":{"classes/GLUtils.html":{}}}],["a_position",{"_index":2222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a_texcoord",{"_index":2223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":634,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{},"license.html":{}}}],["absolute",{"_index":1982,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["abstract",{"_index":338,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["acc",{"_index":1776,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["acceleration",{"_index":1778,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["access",{"_index":1015,"title":{},"body":{"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/Texture.html":{}}}],["accessors",{"_index":145,"title":{},"body":{"classes/Assets.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/Renderer.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebAudio.html":{}}}],["accounting",{"_index":1656,"title":{},"body":{"classes/TileSprite.html":{}}}],["action",{"_index":1017,"title":{},"body":{"classes/KeyControls.html":{},"license.html":{}}}],["action(...buttons",{"_index":939,"title":{},"body":{"classes/GamepadControls.html":{}}}],["action(value",{"_index":1050,"title":{},"body":{"classes/KeyControls.html":{}}}],["actiona",{"_index":886,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actionb",{"_index":887,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["actionesc",{"_index":890,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actions",{"_index":257,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["actionx",{"_index":888,"title":{},"body":{"classes/GamepadControls.html":{}}}],["actiony",{"_index":889,"title":{},"body":{"classes/GamepadControls.html":{}}}],["activate",{"_index":283,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["active",{"_index":279,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["activebuffer",{"_index":256,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["add",{"_index":36,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebGLRenderer.html":{}}}],["add(child",{"_index":430,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["add(name",{"_index":50,"title":{},"body":{"classes/Animations.html":{}}}],["add(vec",{"_index":1273,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["adddebug",{"_index":2039,"title":{},"body":{"coverage.html":{}}}],["added",{"_index":403,"title":{},"body":{"classes/Camera.html":{}}}],["additional",{"_index":1522,"title":{},"body":{"classes/Sprite.html":{}}}],["adds",{"_index":440,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/Vec.html":{}}}],["affecting",{"_index":1187,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["aliases",{"_index":2137,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1634,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["alignment",{"_index":1633,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["allow",{"_index":1506,"title":{},"body":{"classes/SoundPool.html":{},"classes/State.html":{}}}],["allows",{"_index":160,"title":{},"body":{"classes/Assets.html":{},"classes/HitBox.html":{},"classes/State.html":{}}}],["alone",{"_index":1183,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["along",{"_index":966,"title":{},"body":{"classes/HitBox.html":{}}}],["alpha",{"_index":325,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["already",{"_index":1510,"title":{},"body":{"classes/SoundPool.html":{}}}],["always",{"_index":355,"title":{},"body":{"classes/Camera.html":{},"classes/TileSprite.html":{}}}],["amount",{"_index":350,"title":{},"body":{"classes/Camera.html":{},"interfaces/VecEntity.html":{}}}],["anchor",{"_index":1536,"title":{},"body":{"classes/Sprite.html":{}}}],["anchoring",{"_index":1248,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["and/or",{"_index":570,"title":{},"body":{"classes/Container.html":{},"classes/Trigger.html":{},"license.html":{}}}],["angle",{"_index":735,"title":{},"body":{"classes/GLUtils.html":{},"coverage.html":{}}}],["anim",{"_index":75,"title":{},"body":{"classes/Animations.html":{}}}],["anim.frame.x",{"_index":122,"title":{},"body":{"classes/Animations.html":{}}}],["anim.frame.y",{"_index":124,"title":{},"body":{"classes/Animations.html":{}}}],["anim.update(dt",{"_index":120,"title":{},"body":{"classes/Animations.html":{}}}],["animation",{"_index":22,"title":{},"body":{"classes/Animations.html":{}}}],["animation(frames",{"_index":112,"title":{},"body":{"classes/Animations.html":{}}}],["animations",{"_index":1,"title":{"classes/Animations.html":{}},"body":{"classes/Animations.html":{},"classes/TileSprite.html":{},"coverage.html":{}}}],["animations(this.frame",{"_index":1664,"title":{},"body":{"classes/TileSprite.html":{}}}],["anims",{"_index":104,"title":{},"body":{"classes/Animations.html":{},"classes/TileSprite.html":{}}}],["antialias",{"_index":1891,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["any).__spector_metadata",{"_index":273,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["any).anchor.x",{"_index":1958,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["any).anchor.y",{"_index":1959,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["any).audiocontext",{"_index":1832,"title":{},"body":{"classes/WebAudio.html":{}}}],["any).webkitaudiocontext",{"_index":1833,"title":{},"body":{"classes/WebAudio.html":{}}}],["api",{"_index":884,"title":{},"body":{"classes/GamepadControls.html":{},"classes/WebAudio.html":{}}}],["append",{"_index":799,"title":{},"body":{"classes/Game.html":{}}}],["applies",{"_index":1779,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["apply",{"_index":985,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/VecEntity.html":{}}}],["applyforce",{"_index":2034,"title":{},"body":{"coverage.html":{}}}],["applyforce(e",{"_index":1781,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyfriction",{"_index":2035,"title":{},"body":{"coverage.html":{}}}],["applyfriction(e",{"_index":1788,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyhorizontalfriction",{"_index":2036,"title":{},"body":{"coverage.html":{}}}],["applyhorizontalfriction(e",{"_index":1791,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["applyimpulse",{"_index":2037,"title":{},"body":{"coverage.html":{}}}],["applyimpulse(e",{"_index":1794,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["area",{"_index":1704,"title":{},"body":{"classes/Trigger.html":{}}}],["args",{"_index":1732,"title":{},"body":{"classes/Trigger.html":{}}}],["arising",{"_index":2129,"title":{},"body":{"license.html":{}}}],["around",{"_index":247,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["array",{"_index":363,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/SoundGroup.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Trigger.html":{}}}],["arrays",{"_index":649,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["arrow",{"_index":1041,"title":{},"body":{"classes/KeyControls.html":{}}}],["aspects",{"_index":787,"title":{},"body":{"classes/Game.html":{}}}],["asset",{"_index":139,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["assets",{"_index":128,"title":{"classes/Assets.html":{}},"body":{"classes/Assets.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"coverage.html":{}}}],["assets.sound(src",{"_index":1474,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["associated",{"_index":2085,"title":{},"body":{"license.html":{}}}],["assumes",{"_index":308,"title":{},"body":{"classes/Camera.html":{}}}],["assuming",{"_index":576,"title":{},"body":{"classes/Container.html":{}}}],["async",{"_index":212,"title":{},"body":{"classes/Assets.html":{}}}],["attribcount",{"_index":1435,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["attriblocation",{"_index":284,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["attribute",{"_index":281,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["attributes",{"_index":1373,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["audio",{"_index":209,"title":{},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/WebAudio.html":{}}}],["audio(url",{"_index":210,"title":{},"body":{"classes/Assets.html":{}}}],["audio.addeventlistener('canplay",{"_index":211,"title":{},"body":{"classes/Assets.html":{}}}],["audio.addeventlistener('ended",{"_index":1479,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.addeventlistener('error",{"_index":1477,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.haswebaudio",{"_index":1819,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.loop",{"_index":1475,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["audio.master.value",{"_index":1821,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.play",{"_index":1823,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.removeeventlistener('canplay",{"_index":208,"title":{},"body":{"classes/Assets.html":{}}}],["audio.ts",{"_index":1815,"title":{},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["audio.ts:18",{"_index":1834,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:27",{"_index":1844,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:32",{"_index":1847,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:37",{"_index":1849,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:42",{"_index":1852,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:44",{"_index":1830,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:74",{"_index":1840,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:79",{"_index":1841,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:84",{"_index":1837,"title":{},"body":{"classes/WebAudio.html":{}}}],["audio.ts:89",{"_index":1835,"title":{},"body":{"classes/WebAudio.html":{}}}],["audiocontext",{"_index":1853,"title":{},"body":{"classes/WebAudio.html":{}}}],["authors",{"_index":2120,"title":{},"body":{"license.html":{}}}],["auto",{"_index":1337,"title":{},"body":{"classes/Renderer.html":{}}}],["automatically",{"_index":436,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["await",{"_index":213,"title":{},"body":{"classes/Assets.html":{}}}],["away",{"_index":1131,"title":{},"body":{"classes/OneUp.html":{}}}],["axis",{"_index":420,"title":{},"body":{"classes/Camera.html":{},"classes/GamepadControls.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"interfaces/Resolution.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["axis(id",{"_index":937,"title":{},"body":{"classes/GamepadControls.html":{}}}],["b",{"_index":748,"title":{},"body":{"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"classes/WebGLRenderer.html":{}}}],["b00",{"_index":776,"title":{},"body":{"classes/GLUtils.html":{}}}],["b01",{"_index":777,"title":{},"body":{"classes/GLUtils.html":{}}}],["b02",{"_index":778,"title":{},"body":{"classes/GLUtils.html":{}}}],["b10",{"_index":779,"title":{},"body":{"classes/GLUtils.html":{}}}],["b11",{"_index":780,"title":{},"body":{"classes/GLUtils.html":{}}}],["b12",{"_index":781,"title":{},"body":{"classes/GLUtils.html":{}}}],["b20",{"_index":782,"title":{},"body":{"classes/GLUtils.html":{}}}],["b21",{"_index":783,"title":{},"body":{"classes/GLUtils.html":{}}}],["b22",{"_index":784,"title":{},"body":{"classes/GLUtils.html":{}}}],["back",{"_index":798,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{}}}],["base",{"_index":605,"title":{},"body":{"classes/Entity.html":{}}}],["based",{"_index":64,"title":{},"body":{"classes/Animations.html":{},"classes/GLUtils.html":{},"miscellaneous/variables.html":{}}}],["basically",{"_index":573,"title":{},"body":{"classes/Container.html":{}}}],["before",{"_index":536,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"index.html":{}}}],["beginning",{"_index":1461,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["behavior",{"_index":1132,"title":{},"body":{"classes/OneUp.html":{}}}],["behaviors",{"_index":1188,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["being",{"_index":408,"title":{},"body":{"classes/Camera.html":{}}}],["below",{"_index":635,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{}}}],["between",{"_index":63,"title":{},"body":{"classes/Animations.html":{}}}],["bl",{"_index":1003,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["boolean",{"_index":187,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["boring",{"_index":788,"title":{},"body":{"classes/Game.html":{}}}],["both",{"_index":1379,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["bounds",{"_index":400,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["bounds.height",{"_index":1008,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.width",{"_index":1013,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.x",{"_index":1012,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["bounds.y",{"_index":1007,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["boundtexture",{"_index":1888,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["box.ts",{"_index":947,"title":{},"body":{"classes/HitBox.html":{},"coverage.html":{},"unit-test.html":{}}}],["box.ts:18",{"_index":965,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:23",{"_index":967,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:28",{"_index":968,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:33",{"_index":969,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:35",{"_index":961,"title":{},"body":{"classes/HitBox.html":{}}}],["box.ts:61",{"_index":963,"title":{},"body":{"classes/HitBox.html":{}}}],["br",{"_index":1004,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["branches",{"_index":2146,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":1592,"title":{},"body":{"classes/State.html":{}}}],["brief",{"_index":378,"title":{},"body":{"classes/Camera.html":{}}}],["buff",{"_index":270,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.buffer",{"_index":271,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.id",{"_index":274,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buff.name",{"_index":276,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer",{"_index":235,"title":{},"body":{"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GlBuffer.html":{}}}],["buffer(buffername",{"_index":264,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer.buffer",{"_index":267,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffer.ts",{"_index":232,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{},"unit-test.html":{}}}],["buffer.ts:11",{"_index":239,"title":{},"body":{"classes/BufferInfo.html":{}}}],["buffer.ts:13",{"_index":241,"title":{},"body":{"classes/BufferInfo.html":{}}}],["buffer.ts:20",{"_index":941,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:37",{"_index":942,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:48",{"_index":943,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:66",{"_index":944,"title":{},"body":{"classes/GlBuffer.html":{}}}],["buffer.ts:9",{"_index":238,"title":{},"body":{"classes/BufferInfo.html":{}}}],["bufferinfo",{"_index":230,"title":{"classes/BufferInfo.html":{}},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{}}}],["buffername",{"_index":263,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["buffers",{"_index":255,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/WebGLRenderer.html":{}}}],["bullet",{"_index":1527,"title":{},"body":{"classes/Sprite.html":{}}}],["bullet.anchor.set(16",{"_index":1534,"title":{},"body":{"classes/Sprite.html":{}}}],["bullet.hitbox.set(4",{"_index":1532,"title":{},"body":{"classes/Sprite.html":{}}}],["button",{"_index":897,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["c",{"_index":2072,"title":{},"body":{"license.html":{}}}],["cache",{"_index":183,"title":{},"body":{"classes/Assets.html":{}}}],["cached",{"_index":133,"title":{},"body":{"classes/Assets.html":{}}}],["calculations",{"_index":1775,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["call",{"_index":401,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["callback",{"_index":163,"title":{},"body":{"classes/Assets.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Trigger.html":{}}}],["callbacks",{"_index":1706,"title":{},"body":{"classes/Trigger.html":{}}}],["called",{"_index":81,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/ParticleEmitter.html":{},"classes/Renderer.html":{},"classes/State.html":{},"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["calls",{"_index":138,"title":{},"body":{"classes/Assets.html":{},"classes/Timer.html":{}}}],["camera",{"_index":302,"title":{"classes/Camera.html":{}},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["camera's",{"_index":345,"title":{},"body":{"classes/Camera.html":{}}}],["camera(player",{"_index":310,"title":{},"body":{"classes/Camera.html":{}}}],["camera.pos.x",{"_index":1343,"title":{},"body":{"classes/Renderer.html":{}}}],["camera.pos.y",{"_index":1344,"title":{},"body":{"classes/Renderer.html":{}}}],["cameratranslation",{"_index":755,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["canvas",{"_index":517,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{}}}],["canvas.getcontext('2d",{"_index":1986,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.height",{"_index":1978,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.id",{"_index":1979,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.left",{"_index":1984,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.position",{"_index":1981,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.top",{"_index":1983,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.style.zindex",{"_index":1980,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvas.width",{"_index":1977,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["canvaselement",{"_index":1315,"title":{},"body":{"classes/Renderer.html":{}}}],["canvasrenderer",{"_index":511,"title":{"classes/CanvasRenderer.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["canvasrenderer(width",{"_index":860,"title":{},"body":{"classes/Game.html":{}}}],["canvasrenderingcontext2d",{"_index":549,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["canvastextalign",{"_index":1635,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["careful",{"_index":838,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["case",{"_index":1585,"title":{},"body":{"classes/State.html":{}}}],["catch(e",{"_index":220,"title":{},"body":{"classes/Assets.html":{}}}],["causes",{"_index":410,"title":{},"body":{"classes/Camera.html":{}}}],["cb",{"_index":166,"title":{},"body":{"classes/Assets.html":{}}}],["center",{"_index":2040,"title":{},"body":{"coverage.html":{}}}],["centeredx",{"_index":497,"title":{},"body":{"classes/Camera.html":{}}}],["centeredy",{"_index":502,"title":{},"body":{"classes/Camera.html":{}}}],["ch",{"_index":587,"title":{},"body":{"classes/Container.html":{}}}],["chainable",{"_index":1255,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["change",{"_index":25,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{},"classes/State.html":{}}}],["changed",{"_index":1692,"title":{},"body":{"classes/Timer.html":{}}}],["charge",{"_index":2081,"title":{},"body":{"license.html":{}}}],["check",{"_index":540,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/Hits.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/State.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["checks",{"_index":1040,"title":{},"body":{"classes/KeyControls.html":{},"classes/Trigger.html":{}}}],["child",{"_index":364,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["children",{"_index":326,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["claim",{"_index":2123,"title":{},"body":{"license.html":{}}}],["clamp",{"_index":2020,"title":{},"body":{"coverage.html":{}}}],["class",{"_index":0,"title":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"overview.html":{}}}],["clear",{"_index":533,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["clientrect",{"_index":1092,"title":{},"body":{"classes/MouseControls.html":{}}}],["clientx",{"_index":1115,"title":{},"body":{"classes/MouseControls.html":{}}}],["clienty",{"_index":1116,"title":{},"body":{"classes/MouseControls.html":{}}}],["clone",{"_index":1271,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["cloned",{"_index":1270,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["code",{"_index":1022,"title":{},"body":{"classes/KeyControls.html":{}}}],["coin",{"_index":1139,"title":{},"body":{"classes/OneUp.html":{}}}],["coin.anims.add('spin",{"_index":1141,"title":{},"body":{"classes/OneUp.html":{}}}],["coin.anims.play('spin",{"_index":1145,"title":{},"body":{"classes/OneUp.html":{}}}],["collection",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collide",{"_index":1718,"title":{},"body":{"classes/Trigger.html":{}}}],["collides",{"_index":1713,"title":{},"body":{"classes/Trigger.html":{}}}],["collision",{"_index":950,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Sprite.html":{},"classes/Trigger.html":{},"miscellaneous/typealiases.html":{}}}],["collisions",{"_index":978,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["color",{"_index":376,"title":{},"body":{"classes/Camera.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["color.a",{"_index":2244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color.split",{"_index":1909,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["columns",{"_index":1076,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["combined",{"_index":1529,"title":{},"body":{"classes/Sprite.html":{}}}],["compiled",{"_index":1376,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["complete",{"_index":181,"title":{},"body":{"classes/Assets.html":{}}}],["completed",{"_index":146,"title":{},"body":{"classes/Assets.html":{},"classes/Scene.html":{}}}],["completion",{"_index":173,"title":{},"body":{"classes/Assets.html":{},"classes/Scene.html":{},"classes/Timer.html":{}}}],["components",{"_index":287,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["concrete",{"_index":544,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["conditions",{"_index":2103,"title":{},"body":{"license.html":{}}}],["connection",{"_index":2130,"title":{},"body":{"license.html":{}}}],["console.error(e",{"_index":222,"title":{},"body":{"classes/Assets.html":{}}}],["console.info(`cached",{"_index":226,"title":{},"body":{"classes/Assets.html":{}}}],["console.info(`load",{"_index":227,"title":{},"body":{"classes/Assets.html":{}}}],["console.log('first",{"_index":1588,"title":{},"body":{"classes/State.html":{}}}],["console.log('trigger",{"_index":1710,"title":{},"body":{"classes/Trigger.html":{}}}],["console.log(this.state.get",{"_index":1593,"title":{},"body":{"classes/State.html":{}}}],["console.warn(`image",{"_index":1927,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["const",{"_index":118,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["constructor",{"_index":39,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["constructor(container",{"_index":1084,"title":{},"body":{"classes/MouseControls.html":{}}}],["constructor(display",{"_index":1149,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["constructor(frame",{"_index":40,"title":{},"body":{"classes/Animations.html":{}}}],["constructor(frames",{"_index":93,"title":{},"body":{"classes/Animations.html":{}}}],["constructor(game",{"_index":1351,"title":{},"body":{"classes/Scene.html":{}}}],["constructor(gl",{"_index":258,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["constructor(hitbox",{"_index":1722,"title":{},"body":{"classes/Trigger.html":{}}}],["constructor(numparticles",{"_index":1240,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["constructor(ontick",{"_index":1681,"title":{},"body":{"classes/Timer.html":{}}}],["constructor(sounds",{"_index":1495,"title":{},"body":{"classes/SoundGroup.html":{}}}],["constructor(src",{"_index":1453,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["constructor(state",{"_index":1595,"title":{},"body":{"classes/State.html":{}}}],["constructor(subject",{"_index":339,"title":{},"body":{"classes/Camera.html":{}}}],["constructor(text",{"_index":1626,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["constructor(texture",{"_index":1538,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["constructor(url",{"_index":1639,"title":{},"body":{"classes/Texture.html":{}}}],["constructor(width",{"_index":522,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["constructor(x",{"_index":960,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["container",{"_index":323,"title":{"classes/Container.html":{}},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["container.alpha",{"_index":566,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["container.appendchild(div",{"_index":1339,"title":{},"body":{"classes/Renderer.html":{}}}],["container.visible",{"_index":565,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["container:11",{"_index":1155,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:14",{"_index":1158,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:16",{"_index":1159,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:19",{"_index":1156,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:24",{"_index":431,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:35",{"_index":433,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:45",{"_index":1164,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:49",{"_index":434,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:52",{"_index":1162,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:6",{"_index":1160,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:63",{"_index":1163,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["container:8",{"_index":1157,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["containing",{"_index":529,"title":{},"body":{"classes/CanvasRenderer.html":{},"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/Renderer.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["contains",{"_index":786,"title":{},"body":{"classes/Game.html":{}}}],["context",{"_index":1845,"title":{},"body":{"classes/WebAudio.html":{}}}],["contract",{"_index":2126,"title":{},"body":{"license.html":{}}}],["control",{"_index":592,"title":{},"body":{"interfaces/Controls.html":{}}}],["controlled",{"_index":1181,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["controller",{"_index":913,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controllers",{"_index":914,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls",{"_index":589,"title":{"interfaces/Controls.html":{}},"body":{"interfaces/Controls.html":{},"classes/Scene.html":{},"coverage.html":{}}}],["controls.ts",{"_index":882,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["controls.ts:104",{"_index":1020,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:11",{"_index":1086,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:113",{"_index":1028,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:13",{"_index":896,"title":{},"body":{"classes/GamepadControls.html":{},"classes/MouseControls.html":{}}}],["controls.ts:15",{"_index":1085,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:18",{"_index":900,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:20",{"_index":1033,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:23",{"_index":902,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:25",{"_index":1036,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:28",{"_index":904,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:30",{"_index":1037,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:33",{"_index":906,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:38",{"_index":909,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:39",{"_index":1038,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:42",{"_index":1088,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls.ts:43",{"_index":912,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:45",{"_index":891,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:58",{"_index":1043,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:7",{"_index":892,"title":{},"body":{"classes/GamepadControls.html":{}}}],["controls.ts:70",{"_index":1018,"title":{},"body":{"classes/KeyControls.html":{}}}],["controls.ts:9",{"_index":1087,"title":{},"body":{"classes/MouseControls.html":{}}}],["controls/controls",{"_index":1356,"title":{},"body":{"classes/Scene.html":{}}}],["convert",{"_index":1808,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["converts",{"_index":1807,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["coordinate",{"_index":1252,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["coordinates",{"_index":746,"title":{},"body":{"classes/GLUtils.html":{},"classes/MouseControls.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copies",{"_index":1267,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"license.html":{}}}],["copy",{"_index":1262,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"license.html":{}}}],["copy(vec",{"_index":1268,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["copyright",{"_index":2071,"title":{},"body":{"license.html":{}}}],["core",{"_index":1686,"title":{},"body":{"classes/Timer.html":{}}}],["correction",{"_index":990,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["count",{"_index":1519,"title":{},"body":{"classes/SoundPool.html":{}}}],["countdown",{"_index":1672,"title":{},"body":{"classes/Timer.html":{}}}],["coverage",{"_index":1987,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["create",{"_index":20,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["create(buffername",{"_index":269,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["created",{"_index":1151,"title":{},"body":{"classes/OneUp.html":{},"classes/Sprite.html":{}}}],["createprogram(vertexshader",{"_index":1412,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["creates",{"_index":268,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Vec.html":{}}}],["createtextcanvas",{"_index":1976,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["createtexture",{"_index":1937,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["ctx",{"_index":548,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["ctx2",{"_index":550,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["cubicin(x",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cubicinout(x",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cubicout(x",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curframe",{"_index":91,"title":{},"body":{"classes/Animations.html":{}}}],["current",{"_index":73,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{}}}],["currently",{"_index":1458,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["curtime",{"_index":92,"title":{},"body":{"classes/Animations.html":{}}}],["custom",{"_index":18,"title":{},"body":{"classes/Animations.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["d",{"_index":1042,"title":{},"body":{"classes/KeyControls.html":{}}}],["damages",{"_index":2124,"title":{},"body":{"license.html":{}}}],["data",{"_index":233,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["dead",{"_index":327,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{}}}],["deadzone",{"_index":893,"title":{},"body":{"classes/GamepadControls.html":{}}}],["deal",{"_index":2087,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2131,"title":{},"body":{"license.html":{}}}],["debug",{"_index":395,"title":{},"body":{"classes/Camera.html":{},"classes/Game.html":{},"classes/Trigger.html":{}}}],["debug(val",{"_index":1749,"title":{},"body":{"classes/Trigger.html":{}}}],["debugging",{"_index":405,"title":{},"body":{"classes/Camera.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["declare",{"_index":1071,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["default",{"_index":348,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1129,"title":{},"body":{"classes/OneUp.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults.shaders.fragmentcolor",{"_index":1904,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaults.shaders.fragmenttexture",{"_index":1901,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaults.shaders.vertexcolor",{"_index":1903,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaults.shaders.vertextexture",{"_index":1900,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["defaultsize",{"_index":1213,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["defined",{"_index":42,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["delay",{"_index":1675,"title":{},"body":{"classes/Timer.html":{}}}],["delete",{"_index":935,"title":{},"body":{"classes/GamepadControls.html":{}}}],["delta",{"_index":66,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{}}}],["dependencies",{"_index":2055,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["desired",{"_index":995,"title":{},"body":{"interfaces/Hits.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{}}}],["destination",{"_index":848,"title":{},"body":{"classes/Game.html":{}}}],["detected",{"_index":979,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["detection",{"_index":951,"title":{},"body":{"classes/HitBox.html":{}}}],["determine",{"_index":1201,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["determined",{"_index":1708,"title":{},"body":{"classes/Trigger.html":{}}}],["determines",{"_index":539,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["determining",{"_index":542,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["development",{"_index":2053,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":1574,"title":{},"body":{"classes/State.html":{}}}],["dimension",{"_index":740,"title":{},"body":{"classes/GLUtils.html":{}}}],["dimensions",{"_index":727,"title":{},"body":{"classes/GLUtils.html":{}}}],["ding",{"_index":1448,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["ding.play",{"_index":1450,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["dings",{"_index":1508,"title":{},"body":{"classes/SoundPool.html":{}}}],["dings.play",{"_index":1511,"title":{},"body":{"classes/SoundPool.html":{}}}],["direction",{"_index":910,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{}}}],["directions",{"_index":977,"title":{},"body":{"interfaces/Hits.html":{},"classes/ParticleEmitter.html":{},"interfaces/Resolution.html":{}}}],["directly",{"_index":1317,"title":{},"body":{"classes/Renderer.html":{}}}],["dirto",{"_index":2021,"title":{},"body":{"coverage.html":{}}}],["dis",{"_index":1805,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["display",{"_index":805,"title":{},"body":{"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Trigger.html":{}}}],["displays",{"_index":397,"title":{},"body":{"classes/Camera.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["distance",{"_index":2022,"title":{},"body":{"coverage.html":{}}}],["distribute",{"_index":2096,"title":{},"body":{"license.html":{}}}],["div",{"_index":1329,"title":{},"body":{"classes/Renderer.html":{}}}],["div.appendchild(this.canvas",{"_index":1338,"title":{},"body":{"classes/Renderer.html":{}}}],["div.id",{"_index":1331,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.height",{"_index":1333,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.margin",{"_index":1336,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.position",{"_index":1332,"title":{},"body":{"classes/Renderer.html":{}}}],["div.style.width",{"_index":1335,"title":{},"body":{"classes/Renderer.html":{}}}],["divide",{"_index":1281,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["divide(s",{"_index":1282,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["divides",{"_index":1280,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["docs",{"_index":2062,"title":{},"body":{"index.html":{}}}],["docs:serve",{"_index":2068,"title":{},"body":{"index.html":{}}}],["docsto",{"_index":2064,"title":{},"body":{"index.html":{}}}],["document.addeventlistener('keydown",{"_index":1062,"title":{},"body":{"classes/KeyControls.html":{}}}],["document.addeventlistener('keyup",{"_index":1066,"title":{},"body":{"classes/KeyControls.html":{}}}],["document.addeventlistener('mousedown",{"_index":1099,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('mousemove",{"_index":1104,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('mouseup",{"_index":1101,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.addeventlistener('resize",{"_index":1106,"title":{},"body":{"classes/MouseControls.html":{}}}],["document.body",{"_index":800,"title":{},"body":{"classes/Game.html":{}}}],["document.createelement('audio",{"_index":1864,"title":{},"body":{"classes/WebAudio.html":{}}}],["document.createelement('canvas",{"_index":553,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["document.createelement('div",{"_index":1330,"title":{},"body":{"classes/Renderer.html":{}}}],["documentation",{"_index":1988,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["domrect",{"_index":1093,"title":{},"body":{"classes/MouseControls.html":{}}}],["done",{"_index":223,"title":{},"body":{"classes/Assets.html":{}}}],["door",{"_index":1709,"title":{},"body":{"classes/Trigger.html":{}}}],["door.onenter",{"_index":1717,"title":{},"body":{"classes/Trigger.html":{}}}],["door.onexit",{"_index":1721,"title":{},"body":{"classes/Trigger.html":{}}}],["doorentered",{"_index":1716,"title":{},"body":{"classes/Trigger.html":{}}}],["dot",{"_index":1289,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["dot(vec",{"_index":1292,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["down",{"_index":954,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{}}}],["down(e",{"_index":1107,"title":{},"body":{"classes/MouseControls.html":{}}}],["dt",{"_index":83,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{}}}],["duration",{"_index":381,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Timer.html":{}}}],["e",{"_index":203,"title":{},"body":{"classes/Assets.html":{},"classes/GamepadControls.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/VecEntity.html":{}}}],["e.acc.set(0",{"_index":1803,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.acc.x",{"_index":1782,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.acc.y",{"_index":1785,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.g",{"_index":1023,"title":{},"body":{"classes/KeyControls.html":{},"classes/Sprite.html":{},"classes/State.html":{}}}],["e.height",{"_index":704,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.mass",{"_index":1784,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.name",{"_index":702,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.pos.add(dis",{"_index":1806,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.preventdefault",{"_index":1065,"title":{},"body":{"classes/KeyControls.html":{}}}],["e.properties",{"_index":705,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.type",{"_index":701,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.vel.clone().multiply",{"_index":1789,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.set(vx",{"_index":1802,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.x",{"_index":1799,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.vel.y",{"_index":1801,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["e.width",{"_index":703,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.x",{"_index":699,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["e.y",{"_index":700,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["each",{"_index":435,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"miscellaneous/typealiases.html":{}}}],["early",{"_index":1198,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["ease",{"_index":389,"title":{},"body":{"classes/Camera.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["easier",{"_index":250,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["easing",{"_index":324,"title":{},"body":{"classes/Camera.html":{},"miscellaneous/variables.html":{}}}],["effect",{"_index":1128,"title":{},"body":{"classes/OneUp.html":{},"classes/ParticleEmitter.html":{}}}],["effects",{"_index":1850,"title":{},"body":{"classes/WebAudio.html":{}}}],["el",{"_index":1091,"title":{},"body":{"classes/MouseControls.html":{}}}],["elapsed",{"_index":833,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["elasticout(r",{"_index":1678,"title":{},"body":{"classes/Timer.html":{}}}],["element",{"_index":527,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["emits",{"_index":1239,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter",{"_index":1247,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts",{"_index":1235,"title":{},"body":{"classes/ParticleEmitter.html":{},"coverage.html":{},"unit-test.html":{}}}],["emitter.ts:11",{"_index":1241,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["emitter.ts:43",{"_index":1245,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["empty",{"_index":1308,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["enable",{"_index":286,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{}}}],["enables",{"_index":280,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["enforce",{"_index":2143,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["engine",{"_index":2050,"title":{},"body":{"index.html":{}}}],["ent",{"_index":707,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"interfaces/TiledMap.html":{}}}],["entered",{"_index":1711,"title":{},"body":{"classes/Trigger.html":{}}}],["enters",{"_index":1707,"title":{},"body":{"classes/Trigger.html":{}}}],["entities",{"_index":365,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Trigger.html":{}}}],["entitieslayer",{"_index":680,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["entitieslayer.objects",{"_index":683,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["entity",{"_index":358,"title":{"classes/Entity.html":{}},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["entity.pos.x",{"_index":1341,"title":{},"body":{"classes/Renderer.html":{}}}],["entity.pos.y",{"_index":1345,"title":{},"body":{"classes/Renderer.html":{}}}],["entity.width",{"_index":1342,"title":{},"body":{"classes/Renderer.html":{}}}],["entity:11",{"_index":359,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:14",{"_index":371,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:16",{"_index":373,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:19",{"_index":362,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:45",{"_index":446,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:52",{"_index":439,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:6",{"_index":374,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:63",{"_index":443,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["entity:8",{"_index":368,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["enum",{"_index":834,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2045,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumtype",{"_index":1596,"title":{},"body":{"classes/State.html":{}}}],["equivalent",{"_index":898,"title":{},"body":{"classes/GamepadControls.html":{}}}],["error",{"_index":653,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["error('tiled",{"_index":684,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["error(`error",{"_index":1478,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["error(`invalid",{"_index":1913,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["error(`no",{"_index":293,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["error(`unknown",{"_index":1390,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["error(message",{"_index":1422,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["es",{"_index":706,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["escape",{"_index":907,"title":{},"body":{"classes/GamepadControls.html":{}}}],["established",{"_index":1194,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["event",{"_index":207,"title":{},"body":{"classes/Assets.html":{},"license.html":{}}}],["events",{"_index":1081,"title":{},"body":{"classes/MouseControls.html":{}}}],["everything",{"_index":402,"title":{},"body":{"classes/Camera.html":{}}}],["example",{"_index":10,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Trigger.html":{}}}],["existing",{"_index":59,"title":{},"body":{"classes/Animations.html":{}}}],["exited",{"_index":1712,"title":{},"body":{"classes/Trigger.html":{}}}],["exits",{"_index":1197,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Trigger.html":{}}}],["export",{"_index":103,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["express",{"_index":2111,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1312,"title":{},"body":{"classes/Renderer.html":{}}}],["extended",{"_index":1645,"title":{},"body":{"classes/TileSprite.html":{}}}],["extending",{"_index":449,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["extends",{"_index":322,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["extra",{"_index":632,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["extralayer",{"_index":629,"title":{"interfaces/ExtraLayer.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{}}}],["extralayers",{"_index":671,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["extralayers.filter(layer",{"_index":686,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["f00",{"_index":1299,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["f12",{"_index":1048,"title":{},"body":{"classes/KeyControls.html":{}}}],["f5",{"_index":1047,"title":{},"body":{"classes/KeyControls.html":{}}}],["factory",{"_index":199,"title":{},"body":{"classes/Assets.html":{}}}],["factory(url",{"_index":228,"title":{},"body":{"classes/Assets.html":{}}}],["fade",{"_index":383,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{}}}],["fadeduration",{"_index":847,"title":{},"body":{"classes/Game.html":{}}}],["fadeinseconds",{"_index":816,"title":{},"body":{"classes/Game.html":{}}}],["fadeout",{"_index":1825,"title":{},"body":{"classes/WebAudio.html":{}}}],["fades",{"_index":1836,"title":{},"body":{"classes/WebAudio.html":{}}}],["fadetime",{"_index":846,"title":{},"body":{"classes/Game.html":{}}}],["fading",{"_index":1133,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["falls",{"_index":797,"title":{},"body":{"classes/Game.html":{}}}],["false",{"_index":193,"title":{},"body":{"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["fast",{"_index":840,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["fetch(url",{"_index":214,"title":{},"body":{"classes/Assets.html":{}}}],["ff0",{"_index":1173,"title":{},"body":{"classes/OneUp.html":{}}}],["fff",{"_index":385,"title":{},"body":{"classes/Camera.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"unit-test.html":{}}}],["files",{"_index":2086,"title":{},"body":{"license.html":{}}}],["fill",{"_index":479,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Trigger.html":{}}}],["findattributes",{"_index":1434,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["first",{"_index":753,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/State.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Trigger.html":{}}}],["firstgid",{"_index":1077,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["fitness",{"_index":2116,"title":{},"body":{"license.html":{}}}],["flash",{"_index":331,"title":{},"body":{"classes/Camera.html":{}}}],["flash(duration",{"_index":375,"title":{},"body":{"classes/Camera.html":{}}}],["flashduration",{"_index":456,"title":{},"body":{"classes/Camera.html":{}}}],["flashrect",{"_index":457,"title":{},"body":{"classes/Camera.html":{}}}],["flashtime",{"_index":455,"title":{},"body":{"classes/Camera.html":{}}}],["flat",{"_index":724,"title":{},"body":{"classes/GLUtils.html":{}}}],["float",{"_index":2227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["float32array([0",{"_index":244,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["fn",{"_index":445,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["fn(child",{"_index":628,"title":{},"body":{"classes/Entity.html":{}}}],["focus",{"_index":332,"title":{},"body":{"classes/Camera.html":{}}}],["focus(ease",{"_index":386,"title":{},"body":{"classes/Camera.html":{}}}],["follow",{"_index":458,"title":{},"body":{"classes/Camera.html":{}}}],["following",{"_index":2102,"title":{},"body":{"license.html":{}}}],["follows",{"_index":304,"title":{},"body":{"classes/Camera.html":{}}}],["font",{"_index":1632,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["force",{"_index":1780,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["force.x",{"_index":1783,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["force.y",{"_index":1786,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["foreach(layer",{"_index":688,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["form",{"_index":664,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["formatted",{"_index":1294,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["found",{"_index":294,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["fps",{"_index":791,"title":{},"body":{"classes/Game.html":{}}}],["fragment",{"_index":1366,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["fragmentcolor",{"_index":2247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fragmentshader",{"_index":1400,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["fragmentsource",{"_index":1395,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["fragmenttexture",{"_index":2237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frame",{"_index":49,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/State.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{}}}],["frames",{"_index":24,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{}}}],["framesource",{"_index":106,"title":{},"body":{"classes/Animations.html":{}}}],["free",{"_index":2080,"title":{},"body":{"license.html":{}}}],["friction",{"_index":1787,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["friction.y",{"_index":1792,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["from(v",{"_index":1263,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["fullarea",{"_index":243,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["function",{"_index":167,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1695,"title":{},"body":{"classes/Timer.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["furnished",{"_index":2101,"title":{},"body":{"license.html":{}}}],["g",{"_index":1920,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gainnode",{"_index":1855,"title":{},"body":{"classes/WebAudio.html":{}}}],["game",{"_index":132,"title":{"classes/Game.html":{}},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["game(640",{"_index":789,"title":{},"body":{"classes/Game.html":{}}}],["game.assets.completed",{"_index":1924,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["game.assets.image(url",{"_index":1642,"title":{},"body":{"classes/Texture.html":{}}}],["game.debug",{"_index":221,"title":{},"body":{"classes/Assets.html":{},"classes/Game.html":{},"classes/WebGLRenderer.html":{}}}],["game.fps",{"_index":873,"title":{},"body":{"classes/Game.html":{}}}],["game.height",{"_index":1679,"title":{},"body":{"classes/Timer.html":{}}}],["game.run",{"_index":790,"title":{},"body":{"classes/Game.html":{}}}],["game.ups",{"_index":876,"title":{},"body":{"classes/Game.html":{}}}],["gameover",{"_index":1577,"title":{},"body":{"classes/State.html":{}}}],["gamepad",{"_index":596,"title":{},"body":{"interfaces/Controls.html":{},"classes/GamepadControls.html":{}}}],["gamepadcontrols",{"_index":600,"title":{"classes/GamepadControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/GamepadControls.html":{},"coverage.html":{}}}],["gamepadevent",{"_index":930,"title":{},"body":{"classes/GamepadControls.html":{}}}],["gamestate",{"_index":1575,"title":{},"body":{"classes/State.html":{}}}],["gamestate.ready",{"_index":1586,"title":{},"body":{"classes/State.html":{}}}],["gameupdate",{"_index":812,"title":{},"body":{"classes/Game.html":{},"miscellaneous/typealiases.html":{}}}],["gameupdate(step",{"_index":871,"title":{},"body":{"classes/Game.html":{}}}],["gauss",{"_index":2023,"title":{},"body":{"coverage.html":{}}}],["gaussdistance",{"_index":2024,"title":{},"body":{"coverage.html":{}}}],["get2dprojectionmatrix",{"_index":713,"title":{},"body":{"classes/GLUtils.html":{}}}],["get2dprojectionmatrix(width",{"_index":720,"title":{},"body":{"classes/GLUtils.html":{}}}],["getaction",{"_index":1032,"title":{},"body":{"classes/KeyControls.html":{}}}],["getactiona",{"_index":895,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactionb",{"_index":899,"title":{},"body":{"classes/GamepadControls.html":{},"classes/KeyControls.html":{}}}],["getactionesc",{"_index":905,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactionx",{"_index":901,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getactiony",{"_index":903,"title":{},"body":{"classes/GamepadControls.html":{}}}],["getanchor",{"_index":1545,"title":{},"body":{"classes/Sprite.html":{}}}],["getattriblocation",{"_index":1438,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getattriblocation(name",{"_index":1388,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["getcameratranslation",{"_index":714,"title":{},"body":{"classes/GLUtils.html":{}}}],["getcameratranslation(camera",{"_index":728,"title":{},"body":{"classes/GLUtils.html":{}}}],["getcanvas",{"_index":825,"title":{},"body":{"classes/Game.html":{}}}],["getcanvaselement",{"_index":1324,"title":{},"body":{"classes/Renderer.html":{}}}],["getcompleted",{"_index":177,"title":{},"body":{"classes/Assets.html":{}}}],["getctx",{"_index":1843,"title":{},"body":{"classes/WebAudio.html":{}}}],["gethaschildren",{"_index":617,"title":{},"body":{"classes/Entity.html":{}}}],["getheight",{"_index":821,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["getlayer('entities",{"_index":681,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getlayer('level",{"_index":679,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getlayer(layer.name",{"_index":690,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getmaster",{"_index":1846,"title":{},"body":{"classes/WebAudio.html":{}}}],["getmusic",{"_index":1851,"title":{},"body":{"classes/WebAudio.html":{}}}],["getobjectbyname",{"_index":1666,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["getobjectbyname(name",{"_index":654,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getobjectsbytype",{"_index":1667,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["getobjectsbytype(type",{"_index":656,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getpivot",{"_index":1547,"title":{},"body":{"classes/Sprite.html":{}}}],["getpositionmatrix(camera",{"_index":1946,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["getprogram",{"_index":1444,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getrotation",{"_index":715,"title":{},"body":{"classes/GLUtils.html":{}}}],["getrotation(angle",{"_index":732,"title":{},"body":{"classes/GLUtils.html":{}}}],["gets",{"_index":261,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Point.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{}}}],["getscale",{"_index":716,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscale(x",{"_index":737,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscalematrix",{"_index":717,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscalematrix(sprite",{"_index":741,"title":{},"body":{"classes/GLUtils.html":{}}}],["getscene",{"_index":823,"title":{},"body":{"classes/Game.html":{}}}],["getsfx",{"_index":1848,"title":{},"body":{"classes/WebAudio.html":{}}}],["getspeed",{"_index":827,"title":{},"body":{"classes/Game.html":{}}}],["gettexture",{"_index":1543,"title":{},"body":{"classes/Sprite.html":{}}}],["gettexture(gl",{"_index":1923,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gettileprops",{"_index":696,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["gettileset",{"_index":682,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["getting",{"_index":2048,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":718,"title":{},"body":{"classes/GLUtils.html":{}}}],["gettranslation(x",{"_index":744,"title":{},"body":{"classes/GLUtils.html":{}}}],["getuniformlocation",{"_index":1439,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["getuniformlocation(name",{"_index":1392,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["getvolume",{"_index":1464,"title":{},"body":{"classes/Sound.html":{}}}],["getwidth",{"_index":819,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{}}}],["getx",{"_index":908,"title":{},"body":{"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{}}}],["gety",{"_index":911,"title":{},"body":{"classes/GamepadControls.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{}}}],["gid",{"_index":1074,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["gl",{"_index":253,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["gl.active_attributes",{"_index":1437,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.attachshader(this.program",{"_index":1414,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.bindbuffer(gl.array_buffer",{"_index":296,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.bindtexture(gl.texture_2d",{"_index":1931,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.blendequation(gl.func_add",{"_index":1408,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.blendfunc(gl.src_alpha",{"_index":1409,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.bufferdata(gl.array_buffer",{"_index":297,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.clamp_to_edge",{"_index":1941,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.clearcolor(0",{"_index":1406,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.compile_status",{"_index":1431,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.compileshader(shader",{"_index":1429,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createprogram",{"_index":1413,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createshader(shadertype",{"_index":1427,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.createtexture",{"_index":1938,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.deleteprogram(this.program",{"_index":1421,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.deleteshader(shader",{"_index":1433,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.disable(gl.depth_test",{"_index":1411,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.enable(gl.blend",{"_index":1407,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.enablevertexattribarray(attriblocation",{"_index":301,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.float",{"_index":300,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.getprograminfolog(this.program",{"_index":1420,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getprogramparameter(program",{"_index":1436,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getprogramparameter(this.program",{"_index":1417,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getshaderinfolog(shader",{"_index":1432,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.getshaderparameter(shader",{"_index":1430,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.link_status",{"_index":1418,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.linkprogram(this.program",{"_index":1415,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.nearest",{"_index":1944,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.one_minus_src_alpha",{"_index":1410,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.rgba",{"_index":1934,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.shadersource(shader",{"_index":1428,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["gl.static_draw",{"_index":298,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl.teximage2d(gl.texture_2d",{"_index":1933,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texparameteri(gl.texture_2d",{"_index":1939,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_mag_filter",{"_index":1945,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_min_filter",{"_index":1943,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_wrap_s",{"_index":1940,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.texture_wrap_t",{"_index":1942,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.unsigned_byte",{"_index":1935,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["gl.vertexattribpointer(attriblocation",{"_index":299,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["gl_fragcolor",{"_index":2245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gl_position",{"_index":2234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glbuffer",{"_index":252,"title":{"classes/GlBuffer.html":{}},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["glbuffer(this.gl",{"_index":1892,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["global",{"_index":1073,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["globalalpha",{"_index":1889,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils",{"_index":708,"title":{"classes/GLUtils.html":{}},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["glutils.get2dprojectionmatrix(this.width",{"_index":1954,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.getcameratranslation(camera",{"_index":1952,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.getrotation(sprite.rotation",{"_index":1970,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.getscale(width",{"_index":761,"title":{},"body":{"classes/GLUtils.html":{}}}],["glutils.getscalematrix(sprite",{"_index":1960,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation",{"_index":757,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(0",{"_index":756,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(sprite.pivot.x",{"_index":1968,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.gettranslation(sprite.pos.x",{"_index":1957,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(originmatrix",{"_index":1972,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(pivotmatrix",{"_index":1971,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(posmatrix",{"_index":1975,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["glutils.multiplymatrices(scalematrix",{"_index":1974,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["go",{"_index":1589,"title":{},"body":{"classes/State.html":{}}}],["going",{"_index":1612,"title":{},"body":{"classes/State.html":{}}}],["gotpickup",{"_index":1137,"title":{},"body":{"classes/OneUp.html":{}}}],["granted",{"_index":2079,"title":{},"body":{"license.html":{}}}],["group",{"_index":1500,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts",{"_index":1490,"title":{},"body":{"classes/SoundGroup.html":{},"coverage.html":{},"unit-test.html":{}}}],["group.ts:21",{"_index":1496,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts:37",{"_index":1499,"title":{},"body":{"classes/SoundGroup.html":{}}}],["group.ts:42",{"_index":1501,"title":{},"body":{"classes/SoundGroup.html":{}}}],["h",{"_index":1223,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["h.y",{"_index":1228,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["half",{"_index":26,"title":{},"body":{"classes/Animations.html":{},"classes/Timer.html":{}}}],["handler(e",{"_index":933,"title":{},"body":{"classes/GamepadControls.html":{}}}],["handles",{"_index":8,"title":{},"body":{"classes/Animations.html":{}}}],["hasanchor",{"_index":1947,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["hasanchor(sprite",{"_index":1956,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["haschildren",{"_index":606,"title":{},"body":{"classes/Entity.html":{}}}],["haswebaudio",{"_index":1824,"title":{},"body":{"classes/WebAudio.html":{}}}],["height",{"_index":313,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Sprite.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["height(value",{"_index":1562,"title":{},"body":{"classes/Sprite.html":{}}}],["helper",{"_index":574,"title":{},"body":{"classes/Container.html":{}}}],["helpers",{"_index":1254,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["hereby",{"_index":2078,"title":{},"body":{"license.html":{}}}],["highp",{"_index":2239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hit",{"_index":988,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["hitbox",{"_index":945,"title":{"classes/HitBox.html":{}},"body":{"classes/HitBox.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"coverage.html":{}}}],["hitbox(0",{"_index":1565,"title":{},"body":{"classes/Sprite.html":{},"classes/Trigger.html":{}}}],["hitbox(4",{"_index":959,"title":{},"body":{"classes/HitBox.html":{}}}],["hitbox.height",{"_index":1746,"title":{},"body":{"classes/Trigger.html":{}}}],["hitbox.width",{"_index":1745,"title":{},"body":{"classes/Trigger.html":{}}}],["hitbox.y",{"_index":1744,"title":{},"body":{"classes/Trigger.html":{}}}],["hits",{"_index":974,"title":{"interfaces/Hits.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["hits.down",{"_index":1005,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["hits.right",{"_index":1010,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["holders",{"_index":2121,"title":{},"body":{"license.html":{}}}],["holds",{"_index":568,"title":{},"body":{"classes/Container.html":{}}}],["home/kiswa/projects/kilo/lib/animations.ts",{"_index":2148,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/assets.ts",{"_index":2149,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/camera.ts",{"_index":2153,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/container.ts",{"_index":2156,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/controls/gamepad",{"_index":2170,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/controls/key",{"_index":2171,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/controls/mouse",{"_index":2173,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/fx/one",{"_index":2174,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/fx/particle",{"_index":2175,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/fx/particle.ts",{"_index":2176,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/game.ts",{"_index":2158,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/canvas",{"_index":2177,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/renderer.ts",{"_index":2181,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl",{"_index":2182,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/defaults.ts",{"_index":2186,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/gl",{"_index":2187,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/shader",{"_index":2188,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/renderer/webgl/utils.ts",{"_index":2190,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/resolvers/stop",{"_index":2191,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/resolvers/wall",{"_index":2192,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/scene.ts",{"_index":2160,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/sound/sound",{"_index":2196,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/sound/sound.ts",{"_index":2197,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/state.ts",{"_index":2162,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/tile",{"_index":2164,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/timer.ts",{"_index":2168,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/entity.ts",{"_index":2199,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/hit",{"_index":2200,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/rect.ts",{"_index":2201,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/sprite.ts",{"_index":2202,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/text.ts",{"_index":2204,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/texture.ts",{"_index":2205,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/trigger.ts",{"_index":2206,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/types/vec.ts",{"_index":2207,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/math.ts",{"_index":2208,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/physics.ts",{"_index":2211,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/sprite.ts",{"_index":2212,"title":{},"body":{"unit-test.html":{}}}],["home/kiswa/projects/kilo/lib/utils/tiled",{"_index":2213,"title":{},"body":{"unit-test.html":{}}}],["horizontal",{"_index":1204,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["horizontalvelrange",{"_index":1206,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["html5",{"_index":516,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlaudioelement",{"_index":176,"title":{},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/WebAudio.html":{}}}],["htmlcanvaselement",{"_index":525,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlelement",{"_index":523,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["htmlimageelement",{"_index":153,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["id",{"_index":236,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["identifier",{"_index":1989,"title":{},"body":{"coverage.html":{}}}],["idle",{"_index":21,"title":{},"body":{"classes/Animations.html":{}}}],["ids",{"_index":1070,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["ignore",{"_index":87,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/KeyControls.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["image",{"_index":140,"title":{},"body":{"classes/Assets.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Sprite.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["image(url",{"_index":148,"title":{},"body":{"classes/Assets.html":{}}}],["imageheight",{"_index":1078,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["imagewidth",{"_index":1079,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["img",{"_index":200,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{},"classes/WebGLRenderer.html":{}}}],["img.addeventlistener('load",{"_index":202,"title":{},"body":{"classes/Assets.html":{}}}],["img.complete",{"_index":1926,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["img.src",{"_index":201,"title":{},"body":{"classes/Assets.html":{},"classes/WebGLRenderer.html":{}}}],["implementation",{"_index":12,"title":{},"body":{"classes/Animations.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["implementations",{"_index":545,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["implemented",{"_index":448,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["implements",{"_index":1261,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["implied",{"_index":2112,"title":{},"body":{"license.html":{}}}],["import",{"_index":85,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["impulse",{"_index":1793,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["included",{"_index":2106,"title":{},"body":{"license.html":{}}}],["including",{"_index":2090,"title":{},"body":{"license.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["information",{"_index":1569,"title":{},"body":{"classes/State.html":{}}}],["inherited",{"_index":357,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["initial",{"_index":1154,"title":{},"body":{"classes/OneUp.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{}}}],["initialize",{"_index":44,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["initwebgl",{"_index":1405,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["input",{"_index":1039,"title":{},"body":{"classes/KeyControls.html":{}}}],["inputs",{"_index":1016,"title":{},"body":{"classes/KeyControls.html":{}}}],["inside",{"_index":1136,"title":{},"body":{"classes/OneUp.html":{}}}],["install",{"_index":2054,"title":{},"body":{"index.html":{}}}],["instance",{"_index":802,"title":{},"body":{"classes/Game.html":{},"classes/WebAudio.html":{}}}],["instanceof",{"_index":1962,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["instances",{"_index":1514,"title":{},"body":{"classes/SoundPool.html":{}}}],["integrate",{"_index":1796,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["integrate(e",{"_index":1797,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["integratepos",{"_index":1804,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["integrates",{"_index":1795,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["interface",{"_index":588,"title":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"interfaces/VecEntity.html":{}},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["interfaces",{"_index":590,"title":{},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"interfaces/SoundOptions.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"interfaces/VecEntity.html":{},"overview.html":{}}}],["internal",{"_index":88,"title":{},"body":{"classes/Animations.html":{},"classes/Timer.html":{}}}],["invalid",{"_index":993,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["invokes",{"_index":1705,"title":{},"body":{"classes/Trigger.html":{}}}],["is(state",{"_index":1604,"title":{},"body":{"classes/State.html":{}}}],["isabovelevel",{"_index":639,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["iscompleted",{"_index":186,"title":{},"body":{"classes/Assets.html":{}}}],["isconnect",{"_index":934,"title":{},"body":{"classes/GamepadControls.html":{}}}],["isdown",{"_index":1082,"title":{},"body":{"classes/MouseControls.html":{}}}],["isin",{"_index":1594,"title":{},"body":{"classes/State.html":{}}}],["isin(...states",{"_index":1606,"title":{},"body":{"classes/State.html":{}}}],["isincamera",{"_index":521,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["isincamera(entity",{"_index":537,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["isjson",{"_index":224,"title":{},"body":{"classes/Assets.html":{}}}],["iswebgl",{"_index":849,"title":{},"body":{"classes/Game.html":{}}}],["json",{"_index":141,"title":{},"body":{"classes/Assets.html":{},"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["json(url",{"_index":154,"title":{},"body":{"classes/Assets.html":{}}}],["jsonobj",{"_index":668,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.height",{"_index":675,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.layers",{"_index":676,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tileheight",{"_index":673,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tilesets",{"_index":677,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.tilewidth",{"_index":672,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["jsonobj.width",{"_index":674,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["justsetstate",{"_index":1614,"title":{},"body":{"classes/State.html":{}}}],["keep",{"_index":390,"title":{},"body":{"classes/Camera.html":{}}}],["key",{"_index":602,"title":{},"body":{"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/KeyControls.html":{},"interfaces/TiledMap.html":{}}}],["key's",{"_index":1026,"title":{},"body":{"classes/KeyControls.html":{}}}],["key(key",{"_index":1019,"title":{},"body":{"classes/KeyControls.html":{}}}],["keyboard",{"_index":595,"title":{},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{}}}],["keyboardevent",{"_index":1021,"title":{},"body":{"classes/KeyControls.html":{}}}],["keycontrols",{"_index":599,"title":{"classes/KeyControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{},"coverage.html":{}}}],["keymap",{"_index":1045,"title":{},"body":{"classes/KeyControls.html":{},"miscellaneous/typealiases.html":{}}}],["keys",{"_index":598,"title":{},"body":{"interfaces/Controls.html":{},"classes/KeyControls.html":{},"miscellaneous/typealiases.html":{}}}],["keyw",{"_index":1024,"title":{},"body":{"classes/KeyControls.html":{}}}],["kilo",{"_index":1328,"title":{},"body":{"classes/Renderer.html":{},"classes/WebGLRenderer.html":{},"index.html":{}}}],["kind",{"_index":2110,"title":{},"body":{"license.html":{}}}],["l",{"_index":1225,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["l.y",{"_index":1232,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["last",{"_index":84,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{}}}],["lastplay",{"_index":1249,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["lasttime",{"_index":865,"title":{},"body":{"classes/Game.html":{},"classes/State.html":{}}}],["layer",{"_index":638,"title":{"interfaces/Layer.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["layer.data",{"_index":693,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["layer.isabovelevel",{"_index":687,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["layer.name",{"_index":694,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["layers",{"_index":633,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["left",{"_index":955,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{}}}],["lerp",{"_index":2025,"title":{},"body":{"coverage.html":{}}}],["level",{"_index":637,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["levelindex",{"_index":650,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["levellayer",{"_index":678,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["liability",{"_index":2125,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2122,"title":{},"body":{"license.html":{}}}],["lib/.../assets.ts",{"_index":2139,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../defaults.ts",{"_index":2218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../game.ts",{"_index":2046,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/.../key",{"_index":2138,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../math.ts",{"_index":2219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../tiled",{"_index":2141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../timer.ts",{"_index":2140,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../wall",{"_index":2142,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/animations.ts",{"_index":6,"title":{},"body":{"classes/Animations.html":{},"coverage.html":{}}}],["lib/animations.ts:106",{"_index":79,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:52",{"_index":43,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:74",{"_index":54,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:85",{"_index":70,"title":{},"body":{"classes/Animations.html":{}}}],["lib/animations.ts:95",{"_index":77,"title":{},"body":{"classes/Animations.html":{}}}],["lib/assets.ts",{"_index":129,"title":{},"body":{"classes/Assets.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/assets.ts:109",{"_index":155,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:24",{"_index":178,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:26",{"_index":147,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:44",{"_index":172,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:61",{"_index":159,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:70",{"_index":149,"title":{},"body":{"classes/Assets.html":{}}}],["lib/assets.ts:88",{"_index":175,"title":{},"body":{"classes/Assets.html":{}}}],["lib/camera.ts",{"_index":303,"title":{},"body":{"classes/Camera.html":{},"coverage.html":{}}}],["lib/camera.ts:108",{"_index":414,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:119",{"_index":407,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:138",{"_index":422,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:149",{"_index":377,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:166",{"_index":388,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:206",{"_index":428,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:26",{"_index":349,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:44",{"_index":342,"title":{},"body":{"classes/Camera.html":{}}}],["lib/camera.ts:86",{"_index":394,"title":{},"body":{"classes/Camera.html":{}}}],["lib/container.ts",{"_index":567,"title":{},"body":{"classes/Container.html":{},"coverage.html":{}}}],["lib/container.ts:24",{"_index":581,"title":{},"body":{"classes/Container.html":{}}}],["lib/container.ts:35",{"_index":582,"title":{},"body":{"classes/Container.html":{}}}],["lib/container.ts:49",{"_index":583,"title":{},"body":{"classes/Container.html":{}}}],["lib/controls/controls.ts",{"_index":591,"title":{},"body":{"interfaces/Controls.html":{},"coverage.html":{}}}],["lib/controls/gamepad",{"_index":881,"title":{},"body":{"classes/GamepadControls.html":{},"coverage.html":{}}}],["lib/controls/key",{"_index":1014,"title":{},"body":{"classes/KeyControls.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/controls/mouse",{"_index":1080,"title":{},"body":{"classes/MouseControls.html":{},"coverage.html":{}}}],["lib/fx/one",{"_index":1126,"title":{},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["lib/fx/particle",{"_index":1234,"title":{},"body":{"classes/ParticleEmitter.html":{},"coverage.html":{}}}],["lib/fx/particle.ts",{"_index":1178,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["lib/fx/particle.ts:103",{"_index":1196,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:50",{"_index":1186,"title":{},"body":{"classes/Particle.html":{}}}],["lib/fx/particle.ts:81",{"_index":1191,"title":{},"body":{"classes/Particle.html":{}}}],["lib/game.ts",{"_index":785,"title":{},"body":{"classes/Game.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/game.ts:103",{"_index":831,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:106",{"_index":796,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:152",{"_index":817,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:168",{"_index":813,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:66",{"_index":801,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:68",{"_index":804,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:70",{"_index":808,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:72",{"_index":809,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:75",{"_index":820,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:80",{"_index":822,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:85",{"_index":824,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:90",{"_index":826,"title":{},"body":{"classes/Game.html":{}}}],["lib/game.ts:98",{"_index":828,"title":{},"body":{"classes/Game.html":{}}}],["lib/renderer/canvas",{"_index":512,"title":{},"body":{"classes/CanvasRenderer.html":{},"coverage.html":{}}}],["lib/renderer/renderer.ts",{"_index":1311,"title":{},"body":{"classes/Renderer.html":{},"coverage.html":{}}}],["lib/renderer/renderer.ts:11",{"_index":1318,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:13",{"_index":1319,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:16",{"_index":1325,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:18",{"_index":1316,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:44",{"_index":1323,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:52",{"_index":1322,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:7",{"_index":1321,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/renderer.ts:9",{"_index":1320,"title":{},"body":{"classes/Renderer.html":{}}}],["lib/renderer/webgl",{"_index":1880,"title":{},"body":{"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["lib/renderer/webgl/defaults.ts",{"_index":2002,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/renderer/webgl/gl",{"_index":231,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"coverage.html":{}}}],["lib/renderer/webgl/shader",{"_index":1361,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["lib/renderer/webgl/utils.ts",{"_index":709,"title":{},"body":{"classes/GLUtils.html":{},"coverage.html":{}}}],["lib/renderer/webgl/utils.ts:102",{"_index":749,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:11",{"_index":729,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:29",{"_index":742,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:47",{"_index":738,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:61",{"_index":721,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:75",{"_index":745,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/renderer/webgl/utils.ts:88",{"_index":733,"title":{},"body":{"classes/GLUtils.html":{}}}],["lib/resolvers/stop",{"_index":2006,"title":{},"body":{"coverage.html":{}}}],["lib/resolvers/wall",{"_index":975,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/scene.ts",{"_index":1346,"title":{},"body":{"classes/Scene.html":{},"coverage.html":{}}}],["lib/scene.ts:12",{"_index":1355,"title":{},"body":{"classes/Scene.html":{}}}],["lib/scene.ts:14",{"_index":1354,"title":{},"body":{"classes/Scene.html":{}}}],["lib/scene.ts:16",{"_index":1352,"title":{},"body":{"classes/Scene.html":{}}}],["lib/sound/sound",{"_index":1489,"title":{},"body":{"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"coverage.html":{}}}],["lib/sound/sound.ts",{"_index":1446,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"coverage.html":{}}}],["lib/sound/sound.ts:24",{"_index":1457,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:30",{"_index":1465,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:35",{"_index":1468,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:37",{"_index":1455,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:70",{"_index":1460,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/sound.ts:81",{"_index":1463,"title":{},"body":{"classes/Sound.html":{}}}],["lib/sound/web",{"_index":1814,"title":{},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["lib/state.ts",{"_index":1567,"title":{},"body":{"classes/State.html":{},"coverage.html":{}}}],["lib/state.ts:100",{"_index":1613,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:111",{"_index":1605,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:119",{"_index":1607,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:40",{"_index":1600,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:42",{"_index":1599,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:47",{"_index":1597,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:64",{"_index":1601,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:79",{"_index":1610,"title":{},"body":{"classes/State.html":{}}}],["lib/state.ts:89",{"_index":1603,"title":{},"body":{"classes/State.html":{}}}],["lib/tile",{"_index":1643,"title":{},"body":{"classes/TileSprite.html":{},"coverage.html":{}}}],["lib/timer.ts",{"_index":1671,"title":{},"body":{"classes/Timer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/timer.ts:22",{"_index":1688,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:24",{"_index":1689,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:31",{"_index":1684,"title":{},"body":{"classes/Timer.html":{}}}],["lib/timer.ts:60",{"_index":1694,"title":{},"body":{"classes/Timer.html":{}}}],["lib/types/entity.ts",{"_index":604,"title":{},"body":{"classes/Entity.html":{},"coverage.html":{}}}],["lib/types/entity.ts:11",{"_index":608,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:14",{"_index":611,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:16",{"_index":612,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:19",{"_index":609,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:22",{"_index":618,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:24",{"_index":607,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:45",{"_index":616,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:52",{"_index":614,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:6",{"_index":613,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:63",{"_index":615,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/entity.ts:8",{"_index":610,"title":{},"body":{"classes/Entity.html":{}}}],["lib/types/hit",{"_index":946,"title":{},"body":{"classes/HitBox.html":{},"coverage.html":{}}}],["lib/types/rect.ts",{"_index":1296,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"coverage.html":{}}}],["lib/types/rect.ts:18",{"_index":1302,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:20",{"_index":1304,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:23",{"_index":1303,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:25",{"_index":1301,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/rect.ts:49",{"_index":1307,"title":{},"body":{"classes/Rect.html":{}}}],["lib/types/sprite.ts",{"_index":1521,"title":{},"body":{"classes/Sprite.html":{},"coverage.html":{}}}],["lib/types/sprite.ts:23",{"_index":1540,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:25",{"_index":1541,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:36",{"_index":1544,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:41",{"_index":1546,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:46",{"_index":1548,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:51",{"_index":1550,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:56",{"_index":1553,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:61",{"_index":1552,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:66",{"_index":1555,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:68",{"_index":1539,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/sprite.ts:94",{"_index":1542,"title":{},"body":{"classes/Sprite.html":{}}}],["lib/types/text.ts",{"_index":1621,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{},"coverage.html":{}}}],["lib/types/text.ts:26",{"_index":1630,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/text.ts:28",{"_index":1628,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/text.ts:49",{"_index":1631,"title":{},"body":{"classes/Text.html":{}}}],["lib/types/texture.ts",{"_index":1637,"title":{},"body":{"classes/Texture.html":{},"coverage.html":{}}}],["lib/types/texture.ts:13",{"_index":1640,"title":{},"body":{"classes/Texture.html":{}}}],["lib/types/tiled.ts",{"_index":1069,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["lib/types/trigger.ts",{"_index":1703,"title":{},"body":{"classes/Trigger.html":{},"coverage.html":{}}}],["lib/types/trigger.ts:38",{"_index":1723,"title":{},"body":{"classes/Trigger.html":{}}}],["lib/types/trigger.ts:61",{"_index":1739,"title":{},"body":{"classes/Trigger.html":{}}}],["lib/types/trigger.ts:73",{"_index":1731,"title":{},"body":{"classes/Trigger.html":{}}}],["lib/types/trigger.ts:78",{"_index":1734,"title":{},"body":{"classes/Trigger.html":{}}}],["lib/types/vec.ts",{"_index":1251,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"coverage.html":{}}}],["lib/types/vec.ts:110",{"_index":1767,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:122",{"_index":1763,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:130",{"_index":1766,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:135",{"_index":1768,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:150",{"_index":1764,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:161",{"_index":1771,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:23",{"_index":1758,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:25",{"_index":1759,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:32",{"_index":1765,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:34",{"_index":1757,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:53",{"_index":1769,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:65",{"_index":1762,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:73",{"_index":1761,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:82",{"_index":1760,"title":{},"body":{"classes/Vec.html":{}}}],["lib/types/vec.ts:96",{"_index":1770,"title":{},"body":{"classes/Vec.html":{}}}],["lib/utils/math.ts",{"_index":2019,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/utils/physics.ts",{"_index":1773,"title":{},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["lib/utils/sprite.ts",{"_index":2038,"title":{},"body":{"coverage.html":{}}}],["lib/utils/tiled",{"_index":630,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["library",{"_index":2051,"title":{},"body":{"index.html":{}}}],["license",{"_index":2069,"title":{"license.html":{}},"body":{"license.html":{}}}],["life",{"_index":1166,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["lifecycle",{"_index":1180,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["lifesecrange",{"_index":1212,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["limitation",{"_index":2091,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2113,"title":{},"body":{"license.html":{}}}],["limits",{"_index":392,"title":{},"body":{"classes/Camera.html":{}}}],["line",{"_index":1530,"title":{},"body":{"classes/Sprite.html":{}}}],["lines",{"_index":2147,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":451,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{}}}],["listeners",{"_index":161,"title":{},"body":{"classes/Assets.html":{}}}],["literal",{"_index":2145,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":164,"title":{},"body":{"classes/Assets.html":{},"interfaces/ExtraLayer.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["load(vertexsource",{"_index":1396,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loaded",{"_index":169,"title":{},"body":{"classes/Assets.html":{},"classes/Sprite.html":{},"classes/Texture.html":{},"classes/WebGLRenderer.html":{}}}],["loading",{"_index":803,"title":{},"body":{"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["loads",{"_index":130,"title":{},"body":{"classes/Assets.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Texture.html":{}}}],["loadshader(source",{"_index":1425,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["loadtiles",{"_index":691,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["loadtiles(tiles",{"_index":689,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["local",{"_index":1075,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["localhost:5000",{"_index":2067,"title":{},"body":{"index.html":{}}}],["locally",{"_index":2066,"title":{},"body":{"index.html":{}}}],["locate",{"_index":1386,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["location",{"_index":285,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"interfaces/TiledMap.html":{}}}],["lookup",{"_index":242,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["loop",{"_index":572,"title":{},"body":{"classes/Container.html":{},"classes/Game.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Timer.html":{}}}],["loops",{"_index":1469,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["low",{"_index":1822,"title":{},"body":{"classes/WebAudio.html":{}}}],["mag",{"_index":1284,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["magnitude",{"_index":1283,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["main",{"_index":636,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":249,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["manage",{"_index":251,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["manages",{"_index":1236,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["mandatory",{"_index":651,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["map",{"_index":105,"title":{"interfaces/Map.html":{}},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["map(fn",{"_index":441,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["map.mapheight",{"_index":318,"title":{},"body":{"classes/Camera.html":{}}}],["map.mapwidth",{"_index":316,"title":{},"body":{"classes/Camera.html":{}}}],["map.tileheight",{"_index":319,"title":{},"body":{"classes/Camera.html":{}}}],["map.tilesatcorners(bounds",{"_index":1001,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["map.tilewidth",{"_index":317,"title":{},"body":{"classes/Camera.html":{}}}],["map.ts",{"_index":2012,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["mapdata.pickuplocations.foreach(pos",{"_index":578,"title":{},"body":{"classes/Container.html":{}}}],["mapheight",{"_index":648,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["maps",{"_index":444,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["mapwidth",{"_index":647,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["marked",{"_index":438,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["mass",{"_index":1777,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["master",{"_index":1827,"title":{},"body":{"classes/WebAudio.html":{}}}],["masternode",{"_index":1854,"title":{},"body":{"classes/WebAudio.html":{}}}],["mat3",{"_index":2224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":126,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["math",{"_index":1200,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/SoundGroup.html":{},"classes/Vec.html":{}}}],["math.abs(centeredx",{"_index":510,"title":{},"body":{"classes/Camera.html":{}}}],["math.abs(this.scale.x",{"_index":1659,"title":{},"body":{"classes/TileSprite.html":{}}}],["math.abs(this.scale.y",{"_index":1661,"title":{},"body":{"classes/TileSprite.html":{}}}],["math.cos",{"_index":765,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.floor(camera.pos.x",{"_index":758,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.floor(camera.pos.y",{"_index":759,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.min(t",{"_index":869,"title":{},"body":{"classes/Game.html":{}}}],["math.randf(h.x",{"_index":1227,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randf(l.x",{"_index":1231,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randf(v.x",{"_index":1229,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["math.randonefrom(this.sounds).play(opts",{"_index":1503,"title":{},"body":{"classes/SoundGroup.html":{}}}],["math.round(.25",{"_index":874,"title":{},"body":{"classes/Game.html":{}}}],["math.sin",{"_index":766,"title":{},"body":{"classes/GLUtils.html":{}}}],["math.sqrt(this.x",{"_index":1285,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["math.sqrt(vel.x",{"_index":1810,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["matrices",{"_index":751,"title":{},"body":{"classes/GLUtils.html":{}}}],["matrix",{"_index":726,"title":{},"body":{"classes/GLUtils.html":{}}}],["matthew",{"_index":2075,"title":{},"body":{"license.html":{}}}],["max_frame",{"_index":843,"title":{},"body":{"classes/Game.html":{}}}],["maximum",{"_index":1203,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["maxx",{"_index":499,"title":{},"body":{"classes/Camera.html":{}}}],["maxy",{"_index":504,"title":{},"body":{"classes/Camera.html":{}}}],["merchantability",{"_index":2115,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2094,"title":{},"body":{"license.html":{}}}],["message",{"_index":1419,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["method",{"_index":447,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["methods",{"_index":35,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["minimum",{"_index":1202,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["miscellaneous",{"_index":2044,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":652,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["mit",{"_index":2070,"title":{},"body":{"license.html":{}}}],["mix",{"_index":2026,"title":{},"body":{"coverage.html":{}}}],["modify",{"_index":2093,"title":{},"body":{"license.html":{}}}],["modules",{"_index":2132,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monospace",{"_index":1624,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["more",{"_index":948,"title":{},"body":{"classes/HitBox.html":{}}}],["mouse",{"_index":601,"title":{},"body":{"interfaces/Controls.html":{},"classes/MouseControls.html":{}}}],["mousecontrols",{"_index":603,"title":{"classes/MouseControls.html":{}},"body":{"interfaces/Controls.html":{},"classes/MouseControls.html":{},"coverage.html":{}}}],["mouseevent",{"_index":1108,"title":{},"body":{"classes/MouseControls.html":{}}}],["mouseposfromevent(e",{"_index":1114,"title":{},"body":{"classes/MouseControls.html":{}}}],["move",{"_index":351,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{}}}],["move(e",{"_index":1110,"title":{},"body":{"classes/MouseControls.html":{}}}],["move.ts",{"_index":2007,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["moved",{"_index":1130,"title":{},"body":{"classes/OneUp.html":{}}}],["movement",{"_index":996,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["movements",{"_index":994,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["moving",{"_index":354,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Timer.html":{}}}],["ms",{"_index":867,"title":{},"body":{"classes/Game.html":{}}}],["multiple",{"_index":136,"title":{},"body":{"classes/Assets.html":{}}}],["multiples",{"_index":1507,"title":{},"body":{"classes/SoundPool.html":{}}}],["multiplication",{"_index":754,"title":{},"body":{"classes/GLUtils.html":{}}}],["multiplier",{"_index":829,"title":{},"body":{"classes/Game.html":{}}}],["multiplies",{"_index":750,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiply",{"_index":1278,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiply(s",{"_index":1279,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["multiplymatrices",{"_index":719,"title":{},"body":{"classes/GLUtils.html":{}}}],["multiplymatrices(a",{"_index":747,"title":{},"body":{"classes/GLUtils.html":{}}}],["music",{"_index":1829,"title":{},"body":{"classes/WebAudio.html":{}}}],["musicnode",{"_index":1857,"title":{},"body":{"classes/WebAudio.html":{}}}],["mute",{"_index":1826,"title":{},"body":{"classes/WebAudio.html":{}}}],["mutes",{"_index":1838,"title":{},"body":{"classes/WebAudio.html":{}}}],["name",{"_index":46,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["named",{"_index":72,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["namespace",{"_index":1072,"title":{},"body":{"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{}}}],["needed",{"_index":991,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"classes/Timer.html":{},"interfaces/VecEntity.html":{}}}],["needs",{"_index":1579,"title":{},"body":{"classes/State.html":{}}}],["network",{"_index":137,"title":{},"body":{"classes/Assets.html":{}}}],["new",{"_index":14,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"unit-test.html":{}}}],["next",{"_index":1517,"title":{},"body":{"classes/SoundPool.html":{}}}],["node",{"_index":1839,"title":{},"body":{"classes/WebAudio.html":{}}}],["noninfringement",{"_index":2119,"title":{},"body":{"license.html":{}}}],["normal",{"_index":837,"title":{},"body":{"classes/Game.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"miscellaneous/enumerations.html":{}}}],["normalize",{"_index":1286,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["notice",{"_index":2104,"title":{},"body":{"license.html":{}}}],["npm",{"_index":2056,"title":{},"body":{"index.html":{}}}],["null",{"_index":110,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/State.html":{},"classes/WebGLRenderer.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["numeric",{"_index":1152,"title":{},"body":{"classes/OneUp.html":{}}}],["numparticles",{"_index":1242,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["object",{"_index":9,"title":{"interfaces/Object.html":{}},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":1090,"title":{},"body":{"classes/MouseControls.html":{},"classes/State.html":{}}}],["object.assign",{"_index":1482,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["objects",{"_index":248,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/SoundPool.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["obtaining",{"_index":2083,"title":{},"body":{"license.html":{}}}],["offset",{"_index":417,"title":{},"body":{"classes/Camera.html":{},"classes/HitBox.html":{}}}],["offsets",{"_index":415,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["ondone",{"_index":1683,"title":{},"body":{"classes/Timer.html":{}}}],["one",{"_index":80,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"classes/SoundGroup.html":{},"classes/Sprite.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["one.pos.copy(this.player.pos",{"_index":1148,"title":{},"body":{"classes/OneUp.html":{}}}],["onenter",{"_index":1714,"title":{},"body":{"classes/Trigger.html":{}}}],["onenter(...args",{"_index":1730,"title":{},"body":{"classes/Trigger.html":{}}}],["oneup",{"_index":1125,"title":{"classes/OneUp.html":{}},"body":{"classes/OneUp.html":{},"coverage.html":{}}}],["oneup(coin",{"_index":1147,"title":{},"body":{"classes/OneUp.html":{}}}],["onexit",{"_index":1719,"title":{},"body":{"classes/Trigger.html":{}}}],["onexit(...args",{"_index":1733,"title":{},"body":{"classes/Trigger.html":{}}}],["onload",{"_index":206,"title":{},"body":{"classes/Assets.html":{}}}],["onprogress",{"_index":142,"title":{},"body":{"classes/Assets.html":{}}}],["onprogress(cb",{"_index":157,"title":{},"body":{"classes/Assets.html":{}}}],["onready",{"_index":143,"title":{},"body":{"classes/Assets.html":{}}}],["onready(cb",{"_index":170,"title":{},"body":{"classes/Assets.html":{}}}],["onscenecomplete",{"_index":1350,"title":{},"body":{"classes/Scene.html":{}}}],["ontick",{"_index":1685,"title":{},"body":{"classes/Timer.html":{}}}],["opacity",{"_index":360,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/Tileset.html":{},"classes/Trigger.html":{}}}],["optional",{"_index":48,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["optionally",{"_index":1674,"title":{},"body":{"classes/Timer.html":{}}}],["options",{"_index":1184,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["options.loop",{"_index":1476,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["opts",{"_index":1481,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["opts.time",{"_index":1485,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["opts.volume",{"_index":1483,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["originmatrix",{"_index":1961,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["otherwise",{"_index":2128,"title":{},"body":{"license.html":{}}}],["out",{"_index":384,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/WebAudio.html":{},"license.html":{}}}],["over",{"_index":1134,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["overlay",{"_index":379,"title":{},"body":{"classes/Camera.html":{}}}],["overrides",{"_index":58,"title":{},"body":{"classes/Animations.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["overriding",{"_index":1462,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{}}}],["overview",{"_index":2133,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":107,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["parent",{"_index":1089,"title":{},"body":{"classes/MouseControls.html":{},"classes/State.html":{}}}],["parsed",{"_index":156,"title":{},"body":{"classes/Assets.html":{}}}],["parsefloat(parts[3].replace",{"_index":1918,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(0",{"_index":1919,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(2",{"_index":1921,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(color.substr(4",{"_index":1922,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[0",{"_index":1914,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[1",{"_index":1915,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[2",{"_index":1917,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parseint(parts[2].replace",{"_index":1916,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parser.ts",{"_index":631,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["parser.ts:33",{"_index":1668,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["parser.ts:41",{"_index":1669,"title":{},"body":{"interfaces/TiledMap.html":{}}}],["parses",{"_index":662,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["partial",{"_index":361,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["partial,index",{"_index":442,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["particle",{"_index":1177,"title":{"classes/Particle.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particle's",{"_index":1199,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["particleemitter",{"_index":1182,"title":{"classes/ParticleEmitter.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particleoptions",{"_index":1185,"title":{"interfaces/ParticleOptions.html":{}},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"coverage.html":{}}}],["particles",{"_index":1243,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["particular",{"_index":2117,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1908,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parts.length",{"_index":1912,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parts[0",{"_index":1910,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["parts[0].substr(parts[0].indexof",{"_index":1911,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["passed",{"_index":1190,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["passthroughkeys",{"_index":1046,"title":{},"body":{"classes/KeyControls.html":{}}}],["passthroughkeys.indexof(e.code.tostring",{"_index":1064,"title":{},"body":{"classes/KeyControls.html":{}}}],["path",{"_index":152,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["pause",{"_index":1573,"title":{},"body":{"classes/State.html":{}}}],["paused",{"_index":1576,"title":{},"body":{"classes/State.html":{}}}],["pauses",{"_index":1842,"title":{},"body":{"classes/WebAudio.html":{}}}],["per",{"_index":288,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{}}}],["permission",{"_index":2077,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2099,"title":{},"body":{"license.html":{}}}],["person",{"_index":2082,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2100,"title":{},"body":{"license.html":{}}}],["physics",{"_index":1774,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["pickup",{"_index":577,"title":{},"body":{"classes/Container.html":{}}}],["pickup(pos",{"_index":580,"title":{},"body":{"classes/Container.html":{}}}],["pickups",{"_index":575,"title":{},"body":{"classes/Container.html":{}}}],["pickups.push(new",{"_index":579,"title":{},"body":{"classes/Container.html":{}}}],["pivot",{"_index":1537,"title":{},"body":{"classes/Sprite.html":{}}}],["pivotmatrix",{"_index":1964,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["pixels",{"_index":426,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["play",{"_index":37,"title":{},"body":{"classes/Animations.html":{},"classes/ParticleEmitter.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/WebAudio.html":{}}}],["play(anim",{"_index":69,"title":{},"body":{"classes/Animations.html":{}}}],["play(options",{"_index":1515,"title":{},"body":{"classes/SoundPool.html":{}}}],["play(opts",{"_index":1498,"title":{},"body":{"classes/SoundGroup.html":{}}}],["play(overrides",{"_index":1459,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["play(pos",{"_index":1244,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["player",{"_index":666,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["player.hitbox",{"_index":958,"title":{},"body":{"classes/HitBox.html":{}}}],["playing",{"_index":1451,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/State.html":{},"classes/WebAudio.html":{}}}],["plays",{"_index":1246,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/SoundGroup.html":{},"classes/WebAudio.html":{}}}],["point",{"_index":41,"title":{"interfaces/Point.html":{}},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{},"coverage.html":{}}}],["pool",{"_index":1237,"title":{},"body":{"classes/ParticleEmitter.html":{},"classes/SoundPool.html":{}}}],["pool.ts",{"_index":1505,"title":{},"body":{"classes/SoundPool.html":{},"coverage.html":{},"unit-test.html":{}}}],["pool.ts:16",{"_index":1513,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:40",{"_index":1516,"title":{},"body":{"classes/SoundPool.html":{}}}],["pool.ts:47",{"_index":1518,"title":{},"body":{"classes/SoundPool.html":{}}}],["poolsize",{"_index":1512,"title":{},"body":{"classes/SoundPool.html":{}}}],["portions",{"_index":2108,"title":{},"body":{"license.html":{}}}],["pos",{"_index":328,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{}}}],["position",{"_index":372,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{}}}],["posmatrix",{"_index":1973,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["possible",{"_index":1353,"title":{},"body":{"classes/Scene.html":{},"classes/State.html":{}}}],["power",{"_index":425,"title":{},"body":{"classes/Camera.html":{}}}],["pre",{"_index":835,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["precise",{"_index":949,"title":{},"body":{"classes/HitBox.html":{}}}],["precision",{"_index":2238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepares",{"_index":282,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["pressed",{"_index":1027,"title":{},"body":{"classes/KeyControls.html":{},"classes/MouseControls.html":{}}}],["prevent",{"_index":135,"title":{},"body":{"classes/Assets.html":{}}}],["prevents",{"_index":992,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["previous",{"_index":1602,"title":{},"body":{"classes/State.html":{}}}],["previously",{"_index":1720,"title":{},"body":{"classes/Trigger.html":{}}}],["prior",{"_index":1571,"title":{},"body":{"classes/State.html":{}}}],["private",{"_index":89,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["product",{"_index":1290,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["program",{"_index":240,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["program.ts",{"_index":1362,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{},"unit-test.html":{}}}],["program.ts:18",{"_index":1445,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:20",{"_index":1440,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:45",{"_index":1441,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:60",{"_index":1442,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["program.ts:74",{"_index":1443,"title":{},"body":{"classes/ShaderProgram.html":{}}}],["progress",{"_index":165,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["progresscallback",{"_index":158,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["progresslisteners",{"_index":185,"title":{},"body":{"classes/Assets.html":{}}}],["projection",{"_index":725,"title":{},"body":{"classes/GLUtils.html":{}}}],["projectionmatrix",{"_index":1953,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["properties",{"_index":19,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["property",{"_index":743,"title":{"interfaces/Property.html":{}},"body":{"classes/GLUtils.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["protected",{"_index":519,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["provide",{"_index":162,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["provided",{"_index":262,"title":{},"body":{"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"interfaces/Controls.html":{},"classes/GLUtils.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Renderer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"license.html":{}}}],["provides",{"_index":710,"title":{},"body":{"classes/GLUtils.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Point.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"classes/Texture.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{}}}],["public",{"_index":1535,"title":{},"body":{"classes/Sprite.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["publish",{"_index":2095,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2118,"title":{},"body":{"license.html":{}}}],["px",{"_index":1334,"title":{},"body":{"classes/Renderer.html":{}}}],["python=/path/to/python2.7run",{"_index":2057,"title":{},"body":{"index.html":{}}}],["quadin(x",{"_index":2249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quadout(x",{"_index":2250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quickly",{"_index":62,"title":{},"body":{"classes/Animations.html":{}}}],["r",{"_index":1696,"title":{},"body":{"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["radians",{"_index":736,"title":{},"body":{"classes/GLUtils.html":{}}}],["rand",{"_index":2027,"title":{},"body":{"coverage.html":{}}}],["randf",{"_index":2028,"title":{},"body":{"coverage.html":{}}}],["random",{"_index":1192,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/SoundGroup.html":{}}}],["randomly",{"_index":423,"title":{},"body":{"classes/Camera.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["randomseed",{"_index":2029,"title":{},"body":{"coverage.html":{}}}],["randonefrom",{"_index":2030,"title":{},"body":{"coverage.html":{}}}],["randonein",{"_index":2031,"title":{},"body":{"coverage.html":{}}}],["range",{"_index":353,"title":{},"body":{"classes/Camera.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["ranges",{"_index":1195,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["rate",{"_index":90,"title":{},"body":{"classes/Animations.html":{}}}],["ratio",{"_index":877,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["ready",{"_index":180,"title":{},"body":{"classes/Assets.html":{},"classes/State.html":{},"miscellaneous/typealiases.html":{}}}],["readycallback",{"_index":171,"title":{},"body":{"classes/Assets.html":{},"miscellaneous/typealiases.html":{}}}],["readylisteners",{"_index":184,"title":{},"body":{"classes/Assets.html":{}}}],["rect",{"_index":315,"title":{"classes/Rect.html":{}},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["rect(32",{"_index":1298,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["rect(40",{"_index":1171,"title":{},"body":{"classes/OneUp.html":{}}}],["rect(this.hitbox.width",{"_index":1752,"title":{},"body":{"classes/Trigger.html":{}}}],["rect(this.width",{"_index":495,"title":{},"body":{"classes/Camera.html":{}}}],["rectangle",{"_index":396,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Trigger.html":{}}}],["rectstyleoptions",{"_index":1300,"title":{"interfaces/RectStyleOptions.html":{}},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"coverage.html":{}}}],["recursive",{"_index":366,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["recursively",{"_index":535,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["reference",{"_index":1348,"title":{},"body":{"classes/Scene.html":{}}}],["refocus",{"_index":411,"title":{},"body":{"classes/Camera.html":{}}}],["relative",{"_index":151,"title":{},"body":{"classes/Assets.html":{},"classes/MouseControls.html":{},"classes/Renderer.html":{},"classes/Texture.html":{}}}],["released",{"_index":1083,"title":{},"body":{"classes/MouseControls.html":{}}}],["remaining",{"_index":188,"title":{},"body":{"classes/Assets.html":{}}}],["remove",{"_index":337,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{},"classes/Timer.html":{}}}],["remove(child",{"_index":432,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["removes",{"_index":437,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Scene.html":{}}}],["render",{"_index":520,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["render(container",{"_index":532,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["rendered",{"_index":571,"title":{},"body":{"classes/Container.html":{},"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["renderer",{"_index":518,"title":{"classes/Renderer.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["renderer.ts",{"_index":513,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"unit-test.html":{}}}],["renderer.ts:24",{"_index":1881,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:39",{"_index":534,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer.ts:62",{"_index":1882,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["renderer.ts:9",{"_index":524,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["renderer:11",{"_index":526,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:13",{"_index":528,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:44",{"_index":543,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:52",{"_index":538,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:7",{"_index":531,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderer:9",{"_index":530,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["renderers",{"_index":1314,"title":{},"body":{"classes/Renderer.html":{}}}],["rendering",{"_index":514,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["reporting",{"_index":2060,"title":{},"body":{"index.html":{}}}],["representation",{"_index":1293,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["require",{"_index":343,"title":{},"body":{"classes/Camera.html":{}}}],["res.json",{"_index":216,"title":{},"body":{"classes/Assets.html":{}}}],["reset",{"_index":74,"title":{},"body":{"classes/Animations.html":{},"classes/KeyControls.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["resets",{"_index":1029,"title":{},"body":{"classes/KeyControls.html":{}}}],["resize",{"_index":1111,"title":{},"body":{"classes/MouseControls.html":{}}}],["resolution",{"_index":989,"title":{"interfaces/Resolution.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["resolve",{"_index":986,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["resolver",{"_index":982,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":2089,"title":{},"body":{"license.html":{}}}],["result",{"_index":125,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result[i",{"_index":627,"title":{},"body":{"classes/Entity.html":{}}}],["results",{"_index":127,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":113,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Point.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["rgba(255",{"_index":480,"title":{},"body":{"classes/Camera.html":{},"classes/Trigger.html":{}}}],["right",{"_index":953,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{}}}],["rights",{"_index":2092,"title":{},"body":{"license.html":{}}}],["ross",{"_index":2076,"title":{},"body":{"license.html":{}}}],["rotation",{"_index":734,"title":{},"body":{"classes/GLUtils.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["rotations",{"_index":1549,"title":{},"body":{"classes/Sprite.html":{}}}],["rotmatrix",{"_index":1969,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["run",{"_index":793,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{},"index.html":{}}}],["run(gameupdate",{"_index":811,"title":{},"body":{"classes/Game.html":{}}}],["s",{"_index":1044,"title":{},"body":{"classes/KeyControls.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["same",{"_index":32,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/SoundPool.html":{}}}],["sampler2d",{"_index":2240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalar",{"_index":1277,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["scale",{"_index":329,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/GLUtils.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["scalematrix",{"_index":760,"title":{},"body":{"classes/GLUtils.html":{},"classes/WebGLRenderer.html":{}}}],["scene",{"_index":309,"title":{"classes/Scene.html":{}},"body":{"classes/Camera.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/Scene.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["scene(game",{"_index":597,"title":{},"body":{"interfaces/Controls.html":{}}}],["scene/object/whatever",{"_index":1582,"title":{},"body":{"classes/State.html":{}}}],["scenes",{"_index":1349,"title":{},"body":{"classes/Scene.html":{}}}],["screen",{"_index":398,"title":{},"body":{"classes/Camera.html":{},"classes/Game.html":{}}}],["script",{"_index":1364,"title":{},"body":{"interfaces/Scripts.html":{}}}],["scripts",{"_index":1360,"title":{"interfaces/Scripts.html":{}},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"coverage.html":{}}}],["scripts.fragment",{"_index":1385,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["second",{"_index":27,"title":{},"body":{"classes/Animations.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Timer.html":{}}}],["seconds",{"_index":382,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{}}}],["see",{"_index":1189,"title":{},"body":{"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{}}}],["select",{"_index":1497,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sell",{"_index":2098,"title":{},"body":{"license.html":{}}}],["serve",{"_index":2065,"title":{},"body":{"index.html":{}}}],["set",{"_index":71,"title":{},"body":{"classes/Animations.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["set(state",{"_index":1609,"title":{},"body":{"classes/State.html":{}}}],["set(x",{"_index":962,"title":{},"body":{"classes/HitBox.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["setaction(value",{"_index":1035,"title":{},"body":{"classes/KeyControls.html":{}}}],["setactive",{"_index":940,"title":{},"body":{"classes/GlBuffer.html":{}}}],["setactive(buffername",{"_index":290,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["setdebug",{"_index":333,"title":{},"body":{"classes/Camera.html":{}}}],["setdebug(debug",{"_index":393,"title":{},"body":{"classes/Camera.html":{}}}],["setdebug(val",{"_index":1738,"title":{},"body":{"classes/Trigger.html":{}}}],["setheight(value",{"_index":1551,"title":{},"body":{"classes/Sprite.html":{}}}],["sets",{"_index":278,"title":{},"body":{"classes/BufferInfo.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/Trigger.html":{}}}],["setscene",{"_index":794,"title":{},"body":{"classes/Game.html":{}}}],["setscene(scene",{"_index":815,"title":{},"body":{"classes/Game.html":{}}}],["setspeed(value",{"_index":830,"title":{},"body":{"classes/Game.html":{}}}],["setsubject",{"_index":334,"title":{},"body":{"classes/Camera.html":{}}}],["setsubject(sprite",{"_index":406,"title":{},"body":{"classes/Camera.html":{}}}],["setting",{"_index":1466,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["settracking",{"_index":335,"title":{},"body":{"classes/Camera.html":{}}}],["settracking(xo",{"_index":412,"title":{},"body":{"classes/Camera.html":{}}}],["setvolume(volume",{"_index":1467,"title":{},"body":{"classes/Sound.html":{}}}],["setwidth(value",{"_index":1554,"title":{},"body":{"classes/Sprite.html":{}}}],["sfx",{"_index":1828,"title":{},"body":{"classes/WebAudio.html":{}}}],["sfxnode",{"_index":1856,"title":{},"body":{"classes/WebAudio.html":{}}}],["shader",{"_index":1363,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["shaderprogram",{"_index":1371,"title":{"classes/ShaderProgram.html":{}},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["shaderprogram(this.gl",{"_index":1899,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["shaderprogramcol",{"_index":1886,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["shaderprogramtex",{"_index":1885,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["shaders",{"_index":1378,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["shadertype",{"_index":1426,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["shake",{"_index":336,"title":{},"body":{"classes/Camera.html":{}}}],["shake(power",{"_index":421,"title":{},"body":{"classes/Camera.html":{}}}],["shakedecay",{"_index":453,"title":{},"body":{"classes/Camera.html":{}}}],["shakelast",{"_index":454,"title":{},"body":{"classes/Camera.html":{}}}],["shakepower",{"_index":452,"title":{},"body":{"classes/Camera.html":{}}}],["shall",{"_index":2105,"title":{},"body":{"license.html":{}}}],["short",{"_index":424,"title":{},"body":{"classes/Camera.html":{}}}],["showing",{"_index":399,"title":{},"body":{"classes/Camera.html":{}}}],["shows",{"_index":806,"title":{},"body":{"classes/Game.html":{}}}],["sides",{"_index":419,"title":{},"body":{"classes/Camera.html":{}}}],["sign",{"_index":1153,"title":{},"body":{"classes/OneUp.html":{}}}],["similar",{"_index":1138,"title":{},"body":{"classes/OneUp.html":{}}}],["simple",{"_index":722,"title":{},"body":{"classes/GLUtils.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["simpler",{"_index":663,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["simplifies",{"_index":883,"title":{},"body":{"classes/GamepadControls.html":{}}}],["simplify",{"_index":1369,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["single",{"_index":168,"title":{},"body":{"classes/Assets.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["size",{"_index":344,"title":{},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/TileSprite.html":{}}}],["sizes",{"_index":739,"title":{},"body":{"classes/GLUtils.html":{}}}],["skip",{"_index":1690,"title":{},"body":{"classes/Timer.html":{}}}],["slide.ts",{"_index":976,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["slow",{"_index":839,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["smoothstep",{"_index":2032,"title":{},"body":{"coverage.html":{}}}],["software",{"_index":2084,"title":{},"body":{"license.html":{}}}],["something",{"_index":1820,"title":{},"body":{"classes/WebAudio.html":{}}}],["sound",{"_index":144,"title":{"classes/Sound.html":{}},"body":{"classes/Assets.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{},"coverage.html":{}}}],["sound('assets/sounds/ding.ogg",{"_index":1449,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["sound('assets/sounds/ding1.ogg",{"_index":1491,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding2.ogg",{"_index":1492,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding3.ogg",{"_index":1493,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound('assets/sounds/ding4.ogg",{"_index":1494,"title":{},"body":{"classes/SoundGroup.html":{}}}],["sound(url",{"_index":174,"title":{},"body":{"classes/Assets.html":{}}}],["soundgroup",{"_index":1488,"title":{"classes/SoundGroup.html":{}},"body":{"classes/SoundGroup.html":{},"coverage.html":{}}}],["soundoptions",{"_index":1454,"title":{"interfaces/SoundOptions.html":{}},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"coverage.html":{}}}],["soundpool",{"_index":1504,"title":{"classes/SoundPool.html":{}},"body":{"classes/SoundPool.html":{},"coverage.html":{}}}],["soundpool('assets/sounds/ding.ogg",{"_index":1509,"title":{},"body":{"classes/SoundPool.html":{}}}],["sounds",{"_index":1447,"title":{},"body":{"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["sources",{"_index":1365,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["sp",{"_index":1948,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sp.anchor",{"_index":1949,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sp.anchor.x",{"_index":1950,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sp.anchor.y",{"_index":1951,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["space",{"_index":418,"title":{},"body":{"classes/Camera.html":{}}}],["spacebar",{"_index":1034,"title":{},"body":{"classes/KeyControls.html":{}}}],["specific",{"_index":1313,"title":{},"body":{"classes/Renderer.html":{}}}],["specified",{"_index":56,"title":{},"body":{"classes/Animations.html":{},"classes/OneUp.html":{}}}],["speed",{"_index":52,"title":{},"body":{"classes/Animations.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"interfaces/VecEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["speed(value",{"_index":855,"title":{},"body":{"classes/Game.html":{}}}],["speed(vel",{"_index":1809,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["speed.normal",{"_index":842,"title":{},"body":{"classes/Game.html":{}}}],["speeds",{"_index":836,"title":{},"body":{"classes/Game.html":{},"miscellaneous/enumerations.html":{}}}],["sprite",{"_index":61,"title":{"classes/Sprite.html":{}},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/GLUtils.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Sprite.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["sprite(new",{"_index":1531,"title":{},"body":{"classes/Sprite.html":{}}}],["sprite(texture",{"_index":1528,"title":{},"body":{"classes/Sprite.html":{}}}],["sprite.anchor.x",{"_index":492,"title":{},"body":{"classes/Camera.html":{}}}],["sprite.anchor.y",{"_index":493,"title":{},"body":{"classes/Camera.html":{}}}],["sprite.height",{"_index":491,"title":{},"body":{"classes/Camera.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.hit(player",{"_index":1715,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite.pivot.x",{"_index":1965,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.pivot.y",{"_index":1966,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.pos",{"_index":486,"title":{},"body":{"classes/Camera.html":{}}}],["sprite.pos.y",{"_index":1677,"title":{},"body":{"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["sprite.rotation",{"_index":1963,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.scale",{"_index":762,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.scale.x",{"_index":763,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.scale.y",{"_index":764,"title":{},"body":{"classes/GLUtils.html":{}}}],["sprite.texture",{"_index":1925,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["sprite.ts",{"_index":1644,"title":{},"body":{"classes/TileSprite.html":{},"coverage.html":{},"unit-test.html":{}}}],["sprite.ts:11",{"_index":1647,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:14",{"_index":1650,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:16",{"_index":1649,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:19",{"_index":1655,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:24",{"_index":1657,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:26",{"_index":1646,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:53",{"_index":1653,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.ts:9",{"_index":1648,"title":{},"body":{"classes/TileSprite.html":{}}}],["sprite.width",{"_index":489,"title":{},"body":{"classes/Camera.html":{},"classes/WebGLRenderer.html":{}}}],["sprite:11",{"_index":1724,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:14",{"_index":1727,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:16",{"_index":1728,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:19",{"_index":1725,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:23",{"_index":1651,"title":{},"body":{"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["sprite:25",{"_index":1652,"title":{},"body":{"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["sprite:45",{"_index":1737,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:52",{"_index":1735,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:6",{"_index":1729,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:63",{"_index":1736,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:8",{"_index":1726,"title":{},"body":{"classes/Trigger.html":{}}}],["sprite:94",{"_index":1654,"title":{},"body":{"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["src",{"_index":1456,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["start",{"_index":814,"title":{},"body":{"classes/Game.html":{}}}],["started",{"_index":2049,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":667,"title":{},"body":{"interfaces/ExtraLayer.html":{},"classes/OneUp.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{}}}],["state",{"_index":1031,"title":{"classes/State.html":{}},"body":{"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/State.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"coverage.html":{}}}],["state(gamestate.ready",{"_index":1581,"title":{},"body":{"classes/State.html":{}}}],["state(myenum.stateone",{"_index":1598,"title":{},"body":{"classes/State.html":{}}}],["statements",{"_index":1990,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["states",{"_index":1608,"title":{},"body":{"classes/State.html":{}}}],["static",{"_index":711,"title":{},"body":{"classes/GLUtils.html":{},"classes/Game.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["status",{"_index":179,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Resolution.html":{},"classes/State.html":{},"miscellaneous/typealiases.html":{}}}],["step",{"_index":841,"title":{},"body":{"classes/Game.html":{}}}],["stop",{"_index":38,"title":{},"body":{"classes/Animations.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["stopmovement",{"_index":2008,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":1611,"title":{},"body":{"classes/State.html":{}}}],["string",{"_index":51,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{}}}],["strings",{"_index":2144,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["style",{"_index":1214,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["styles",{"_index":1629,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["subject",{"_index":305,"title":{},"body":{"classes/Camera.html":{},"license.html":{}}}],["sublicense",{"_index":2097,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2107,"title":{},"body":{"license.html":{}}}],["subtract",{"_index":1275,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["subtract(vec",{"_index":1276,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["subtracts",{"_index":1274,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["success",{"_index":1416,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["super",{"_index":459,"title":{},"body":{"classes/Camera.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["super(null",{"_index":1742,"title":{},"body":{"classes/Trigger.html":{}}}],["super(texture",{"_index":1662,"title":{},"body":{"classes/TileSprite.html":{}}}],["super(width",{"_index":551,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["super.update(dt",{"_index":1174,"title":{},"body":{"classes/OneUp.html":{}}}],["support",{"_index":1816,"title":{},"body":{"classes/WebAudio.html":{}}}],["supported",{"_index":594,"title":{},"body":{"interfaces/Controls.html":{},"classes/WebAudio.html":{}}}],["switch",{"_index":1584,"title":{},"body":{"classes/State.html":{}}}],["t",{"_index":427,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["table",{"_index":2043,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2042,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["target",{"_index":496,"title":{},"body":{"classes/Camera.html":{}}}],["target.x",{"_index":498,"title":{},"body":{"classes/Camera.html":{}}}],["target.y",{"_index":503,"title":{},"body":{"classes/Camera.html":{}}}],["temporary",{"_index":1572,"title":{},"body":{"classes/State.html":{}}}],["test",{"_index":997,"title":{"unit-test.html":{}},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"index.html":{},"unit-test.html":{}}}],["test:covtests",{"_index":2061,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1523,"title":{},"body":{"classes/Sprite.html":{}}}],["testobj",{"_index":1297,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{}}}],["testrun",{"_index":2059,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2058,"title":{},"body":{"index.html":{}}}],["text",{"_index":547,"title":{"classes/Text.html":{}},"body":{"classes/CanvasRenderer.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["text('hello",{"_index":1622,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["text.pos.set(20",{"_index":1625,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["textoptions",{"_index":1627,"title":{"interfaces/TextOptions.html":{}},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{},"coverage.html":{}}}],["texture",{"_index":1525,"title":{"classes/Texture.html":{}},"body":{"classes/Sprite.html":{},"classes/Texture.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["texture('assets/images/bullet.png",{"_index":1526,"title":{},"body":{"classes/Sprite.html":{}}}],["texture('assets/images/tilesheet.png",{"_index":1638,"title":{},"body":{"classes/Texture.html":{}}}],["texture2d(u_sampler",{"_index":2243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textureinfo",{"_index":1883,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["textures",{"_index":1887,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["then(json",{"_index":217,"title":{},"body":{"classes/Assets.html":{}}}],["then(res",{"_index":215,"title":{},"body":{"classes/Assets.html":{}}}],["thin",{"_index":245,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this._anchor",{"_index":1560,"title":{},"body":{"classes/Sprite.html":{}}}],["this._height",{"_index":852,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{}}}],["this._onenter",{"_index":1747,"title":{},"body":{"classes/Trigger.html":{}}}],["this._onenter(...args",{"_index":1755,"title":{},"body":{"classes/Trigger.html":{}}}],["this._onexit",{"_index":1748,"title":{},"body":{"classes/Trigger.html":{}}}],["this._onexit(...args",{"_index":1756,"title":{},"body":{"classes/Trigger.html":{}}}],["this._pivot",{"_index":1561,"title":{},"body":{"classes/Sprite.html":{}}}],["this._program",{"_index":1377,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this._scene",{"_index":853,"title":{},"body":{"classes/Game.html":{}}}],["this._texture",{"_index":1559,"title":{},"body":{"classes/Sprite.html":{}}}],["this._width",{"_index":851,"title":{},"body":{"classes/Game.html":{},"classes/HitBox.html":{},"classes/Sprite.html":{}}}],["this._x",{"_index":972,"title":{},"body":{"classes/HitBox.html":{}}}],["this._y",{"_index":973,"title":{},"body":{"classes/HitBox.html":{}}}],["this.action(0",{"_index":915,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(1",{"_index":917,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(2",{"_index":919,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(3",{"_index":921,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.action(4",{"_index":923,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.activebuffer",{"_index":295,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.add",{"_index":476,"title":{},"body":{"classes/Camera.html":{}}}],["this.add(camera",{"_index":321,"title":{},"body":{"classes/Camera.html":{}}}],["this.add(display",{"_index":1219,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.add(new",{"_index":1146,"title":{},"body":{"classes/OneUp.html":{}}}],["this.alpha",{"_index":622,"title":{},"body":{"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.anims",{"_index":13,"title":{},"body":{"classes/Animations.html":{},"classes/TileSprite.html":{}}}],["this.anims.add('idle",{"_index":28,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.get(anim).reset",{"_index":115,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.get(name",{"_index":114,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.get(this.current",{"_index":119,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.play('idle",{"_index":33,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.set(name",{"_index":111,"title":{},"body":{"classes/Animations.html":{}}}],["this.anims.update(dt",{"_index":1665,"title":{},"body":{"classes/TileSprite.html":{}}}],["this.attributes",{"_index":1382,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.attributes[name",{"_index":1389,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.audio",{"_index":1480,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.currenttime",{"_index":1484,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.pause",{"_index":1487,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.play",{"_index":1486,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.audio.volume",{"_index":1470,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.axis(0",{"_index":924,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.axis(1",{"_index":925,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.boundtexture",{"_index":1930,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffer",{"_index":552,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.getcontext('2d",{"_index":559,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.height",{"_index":556,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffer.width",{"_index":554,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.buffers",{"_index":260,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"classes/WebGLRenderer.html":{}}}],["this.buffers.create('position",{"_index":1893,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffers.create('rect",{"_index":1895,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffers.create('texture",{"_index":1894,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.buffers.find(x",{"_index":265,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.length",{"_index":275,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.push(buff",{"_index":277,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.buffers.setactive('position",{"_index":1906,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.cache",{"_index":190,"title":{},"body":{"classes/Assets.html":{}}}],["this.cache[url",{"_index":225,"title":{},"body":{"classes/Assets.html":{}}}],["this.camera",{"_index":320,"title":{},"body":{"classes/Camera.html":{}}}],["this.canvas",{"_index":1326,"title":{},"body":{"classes/Renderer.html":{}}}],["this.canvas.getcontext('2d",{"_index":564,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.canvas.getcontext('webgl",{"_index":1890,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.canvas.height",{"_index":557,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{}}}],["this.canvas.id",{"_index":1327,"title":{},"body":{"classes/Renderer.html":{}}}],["this.canvas.width",{"_index":555,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{}}}],["this.checkwebgl(canvas",{"_index":856,"title":{},"body":{"classes/Game.html":{}}}],["this.children",{"_index":585,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{}}}],["this.children.entries",{"_index":626,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.filter(ch",{"_index":586,"title":{},"body":{"classes/Container.html":{}}}],["this.children.length",{"_index":619,"title":{},"body":{"classes/Entity.html":{}}}],["this.children.pop",{"_index":1750,"title":{},"body":{"classes/Trigger.html":{}}}],["this.children.push(child",{"_index":584,"title":{},"body":{"classes/Container.html":{},"classes/Entity.html":{}}}],["this.children.push(new",{"_index":1751,"title":{},"body":{"classes/Trigger.html":{}}}],["this.container",{"_index":1340,"title":{},"body":{"classes/Renderer.html":{}}}],["this.container.appendchild(canvas",{"_index":1985,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.context",{"_index":1858,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.context.creategain",{"_index":1866,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.context.currenttime",{"_index":1876,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.controller",{"_index":926,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controller.axes[id",{"_index":938,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controllers",{"_index":927,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controllers[gamepad.index",{"_index":936,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.controls",{"_index":1358,"title":{},"body":{"classes/Scene.html":{}}}],["this.count",{"_index":1520,"title":{},"body":{"classes/SoundPool.html":{}}}],["this.createprogram(vertexshader",{"_index":1403,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.createtextcanvas",{"_index":1896,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.createtexture",{"_index":1932,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.ctx",{"_index":558,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["this.ctx.imagesmoothingenabled",{"_index":560,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.ctx.textbaseline",{"_index":561,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.ctx2",{"_index":563,"title":{},"body":{"classes/CanvasRenderer.html":{}}}],["this.cubicin(1",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.curframe",{"_index":98,"title":{},"body":{"classes/Animations.html":{}}}],["this.current",{"_index":109,"title":{},"body":{"classes/Animations.html":{}}}],["this.curtime",{"_index":99,"title":{},"body":{"classes/Animations.html":{}}}],["this.dead",{"_index":621,"title":{},"body":{"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Timer.html":{}}}],["this.debug",{"_index":475,"title":{},"body":{"classes/Camera.html":{},"classes/Trigger.html":{}}}],["this.debug.pos.set",{"_index":507,"title":{},"body":{"classes/Camera.html":{}}}],["this.delay",{"_index":1698,"title":{},"body":{"classes/Timer.html":{}}}],["this.destination",{"_index":861,"title":{},"body":{"classes/Game.html":{}}}],["this.destination.alpha",{"_index":879,"title":{},"body":{"classes/Game.html":{}}}],["this.divide(mag",{"_index":1288,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.done",{"_index":197,"title":{},"body":{"classes/Assets.html":{}}}],["this.down(e",{"_index":1100,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.duration",{"_index":1169,"title":{},"body":{"classes/OneUp.html":{},"classes/Timer.html":{}}}],["this.easing",{"_index":471,"title":{},"body":{"classes/Camera.html":{}}}],["this.el",{"_index":1094,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.clientheight",{"_index":1122,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.clientwidth",{"_index":1119,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.getboundingclientrect",{"_index":1113,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.height",{"_index":1121,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.el.width",{"_index":1118,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.elapsed",{"_index":1697,"title":{},"body":{"classes/Timer.html":{}}}],["this.element",{"_index":1863,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.pause",{"_index":1874,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.play",{"_index":1873,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.element.src",{"_index":1865,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.fadeduration",{"_index":863,"title":{},"body":{"classes/Game.html":{}}}],["this.fadetime",{"_index":862,"title":{},"body":{"classes/Game.html":{}}}],["this.findattributes",{"_index":1423,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.finduniforms",{"_index":1424,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.first",{"_index":1620,"title":{},"body":{"classes/State.html":{}}}],["this.flashduration",{"_index":469,"title":{},"body":{"classes/Camera.html":{}}}],["this.flashrect",{"_index":470,"title":{},"body":{"classes/Camera.html":{}}}],["this.flashtime",{"_index":468,"title":{},"body":{"classes/Camera.html":{}}}],["this.focus",{"_index":494,"title":{},"body":{"classes/Camera.html":{}}}],["this.frame",{"_index":96,"title":{},"body":{"classes/Animations.html":{},"classes/TileSprite.html":{}}}],["this.frame.__proto__",{"_index":1663,"title":{},"body":{"classes/TileSprite.html":{}}}],["this.frames",{"_index":94,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames.length",{"_index":101,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames[0",{"_index":97,"title":{},"body":{"classes/Animations.html":{}}}],["this.frames[this.curframe",{"_index":100,"title":{},"body":{"classes/Animations.html":{}}}],["this.framesource",{"_index":108,"title":{},"body":{"classes/Animations.html":{}}}],["this.framesource.x",{"_index":121,"title":{},"body":{"classes/Animations.html":{}}}],["this.framesource.y",{"_index":123,"title":{},"body":{"classes/Animations.html":{}}}],["this.game",{"_index":1357,"title":{},"body":{"classes/Scene.html":{}}}],["this.gl",{"_index":259,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["this.gl.createbuffer",{"_index":272,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["this.gl.fragment_shader",{"_index":1402,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.gl.vertex_shader",{"_index":1399,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.globalalpha",{"_index":1905,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.handler(e",{"_index":931,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.haswebaudio",{"_index":1862,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.height",{"_index":462,"title":{},"body":{"classes/Camera.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["this.hitbox",{"_index":1564,"title":{},"body":{"classes/Sprite.html":{}}}],["this.hitbox.height",{"_index":1753,"title":{},"body":{"classes/Trigger.html":{}}}],["this.hitbox.set(hitbox.x",{"_index":1743,"title":{},"body":{"classes/Trigger.html":{}}}],["this.img",{"_index":1641,"title":{},"body":{"classes/Texture.html":{}}}],["this.initwebgl",{"_index":1404,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.iscompleted",{"_index":189,"title":{},"body":{"classes/Assets.html":{}}}],["this.isdown",{"_index":1095,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.iswebgl",{"_index":857,"title":{},"body":{"classes/Game.html":{}}}],["this.justsetstate",{"_index":1619,"title":{},"body":{"classes/State.html":{}}}],["this.keys",{"_index":1068,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowdown",{"_index":1059,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowleft",{"_index":1053,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowright",{"_index":1055,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.arrowup",{"_index":1057,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keya",{"_index":1054,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyd",{"_index":1056,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keys",{"_index":1060,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyw",{"_index":1058,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.keyx",{"_index":1051,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys.space",{"_index":1049,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys[e.code",{"_index":1063,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.keys[key",{"_index":1067,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.last",{"_index":1616,"title":{},"body":{"classes/State.html":{}}}],["this.lasttime",{"_index":1618,"title":{},"body":{"classes/State.html":{}}}],["this.life",{"_index":1170,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.load(scripts.vertex",{"_index":1384,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.load(url",{"_index":205,"title":{},"body":{"classes/Assets.html":{}}}],["this.loadshader(fragmentsource",{"_index":1401,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.loadshader(vertexsource",{"_index":1398,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.loginfo",{"_index":864,"title":{},"body":{"classes/Game.html":{}}}],["this.mag",{"_index":1287,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.master.connect(this.context.destination",{"_index":1868,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.master.gain.value",{"_index":1867,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode",{"_index":1859,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.linearramptovalueattime(0",{"_index":1879,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.setvalueattime(0",{"_index":1875,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.setvalueattime(volume",{"_index":1878,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.masternode.gain.value",{"_index":1877,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.mouseposfromevent(e",{"_index":1109,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.move(e",{"_index":1105,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.music.connect(this.master",{"_index":1872,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.music.gain.value",{"_index":1871,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.musicnode",{"_index":1861,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.name",{"_index":1381,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.offset",{"_index":487,"title":{},"body":{"classes/Camera.html":{}}}],["this.offset.x",{"_index":488,"title":{},"body":{"classes/Camera.html":{}}}],["this.offset.y",{"_index":490,"title":{},"body":{"classes/Camera.html":{}}}],["this.onassetload(asset",{"_index":229,"title":{},"body":{"classes/Assets.html":{}}}],["this.onassetload(e",{"_index":204,"title":{},"body":{"classes/Assets.html":{}}}],["this.onassetload(json",{"_index":218,"title":{},"body":{"classes/Assets.html":{}}}],["this.ondone",{"_index":1700,"title":{},"body":{"classes/Timer.html":{}}}],["this.onscenecomplete",{"_index":1359,"title":{},"body":{"classes/Scene.html":{}}}],["this.ontick",{"_index":1699,"title":{},"body":{"classes/Timer.html":{}}}],["this.ontick(ratio",{"_index":1701,"title":{},"body":{"classes/Timer.html":{}}}],["this.options",{"_index":1216,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.options.defaultsize.x",{"_index":1220,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.defaultsize.y",{"_index":1221,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.fill",{"_index":1222,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.options.volume",{"_index":1472,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.particles",{"_index":1250,"title":{},"body":{"classes/ParticleEmitter.html":{}}}],["this.playing",{"_index":1473,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["this.pos",{"_index":623,"title":{},"body":{"classes/Entity.html":{},"classes/MouseControls.html":{}}}],["this.pos.add(this.vel",{"_index":1176,"title":{},"body":{"classes/OneUp.html":{}}}],["this.pos.set(0",{"_index":1233,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.pos.x",{"_index":508,"title":{},"body":{"classes/Camera.html":{},"classes/MouseControls.html":{}}}],["this.pos.y",{"_index":509,"title":{},"body":{"classes/Camera.html":{},"classes/MouseControls.html":{}}}],["this.pressed",{"_index":1096,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.progresslisteners",{"_index":192,"title":{},"body":{"classes/Assets.html":{}}}],["this.progresslisteners.push(cb",{"_index":198,"title":{},"body":{"classes/Assets.html":{}}}],["this.quadin(1",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.rate",{"_index":95,"title":{},"body":{"classes/Animations.html":{}}}],["this.readylisteners",{"_index":191,"title":{},"body":{"classes/Assets.html":{}}}],["this.readylisteners.push(cb",{"_index":196,"title":{},"body":{"classes/Assets.html":{}}}],["this.rect",{"_index":1112,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rect.left",{"_index":1123,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rect.top",{"_index":1124,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.released",{"_index":1097,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.remaining",{"_index":195,"title":{},"body":{"classes/Assets.html":{}}}],["this.remove(this.debug",{"_index":482,"title":{},"body":{"classes/Camera.html":{}}}],["this.renderer",{"_index":858,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.canvaselement",{"_index":854,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.render(this.destination",{"_index":880,"title":{},"body":{"classes/Game.html":{}}}],["this.renderer.render(this.scene",{"_index":872,"title":{},"body":{"classes/Game.html":{}}}],["this.reset",{"_index":1061,"title":{},"body":{"classes/KeyControls.html":{}}}],["this.resize",{"_index":1098,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.rotation",{"_index":1566,"title":{},"body":{"classes/Sprite.html":{}}}],["this.scale",{"_index":624,"title":{},"body":{"classes/Entity.html":{}}}],["this.scene.alpha",{"_index":878,"title":{},"body":{"classes/Game.html":{}}}],["this.scene.update(step",{"_index":870,"title":{},"body":{"classes/Game.html":{}}}],["this.set(state",{"_index":1615,"title":{},"body":{"classes/State.html":{}}}],["this.set(x",{"_index":1269,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.setsubject(subject",{"_index":474,"title":{},"body":{"classes/Camera.html":{}}}],["this.settracking(64",{"_index":472,"title":{},"body":{"classes/Camera.html":{}}}],["this.sfx.connect(this.master",{"_index":1870,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.sfx.gain.value",{"_index":1869,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.sfxnode",{"_index":1860,"title":{},"body":{"classes/WebAudio.html":{}}}],["this.shaderprogramcol",{"_index":1902,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.shaderprogramtex",{"_index":1898,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.shaderprogramtex.getattriblocation('a_position",{"_index":1907,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.shakedecay",{"_index":466,"title":{},"body":{"classes/Camera.html":{}}}],["this.shakelast",{"_index":467,"title":{},"body":{"classes/Camera.html":{}}}],["this.shakepower",{"_index":465,"title":{},"body":{"classes/Camera.html":{}}}],["this.sounds",{"_index":1502,"title":{},"body":{"classes/SoundGroup.html":{},"classes/SoundPool.html":{}}}],["this.state",{"_index":1580,"title":{},"body":{"classes/State.html":{}}}],["this.state.first",{"_index":1587,"title":{},"body":{"classes/State.html":{}}}],["this.state.set(gamestate.playing",{"_index":1591,"title":{},"body":{"classes/State.html":{}}}],["this.state.time",{"_index":1590,"title":{},"body":{"classes/State.html":{}}}],["this.state.update(dt",{"_index":1583,"title":{},"body":{"classes/State.html":{}}}],["this.style",{"_index":1310,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["this.subject",{"_index":485,"title":{},"body":{"classes/Camera.html":{}}}],["this.text",{"_index":1636,"title":{},"body":{"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["this.textures",{"_index":1897,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.textures.get(img.src).texture",{"_index":1929,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.textures.has(img.src",{"_index":1928,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.textures.set(img.src",{"_index":1936,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["this.threshold",{"_index":928,"title":{},"body":{"classes/GamepadControls.html":{}}}],["this.tileheight",{"_index":1660,"title":{},"body":{"classes/TileSprite.html":{}}}],["this.tilewidth",{"_index":1658,"title":{},"body":{"classes/TileSprite.html":{}}}],["this.time",{"_index":1617,"title":{},"body":{"classes/State.html":{}}}],["this.total",{"_index":194,"title":{},"body":{"classes/Assets.html":{}}}],["this.tracking",{"_index":483,"title":{},"body":{"classes/Camera.html":{}}}],["this.tracking.x",{"_index":477,"title":{},"body":{"classes/Camera.html":{}}}],["this.tracking.y",{"_index":478,"title":{},"body":{"classes/Camera.html":{}}}],["this.uniforms",{"_index":1383,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.uniforms[name",{"_index":1393,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["this.up",{"_index":1103,"title":{},"body":{"classes/MouseControls.html":{}}}],["this.vel",{"_index":1167,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.vel.set",{"_index":1226,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["this.visible",{"_index":620,"title":{},"body":{"classes/Entity.html":{},"classes/Timer.html":{}}}],["this.width",{"_index":460,"title":{},"body":{"classes/Camera.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["this.worldsize",{"_index":464,"title":{},"body":{"classes/Camera.html":{}}}],["this.worldsize.height",{"_index":505,"title":{},"body":{"classes/Camera.html":{}}}],["this.worldsize.width",{"_index":500,"title":{},"body":{"classes/Camera.html":{}}}],["this.x",{"_index":1265,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["this.y",{"_index":1266,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["threshold",{"_index":885,"title":{},"body":{"classes/GamepadControls.html":{}}}],["throw",{"_index":292,"title":{},"body":{"classes/BufferInfo.html":{},"interfaces/ExtraLayer.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"interfaces/TiledMap.html":{},"classes/WebGLRenderer.html":{}}}],["throws",{"_index":1387,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["tick",{"_index":1673,"title":{},"body":{"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["tickfunc",{"_index":1682,"title":{},"body":{"classes/Timer.html":{},"miscellaneous/typealiases.html":{}}}],["tile",{"_index":640,"title":{"interfaces/Tile.html":{}},"body":{"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tiled",{"_index":642,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiled.layer",{"_index":660,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiled.map",{"_index":670,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiled.object",{"_index":655,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiled.tileset",{"_index":659,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiledata",{"_index":641,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"miscellaneous/typealiases.html":{}}}],["tiledmap",{"_index":643,"title":{"interfaces/TiledMap.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{},"coverage.html":{}}}],["tiledparser",{"_index":2041,"title":{},"body":{"coverage.html":{}}}],["tiledparser(jsonobj",{"_index":669,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tileedge",{"_index":999,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tileheight",{"_index":645,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tilemap",{"_index":981,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"coverage.html":{}}}],["tiles",{"_index":646,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Hits.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tiles.push",{"_index":692,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tiles[1].pos.x",{"_index":1011,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tiles[2].pos.y",{"_index":1006,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["tileset",{"_index":658,"title":{"interfaces/Tileset.html":{}},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"coverage.html":{}}}],["tileset.tiles",{"_index":698,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tilesets",{"_index":661,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["tilesets[0",{"_index":695,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tilesperrow",{"_index":657,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["tilesprite",{"_index":340,"title":{"classes/TileSprite.html":{}},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{},"classes/TileSprite.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["tilesprite#update",{"_index":117,"title":{},"body":{"classes/Animations.html":{}}}],["tilesprite(texture",{"_index":1140,"title":{},"body":{"classes/OneUp.html":{}}}],["tilesprite.update",{"_index":82,"title":{},"body":{"classes/Animations.html":{}}}],["tilesprite.update()]{@link",{"_index":116,"title":{},"body":{"classes/Animations.html":{}}}],["tilewidth",{"_index":644,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{}}}],["time",{"_index":67,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{}}}],["timer",{"_index":1670,"title":{"classes/Timer.html":{}},"body":{"classes/Timer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timer((r",{"_index":1676,"title":{},"body":{"classes/Timer.html":{}}}],["timestamp",{"_index":429,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["timing",{"_index":57,"title":{},"body":{"classes/Animations.html":{}}}],["tmp",{"_index":697,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["together",{"_index":752,"title":{},"body":{"classes/GLUtils.html":{}}}],["top",{"_index":562,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/HitBox.html":{}}}],["tort",{"_index":2127,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":1295,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["total",{"_index":182,"title":{},"body":{"classes/Assets.html":{}}}],["towards",{"_index":352,"title":{},"body":{"classes/Camera.html":{}}}],["tr",{"_index":1009,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["track",{"_index":387,"title":{},"body":{"classes/Camera.html":{}}}],["tracked",{"_index":409,"title":{},"body":{"classes/Camera.html":{}}}],["tracking",{"_index":391,"title":{},"body":{"classes/Camera.html":{}}}],["tracks",{"_index":1568,"title":{},"body":{"classes/State.html":{}}}],["transition",{"_index":818,"title":{},"body":{"classes/Game.html":{}}}],["transitioning",{"_index":1570,"title":{},"body":{"classes/State.html":{}}}],["translate",{"_index":731,"title":{},"body":{"classes/GLUtils.html":{}}}],["translation",{"_index":730,"title":{},"body":{"classes/GLUtils.html":{}}}],["translationmatrix",{"_index":1955,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["trigger",{"_index":1702,"title":{"classes/Trigger.html":{}},"body":{"classes/Trigger.html":{},"coverage.html":{}}}],["true",{"_index":219,"title":{},"body":{"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"interfaces/Resolution.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["turn",{"_index":404,"title":{},"body":{"classes/Camera.html":{}}}],["two",{"_index":23,"title":{},"body":{"classes/Animations.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Point.html":{},"interfaces/TiledMap.html":{},"classes/Vec.html":{}}}],["type",{"_index":47,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GamepadControls.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"classes/MouseControls.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2136,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":86,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{}}}],["typescript",{"_index":102,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"classes/OneUp.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/Texture.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"index.html":{}}}],["u_color",{"_index":2248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_posmatrix",{"_index":2225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_sampler",{"_index":2241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_texalpha",{"_index":2228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u_texmatrix",{"_index":2226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":685,"title":{},"body":{"interfaces/ExtraLayer.html":{},"classes/KeyControls.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/State.html":{},"interfaces/TiledMap.html":{}}}],["uniform",{"_index":1391,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"miscellaneous/variables.html":{}}}],["uniforms",{"_index":1374,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["unique",{"_index":1347,"title":{},"body":{"classes/Scene.html":{}}}],["unit",{"_index":2063,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["unless",{"_index":1691,"title":{},"body":{"classes/Timer.html":{}}}],["unpivotmatrix",{"_index":1967,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["unpressed",{"_index":1030,"title":{},"body":{"classes/KeyControls.html":{}}}],["up",{"_index":980,"title":{},"body":{"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{}}}],["up.ts",{"_index":1127,"title":{},"body":{"classes/OneUp.html":{},"coverage.html":{},"unit-test.html":{}}}],["up.ts:27",{"_index":1150,"title":{},"body":{"classes/OneUp.html":{}}}],["up.ts:53",{"_index":1161,"title":{},"body":{"classes/OneUp.html":{}}}],["update",{"_index":31,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["update(_",{"_index":1305,"title":{},"body":{"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["update(dt",{"_index":78,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{}}}],["update/render",{"_index":367,"title":{},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{}}}],["updated",{"_index":569,"title":{},"body":{"classes/Container.html":{},"classes/Game.html":{}}}],["updates",{"_index":810,"title":{},"body":{"classes/Game.html":{},"classes/Timer.html":{}}}],["upon",{"_index":65,"title":{},"body":{"classes/Animations.html":{},"classes/GLUtils.html":{}}}],["ups",{"_index":792,"title":{},"body":{"classes/Game.html":{}}}],["uri",{"_index":134,"title":{},"body":{"classes/Assets.html":{}}}],["url",{"_index":150,"title":{},"body":{"classes/Assets.html":{},"classes/Texture.html":{}}}],["usage",{"_index":1370,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["use",{"_index":131,"title":{},"body":{"classes/Assets.html":{},"classes/BufferInfo.html":{},"classes/CanvasRenderer.html":{},"classes/GlBuffer.html":{},"interfaces/Hits.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"interfaces/VecEntity.html":{},"classes/WebGLRenderer.html":{},"license.html":{}}}],["used",{"_index":60,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"interfaces/Controls.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"miscellaneous/typealiases.html":{}}}],["useful",{"_index":1380,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["user",{"_index":1693,"title":{},"body":{"classes/Timer.html":{}}}],["uses",{"_index":347,"title":{},"body":{"classes/Camera.html":{},"miscellaneous/typealiases.html":{}}}],["useseededrandom",{"_index":2033,"title":{},"body":{"coverage.html":{}}}],["usewebgl",{"_index":795,"title":{},"body":{"classes/Game.html":{}}}],["using",{"_index":55,"title":{},"body":{"classes/Animations.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebAudio.html":{}}}],["usually",{"_index":665,"title":{},"body":{"interfaces/ExtraLayer.html":{},"interfaces/TiledMap.html":{}}}],["utilizing",{"_index":515,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/WebGLRenderer.html":{}}}],["utils",{"_index":450,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Resolution.html":{},"classes/SoundGroup.html":{}}}],["utils.math.clamp(centeredx",{"_index":501,"title":{},"body":{"classes/Camera.html":{}}}],["utils.math.clamp(centeredy",{"_index":506,"title":{},"body":{"classes/Camera.html":{}}}],["utils.math.clamp(this.life",{"_index":1175,"title":{},"body":{"classes/OneUp.html":{}}}],["utils.sprite.bounds(ent",{"_index":1000,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["v",{"_index":1224,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{}}}],["v.y",{"_index":1230,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["v_texalpha",{"_index":2231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v_texcoord",{"_index":2230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val",{"_index":1052,"title":{},"body":{"classes/KeyControls.html":{},"classes/Trigger.html":{}}}],["value",{"_index":380,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"classes/Sprite.html":{},"interfaces/Tile.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":964,"title":{},"body":{"classes/HitBox.html":{},"classes/MouseControls.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Vec.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":2003,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2217,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":2229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec",{"_index":370,"title":{"classes/Vec.html":{}},"body":{"classes/Camera.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Trigger.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"coverage.html":{}}}],["vec().copy(v",{"_index":1264,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec(.8",{"_index":1217,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["vec(0",{"_index":1168,"title":{},"body":{"classes/OneUp.html":{}}}],["vec(1",{"_index":625,"title":{},"body":{"classes/Entity.html":{}}}],["vec(10",{"_index":1218,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["vec(4",{"_index":1257,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec(xo",{"_index":484,"title":{},"body":{"classes/Camera.html":{}}}],["vec.from(this",{"_index":1272,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec.from(vector1",{"_index":1259,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vec2",{"_index":2221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec3(a_position",{"_index":2236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec3(a_texcoord",{"_index":2232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec4",{"_index":2242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vec4((u_posmatrix",{"_index":2235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vecentity",{"_index":1772,"title":{"interfaces/VecEntity.html":{}},"body":{"interfaces/VecEntity.html":{},"coverage.html":{}}}],["vecs",{"_index":1291,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector",{"_index":1253,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["vector1",{"_index":1256,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector1.add(vector2).multiply(3",{"_index":1260,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vector2",{"_index":1258,"title":{},"body":{"interfaces/Point.html":{},"classes/Vec.html":{}}}],["vel",{"_index":1165,"title":{},"body":{"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["vel.x",{"_index":1811,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["vel.y",{"_index":1812,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["velocity",{"_index":1205,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/VecEntity.html":{}}}],["vertex",{"_index":289,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["vertexcolor",{"_index":2246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vertexshader",{"_index":1397,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["vertexsource",{"_index":1394,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["vertextexture",{"_index":2220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":1207,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["verticalvelrange",{"_index":1209,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["view",{"_index":346,"title":{},"body":{"classes/Camera.html":{},"classes/GLUtils.html":{}}}],["viewport",{"_index":306,"title":{},"body":{"classes/Camera.html":{}}}],["viewport.height",{"_index":463,"title":{},"body":{"classes/Camera.html":{}}}],["viewport.width",{"_index":461,"title":{},"body":{"classes/Camera.html":{}}}],["visibility",{"_index":541,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/Renderer.html":{},"classes/WebGLRenderer.html":{}}}],["visible",{"_index":330,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sprite.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebGLRenderer.html":{}}}],["void",{"_index":76,"title":{},"body":{"classes/Animations.html":{},"classes/Assets.html":{},"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"classes/HitBox.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/ShaderProgram.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"classes/Timer.html":{},"classes/Trigger.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"miscellaneous/variables.html":{}}}],["volume",{"_index":1452,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/SoundPool.html":{},"classes/WebAudio.html":{}}}],["volume(volume",{"_index":1471,"title":{},"body":{"classes/Sound.html":{},"interfaces/SoundOptions.html":{}}}],["vx",{"_index":1798,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["vy",{"_index":1800,"title":{},"body":{"interfaces/VecEntity.html":{}}}],["w",{"_index":1025,"title":{},"body":{"classes/KeyControls.html":{}}}],["wait",{"_index":1687,"title":{},"body":{"classes/Timer.html":{}}}],["walkable",{"_index":983,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["walkables",{"_index":1002,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["walkabletest",{"_index":984,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{},"miscellaneous/typealiases.html":{}}}],["wallslide",{"_index":2009,"title":{},"body":{"coverage.html":{}}}],["wallslide(ent",{"_index":998,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["warranties",{"_index":2114,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2109,"title":{},"body":{"license.html":{}}}],["web",{"_index":1817,"title":{},"body":{"classes/WebAudio.html":{}}}],["webaudio",{"_index":1813,"title":{"classes/WebAudio.html":{}},"body":{"classes/WebAudio.html":{},"coverage.html":{}}}],["webaudio('assets/sounds/theme.ogg",{"_index":1818,"title":{},"body":{"classes/WebAudio.html":{}}}],["webgl",{"_index":234,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{},"classes/WebGLRenderer.html":{}}}],["webglbuffer",{"_index":237,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["webglprogram",{"_index":1367,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["webglrenderer",{"_index":832,"title":{"classes/WebGLRenderer.html":{}},"body":{"classes/Game.html":{},"classes/WebGLRenderer.html":{},"coverage.html":{}}}],["webglrenderer(width",{"_index":859,"title":{},"body":{"classes/Game.html":{}}}],["webglrenderingcontext",{"_index":254,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{},"classes/WebGLRenderer.html":{}}}],["webglshader",{"_index":1368,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["webgltexture",{"_index":1884,"title":{},"body":{"classes/WebGLRenderer.html":{}}}],["webgluniformlocation",{"_index":1375,"title":{},"body":{"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["well",{"_index":987,"title":{},"body":{"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["whatever",{"_index":1578,"title":{},"body":{"classes/State.html":{}}}],["whether",{"_index":369,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"classes/Container.html":{},"classes/Entity.html":{},"interfaces/ExtraLayer.html":{},"classes/Game.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"classes/MouseControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Rect.html":{},"interfaces/Resolution.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"interfaces/SoundOptions.html":{},"classes/Sprite.html":{},"classes/State.html":{},"classes/Text.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"classes/Trigger.html":{},"classes/WebAudio.html":{},"classes/WebGLRenderer.html":{},"license.html":{}}}],["whose",{"_index":1179,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["width",{"_index":311,"title":{},"body":{"classes/Camera.html":{},"classes/CanvasRenderer.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/Game.html":{},"classes/HitBox.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"interfaces/Property.html":{},"classes/Rect.html":{},"interfaces/RectStyleOptions.html":{},"classes/Renderer.html":{},"classes/Sprite.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/WebGLRenderer.html":{}}}],["width(value",{"_index":1563,"title":{},"body":{"classes/Sprite.html":{}}}],["window",{"_index":1831,"title":{},"body":{"classes/WebAudio.html":{}}}],["window.addeventlistener('gamepadconnected",{"_index":929,"title":{},"body":{"classes/GamepadControls.html":{}}}],["window.addeventlistener('gamepaddisconnected",{"_index":932,"title":{},"body":{"classes/GamepadControls.html":{}}}],["window.performance.now",{"_index":866,"title":{},"body":{"classes/Game.html":{}}}],["within",{"_index":1193,"title":{},"body":{"classes/Particle.html":{},"interfaces/ParticleOptions.html":{}}}],["without",{"_index":2088,"title":{},"body":{"license.html":{}}}],["working",{"_index":712,"title":{},"body":{"classes/GLUtils.html":{},"classes/GamepadControls.html":{}}}],["world",{"_index":307,"title":{},"body":{"classes/Camera.html":{},"classes/Text.html":{},"interfaces/TextOptions.html":{}}}],["worldsize",{"_index":341,"title":{},"body":{"classes/Camera.html":{}}}],["wrap",{"_index":593,"title":{},"body":{"interfaces/Controls.html":{}}}],["wrapper",{"_index":246,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{},"interfaces/Scripts.html":{},"classes/ShaderProgram.html":{}}}],["written",{"_index":2052,"title":{},"body":{"index.html":{}}}],["x",{"_index":15,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{},"miscellaneous/variables.html":{}}}],["x.name",{"_index":266,"title":{},"body":{"classes/BufferInfo.html":{},"classes/GlBuffer.html":{}}}],["xo",{"_index":416,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["xr",{"_index":1117,"title":{},"body":{"classes/MouseControls.html":{}}}],["y",{"_index":17,"title":{},"body":{"classes/Animations.html":{},"classes/Camera.html":{},"interfaces/ExtraLayer.html":{},"classes/GLUtils.html":{},"classes/GamepadControls.html":{},"classes/HitBox.html":{},"interfaces/Hits.html":{},"classes/KeyControls.html":{},"interfaces/Layer.html":{},"interfaces/Map.html":{},"interfaces/Object.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"interfaces/ParticleOptions.html":{},"interfaces/Point.html":{},"interfaces/Property.html":{},"interfaces/Resolution.html":{},"interfaces/Tile.html":{},"classes/TileSprite.html":{},"interfaces/TiledMap.html":{},"interfaces/Tileset.html":{},"classes/Vec.html":{},"interfaces/VecEntity.html":{}}}],["yes",{"_index":546,"title":{},"body":{"classes/CanvasRenderer.html":{},"classes/KeyControls.html":{},"classes/OneUp.html":{},"classes/Particle.html":{},"classes/ParticleEmitter.html":{},"classes/Renderer.html":{},"classes/Scene.html":{},"classes/Sound.html":{},"classes/SoundGroup.html":{},"classes/SoundPool.html":{},"interfaces/TiledMap.html":{},"classes/Timer.html":{},"classes/WebGLRenderer.html":{}}}],["yo",{"_index":413,"title":{},"body":{"classes/Camera.html":{},"interfaces/Hits.html":{},"interfaces/Resolution.html":{}}}],["yr",{"_index":1120,"title":{},"body":{"classes/MouseControls.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animations.html":{"url":"classes/Animations.html","title":"class - Animations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/animations.ts\n        \n\n            \n                Description\n            \n            \n                Handles animations for an object.\nExample\n // In the implementation of a class\n this.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n // Create 'idle' animation with two frames that change every half second.\n this.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n\n // In the update of the same class\n this.anims.play('idle')\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(frame: Point)\n                    \n                \n                        \n                            \n                                Defined in lib/animations.ts:52\n                            \n                        \n\n                \n                    \n                            Initialize Animations object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        frame\n                                                  \n                                                        \n                                                                        Point\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object with x and y properties.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(name: string, frames: Point[], speed: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:74\n                \n            \n\n\n            \n                \n                    Add a new animation by name, using specified frames and timing.\nOverrides existing animation if the same name is used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The animation name.\n\n                                    \n                                \n                                \n                                    frames\n                                    \n                                                Point[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite frames used in the animation.\n\n                                    \n                                \n                                \n                                    speed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        How quickly to change between frames (based upon delta time).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Animation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(anim: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:85\n                \n            \n\n\n            \n                \n                    Set the named animation as the current animation and reset it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    anim\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the animation to play.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:95\n                \n            \n\n\n            \n                \n                    Stop the current animation. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/animations.ts:106\n                \n            \n\n\n            \n                \n                    Update the current animation if one is set.\nCalled by TileSprite.update().\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from './types'\n\n/**\n * @ignore\n * @internal\n */\nclass Animation {\n  frame: Point\n\n  private frames: Point[]\n  private rate: number\n  private curFrame: number\n  private curTime: number\n\n  constructor(frames: Point[], rate: number) {\n    this.frames = frames\n    this.rate = rate\n  }\n\n  reset() {\n    this.frame = this.frames[0]\n    this.curFrame = 0\n    this.curTime = 0\n  }\n\n  update(dt: number) {\n    if ((this.curTime += dt) > this.rate) {\n      this.curFrame++\n      this.frame = this.frames[this.curFrame % this.frames.length]\n      this.curTime -= this.rate\n    }\n  }\n}\n\n/**\n * Handles animations for an object.\n *\n * ### Example\n * ```typescript\n // In the implementation of a class\n this.anims = new Animations({ x: 0, y: 0, custom: 'properties' })\n // Create 'idle' animation with two frames that change every half second.\n this.anims.add('idle', [{ x: 0, y: 0 }, { x: 1, y: 0}], .5)\n\n // In the update of the same class\n this.anims.play('idle')\n```\n */\nexport class Animations {\n  private anims: Map\n  private frameSource: any\n  private current: string\n\n  /**\n   * Initialize Animations object.\n   *\n   * @param frame An object with x and y properties.\n   */\n  constructor(frame: Point) {\n    this.anims = new Map()\n    this.frameSource = frame\n    this.current = null\n  }\n\n  /**\n   * Add a new animation by name, using specified frames and timing.\n   *\n   * Overrides existing animation if the same name is used.\n   *\n   * @param name The animation name.\n   * @param frames Sprite frames used in the animation.\n   * @param speed How quickly to change between frames (based upon delta time).\n   */\n  add(name: string, frames: Point[], speed: number): Animation {\n    this.anims.set(name, new Animation(frames, speed))\n\n    return this.anims.get(name)\n  }\n\n  /**\n   * Set the named animation as the current animation and reset it.\n   *\n   * @param anim The name of the animation to play.\n   */\n  play(anim: string) {\n    if (anim === this.current) {\n      return\n    }\n\n    this.current = anim\n    this.anims.get(anim).reset()\n  }\n\n  /** Stop the current animation. */\n  stop() {\n    this.current = null\n  }\n\n  /**\n   * Update the current animation if one is set.\n   *\n   * Called by [TileSprite.update()]{@link TileSprite#update}.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (!this.current) {\n      return\n    }\n\n    const anim = this.anims.get(this.current)\n    anim.update(dt)\n\n    this.frameSource.x = anim.frame.x\n    this.frameSource.y = anim.frame.y\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Assets.html":{"url":"classes/Assets.html","title":"class - Assets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Assets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/assets.ts\n        \n\n            \n                Description\n            \n            \n                Loads assets for use in a game.\nAssets are cached by URI to prevent multiple network calls for the same asset.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                json\n                            \n                            \n                                onProgress\n                            \n                            \n                                onReady\n                            \n                            \n                                sound\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/assets.ts:26\n                            \n                        \n\n                \n                    \n                            Initialize Assets object. \n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            image\n                        \n                        \n                    \n                \n            \n            \n                \nimage(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:70\n                \n            \n\n\n            \n                \n                    Loads an image asset.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to image file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLImageElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            json\n                        \n                        \n                    \n                \n            \n            \n                \njson(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:109\n                \n            \n\n\n            \n                \n                    Loads a JSON asset and returns parsed object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to JSON asset.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \nonProgress(cb: ProgressCallback)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:61\n                \n            \n\n\n            \n                \n                    Allows listeners to provide a callback for asset load progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                ProgressCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when a single asset is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onReady\n                        \n                        \n                    \n                \n            \n            \n                \nonReady(cb: ReadyCallback)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:44\n                \n            \n\n\n            \n                \n                    Allows listeners to provide a callback for asset load completion.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                ReadyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when all assets are loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sound\n                        \n                        \n                    \n                \n            \n            \n                \nsound(url: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/assets.ts:88\n                \n            \n\n\n            \n                \n                    Loads a sound asset.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Relative path to sound file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLAudioElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/assets.ts:24\n                                \n                            \n                    \n                        \n                                Get completed status of all assets. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Game } from '.'\n\n/** Function that is called when an asset is ready. */\ntype ReadyCallback = () => void\n\n/** Function that is called to provide progress status. */\ntype ProgressCallback = (complete: number, total: number) => void\n\n/**\n * Loads assets for use in a game.\n *\n * Assets are cached by URI to prevent multiple network calls for the same asset.\n */\nexport class Assets {\n  private cache: any\n  private readyListeners: ReadyCallback[]\n  private progressListeners: ProgressCallback[]\n  private isCompleted: boolean\n\n  private total: number\n  private remaining: number\n\n  /** Get completed status of all assets. */\n  get completed() {\n    return this.isCompleted\n  }\n\n  /** Initialize Assets object. */\n  constructor() {\n    this.cache = {}\n    this.readyListeners = []\n    this.progressListeners = []\n    this.isCompleted = false\n\n    this.total = 0\n    this.remaining = 0\n  }\n\n  /**\n   * Allows listeners to provide a callback for asset load completion.\n   *\n   * @param cb Function called when all assets are loaded.\n   */\n  onReady(cb: ReadyCallback) {\n    if (this.isCompleted) {\n      return cb()\n    }\n\n    this.readyListeners.push(cb)\n\n    if (this.remaining === 0) {\n      this.done()\n    }\n  }\n\n  /**\n   * Allows listeners to provide a callback for asset load progress.\n   *\n   * @param cb Function called when a single asset is loaded.\n   */\n  onProgress(cb: ProgressCallback) {\n    this.progressListeners.push(cb)\n  }\n\n  /**\n   * Loads an image asset.\n   *\n   * @param url Relative path to image file.\n   */\n  image(url: string): HTMLImageElement {\n    const factory = (url: string) => {\n      const img = new Image()\n\n      img.src = url\n      img.addEventListener('load', e => this.onAssetLoad(e), false)\n\n      return img\n    }\n\n    return this.load(url, factory)\n  }\n\n  /**\n   * Loads a sound asset.\n   *\n   * @param url Relative path to sound file.\n   */\n  sound(url: string): HTMLAudioElement {\n    const factory = (url: string) => {\n      const onLoad = (e: Event) => {\n        audio.removeEventListener('canplay', onLoad)\n        this.onAssetLoad(e)\n      }\n\n      const audio = new Audio(url)\n      audio.addEventListener('canplay', onLoad, false)\n\n      return audio\n    }\n\n    return this.load(url, factory)\n  }\n\n  /**\n   * Loads a JSON asset and returns parsed object.\n   *\n   * @param url Relative path to JSON asset.\n   */\n  json(url: string) {\n    const factory = async (url: string) => {\n      return await fetch(url)\n        .then(res => res.json())\n        .then(json => this.onAssetLoad(json, true))\n        .catch(e => Game.debug && console.error(e))\n    }\n\n    return this.load(url, factory, true)\n  }\n\n  private done() {\n    this.isCompleted = true\n\n    for (let i = 0; i  any, isJson = false) {\n    if (this.cache[url]) {\n      Game.debug && console.info(`cached ${url}`)\n      return this.cache[url]\n    }\n\n    Game.debug && console.info(`load ${url}`)\n\n    this.remaining++\n    this.total++\n\n    const asset = factory(url)\n    this.cache[url] = asset\n\n    this.onAssetLoad(asset, isJson)\n\n    return asset\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BufferInfo.html":{"url":"classes/BufferInfo.html","title":"class - BufferInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BufferInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/gl-buffer.ts\n        \n\n            \n                Description\n            \n            \n                Data about a WebGL buffer. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buffer\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLBuffer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:9\n                            \n                        \n\n                \n                    \n                        The WebGLBuffer. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:11\n                            \n                        \n\n                \n                    \n                        Buffer ID in the program. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/webgl/gl-buffer.ts:13\n                            \n                        \n\n                \n                    \n                        Lookup name for the buffer. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        const fullArea = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n\n/** Data about a WebGL buffer. */\nclass BufferInfo {\n  /** The WebGLBuffer. */\n  buffer: WebGLBuffer\n  /** Buffer ID in the program. */\n  id: number\n  /** Lookup name for the buffer. */\n  name: string\n}\n\n/** Thin wrapper around WebGLBuffer objects, making them easier to manage. */\nexport class GlBuffer {\n  private gl: WebGLRenderingContext\n  private buffers: BufferInfo[]\n  private activeBuffer: BufferInfo\n\n  /**\n   * Initialize GlBuffer object.\n   *\n   * @param gl WebGLRenderingContext to use for buffer actions.\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl\n    this.buffers = []\n  }\n\n  /**\n   * Gets the buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to return.\n   */\n  buffer(bufferName: string) {\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    return buffer.buffer\n  }\n\n  /**\n   * Creates a new buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to create.\n   */\n  create(bufferName: string) {\n    const buff = new BufferInfo()\n    buff.buffer = this.gl.createBuffer()\n    ; (buff.buffer as any).__SPECTOR_Metadata = { bufferName }\n    buff.id = this.buffers.length\n    buff.name = bufferName\n\n    this.buffers.push(buff)\n  }\n\n  /**\n   * Sets the named buffer as active, enables the provided attribute,\n   * and prepares the buffer for use.\n   *\n   * @param bufferName The name of the buffer to activate.\n   * @param attribLocation The location of the attribute to enable.\n   * @param components The number of components per vertex.\n   */\n  setActive(bufferName: string, attribLocation: number, components: number = 2) {\n    const { gl } = this\n\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    if (!buffer) {\n      throw new Error(`No buffer with name ${bufferName} found to set as active.`)\n    }\n\n    if (this.activeBuffer === buffer) {\n      return\n    }\n\n    this.activeBuffer = buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, fullArea, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(attribLocation, components, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(attribLocation)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Camera.html":{"url":"classes/Camera.html","title":"class - Camera","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Camera\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/camera.ts\n        \n\n            \n                Description\n            \n            \n                Follows a subject to provide a viewport into a game world.\nExample\nAssumes this is in a Scene.\nconst camera = new Camera(player, { width: 640, height: 480 } as Rect, {\n   width: map.mapWidth * map.tileWidth,\n   height: map.mapHeight * map.tileHeight\n } as Rect)\n\nthis.camera = this.add(camera)\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                easing\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                flash\n                            \n                            \n                                focus\n                            \n                            \n                                setDebug\n                            \n                            \n                                setSubject\n                            \n                            \n                                setTracking\n                            \n                            \n                                shake\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subject: TileSprite | Sprite, viewport: Rect, worldSize: Rect)\n                    \n                \n                        \n                            \n                                Defined in lib/camera.ts:44\n                            \n                        \n\n                \n                    \n                            Initialize Camera object.\nThe Rect parameters only require width and height properties.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        subject\n                                                  \n                                                        \n                                                                        TileSprite | Sprite\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The {\n\n                                                        \n                                                \n                                                \n                                                        viewport\n                                                  \n                                                        \n                                                                        Rect\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of the camera's view into the game.\n\n                                                        \n                                                \n                                                \n                                                        worldSize\n                                                  \n                                                        \n                                                                        Rect\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of the game world. Uses viewport by default.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            easing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/camera.ts:26\n                            \n                        \n\n                \n                    \n                        Amount to move towards subject per update.\nRange from 0 to 1 where 0 is not moving, and 1 is always on subject.\nDefault is .3\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            flash\n                        \n                        \n                    \n                \n            \n            \n                \nflash(duration: number, color: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:149\n                \n            \n\n\n            \n                \n                    Add a brief  overlay to 'flash' the viewport.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .2\n                                    \n\n                                    \n                                        Time in seconds for flash to fade out.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '#fff'\n                                    \n\n                                    \n                                        Color of the overlay used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n            \n                \nfocus(ease: number, track)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:166\n                \n            \n\n\n            \n                \n                    Focus the camera on the subject.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    ease\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Range from 0 to 1 where 0 is not moving, and 1 is on subject.\n\n                                    \n                                \n                                \n                                    track\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to keep the subject in tracking limits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDebug\n                        \n                        \n                    \n                \n            \n            \n                \nsetDebug(debug)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:86\n                \n            \n\n\n            \n                \n                    Set debug status on camera.\nWhen true, a rectangle displays on-screen showing camera tracking bounds.\nOnly call after everything is added to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    debug\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to turn debugging on or off.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSubject\n                        \n                        \n                    \n                \n            \n            \n                \nsetSubject(sprite: TileSprite | Sprite)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:119\n                \n            \n\n\n            \n                \n                    Update the subject being tracked by the camera.\nAlso causes the camera to refocus to the new subject.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                TileSprite | Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new subject to track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTracking\n                        \n                        \n                    \n                \n            \n            \n                \nsetTracking(xo: number, yo: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:108\n                \n            \n\n\n            \n                \n                    Update tracking offsets used to keep the subject in view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    xo\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Offset of tracking space from sides on X axis.\n\n                                    \n                                \n                                \n                                    yo\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Offset of tracking space from sides on Y axis.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            shake\n                        \n                        \n                    \n                \n            \n            \n                \nshake(power: number, duration: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:138\n                \n            \n\n\n            \n                \n                    Shake the camera randomly for a short time.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    power\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5\n                                    \n\n                                    \n                                        Number of pixels to shake the camera.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .5\n                                    \n\n                                    \n                                        Time in seconds to shake.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/camera.ts:206\n                \n            \n\n\n            \n                \n                    Update the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:49\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite, Utils } from '.'\nimport { Sprite, Rect, Vec } from './types'\n\n/**\n * Follows a subject to provide a viewport into a game world.\n *\n * ### Example\n * Assumes this is in a {@link Scene}.\n *\n * ```typescript\nconst camera = new Camera(player, { width: 640, height: 480 } as Rect, {\n   width: map.mapWidth * map.tileWidth,\n   height: map.mapHeight * map.tileHeight\n } as Rect)\n\nthis.camera = this.add(camera)\n```\n */\nexport class Camera extends Container {\n  /**\n   * Amount to move towards subject per update.\n   *\n   * Range from 0 to 1 where 0 is not moving, and 1 is always on subject.\n   * Default is .3\n   */\n  easing: number\n\n  private shakePower: number\n  private shakeDecay: number\n  private shakeLast: Vec\n\n  private flashTime: number\n  private flashDuration: number\n  private flashRect: Rect\n\n  private width: number\n  private height: number\n\n  private debug: Rect\n  private worldSize: Rect\n\n  private tracking: Vec\n  private offset: Vec\n  private subject: Vec\n\n  /**\n   * Initialize Camera object.\n   *\n   * The {@link Rect} parameters only require `width` and `height` properties.\n   *\n   * @param subject The {@link TileSprite} or {@link Sprite} for the camera to follow.\n   * @param viewport Size of the camera's view into the game.\n   * @param worldSize Size of the game world. Uses `viewport` by default.\n   */\n  constructor(subject: TileSprite | Sprite, viewport: Rect,\n              worldSize: Rect = viewport) {\n    super()\n\n    this.width = viewport.width\n    this.height = viewport.height\n    this.worldSize = worldSize\n\n    this.shakePower = 0\n    this.shakeDecay = 0\n    this.shakeLast = new Vec()\n\n    this.flashTime = 0\n    this.flashDuration = 0\n    this.flashRect = null\n\n    this.easing = .3\n\n    this.setTracking(64, 48)\n    this.setSubject(subject)\n  }\n\n  /**\n   * Set debug status on camera.\n   *\n   * When true, a rectangle displays on-screen showing camera tracking bounds.\n   *\n   * Only call after everything is added to the camera.\n   *\n   * @param debug Whether to turn debugging on or off.\n   */\n  setDebug(debug = true) {\n    if (debug) {\n      this.debug = this.add(\n        new Rect(\n          this.tracking.x * 2,\n          this.tracking.y * 2,\n          { fill: 'rgba(255, 0, 0, 0.2)' }\n        )\n      )\n\n      return\n    }\n\n    this.remove(this.debug)\n  }\n\n  /**\n   * Update tracking offsets used to keep the subject in view.\n   *\n   * @param xo Offset of tracking space from sides on X axis.\n   * @param yo Offset of tracking space from sides on Y axis.\n   */\n  setTracking(xo: number, yo: number) {\n    this.tracking = new Vec(xo, yo)\n  }\n\n  /**\n   * Update the subject being tracked by the camera.\n   *\n   * Also causes the camera to refocus to the new subject.\n   *\n   * @param sprite The new subject to track.\n   */\n  setSubject(sprite: TileSprite | Sprite) {\n    this.subject = sprite.pos\n    this.offset = new Vec()\n\n    this.offset.x += sprite.width / 2\n    this.offset.y += sprite.height / 2\n\n    this.offset.x -= sprite.anchor.x\n    this.offset.y -= sprite.anchor.y\n\n    this.focus()\n  }\n\n  /**\n   * Shake the camera randomly for a short time.\n   *\n   * @param power Number of pixels to shake the camera.\n   * @param duration Time in seconds to shake.\n   */\n  shake(power = 5, duration = .5) {\n    this.shakePower = power\n    this.shakeDecay = power / duration\n  }\n\n  /**\n   * Add a brief  overlay to 'flash' the viewport.\n   *\n   * @param duration Time in seconds for flash to fade out.\n   * @param color Color of the overlay used.\n   */\n  flash(duration = .2, color = '#fff') {\n    if (!this.flashRect) {\n      this.flashRect = this.add(\n        new Rect(this.width, this.height, { fill: color })\n      )\n    }\n\n    this.flashDuration = duration\n    this.flashTime = duration\n  }\n\n  /**\n   * Focus the camera on the subject.\n   *\n   * @param ease Range from 0 to 1 where 0 is not moving, and 1 is on subject.\n   * @param track Whether or not to keep the subject in tracking limits.\n   */\n  focus(ease = 1, track = true) {\n    const target = this.subject\n\n    const centeredX = target.x + this.offset.x - this.width / 2\n    const maxX = this.worldSize.width - this.width\n    let x = -Utils.math.clamp(centeredX, 0, maxX)\n\n    const centeredY = target.y + this.offset.y - this.height / 2\n    const maxY = this.worldSize.height - this.height\n    let y = -Utils.math.clamp(centeredY, 0, maxY)\n\n    if (this.debug) {\n      this.debug.pos.set(\n        -this.pos.x + this.width / 2 - this.tracking.x,\n        -this.pos.y + this.height / 2 - this.tracking.y\n      )\n    }\n\n    if (track) {\n      if (Math.abs(centeredX + this.pos.x) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CanvasRenderer.html":{"url":"classes/CanvasRenderer.html","title":"class - CanvasRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CanvasRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/canvas-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Recursive rendering utilizing HTML5 canvas. \n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/canvas-renderer.ts:9\n                            \n                        \n\n                \n                    \n                            Initialize CanvasRenderer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTMLElement to add the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:11\n\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:13\n\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:9\n\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:7\n\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(container: Container, clear)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/canvas-renderer.ts:39\n                \n            \n\n\n            \n                \n                    Recursive method for rendering the provided container and all its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Container object to render recursively.\n\n                                    \n                                \n                                \n                                    clear\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to clear the canvas before rendering.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:44\n\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Container, Game } from '../'\nimport { Entity, Text } from '../types'\n\n/** Recursive rendering utilizing HTML5 canvas. */\nexport class CanvasRenderer extends Renderer {\n  private ctx: CanvasRenderingContext2D\n  private ctx2: CanvasRenderingContext2D\n  private buffer: HTMLCanvasElement\n\n  /**\n   * Initialize CanvasRenderer object.\n   *\n   * @param width Width of the canvas in pixels.\n   * @param height Height of the canvas in pixels.\n   * @param container The HTMLElement to add the canvas to.\n   */\n  constructor(width: number, height: number, container: HTMLElement) {\n    super(width, height, container)\n\n    this.buffer = document.createElement('canvas')\n\n    this.buffer.width = this.canvas.width = width\n    this.buffer.height = this.canvas.height = height\n\n    this.ctx = this.buffer.getContext('2d')\n    this.ctx.imageSmoothingEnabled = false\n    this.ctx.textBaseline = 'top'\n\n    this.ctx2 = this.canvas.getContext('2d')\n  }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Container.html":{"url":"classes/Container.html","title":"class - Container","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Container\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/container.ts\n        \n\n            \n                Description\n            \n            \n                Holds game objects updated and/or rendered in the game loop.\nBasically, just an Entity with some helper methods.\nExample\nconst pickups = new Container()\n\n// Assuming there is a 'Pickup' type in your game.\nmapData.pickupLocations.forEach(pos => {\n pickups.push(new Pickup(pos))\n})\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:35\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/container.ts:49\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity } from './types'\n\n/**\n * Holds game objects updated and/or rendered in the game loop.\n *\n * Basically, just an {@link Entity} with some helper methods.\n *\n * ### Example\n * ```typescript\nconst pickups = new Container()\n\n// Assuming there is a 'Pickup' type in your game.\nmapData.pickupLocations.forEach(pos => {\n pickups.push(new Pickup(pos))\n})\n```\n */\nexport class Container extends Entity {\n  /**\n   * Add a child object.\n   *\n   * @param child Object to add to the container.\n   */\n  add(child: any) {\n    this.children.push(child)\n\n    return child\n  }\n\n  /**\n   * Remove a child object.\n   *\n   * @param child Object to remove from the container.\n   */\n  remove(child: any) {\n    this.children = this.children.filter(ch => ch !== child)\n\n    return child\n  }\n\n  /**\n   * Update each child in the container.\n   *\n   * Automatically removes any child object marked as dead.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  update(dt: number, t: number) {\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controls.html":{"url":"interfaces/Controls.html","title":"interface - Controls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Controls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/controls.ts\n        \n\n            \n                Description\n            \n            \n                Object containing optional control objects.\nUsed to wrap supported controls for your game.\nExample\n // For a game with keyboard and gamepad controls\n const scene = new Scene(game, {\n   keys: new KeyControls(),\n   gamepad: new GamepadControls()\n })\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        gamepad\n                                \n                                \n                                            Optional\n                                        keys\n                                \n                                \n                                            Optional\n                                        mouse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gamepad\n                                    \n                                \n                                \n                                    \n                                        gamepad:         GamepadControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GamepadControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Gamepad controls to be used if provided. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keys\n                                    \n                                \n                                \n                                    \n                                        keys:         KeyControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Key controls to be used if provided. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouse\n                                    \n                                \n                                \n                                    \n                                        mouse:         MouseControls\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MouseControls\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Mouse controls to be used if provided. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { KeyControls } from './key-controls'\nimport { MouseControls } from './mouse-controls'\nimport { GamepadControls } from './gamepad-controls'\n\n/**\n * Object containing optional control objects.\n *\n * Used to wrap supported controls for your game.\n *\n * ### Example\n * ```typescript\n // For a game with keyboard and gamepad controls\n const scene = new Scene(game, {\n   keys: new KeyControls(),\n   gamepad: new GamepadControls()\n })\n ```\n */\nexport interface Controls {\n  /** Key controls to be used if provided. */\n  keys?: KeyControls\n  /** Mouse controls to be used if provided. */\n  mouse?: MouseControls\n  /** Gamepad controls to be used if provided. */\n  gamepad?: GamepadControls\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Entity.html":{"url":"classes/Entity.html","title":"class - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/entity.ts\n        \n\n            \n                Description\n            \n            \n                An abstract base class for all entities. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasChildren\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/types/entity.ts:24\n                            \n                        \n\n                \n                    \n                            Initialize an Entity object. \n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:11\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:19\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:8\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:14\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:16\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/entity.ts:6\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:52\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:63\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/entity.ts:45\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasChildren\n                    \n                \n\n                \n                    \n                        gethasChildren()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/entity.ts:22\n                                \n                            \n                    \n                        \n                                Whether or not there are any child entities. \n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Vec } from '.'\n\n/** An abstract base class for all entities. */\nexport abstract class Entity {\n  /** Whether or not the entity is visible. */\n  visible: boolean\n  /** Whether or not the entity is dead. */\n  dead: boolean\n\n  /** The opacity of the entity (from 0 to 1) */\n  alpha: number\n\n  /** Position of the entity. */\n  pos: Vec\n  /** Scale of the entity. */\n  scale: Vec\n\n  /** An array of child entities for recursive update/render. */\n  children: Partial[]\n\n  /** Whether or not there are any child entities. */\n  get hasChildren(): boolean {\n    return this.children.length > 0\n  }\n\n  /** Initialize an Entity object. */\n  constructor() {\n    this.visible = true\n    this.dead = false\n\n    this.alpha = 1\n\n    this.pos = new Vec()\n    this.scale = new Vec(1, 1)\n\n    this.children = []\n  }\n\n  /**\n   * Update method to be implemented by classes extending Entity.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  abstract update(dt: number, t: number): void\n\n  /**\n   * Adds a child object to the entity.\n   *\n   * @param child Child to add to the entity.\n   */\n  add(child: Partial) {\n    this.children.push(child)\n\n    return child\n  }\n\n  /**\n   * Maps a function across all children.\n   *\n   * @param fn Function to call for each child.\n   */\n  map(fn: (child: Partial, index?: number) => void): any {\n    const result: any[] = []\n\n    for (const [i, child] of this.children.entries()) {\n      result[i] = fn(child, i)\n    }\n\n    return result\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtraLayer.html":{"url":"interfaces/ExtraLayer.html","title":"interface - ExtraLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExtraLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/tiled-parser.ts\n        \n\n            \n                Description\n            \n            \n                Interface to add extra layers above or below the main level layer. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isAboveLevel\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isAboveLevel\n                                    \n                                \n                                \n                                    \n                                        isAboveLevel:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the layer is rendered above the level or below. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the layer to load. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Point } from '../types'\n\n/** Type for tile data. */\nexport type TileData = {\n  [key: string]: any,\n  frame: Point,\n  x: number,\n  y: number\n}\n\n/** Interface for a Tiled map object. */\nexport interface TiledMap {\n  /** Width of a tile in pixels. */\n  tileWidth: number\n  /** Height of a tile in pixels. */\n  tileHeight: number\n  /** Width of the map in tiles. */\n  mapWidth: number\n  /** Height of the map in tiles. */\n  mapHeight: number\n  /** Array of arrays of tile objects. */\n  tiles: TileData[][]\n  /** Index of the level layer in tiles array. */\n  levelIndex: number\n\n  /**\n   * Gets an object from the map by name.\n   *\n   * @param name Name of object to get.\n   * @param mandatory Whether a missing object is an error.\n   */\n  getObjectByName(name: string, mandatory?: boolean): Tiled.Object\n\n  /**\n   * Gets an array of objects from the map by type.\n   *\n   * @param type Type name of the objects to get.\n   * @param mandatory Whether no results is an error.\n   */\n  getObjectsByType(type: string, mandatory?: boolean): Tiled.Object[]\n}\n\n/** Interface to add extra layers above or below the main level layer. */\nexport interface ExtraLayer {\n  /** Name of the layer to load. */\n  name: string\n  /** Whether the layer is rendered above the level or below. */\n  isAboveLevel: boolean\n}\n\n/**\n * @ignore\n */\nlet tileWidth: number\n/**\n * @ignore\n */\nlet tileHeight: number\n/**\n * @ignore\n */\nlet mapWidth: number\n/**\n * @ignore\n */\nlet mapHeight: number\n/**\n * @ignore\n */\nlet tilesPerRow: number\n/**\n * @ignore\n */\nlet levelIndex: number\n\n/**\n * @ignore\n */\nlet tileset: Tiled.Tileset\n/**\n * @ignore\n */\nlet layers: Tiled.Layer[]\n/**\n * @ignore\n */\nlet tilesets: Tiled.Tileset[]\n/**\n * @ignore\n */\nlet entities: Tiled.Object[]\n\n/**\n * Parses a Tiled map object into a simpler form.\n *\n * There must be at least two layers in the Tiled map:\n * * \"level\"    - containing the tiles for the level\n * * \"entities\" - containing at least one entity (usually player starting location)\n *\n * @param jsonObj Object from Tiled JSON export.\n */\nexport function tiledParser(jsonObj: Tiled.Map,\n                            extraLayers?: ExtraLayer[]): TiledMap {\n  tileWidth = jsonObj.tilewidth\n  tileHeight = jsonObj.tileheight\n  mapWidth = jsonObj.width\n  mapHeight = jsonObj.height\n  layers = jsonObj.layers\n  tilesets = jsonObj.tilesets\n\n  const levelLayer = getLayer('level')\n  const entitiesLayer = getLayer('entities')\n\n  tileset = getTileset()\n\n  if (!entitiesLayer.objects) {\n    throw new Error('Tiled Error: Missing entities objects.')\n  }\n\n  entities = []\n  for (let i = 0; i  {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i  {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n\n/**\n * @ignore\n */\nconst loadTiles = (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i  {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n\n/**\n * @ignore\n */\nconst getTileProps = (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i  {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i  {\n  const es = []\n  for (let i = 0; i  {\n  let ent: any\n\n  for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GLUtils.html":{"url":"classes/GLUtils.html","title":"class - GLUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GLUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/utils.ts\n        \n\n            \n                Description\n            \n            \n                Provides static methods for working with WebGL. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get2DProjectionMatrix\n                            \n                            \n                                    Static\n                                getCameraTranslation\n                            \n                            \n                                    Static\n                                getRotation\n                            \n                            \n                                    Static\n                                getScale\n                            \n                            \n                                    Static\n                                getScaleMatrix\n                            \n                            \n                                    Static\n                                getTranslation\n                            \n                            \n                                    Static\n                                multiplyMatrices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get2DProjectionMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get2DProjectionMatrix(width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:61\n                \n            \n\n\n            \n                \n                    Gets a simple 2D flat projection matrix from the provided dimensions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of view in pixels.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of view in pixels.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCameraTranslation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTranslation(camera: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:11\n                \n            \n\n\n            \n                \n                    Gets a translation matrix based upon camera position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera object to translate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getRotation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRotation(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:88\n                \n            \n\n\n            \n                \n                    Gets a rotation matrix from the provided angle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScale\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScale(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:47\n                \n            \n\n\n            \n                \n                    Gets a scale matrix based upon provided sizes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Size to scale to in x dimension.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Size to scale to in y dimension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleMatrix\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleMatrix(sprite: Sprite | TileSprite | Rect, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:29\n                \n            \n\n\n            \n                \n                    Gets a scale matrix based upon entity scale.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sprite\n                                    \n                                                Sprite | TileSprite | Rect\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Entity with scale property.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of the entity in pixels.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of the entity in pixels.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTranslation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTranslation(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:75\n                \n            \n\n\n            \n                \n                    Gets a translation matrix from the provided coordinates.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translation for the x dimension.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translation for the y dimension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            multiplyMatrices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    multiplyMatrices(a: number[], b: number[])\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/utils.ts:102\n                \n            \n\n\n            \n                \n                    Multiplies two matrices together.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The first matrix for multiplication.\n\n                                    \n                                \n                                \n                                    b\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The second matrix for multiplication.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sprite, Rect } from '../../types'\nimport { TileSprite } from '../../tile-sprite'\n\n/** Provides static methods for working with WebGL. */\nexport class GLUtils {\n  /**\n   * Gets a translation matrix based upon camera position.\n   *\n   * @param camera Camera object to translate.\n   */\n  static getCameraTranslation(camera: any) {\n    let cameraTranslation = GLUtils.getTranslation(0, 0)\n\n    if (camera) {\n      cameraTranslation = GLUtils.getTranslation(\n        Math.floor(camera.pos.x), Math.floor(camera.pos.y))\n    }\n\n    return cameraTranslation\n  }\n\n  /**\n   * Gets a scale matrix based upon entity scale.\n   *\n   * @param sprite Entity with `scale` property.\n   * @param width Width of the entity in pixels.\n   * @param height Height of the entity in pixels.\n   */\n  static getScaleMatrix(sprite: Sprite | TileSprite | Rect,\n                        width: number, height: number) {\n    let scaleMatrix = GLUtils.getScale(width, height)\n\n    if (sprite.scale) {\n      scaleMatrix = GLUtils.getScale(width * sprite.scale.x,\n        height * sprite.scale.y)\n    }\n\n    return scaleMatrix\n  }\n\n  /**\n   * Gets a scale matrix based upon provided sizes.\n   *\n   * @param x Size to scale to in x dimension.\n   * @param y Size to scale to in y dimension.\n   */\n  static getScale(x: number, y: number) {\n    return [\n      x, 0, 0,\n      0, y, 0,\n      0, 0, 1\n    ]\n  }\n\n  /**\n   * Gets a simple 2D flat projection matrix from the provided dimensions.\n   *\n   * @param width Width of view in pixels.\n   * @param height Height of view in pixels.\n   */\n  static get2DProjectionMatrix(width: number, height: number) {\n    return [\n      2 / width, 0, 0,\n      0, -2 / height, 0,\n      -1, 1, 1\n    ]\n  }\n\n  /**\n   * Gets a translation matrix from the provided coordinates.\n   *\n   * @param x Translation for the x dimension.\n   * @param y Translation for the y dimension.\n   */\n  static getTranslation(x: number, y: number) {\n    return [\n      1, 0, 0,\n      0, 1, 0,\n      x, y, 1\n    ]\n  }\n\n  /**\n   * Gets a rotation matrix from the provided angle.\n   *\n   * @param angle Angle in radians.\n   */\n  static getRotation(angle: number) {\n    return [\n      Math.cos(-angle), -Math.sin(-angle), 0,\n      Math.sin(-angle), Math.cos(-angle), 0,\n      0, 0, 1\n    ]\n  }\n\n  /**\n   * Multiplies two matrices together.\n   *\n   * @param a The first matrix for multiplication.\n   * @param b The second matrix for multiplication.\n   */\n  static multiplyMatrices(a: number[], b: number[]) {\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = a\n    const [b00, b01, b02, b10, b11, b12, b20, b21, b22] = b\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22,\n    ]\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Game.html":{"url":"classes/Game.html","title":"class - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/game.ts\n        \n\n            \n                Description\n            \n            \n                Contains all aspects of a game.\nExample\n // This is a boring 'game'.\n const game = new Game(640, 480)\n\n game.run()\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                assets\n                            \n                            \n                                    Static\n                                debug\n                            \n                            \n                                    Static\n                                FPS\n                            \n                            \n                                    Static\n                                UPS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                run\n                            \n                            \n                                setScene\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                                \n                                    scene\n                                \n                                \n                                    canvas\n                                \n                                \n                                    speed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, useWebGL: boolean, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/game.ts:106\n                            \n                        \n\n                \n                    \n                            Initialize Game object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the game screen.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the game screen.\n\n                                                        \n                                                \n                                                \n                                                        useWebGL\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether or not to render with WebGL. Falls back to canvas.\nDefault is true.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The element to append the canvas to.\nDefault is document.body\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            assets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Assets\n\n                        \n                    \n                    \n                        \n                            Default value : new Assets()\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:66\n                            \n                        \n\n                \n                    \n                        An Assets instance for loading all game assets. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            debug\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:68\n                            \n                        \n\n                \n                    \n                        Whether or not to enable debug display (shows FPS and UPS). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            FPS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 60\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:70\n                            \n                        \n\n                \n                    \n                        Frames per second. Only updated if debug is true. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            UPS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 60\n                        \n                    \n                        \n                            \n                                    Defined in lib/game.ts:72\n                            \n                        \n\n                \n                    \n                        Updates per second. Only updated if debug is true. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun(gameUpdate: GameUpdate)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:168\n                \n            \n\n\n            \n                \n                    Start the game loop.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    gameUpdate\n                                    \n                                                GameUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => {}\n                                    \n\n                                    \n                                        An update function to run for the game.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setScene\n                        \n                        \n                    \n                \n            \n            \n                \nsetScene(scene: Scene, fadeInSeconds: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/game.ts:152\n                \n            \n\n\n            \n                \n                    Change to a new scene in the game.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                                Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The new scene to transition into.\n\n                                    \n                                \n                                \n                                    fadeInSeconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        .5\n                                    \n\n                                    \n                                        Time in seconds for the transition.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:75\n                                \n                            \n                    \n                        \n                                Gets the width of the game screen. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:80\n                                \n                            \n                    \n                        \n                                Gets the height of the game screen. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        scene\n                    \n                \n\n                \n                    \n                        getscene()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:85\n                                \n                            \n                    \n                        \n                                Gets the game scene. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        canvas\n                    \n                \n\n                \n                    \n                        getcanvas()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:90\n                                \n                            \n                    \n                        \n                                Gets the canvas element used by the renderer. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        speed\n                    \n                \n\n                \n                    \n                        getspeed()\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:98\n                                \n                            \n                    \n                        \n                                Gets the current speed multiplier of the game.\n\n\n                                \n                                \n                        \n                    \n\n                \n                    \n                        setspeed(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/game.ts:103\n                                \n                            \n                    \n                        \n                                Sets the speed multiplier of the game. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Assets } from './assets'\nimport { Renderer, CanvasRenderer, WebGLRenderer } from './renderer'\nimport { Container, Scene } from '.'\n\n/**\n * Function called on each update.\n *\n * @param dt Delta time since last call.\n * @param t Elapsed time since start.\n */\ntype GameUpdate = (dt: number, t: number) => void\n\n/**\n * Enum of pre-defined speeds for a game.\n * Default game speed is \"Normal\".\n *\n * Can also be any number, but be careful.\n */\nexport enum Speed {\n  Slow = .5,\n  Normal = 1,\n  Fast = 2\n}\n\n/**\n * @ignore\n */\nconst STEP = 1 / 60\n/**\n * @ignore\n */\nlet MULTIPLIER = Speed.Normal\n/**\n * @ignore\n */\nlet SPEED = STEP / MULTIPLIER\n/**\n * @ignore\n */\nconst MAX_FRAME = SPEED * 5\n\n/**\n * Contains all aspects of a game.\n *\n * ### Example\n * ```typescript\n // This is a boring 'game'.\n const game = new Game(640, 480)\n\n game.run()\n ```\n */\nexport class Game {\n  private _width: number\n  private _height: number\n\n  private fadeTime: number\n  private fadeDuration: number\n  private destination: Scene\n\n  private isWebGL: boolean\n  private renderer: Renderer\n  private _scene: Scene | Container\n\n  /** An Assets instance for loading all game assets. */\n  static assets: Assets = new Assets()\n  /** Whether or not to enable debug display (shows FPS and UPS). */\n  static debug: boolean = false\n  /** Frames per second. Only updated if debug is true. */\n  static FPS: number = 60\n  /** Updates per second. Only updated if debug is true. */\n  static UPS: number = 60\n\n  /** Gets the width of the game screen. */\n  get width() {\n    return this._width\n  }\n\n  /** Gets the height of the game screen. */\n  get height() {\n    return this._height\n  }\n\n  /** Gets the game scene. */\n  get scene() {\n    return this._scene\n  }\n\n  /** Gets the canvas element used by the renderer. */\n  get canvas() {\n    return this.renderer.canvasElement\n  }\n\n  /**\n   * Gets the current speed multiplier of the game.\n   * @default {@link Speed.Normal}\n   */\n  get speed() {\n    return MULTIPLIER\n  }\n\n  /** Sets the speed multiplier of the game. */\n  set speed(value: Speed | number) {\n    MULTIPLIER = value\n    SPEED = STEP / MULTIPLIER\n  }\n\n  /**\n   * Initialize Game object.\n   *\n   * @param width Width of the game screen.\n   * @param height Height of the game screen.\n   * @param useWebGL Whether or not to render with WebGL. Falls back to canvas.\n   * Default is `true`.\n   * @param container The element to append the canvas to.\n   * Default is `document.body`\n   */\n  constructor(width: number, height: number, useWebGL: boolean = true,\n              container: HTMLElement = document.body) {\n    this._width = width\n    this._height = height\n\n    const canvas = document.createElement('canvas')\n\n    if (useWebGL) {\n      this.checkWebGL(canvas)\n    }\n\n    if (useWebGL && this.isWebGL) {\n      this.renderer = new WebGLRenderer(width, height, container)\n    }\n\n    if (!useWebGL || !this.isWebGL) {\n      this.renderer = new CanvasRenderer(width, height, container)\n    }\n\n    this._scene = new Container()\n    this.destination = null\n\n    this.fadeTime = 0\n    this.fadeDuration = 0\n\n    this.logInfo()\n  }\n\n  /**\n   * Change to a new scene in the game.\n   *\n   * @param scene The new scene to transition into.\n   * @param fadeInSeconds Time in seconds for the transition.\n   */\n  setScene(scene: Scene, fadeInSeconds = .5) {\n    if (!fadeInSeconds) {\n      this._scene = scene\n      return\n    }\n\n    this.destination = scene\n    this.fadeTime = fadeInSeconds\n    this.fadeDuration = fadeInSeconds\n  }\n\n  /**\n   * Start the game loop.\n   *\n   * @param gameUpdate An update function to run for the game.\n   */\n  run(gameUpdate: GameUpdate = () => {}) {\n    let dt = 0\n    let last = 0\n\n    let lastTime = window.performance.now()\n    let frames = 0\n    let updates = 0\n\n    const loop = (ms: number) => {\n      const t = ms / 1000\n\n      dt += Math.min(t - last, MAX_FRAME)\n      last = t\n\n      while (dt >= SPEED) {\n        updates++\n        this.scene.update(STEP, t / MULTIPLIER)\n        gameUpdate(STEP, t / MULTIPLIER)\n        dt -= SPEED\n      }\n\n      frames++\n      this.renderer.render(this.scene)\n\n      if (Game.debug && window.performance.now() - lastTime >= 1000) {\n        Game.FPS = Math.round(.25 * frames + .75 * Game.FPS)\n        Game.UPS = Math.round(.25 * updates + .75 * Game.UPS)\n\n        frames = 0\n        updates = 0\n        lastTime = window.performance.now()\n      }\n\n      if (this.fadeTime > 0) {\n        const ratio = this.fadeTime / this.fadeDuration\n\n        this.scene.alpha = ratio\n        this.destination.alpha = 1 - ratio\n        this.renderer.render(this.destination, false)\n\n        if ((this.fadeTime -= STEP) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GamepadControls.html":{"url":"classes/GamepadControls.html","title":"class - GamepadControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GamepadControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/gamepad-controls.ts\n        \n\n            \n                Description\n            \n            \n                Simplifies working with the\nGamepad API.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                threshold\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actionA\n                                \n                                \n                                    actionB\n                                \n                                \n                                    actionX\n                                \n                                \n                                    actionY\n                                \n                                \n                                    actionEsc\n                                \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/controls/gamepad-controls.ts:45\n                            \n                        \n\n                \n                    \n                            Initialize GamepadControls object.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            threshold\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/gamepad-controls.ts:7\n                            \n                        \n\n                \n                    \n                        Deadzone threshold. Default is .21 \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actionA\n                    \n                \n\n                \n                    \n                        getactionA()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:13\n                                \n                            \n                    \n                        \n                                Gets status of A button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionB\n                    \n                \n\n                \n                    \n                        getactionB()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:18\n                                \n                            \n                    \n                        \n                                Gets status of B button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionX\n                    \n                \n\n                \n                    \n                        getactionX()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:23\n                                \n                            \n                    \n                        \n                                Gets status of X button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionY\n                    \n                \n\n                \n                    \n                        getactionY()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:28\n                                \n                            \n                    \n                        \n                                Gets status of Y button (or equivalent). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actionEsc\n                    \n                \n\n                \n                    \n                        getactionEsc()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:33\n                                \n                            \n                    \n                        \n                                Gets status of Escape-equivalent button. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:38\n                                \n                            \n                    \n                        \n                                Gets direction of x axis. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/gamepad-controls.ts:43\n                                \n                            \n                    \n                        \n                                Gets direction of y axis. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class GamepadControls {\n  /** Deadzone threshold. Default is .21 */\n  threshold: number\n\n  private controller: Gamepad\n  private controllers: Gamepad[]\n\n  /** Gets status of A button (or equivalent). */\n  get actionA() {\n    return this.action(0, 11)\n  }\n\n  /** Gets status of B button (or equivalent). */\n  get actionB() {\n    return this.action(1, 12)\n  }\n\n  /** Gets status of X button (or equivalent). */\n  get actionX() {\n    return this.action(2, 13)\n  }\n\n  /** Gets status of Y button (or equivalent). */\n  get actionY() {\n    return this.action(3, 14)\n  }\n\n  /** Gets status of Escape-equivalent button. */\n  get actionEsc() {\n    return this.action(4)\n  }\n\n  /** Gets direction of x axis. */\n  get x() {\n    return this.axis(0)\n  }\n\n  /** Gets direction of y axis. */\n  get y() {\n    return this.axis(1)\n  }\n\n  /**\n   * Initialize GamepadControls object.\n   */\n  constructor() {\n    this.controller = null\n    this.controllers = []\n    this.threshold = .21\n\n    window.addEventListener('gamepadconnected',\n      (e: GamepadEvent) => this.handler(e, true),\n      false)\n\n    window.addEventListener('gamepaddisconnected',\n      (e: GamepadEvent) => this.handler(e),\n      false)\n  }\n\n  private handler(e: GamepadEvent, isConnect = false) {\n    const { gamepad } = e\n\n    if (!isConnect) {\n      delete this.controllers[gamepad.index]\n      this.controller = null\n      return\n    }\n\n    this.controllers[gamepad.index] = gamepad\n    this.controller = gamepad\n  }\n\n  private axis(id: number) {\n    if (!this.controller) {\n      return 0\n    }\n\n    return (this.controller.axes[id]  this.threshold)\n        ? 1\n        : 0\n  }\n\n  private action(...buttons: number[]) {\n    if (!this.controller) {\n      return false\n    }\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlBuffer.html":{"url":"classes/GlBuffer.html","title":"class - GlBuffer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlBuffer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/gl-buffer.ts\n        \n\n            \n                Description\n            \n            \n                Thin wrapper around WebGLBuffer objects, making them easier to manage. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buffer\n                            \n                            \n                                create\n                            \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gl: WebGLRenderingContext)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl/gl-buffer.ts:20\n                            \n                        \n\n                \n                    \n                            Initialize GlBuffer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gl\n                                                  \n                                                        \n                                                                    WebGLRenderingContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                WebGLRenderingContext to use for buffer actions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buffer\n                        \n                        \n                    \n                \n            \n            \n                \nbuffer(bufferName: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:37\n                \n            \n\n\n            \n                \n                    Gets the buffer with the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the buffer to return.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(bufferName: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:48\n                \n            \n\n\n            \n                \n                    Creates a new buffer with the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the buffer to create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setActive\n                        \n                        \n                    \n                \n            \n            \n                \nsetActive(bufferName: string, attribLocation: number, components: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/gl-buffer.ts:66\n                \n            \n\n\n            \n                \n                    Sets the named buffer as active, enables the provided attribute,\nand prepares the buffer for use.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    bufferName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the buffer to activate.\n\n                                    \n                                \n                                \n                                    attribLocation\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The location of the attribute to enable.\n\n                                    \n                                \n                                \n                                    components\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        The number of components per vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        const fullArea = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])\n\n/** Data about a WebGL buffer. */\nclass BufferInfo {\n  /** The WebGLBuffer. */\n  buffer: WebGLBuffer\n  /** Buffer ID in the program. */\n  id: number\n  /** Lookup name for the buffer. */\n  name: string\n}\n\n/** Thin wrapper around WebGLBuffer objects, making them easier to manage. */\nexport class GlBuffer {\n  private gl: WebGLRenderingContext\n  private buffers: BufferInfo[]\n  private activeBuffer: BufferInfo\n\n  /**\n   * Initialize GlBuffer object.\n   *\n   * @param gl WebGLRenderingContext to use for buffer actions.\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl\n    this.buffers = []\n  }\n\n  /**\n   * Gets the buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to return.\n   */\n  buffer(bufferName: string) {\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    return buffer.buffer\n  }\n\n  /**\n   * Creates a new buffer with the provided name.\n   *\n   * @param bufferName The name of the buffer to create.\n   */\n  create(bufferName: string) {\n    const buff = new BufferInfo()\n    buff.buffer = this.gl.createBuffer()\n    ; (buff.buffer as any).__SPECTOR_Metadata = { bufferName }\n    buff.id = this.buffers.length\n    buff.name = bufferName\n\n    this.buffers.push(buff)\n  }\n\n  /**\n   * Sets the named buffer as active, enables the provided attribute,\n   * and prepares the buffer for use.\n   *\n   * @param bufferName The name of the buffer to activate.\n   * @param attribLocation The location of the attribute to enable.\n   * @param components The number of components per vertex.\n   */\n  setActive(bufferName: string, attribLocation: number, components: number = 2) {\n    const { gl } = this\n\n    const buffer = this.buffers.find(x => x.name === bufferName)\n\n    if (!buffer) {\n      throw new Error(`No buffer with name ${bufferName} found to set as active.`)\n    }\n\n    if (this.activeBuffer === buffer) {\n      return\n    }\n\n    this.activeBuffer = buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, fullArea, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(attribLocation, components, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(attribLocation)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HitBox.html":{"url":"classes/HitBox.html","title":"class - HitBox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HitBox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/hit-box.ts\n        \n\n            \n                Description\n            \n            \n                Allows for more precise collision detection.\n// Creates a hitbox 4 pixels right and down from the top left of the sprite,\n// with a width of 32 pixels and a height of 40 pixels.\nplayer.hitbox = new HitBox(4, 4, 32, 40)\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(x: number, y: number, width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in lib/types/hit-box.ts:35\n                            \n                        \n\n                \n                    \n                            Initialize HitBox object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        x\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                X axis offset from top left.\n\n                                                        \n                                                \n                                                \n                                                        y\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Y axis offset from top left.\n\n                                                        \n                                                \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of hitbox.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of hitbox.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/hit-box.ts:61\n                \n            \n\n\n            \n                \n                    Set new values for the hitbox.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        X axis offset from top left.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Y axis offset from top left.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Width of hitbox.\n\n                                    \n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Height of hitbox.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:18\n                                \n                            \n                    \n                        \n                                Gets the offset along the X axis from top left. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:23\n                                \n                            \n                    \n                        \n                                Gets the offset along the Y axis from top left. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:28\n                                \n                            \n                    \n                        \n                                Gets the width of the hitbox. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/hit-box.ts:33\n                                \n                            \n                    \n                        \n                                Gets the height of the hitbox. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class HitBox {\n  private _x: number\n  private _y: number\n\n  private _height: number\n  private _width: number\n\n  /** Gets the offset along the X axis from top left. */\n  get x() {\n    return this._x\n  }\n\n  /** Gets the offset along the Y axis from top left. */\n  get y() {\n    return this._y\n  }\n\n  /** Gets the width of the hitbox. */\n  get width() {\n    return this._width\n  }\n\n  /** Gets the height of the hitbox. */\n  get height() {\n    return  this._height\n  }\n\n  /**\n   * Initialize HitBox object.\n   *\n   * @param x X axis offset from top left.\n   * @param y Y axis offset from top left.\n   * @param width Width of hitbox.\n   * @param height Height of hitbox.\n   */\n  constructor(x: number, y: number, width: number, height: number) {\n    this._x = x\n    this._y = y\n\n    this._height = height\n    this._width = width\n  }\n\n  /**\n   * Set new values for the hitbox.\n   *\n   * @param x X axis offset from top left.\n   * @param y Y axis offset from top left.\n   * @param width Width of hitbox.\n   * @param height Height of hitbox.\n   */\n  set(x: number, y: number, width: number, height: number) {\n    this._x = x\n    this._y = y\n\n    this._height = height\n    this._width = width\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hits.html":{"url":"interfaces/Hits.html","title":"interface - Hits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Hits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/resolvers/wall-slide.ts\n        \n\n            \n                Description\n            \n            \n                Directions where collisions are detected. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        down\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        up\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        down\n                                    \n                                \n                                \n                                    \n                                        down:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from below.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from the left.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from the right.  \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        up\n                                    \n                                \n                                \n                                    \n                                        up:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not a collision was detected from above.  \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Sprite } from '../types'\nimport { TileMap, Utils, TileSprite } from '..'\n\n/** Function used to provide collision resolver with walkable tile status. */\nexport type WalkableTest = (sprite: TileSprite, index: number) => boolean\n\n/** Directions where collisions are detected. */\nexport interface Hits {\n  /** Whether or not a collision was detected from above.  */\n  up: boolean\n  /** Whether or not a collision was detected from below.  */\n  down: boolean\n  /** Whether or not a collision was detected from the left.  */\n  left: boolean\n  /** Whether or not a collision was detected from the right.  */\n  right: boolean\n}\n\n/** The offsets to apply to resolve collisions, as well as the hit directions. */\nexport interface Resolution {\n  /** Correction needed in the x axis. */\n  x: number\n  /** Correction needed in the y axis. */\n  y: number\n  /** Directions where collisions were detected. */\n  hits: Hits\n}\n\n/**\n * Collision resolver that only prevents invalid movements.\n *\n * @param ent The Sprite entity to check.\n * @param map The TileMap to use for collision.\n * @param x Desired movement in the X axis.\n * @param y Desired movement in the Y axis.\n * @param walkableTest Callback function to test for walkable tiles.\n */\nexport function wallSlide(ent: Sprite, map: TileMap, x = 0, y = 0,\n                          walkableTest?: WalkableTest): Resolution {\n  let tiles: TileSprite[]\n  let tileEdge: number\n\n  const bounds = Utils.sprite.bounds(ent)\n  const hits = { up: false, down: false, left: false, right: false }\n\n  let xo = x\n  let yo = y\n\n  if (y !== 0) {\n    tiles = map.tilesAtCorners(bounds, 0, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(bl && br)) {\n      hits.down = true\n      tileEdge = tiles[2].pos.y - 1\n      yo = tileEdge - (bounds.y + bounds.height)\n    }\n  }\n\n  if (x !== 0) {\n    tiles = map.tilesAtCorners(bounds, xo, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(tr && br)) {\n      hits.right = true\n      tileEdge = tiles[1].pos.x - 1\n      xo = tileEdge - (bounds.x + bounds.width)\n    }\n  }\n\n  return { x: xo, y: yo, hits }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyControls.html":{"url":"classes/KeyControls.html","title":"class - KeyControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/key-controls.ts\n        \n\n            \n                Description\n            \n            \n                Provides access to keyboard inputs. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    action\n                                \n                                \n                                    actionB\n                                \n                                \n                                    x\n                                \n                                \n                                    y\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in lib/controls/key-controls.ts:70\n                            \n                        \n\n                \n                    \n                            Initialize KeyControls object. \n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            key\n                        \n                        \n                    \n                \n            \n            \n                \nkey(key: string, value?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/key-controls.ts:104\n                \n            \n\n\n            \n                \n                    Gets or sets the value of a key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        KeyboardEvent code for the key (e.g. 'KeyW' for W).\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        If provided, sets the key's value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not key is 'pressed'.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/key-controls.ts:113\n                \n            \n\n\n            \n                \n                    Resets all keys to 'unpressed' state. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        action\n                    \n                \n\n                \n                    \n                        getaction()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:20\n                                \n                            \n                    \n                        \n                                Gets status of the spacebar. \n\n\n                        \n                    \n\n                \n                    \n                        setaction(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:25\n                                \n                            \n                    \n                        \n                                Sets status of the spacebar. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        actionB\n                    \n                \n\n                \n                    \n                        getactionB()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:30\n                                \n                            \n                    \n                        \n                                Gets status of the X key. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        x\n                    \n                \n\n                \n                    \n                        getx()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:39\n                                \n                            \n                    \n                        \n                                Gets x axis input direction.\nChecks left arrow or A key for left, and right arrow or D key for down.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        y\n                    \n                \n\n                \n                    \n                        gety()\n                    \n                \n                            \n                                \n                                    Defined in lib/controls/key-controls.ts:58\n                                \n                            \n                    \n                        \n                                Gets y axis input direction.\nChecks up arrow or W key for up, and down arrow or S key for down.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        type KeyMap = {\n  [s: string]: boolean\n}\n\n/**\n * @ignore\n */\nconst passThroughKeys = [\n  'F5', 'F12'\n]\n\n/** Provides access to keyboard inputs. */\nexport class KeyControls {\n  private keys: KeyMap\n\n  /** Gets status of the spacebar. */\n  get action() {\n    return this.keys.Space\n  }\n\n  /** Sets status of the spacebar. */\n  set action(value: boolean) {\n    this.keys.Space = value\n  }\n\n  /** Gets status of the X key. */\n  get actionB() {\n    return this.keys.KeyX\n  }\n\n  /**\n   * Gets x axis input direction.\n   *\n   * Checks left arrow or A key for left, and right arrow or D key for down.\n   */\n  get x() {\n    let val = 0\n\n    if (this.keys.ArrowLeft || this.keys.KeyA) {\n      val -= 1\n    }\n\n    if (this.keys.ArrowRight || this.keys.KeyD) {\n      val += 1\n    }\n\n    return val\n  }\n\n  /**\n   * Gets y axis input direction.\n   *\n   * Checks up arrow or W key for up, and down arrow or S key for down.\n   */\n  get y() {\n    let val = 0\n\n    if (this.keys.ArrowUp || this.keys.KeyW) {\n      val -= 1\n    }\n\n    if (this.keys.ArrowDown || this.keys.KeyS) {\n      val += 1\n    }\n\n    return val\n  }\n\n  /** Initialize KeyControls object. */\n  constructor() {\n    this.reset()\n\n    document.addEventListener('keydown', e => {\n      this.keys[e.code] = true\n\n      if (passThroughKeys.indexOf(e.code.toString()) > -1) {\n        return\n      }\n\n      e.preventDefault()\n    }, false)\n\n    document.addEventListener('keyup', e => {\n      this.keys[e.code] = false\n\n      if (passThroughKeys.indexOf(e.code.toString()) > -1) {\n        return\n      }\n\n      e.preventDefault()\n    }, false)\n  }\n\n  /**\n   * Gets or sets the value of a key.\n   *\n   * @param key KeyboardEvent code for the key (e.g. 'KeyW' for W).\n   * @param value If provided, sets the key's value.\n   * @returns Whether or not key is 'pressed'.\n   */\n  key(key: string, value?: boolean) {\n    if (value !== undefined) {\n      this.keys[key] = value\n    }\n\n    return !!this.keys[key]\n  }\n\n  /** Resets all keys to 'unpressed' state. */\n  reset() {\n    this.keys = {}\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Layer.html":{"url":"interfaces/Layer.html","title":"interface - Layer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Layer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Layer in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        objects\n                                \n                                \n                                        opacity\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a tile layer, this is an array of tile IDs. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                    \n                                \n                                \n                                    \n                                        objects:     Tiled.Object[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tiled.Object[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If an object layer, this is an array of Objects. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opacity\n                                    \n                                \n                                \n                                    \n                                        opacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The opacity of the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the layer. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the layer. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Map.html":{"url":"interfaces/Map.html","title":"interface - Map","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Map\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                The Tiled map. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        layers\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        tileheight\n                                \n                                \n                                        tilesets\n                                \n                                \n                                        tilewidth\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layers\n                                    \n                                \n                                \n                                    \n                                        layers:         Layer[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Layers in map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileheight\n                                    \n                                \n                                \n                                    \n                                        tileheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilesets\n                                    \n                                \n                                \n                                    \n                                        tilesets:     Tileset[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tileset[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tilesets in the map. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilewidth\n                                    \n                                \n                                \n                                    \n                                        tilewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the map in tiles. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MouseControls.html":{"url":"classes/MouseControls.html","title":"class - MouseControls","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MouseControls\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/controls/mouse-controls.ts\n        \n\n            \n                Description\n            \n            \n                Provides access to mouse events. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDown\n                            \n                            \n                                pos\n                            \n                            \n                                pressed\n                            \n                            \n                                released\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(container: HTMLCanvasElement)\n                    \n                \n                        \n                            \n                                Defined in lib/controls/mouse-controls.ts:15\n                            \n                        \n\n                \n                    \n                            Initialize MouseControls object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLCanvasElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The canvas element to use for relative mouse coordinates.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:11\n                            \n                        \n\n                \n                    \n                        Whether the mouse button is down. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:9\n                            \n                        \n\n                \n                    \n                        Position of the mouse. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pressed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:13\n                            \n                        \n\n                \n                    \n                        Whether the mouse button was just pressed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            released\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/controls/mouse-controls.ts:15\n                            \n                        \n\n                \n                    \n                        Whether the mouse button was just released. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in lib/controls/mouse-controls.ts:42\n                \n            \n\n\n            \n                \n                    Update mouse values.\nShould be called in parent object's update function.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vec } from '../types'\n\n/** Provides access to mouse events. */\nexport class MouseControls {\n  private el: HTMLCanvasElement\n  private rect: ClientRect | DOMRect\n\n  /** Position of the mouse. */\n  pos: Vec\n  /** Whether the mouse button is down. */\n  isDown: boolean\n  /** Whether the mouse button was just pressed. */\n  pressed: boolean\n  /** Whether the mouse button was just released. */\n  released: boolean\n\n  /**\n   * Initialize MouseControls object.\n   *\n   * @param container The canvas element to use for relative mouse coordinates.\n   */\n  constructor(container: HTMLCanvasElement) {\n    this.el = container\n\n    this.pos = new Vec()\n    this.isDown = false\n    this.pressed = false\n    this.released = false\n    this.resize()\n\n    document.addEventListener('mousedown', e => this.down(e), false)\n    document.addEventListener('mouseup', _ => this.up(), false)\n    document.addEventListener('mousemove', e => this.move(e), false)\n    document.addEventListener('resize', _ => this.resize(), false)\n  }\n\n  /**\n   * Update mouse values.\n   *\n   * Should be called in parent object's update function.\n   */\n  update() {\n    this.released = false\n    this.pressed = false\n  }\n\n  private down(e: MouseEvent) {\n    this.isDown = true\n    this.pressed = true\n    this.mousePosFromEvent(e)\n  }\n\n  private up() {\n    this.isDown = false\n    this.released = true\n  }\n\n  private move(e: MouseEvent) {\n    this.mousePosFromEvent(e)\n  }\n\n  private resize() {\n    this.rect = this.el.getBoundingClientRect()\n  }\n\n  private mousePosFromEvent(e: MouseEvent) {\n    const { clientX, clientY } = e\n    const xr = this.el.width / this.el.clientWidth\n    const yr = this.el.height / this.el.clientHeight\n\n    this.pos.x = (clientX - this.rect.left) * xr\n    this.pos.y = (clientY - this.rect.top) * yr\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Object.html":{"url":"interfaces/Object.html","title":"interface - Object","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Object\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                An Object in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        gid\n                                \n                                \n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                                \n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gid\n                                    \n                                \n                                \n                                    \n                                        gid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The global ID of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The local Id of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X value of the object. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y value of the object. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OneUp.html":{"url":"classes/OneUp.html","title":"class - OneUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OneUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/one-up.ts\n        \n\n            \n                Description\n            \n            \n                An effect where the provided TileSprite or Rect\n(defaults to rectangle if not provided) is moved away from its starting\nposition at the specified speed and duration.\nDefault behavior is moving up and fading out over 0.6 seconds.\nExample\n// Inside a 'gotPickup' or similar function\nconst coin = new TileSprite(texture, 48, 48)\ncoin.anims.add('spin', [5, 6, 7, 8].map(x => ({ x, y: 4 } as any)), .1)\ncoin.anims.play('spin')\n\nconst one = this.add(new OneUp(coin))\none.pos.copy(this.player.pos)\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(display?: TileSprite | Rect, speed: number, duration: number)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/one-up.ts:27\n                            \n                        \n\n                \n                    \n                            Initialize OneUp object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        TileSprite | Rect\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\nRectangle created if not provided.\n\n                                                        \n                                                \n                                                \n                                                        speed\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Speed (and x-axis direction by numeric sign) to move from\ninitial point.\n\n                                                        \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds to fade out.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/one-up.ts:53\n                \n            \n\n\n            \n                \n                    Update the state of the OneUp.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:49\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container } from '../container'\nimport { Vec, Rect } from '../types'\nimport { TileSprite, Utils } from '..'\n\n/**\n * An effect where the provided {@link TileSprite} or {@link Rect}\n * (defaults to rectangle if not provided) is moved away from its starting\n * position at the specified speed and duration.\n *\n * Default behavior is moving up and fading out over 0.6 seconds.\n *\n * ### Example\n * ```typescript\n// Inside a 'gotPickup' or similar function\nconst coin = new TileSprite(texture, 48, 48)\ncoin.anims.add('spin', [5, 6, 7, 8].map(x => ({ x, y: 4 } as any)), .1)\ncoin.anims.play('spin')\n\nconst one = this.add(new OneUp(coin))\none.pos.copy(this.player.pos)\n```\n */\nexport class OneUp extends Container {\n  private vel: Vec\n\n  private duration: number\n  private life: number\n\n  /**\n   * Initialize OneUp object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * Rectangle created if not provided.\n   * @param speed Speed (and x-axis direction by numeric sign) to move from\n   * initial point.\n   * @param duration Time in seconds to fade out.\n   */\n  constructor(display?: TileSprite | Rect, speed = 2, duration = .6) {\n    super()\n\n    this.vel = new Vec(0, -speed)\n    this.duration = duration\n    this.life = duration\n    this.children = [display || new Rect(40, 30, { fill: '#ff0' })]\n  }\n\n  /**\n   * Update the state of the OneUp.\n   *\n   * @param dt Delta time since last update.\n   * @param t Timestamp in seconds.\n   */\n  update(dt: number, t: number) {\n    super.update(dt, t)\n\n    this.alpha = Utils.math.clamp(this.life / this.duration)\n    this.pos.add(this.vel)\n\n    this.dead = ((this.life -= dt) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Particle.html":{"url":"classes/Particle.html","title":"class - Particle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Particle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle.ts\n        \n\n            \n                Description\n            \n            \n                A single particle whose lifecycle is controlled by a ParticleEmitter.\nCan be used alone if desired as a randomly moving and fading entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(display?: Rect | TileSprite, options?: ParticleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/particle.ts:50\n                            \n                        \n\n                \n                    \n                            Initialize Particle object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        Rect | TileSprite\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParticleOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options affecting particle behaviors.\nSee ParticleOptions for default values if not passed in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle.ts:81\n                \n            \n\n\n            \n                \n                    Reset the particle with random values within established ranges. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle.ts:103\n                \n            \n\n\n            \n                \n                    Update state of the particle.\nExits early if the particle's time is up.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:49\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { math } from '../utils'\n\n/**\n * Options used to determine particle behaviors.\n *\n * Ranges use a {@link Vec} where the x value is the minimum, and y is the maximum.\n */\nexport interface ParticleOptions {\n  /**\n   * Range of values to use for horizontal velocity.\n   * @default -5 to 5\n   */\n  horizontalVelRange: Vec\n\n  /**\n   * Range of values to use for vertical velocity.\n   * @default -5 to -10\n   */\n  verticalVelRange: Vec\n\n  /**\n   * Range of values to use for particle life in seconds.\n   * @default .8 to 1.5\n   */\n  lifeSecRange: Vec\n\n  /**\n   * Default particle size to use if no display object passed in.\n   * @default 10 by 10\n   */\n  defaultSize: Vec\n\n  /**\n   * Fill style to use if no display object passed in.\n   * @default '#900'\n   */\n  fill: string\n}\n\n/**\n * A single particle whose lifecycle is controlled by a {@link ParticleEmitter}.\n *\n * Can be used alone if desired as a randomly moving and fading entity.\n */\nexport class Particle extends Container {\n  private options: ParticleOptions\n  private vel: Vec\n  private life: number\n\n  /**\n   * Initialize Particle object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See ParticleOptions for default values if not passed in.\n   */\n  constructor(display?: Rect | TileSprite, options?: ParticleOptions) {\n    super()\n\n    this.vel = new Vec()\n    this.alpha = this.life = 0\n\n    this.options = options || {\n      horizontalVelRange: new Vec(-5, 5),\n      verticalVelRange: new Vec(-5, -10),\n      lifeSecRange: new Vec(.8, 1.5),\n      defaultSize: new Vec(10, 10),\n      fill: '#900'\n    }\n\n    this.add(display || new Rect(\n      this.options.defaultSize.x,\n      this.options.defaultSize.y,\n      { fill: this.options.fill }\n    ))\n  }\n\n  /** Reset the particle with random values within established ranges. */\n  reset() {\n    const {\n      horizontalVelRange: h,\n      verticalVelRange: v,\n      lifeSecRange: l\n    } = this.options\n\n    this.vel.set(\n      math.randf(h.x, h.y), math.randf(v.x, v.y)\n    )\n\n    this.life = math.randf(l.x, l.y)\n    this.pos.set(0, 0)\n  }\n\n  /**\n   * Update state of the particle.\n   *\n   * Exits early if the particle's time is up.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.life \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticleEmitter.html":{"url":"classes/ParticleEmitter.html","title":"class - ParticleEmitter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticleEmitter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle-emitter.ts\n        \n\n            \n                Description\n            \n            \n                Container which manages a pool of Particle objects (20 by default)\nand emits them in random directions when the play method is called.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(numParticles: number, display?: TileSprite | Rect, options?: ParticleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/fx/particle-emitter.ts:11\n                            \n                        \n\n                \n                    \n                            Initialize ParticleEmitter object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        numParticles\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of particles used.\n\n                                                        \n                                                \n                                                \n                                                        display\n                                                  \n                                                        \n                                                                        TileSprite | Rect\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                TileSprite (or Rect) to use for display.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParticleOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options affecting particle behaviors.\nSee ParticleOptions for default values if not passed in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(pos: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/fx/particle-emitter.ts:43\n                \n            \n\n\n            \n                \n                    'Plays' the particle emitter effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position to use for anchoring particles.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:49\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { Particle, ParticleOptions } from './particle'\n\n/**\n * Container which manages a pool of {@link Particle} objects (20 by default)\n * and emits them in random directions when the `play` method is called.\n */\nexport class ParticleEmitter extends Container {\n  private particles: Particle[]\n  private lastPlay: number\n\n  /**\n   * Initialize ParticleEmitter object.\n   *\n   * @param numParticles The number of particles used.\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See ParticleOptions for default values if not passed in.\n   */\n  constructor(numParticles = 20, display?: TileSprite | Rect,\n              options?: ParticleOptions) {\n    super()\n\n    this.particles = []\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParticleOptions.html":{"url":"interfaces/ParticleOptions.html","title":"interface - ParticleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParticleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/fx/particle.ts\n        \n\n            \n                Description\n            \n            \n                Options used to determine particle behaviors.\nRanges use a Vec where the x value is the minimum, and y is the maximum.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        defaultSize\n                                \n                                \n                                        fill\n                                \n                                \n                                        horizontalVelRange\n                                \n                                \n                                        lifeSecRange\n                                \n                                \n                                        verticalVelRange\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultSize\n                                    \n                                \n                                \n                                    \n                                        defaultSize:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 10 by 10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default particle size to use if no display object passed in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : '#900'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fill style to use if no display object passed in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalVelRange\n                                    \n                                \n                                \n                                    \n                                        horizontalVelRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : -5 to 5\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for horizontal velocity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lifeSecRange\n                                    \n                                \n                                \n                                    \n                                        lifeSecRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : .8 to 1.5\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for particle life in seconds.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalVelRange\n                                    \n                                \n                                \n                                    \n                                        verticalVelRange:         Vec\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : -5 to -10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Range of values to use for vertical velocity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Container, TileSprite } from '../'\nimport { Rect, Vec } from '../types'\nimport { math } from '../utils'\n\n/**\n * Options used to determine particle behaviors.\n *\n * Ranges use a {@link Vec} where the x value is the minimum, and y is the maximum.\n */\nexport interface ParticleOptions {\n  /**\n   * Range of values to use for horizontal velocity.\n   * @default -5 to 5\n   */\n  horizontalVelRange: Vec\n\n  /**\n   * Range of values to use for vertical velocity.\n   * @default -5 to -10\n   */\n  verticalVelRange: Vec\n\n  /**\n   * Range of values to use for particle life in seconds.\n   * @default .8 to 1.5\n   */\n  lifeSecRange: Vec\n\n  /**\n   * Default particle size to use if no display object passed in.\n   * @default 10 by 10\n   */\n  defaultSize: Vec\n\n  /**\n   * Fill style to use if no display object passed in.\n   * @default '#900'\n   */\n  fill: string\n}\n\n/**\n * A single particle whose lifecycle is controlled by a {@link ParticleEmitter}.\n *\n * Can be used alone if desired as a randomly moving and fading entity.\n */\nexport class Particle extends Container {\n  private options: ParticleOptions\n  private vel: Vec\n  private life: number\n\n  /**\n   * Initialize Particle object.\n   *\n   * @param display TileSprite (or Rect) to use for display.\n   * @param options Options affecting particle behaviors.\n   * See ParticleOptions for default values if not passed in.\n   */\n  constructor(display?: Rect | TileSprite, options?: ParticleOptions) {\n    super()\n\n    this.vel = new Vec()\n    this.alpha = this.life = 0\n\n    this.options = options || {\n      horizontalVelRange: new Vec(-5, 5),\n      verticalVelRange: new Vec(-5, -10),\n      lifeSecRange: new Vec(.8, 1.5),\n      defaultSize: new Vec(10, 10),\n      fill: '#900'\n    }\n\n    this.add(display || new Rect(\n      this.options.defaultSize.x,\n      this.options.defaultSize.y,\n      { fill: this.options.fill }\n    ))\n  }\n\n  /** Reset the particle with random values within established ranges. */\n  reset() {\n    const {\n      horizontalVelRange: h,\n      verticalVelRange: v,\n      lifeSecRange: l\n    } = this.options\n\n    this.vel.set(\n      math.randf(h.x, h.y), math.randf(v.x, v.y)\n    )\n\n    this.life = math.randf(l.x, l.y)\n    this.pos.set(0, 0)\n  }\n\n  /**\n   * Update state of the particle.\n   *\n   * Exits early if the particle's time is up.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.life \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Point.html":{"url":"interfaces/Point.html","title":"interface - Point","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/vec.ts\n        \n\n            \n                Description\n            \n            \n                Interface with x and y coordinates. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X axis coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y axis coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n  /** X axis coordinate */\n  x: number\n  /** Y axis coordinate */\n  y: number\n}\n\n/**\n * Simple 2D vector that provides vector math helpers.\n *\n * Most methods are chainable.\n *\n * ```typescript\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n```\n */\nexport class Vec implements Point {\n  /** X coordinate value. */\n  x: number\n  /** Y coordinate value. */\n  y: number\n\n  /**\n   * Creates a new Vec from the provided Vec.\n   *\n   * @param v Vec to copy into new Vec.\n   */\n  static from(v: Vec) {\n    return new Vec().copy(v)\n  }\n\n  /**\n   * Initialize Vec object.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the coordinates of the Vec.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  set(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Copies the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to copy values from.\n   */\n  copy(vec: Vec) {\n    const { x, y } = vec\n    return this.set(x, y)\n  }\n\n  /**\n   * Creates a cloned copy of the Vec.\n   */\n  clone() {\n    return Vec.from(this)\n  }\n\n  /**\n   * Adds the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to add values from.\n   */\n  add(vec: Vec) {\n    const { x, y } = vec\n\n    this.x += x\n    this.y += y\n\n    return this\n  }\n\n  /**\n   * Subtracts the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to subtract values from.\n   */\n  subtract(vec: Vec) {\n    const { x, y } = vec\n\n    this.x -= x\n    this.y -= y\n\n    return this\n  }\n\n  /**\n   * Multiplies the x and y values by the provided value.\n   *\n   * @param s The scalar value to multiply.\n   */\n  multiply(s: number) {\n    this.x *= s\n    this.y *= s\n\n    return this\n  }\n\n  /**\n   * Divides the x and y values by the provided value.\n   *\n   * @param s The scalar value to divide by.\n   */\n  divide(s: number) {\n    this.x /= s\n    this.y /= s\n\n    return this\n  }\n\n  /** Gets the magnitude of the Vec. */\n  mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /** Gets the normal of the Vec. */\n  normalize() {\n    const mag = this.mag()\n\n    if (mag > 0) {\n      this.divide(mag)\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the dot product of two Vecs.\n   *\n   * @param vec The Vec to get dot product from.\n   */\n  dot(vec: Vec) {\n    const{ x, y } = vec\n\n    return this.x * x + this.y * y\n  }\n\n  /**\n   * Custom string representation.\n   *\n   * @returns String formatted as \"(x, y)\"\n   */\n  toString() {\n    return `(${this.x}, ${this.y})`\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Property.html":{"url":"interfaces/Property.html","title":"interface - Property","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Property\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Property object in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the property. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the property. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value of the property. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rect.html":{"url":"classes/Rect.html","title":"class - Rect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/rect.ts\n        \n\n            \n                Description\n            \n            \n                Creates a rectangle for rendering.\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                pos\n                            \n                            \n                                style\n                            \n                            \n                                width\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, style: RectStyleOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/types/rect.ts:25\n                            \n                        \n\n                \n                    \n                            Initialize Rect object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height in pixels.\n\n                                                        \n                                                \n                                                \n                                                        style\n                                                  \n                                                        \n                                                                        RectStyleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Style options.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:18\n                            \n                        \n\n                \n                    \n                        Height of the rectangle in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:23\n                            \n                        \n\n                \n                    \n                        Position of the rectangle. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RectStyleOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:25\n                            \n                        \n\n                \n                    \n                        Style options for the rectangle. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/rect.ts:20\n                            \n                        \n\n                \n                    \n                        Width of the rectangle in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/rect.ts:49\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vec, Entity } from '.'\n\n/** Style options for a Rect. */\nexport interface RectStyleOptions {\n  /** The fill color. */\n  fill: string\n}\n\n/**\n * Creates a rectangle for rendering.\n *\n * ```typescript\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n```\n */\nexport class Rect extends Entity {\n  /** Height of the rectangle in pixels. */\n  height: number\n  /** Width of the rectangle in pixels. */\n  width: number\n\n  /** Position of the rectangle. */\n  pos: Vec\n  /** Style options for the rectangle. */\n  style: RectStyleOptions\n\n  /**\n   * Initialize Rect object.\n   *\n   * @param width Width in pixels.\n   * @param height Height in pixels.\n   * @param style Style options.\n   */\n  constructor(width: number, height: number,\n              style: RectStyleOptions = { fill: '#333' }) {\n    super()\n\n    this.height = height\n    this.width = width\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RectStyleOptions.html":{"url":"interfaces/RectStyleOptions.html","title":"interface - RectStyleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RectStyleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/rect.ts\n        \n\n            \n                Description\n            \n            \n                Style options for a Rect. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fill\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The fill color. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Vec, Entity } from '.'\n\n/** Style options for a Rect. */\nexport interface RectStyleOptions {\n  /** The fill color. */\n  fill: string\n}\n\n/**\n * Creates a rectangle for rendering.\n *\n * ```typescript\nconst testObj = new Rect(32, 32, { fill: '#f00' })\n```\n */\nexport class Rect extends Entity {\n  /** Height of the rectangle in pixels. */\n  height: number\n  /** Width of the rectangle in pixels. */\n  width: number\n\n  /** Position of the rectangle. */\n  pos: Vec\n  /** Style options for the rectangle. */\n  style: RectStyleOptions\n\n  /**\n   * Initialize Rect object.\n   *\n   * @param width Width in pixels.\n   * @param height Height in pixels.\n   * @param style Style options.\n   */\n  constructor(width: number, height: number,\n              style: RectStyleOptions = { fill: '#333' }) {\n    super()\n\n    this.height = height\n    this.width = width\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/renderer.ts\n        \n\n            \n                Description\n            \n            \n                Abstract class to extend for specific renderers. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canvasElement\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/renderer.ts:18\n                            \n                        \n\n                \n                    \n                            Abstract class, so not to be called directly. \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:11\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:13\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:9\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/renderer/renderer.ts:7\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/renderer.ts:52\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/renderer.ts:44\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        canvasElement\n                    \n                \n\n                \n                    \n                        getcanvasElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/renderer/renderer.ts:16\n                                \n                            \n                    \n                        \n                                Get the HTMLCanvasElement used for rendering. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Container } from '..'\nimport { Sprite } from '../types'\n\n/** Abstract class to extend for specific renderers. */\nexport abstract class Renderer {\n  /** Width of the canvas in pixels. */\n  protected width: number\n  /** Height of the canvas in pixels. */\n  protected height: number\n  /** Canvas element for rendering. */\n  protected canvas: HTMLCanvasElement\n  /** Containing element for the canvas. */\n  protected container: HTMLElement\n\n  /** Get the HTMLCanvasElement used for rendering. */\n  get canvasElement() {\n    return this.canvas\n  }\n\n  /** Abstract class, so not to be called directly. */\n  constructor(width: number, height: number, container: HTMLElement) {\n    this.width = width\n    this.height = height\n\n    this.canvas = document.createElement('canvas')\n    this.canvas.id = 'kilo-canvas'\n    this.canvas.width = width\n    this.canvas.height = height\n\n    const div = document.createElement('div')\n    div.id = 'kilo-container'\n    div.style.position = 'relative'\n    div.style.height = this.height + 'px'\n    div.style.width = this.width + 'px'\n    div.style.margin = '0 auto'\n\n    div.appendChild(this.canvas)\n    container.appendChild(div)\n\n    this.container = div\n  }\n\n  /** To be defined by concrete implementations. */\n  abstract render(container: Container, clear?: boolean): void\n\n  /**\n   * Determines if the provided entity is visible to the camera.\n   *\n   * @param entity Sprite to check for visibility.\n   * @param camera Camera to use when determining visibility.\n   */\n  protected isInCamera(entity: Sprite, camera: any) {\n    return entity.pos.x + entity.width >= -camera.pos.x &&\n      entity.pos.x = -camera.pos.y &&\n      entity.pos.y \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resolution.html":{"url":"interfaces/Resolution.html","title":"interface - Resolution","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resolution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/resolvers/wall-slide.ts\n        \n\n            \n                Description\n            \n            \n                The offsets to apply to resolve collisions, as well as the hit directions. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hits\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                    \n                                \n                                \n                                    \n                                        hits:         Hits\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hits\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Directions where collisions were detected. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correction needed in the x axis. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correction needed in the y axis. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Sprite } from '../types'\nimport { TileMap, Utils, TileSprite } from '..'\n\n/** Function used to provide collision resolver with walkable tile status. */\nexport type WalkableTest = (sprite: TileSprite, index: number) => boolean\n\n/** Directions where collisions are detected. */\nexport interface Hits {\n  /** Whether or not a collision was detected from above.  */\n  up: boolean\n  /** Whether or not a collision was detected from below.  */\n  down: boolean\n  /** Whether or not a collision was detected from the left.  */\n  left: boolean\n  /** Whether or not a collision was detected from the right.  */\n  right: boolean\n}\n\n/** The offsets to apply to resolve collisions, as well as the hit directions. */\nexport interface Resolution {\n  /** Correction needed in the x axis. */\n  x: number\n  /** Correction needed in the y axis. */\n  y: number\n  /** Directions where collisions were detected. */\n  hits: Hits\n}\n\n/**\n * Collision resolver that only prevents invalid movements.\n *\n * @param ent The Sprite entity to check.\n * @param map The TileMap to use for collision.\n * @param x Desired movement in the X axis.\n * @param y Desired movement in the Y axis.\n * @param walkableTest Callback function to test for walkable tiles.\n */\nexport function wallSlide(ent: Sprite, map: TileMap, x = 0, y = 0,\n                          walkableTest?: WalkableTest): Resolution {\n  let tiles: TileSprite[]\n  let tileEdge: number\n\n  const bounds = Utils.sprite.bounds(ent)\n  const hits = { up: false, down: false, left: false, right: false }\n\n  let xo = x\n  let yo = y\n\n  if (y !== 0) {\n    tiles = map.tilesAtCorners(bounds, 0, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(bl && br)) {\n      hits.down = true\n      tileEdge = tiles[2].pos.y - 1\n      yo = tileEdge - (bounds.y + bounds.height)\n    }\n  }\n\n  if (x !== 0) {\n    tiles = map.tilesAtCorners(bounds, xo, yo)\n\n    let walkables = [false, false, false, false]\n    if (walkableTest) {\n      for (let i = 0; i  0 && !(tr && br)) {\n      hits.right = true\n      tileEdge = tiles[1].pos.x - 1\n      xo = tileEdge - (bounds.x + bounds.width)\n    }\n  }\n\n  return { x: xo, y: yo, hits }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scene.html":{"url":"classes/Scene.html","title":"class - Scene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/scene.ts\n        \n\n            \n                Description\n            \n            \n                A unique Container with a reference to the game and controls,\nand a callback for the completion of the scene.\nTo be implemented as your unique scenes.\n\n            \n\n            \n                Extends\n            \n            \n                        Container\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                controls\n                            \n                            \n                                game\n                            \n                            \n                                onSceneComplete\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(game: Game, onSceneComplete: Function, controls?: Controls)\n                    \n                \n                        \n                            \n                                Defined in lib/scene.ts:16\n                            \n                        \n\n                \n                    \n                            Initialize Scene object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        game\n                                                  \n                                                        \n                                                                        Game\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to the game.\n\n                                                        \n                                                \n                                                \n                                                        onSceneComplete\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Function to call on scene completion.\n\n                                                        \n                                                \n                                                \n                                                        controls\n                                                  \n                                                        \n                                                                        Controls\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object with possible controls.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            controls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Controls\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:14\n                            \n                        \n\n                \n                    \n                        The game controls to be used. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            game\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Game\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:12\n                            \n                        \n\n                \n                    \n                        The game object. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSceneComplete\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/scene.ts:16\n                            \n                        \n\n                \n                    \n                        Function to call when the scene is completed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Container\n\n                                \n                            \n                        \n                            \n                                    Defined in         Container:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(child: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Remove a child object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to remove from the container.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:49\n\n                \n            \n\n\n            \n                \n                    Update each child in the container.\nAutomatically removes any child object marked as dead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Container\n\n                \n            \n            \n                \n                        Defined in         Container:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, Game } from '.'\nimport { Controls } from './controls/controls'\n\n/**\n * A unique {@link Container} with a reference to the game and controls,\n * and a callback for the completion of the scene.\n *\n * To be implemented as your unique scenes.\n */\nexport abstract class Scene extends Container {\n  /** The game object. */\n  game: Game\n  /** The game controls to be used. */\n  controls: Controls\n  /** Function to call when the scene is completed. */\n  onSceneComplete: Function\n\n  /**\n   * Initialize Scene object.\n   *\n   * @param game Reference to the game.\n   * @param onSceneComplete Function to call on scene completion.\n   * @param controls Object with possible controls.\n   */\n  constructor(game: Game, onSceneComplete: Function, controls?: Controls) {\n    super()\n\n    this.game = game\n    this.controls = controls\n\n    this.onSceneComplete = onSceneComplete\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Scripts.html":{"url":"interfaces/Scripts.html","title":"interface - Scripts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Scripts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/shader-program.ts\n        \n\n            \n                Description\n            \n            \n                Interface for WebGL shader script sources. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fragment\n                                \n                                \n                                        vertex\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fragment\n                                    \n                                \n                                \n                                    \n                                        fragment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fragment shader source. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vertex\n                                    \n                                \n                                \n                                    \n                                        vertex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vertex shader source. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Scripts {\n  /** Vertex shader source. */\n  vertex: string\n  /** Fragment shader source. */\n  fragment: string\n}\n\n/** Thin wrapper around WebGLProgram, and WebGLShader to simplify usage. */\nexport class ShaderProgram {\n  private gl: WebGLRenderingContext\n  private _program: WebGLProgram\n  private attributes: { [name: string]: number }\n  private uniforms: { [name: string]: WebGLUniformLocation }\n  private name: string\n\n  /** Gets the compiled WebGLProgram. */\n  get program() {\n    return this._program\n  }\n\n  /**\n   * Initialize ShaderProgram object.\n   *\n   * @param gl WebGLRenderingContext to use for the shaders and program.\n   * @param scripts Sources for both vertex and fragment shaders to be used.\n   * @param name The name of the program (useful in debugging).\n   */\n  constructor(gl: WebGLRenderingContext, scripts: Scripts, name = 'default') {\n    this.gl = gl\n    this.name = name\n    this.attributes = {}\n    this.uniforms = {}\n\n    this.load(scripts.vertex, scripts.fragment)\n  }\n\n  /**\n   * Gets the attribute location for the provided name.\n   *\n   * @param name Name of the attribute to locate.\n   *\n   * @throws Error if no attribute with the provided name.\n   */\n  getAttribLocation(name: string) {\n    if (this.attributes[name] === undefined) {\n      throw new Error(`Unknown attribute ${name} in shader program ${this.name}.`)\n    }\n\n    return this.attributes[name]\n  }\n\n  /**\n   * Gets the uniform location for the provided name.\n   *\n   * @param name Name of the uniform to locate.\n   *\n   * @throws Error if no uniform with the provided name.\n   */\n  getUniformLocation(name: string) {\n    if (this.uniforms[name] === undefined) {\n      throw new Error(`Unknown uniform ${name} in shader program ${this.name}.`)\n    }\n\n    return this.uniforms[name]\n  }\n\n  /**\n   * Loads the provided sources into a compiled program.\n   *\n   * @param vertexSource Source for the vertex shader.\n   * @param fragmentSource Source for the fragment shader.\n   */\n  protected load(vertexSource: string, fragmentSource: string) {\n    const vertexShader =\n      this.loadShader(vertexSource, this.gl.VERTEX_SHADER)\n    const fragmentShader =\n      this.loadShader(fragmentSource, this.gl.FRAGMENT_SHADER)\n\n    this.createProgram(vertexShader, fragmentShader)\n    this.initWebGl()\n  }\n\n  private initWebGl() {\n    const { gl } = this\n\n    gl.clearColor(0, 0, 0, 1)\n\n    gl.enable(gl.BLEND)\n    gl.blendEquation(gl.FUNC_ADD)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.DEPTH_TEST)\n  }\n\n  private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const { gl } = this\n    this._program = gl.createProgram()\n\n    gl.attachShader(this.program, vertexShader)\n    gl.attachShader(this.program, fragmentShader)\n    gl.linkProgram(this.program)\n\n    const success = gl.getProgramParameter(this.program, gl.LINK_STATUS)\n    if (!success) {\n      const message = gl.getProgramInfoLog(this.program)\n      gl.deleteProgram(this.program)\n\n      throw new Error(message)\n    }\n\n    this.findAttributes()\n    this.findUniforms()\n  }\n\n  private loadShader(source: string, shaderType: number): WebGLShader {\n    const { gl } = this\n    const shader = gl.createShader(shaderType)\n\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n      const message = gl.getShaderInfoLog(shader)\n      gl.deleteShader(shader)\n\n      throw new Error(message)\n    }\n\n    return shader\n  }\n\n  private findAttributes() {\n    const { gl, program } = this\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShaderProgram.html":{"url":"classes/ShaderProgram.html","title":"class - ShaderProgram","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShaderProgram\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl/shader-program.ts\n        \n\n            \n                Description\n            \n            \n                Thin wrapper around WebGLProgram, and WebGLShader to simplify usage. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAttribLocation\n                            \n                            \n                                getUniformLocation\n                            \n                            \n                                    Protected\n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    program\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gl: WebGLRenderingContext, scripts: Scripts, name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl/shader-program.ts:20\n                            \n                        \n\n                \n                    \n                            Initialize ShaderProgram object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gl\n                                                  \n                                                        \n                                                                    WebGLRenderingContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                WebGLRenderingContext to use for the shaders and program.\n\n                                                        \n                                                \n                                                \n                                                        scripts\n                                                  \n                                                        \n                                                                        Scripts\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sources for both vertex and fragment shaders to be used.\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the program (useful in debugging).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAttribLocation\n                        \n                        \n                    \n                \n            \n            \n                \ngetAttribLocation(name: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:45\n                \n            \n\n\n            \n                \n                    Gets the attribute location for the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the attribute to locate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUniformLocation\n                        \n                        \n                    \n                \n            \n            \n                \ngetUniformLocation(name: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:60\n                \n            \n\n\n            \n                \n                    Gets the uniform location for the provided name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the uniform to locate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(vertexSource: string, fragmentSource: string)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl/shader-program.ts:74\n                \n            \n\n\n            \n                \n                    Loads the provided sources into a compiled program.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexSource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Source for the vertex shader.\n\n                                    \n                                \n                                \n                                    fragmentSource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Source for the fragment shader.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        program\n                    \n                \n\n                \n                    \n                        getprogram()\n                    \n                \n                            \n                                \n                                    Defined in lib/renderer/webgl/shader-program.ts:18\n                                \n                            \n                    \n                        \n                                Gets the compiled WebGLProgram. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export interface Scripts {\n  /** Vertex shader source. */\n  vertex: string\n  /** Fragment shader source. */\n  fragment: string\n}\n\n/** Thin wrapper around WebGLProgram, and WebGLShader to simplify usage. */\nexport class ShaderProgram {\n  private gl: WebGLRenderingContext\n  private _program: WebGLProgram\n  private attributes: { [name: string]: number }\n  private uniforms: { [name: string]: WebGLUniformLocation }\n  private name: string\n\n  /** Gets the compiled WebGLProgram. */\n  get program() {\n    return this._program\n  }\n\n  /**\n   * Initialize ShaderProgram object.\n   *\n   * @param gl WebGLRenderingContext to use for the shaders and program.\n   * @param scripts Sources for both vertex and fragment shaders to be used.\n   * @param name The name of the program (useful in debugging).\n   */\n  constructor(gl: WebGLRenderingContext, scripts: Scripts, name = 'default') {\n    this.gl = gl\n    this.name = name\n    this.attributes = {}\n    this.uniforms = {}\n\n    this.load(scripts.vertex, scripts.fragment)\n  }\n\n  /**\n   * Gets the attribute location for the provided name.\n   *\n   * @param name Name of the attribute to locate.\n   *\n   * @throws Error if no attribute with the provided name.\n   */\n  getAttribLocation(name: string) {\n    if (this.attributes[name] === undefined) {\n      throw new Error(`Unknown attribute ${name} in shader program ${this.name}.`)\n    }\n\n    return this.attributes[name]\n  }\n\n  /**\n   * Gets the uniform location for the provided name.\n   *\n   * @param name Name of the uniform to locate.\n   *\n   * @throws Error if no uniform with the provided name.\n   */\n  getUniformLocation(name: string) {\n    if (this.uniforms[name] === undefined) {\n      throw new Error(`Unknown uniform ${name} in shader program ${this.name}.`)\n    }\n\n    return this.uniforms[name]\n  }\n\n  /**\n   * Loads the provided sources into a compiled program.\n   *\n   * @param vertexSource Source for the vertex shader.\n   * @param fragmentSource Source for the fragment shader.\n   */\n  protected load(vertexSource: string, fragmentSource: string) {\n    const vertexShader =\n      this.loadShader(vertexSource, this.gl.VERTEX_SHADER)\n    const fragmentShader =\n      this.loadShader(fragmentSource, this.gl.FRAGMENT_SHADER)\n\n    this.createProgram(vertexShader, fragmentShader)\n    this.initWebGl()\n  }\n\n  private initWebGl() {\n    const { gl } = this\n\n    gl.clearColor(0, 0, 0, 1)\n\n    gl.enable(gl.BLEND)\n    gl.blendEquation(gl.FUNC_ADD)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.DEPTH_TEST)\n  }\n\n  private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const { gl } = this\n    this._program = gl.createProgram()\n\n    gl.attachShader(this.program, vertexShader)\n    gl.attachShader(this.program, fragmentShader)\n    gl.linkProgram(this.program)\n\n    const success = gl.getProgramParameter(this.program, gl.LINK_STATUS)\n    if (!success) {\n      const message = gl.getProgramInfoLog(this.program)\n      gl.deleteProgram(this.program)\n\n      throw new Error(message)\n    }\n\n    this.findAttributes()\n    this.findUniforms()\n  }\n\n  private loadShader(source: string, shaderType: number): WebGLShader {\n    const { gl } = this\n    const shader = gl.createShader(shaderType)\n\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n      const message = gl.getShaderInfoLog(shader)\n      gl.deleteShader(shader)\n\n      throw new Error(message)\n    }\n\n    return shader\n  }\n\n  private findAttributes() {\n    const { gl, program } = this\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sound.html":{"url":"classes/Sound.html","title":"class - Sound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound.ts\n        \n\n            \n                Description\n            \n            \n                Provides sounds for your game!\nExample\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                playing\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    volume\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string, options: SoundOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound.ts:37\n                            \n                        \n\n                \n                    \n                            Initialize Sound object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Source for the sound.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SoundOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initial options for the sound.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            playing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/sound.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not the sound is currently playing. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(overrides?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound.ts:70\n                \n            \n\n\n            \n                \n                    Play the sound from the beginning.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overrides\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Overriding options for the sound.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound.ts:81\n                \n            \n\n\n            \n                \n                    Stop the sound from playing. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        volume\n                    \n                \n\n                \n                    \n                        getvolume()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/sound.ts:30\n                                \n                            \n                    \n                        \n                                Gets the current volume setting. \n\n\n                        \n                    \n\n                \n                    \n                        setvolume(volume)\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/sound.ts:35\n                                \n                            \n                    \n                        \n                                Sets the volume of the sound. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            volume\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Assets } from '../assets'\n\n/** Options for a Sound object. */\nexport interface SoundOptions {\n  /** Volume of the sound (from 0 to 1). */\n  volume: number,\n  /** Whether or not the sound loops. */\n  loop: boolean\n}\n\n/**\n * Provides sounds for your game!\n *\n * ### Example\n * ```typescript\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n```\n */\nexport class Sound {\n  /** Whether or not the sound is currently playing. */\n  playing: boolean\n\n  private options: SoundOptions\n  private audio: HTMLAudioElement\n\n  /** Gets the current volume setting. */\n  get volume() {\n    return this.audio.volume\n  }\n\n  /** Sets the volume of the sound. */\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume\n  }\n\n  /**\n   * Initialize Sound object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   */\n  constructor(src: string, options: SoundOptions = { volume: 1, loop: false }) {\n    this.playing = false\n    this.options = options\n\n    const assets = new Assets()\n    const audio = assets.sound(src)\n\n    audio.loop = options.loop\n\n    audio.addEventListener('error', () => {\n      throw Error(`Error loading audio: ${src}`)\n    }, false)\n\n    audio.addEventListener('ended', () => {\n      this.playing = false\n    }, false)\n\n    this.audio = audio\n  }\n\n  /**\n   * Play the sound from the beginning.\n   *\n   * @param overrides Overriding options for the sound.\n   */\n  play(overrides?: SoundOptions) {\n    const opts = Object.assign({ time: 0 }, this.options, overrides)\n\n    this.audio.volume = opts.volume\n    this.audio.currentTime = opts.time\n\n    this.audio.play()\n    this.playing = true\n  }\n\n  /** Stop the sound from playing. */\n  stop() {\n    this.audio.pause()\n    this.playing = false\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SoundGroup.html":{"url":"classes/SoundGroup.html","title":"class - SoundGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SoundGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound-group.ts\n        \n\n            \n                Description\n            \n            \n                Plays a random sound from an array of sounds.\nExample\nconst ding = new SoundGroup([\n  new Sound('assets/sounds/ding1.ogg'),\n  new Sound('assets/sounds/ding2.ogg'),\n  new Sound('assets/sounds/ding3.ogg'),\n  new Sound('assets/sounds/ding4.ogg')\n])\n\n// When one of the sounds should play.\nding.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sounds: Sound[])\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound-group.ts:21\n                            \n                        \n\n                \n                    \n                            Initialize SoundGroup object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sounds\n                                                  \n                                                        \n                                                                        Sound[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Array of sounds to select from on play.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(opts?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-group.ts:37\n                \n            \n\n\n            \n                \n                    Play a random sound from the group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Overriding options for the sound.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-group.ts:42\n                \n            \n\n\n            \n                \n                    Stop all sounds in the group from playing. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sound, SoundOptions } from './sound'\nimport { math } from '../utils'\n\n/**\n * Plays a random sound from an array of sounds.\n *\n * ### Example\n * ```typescript\nconst ding = new SoundGroup([\n  new Sound('assets/sounds/ding1.ogg'),\n  new Sound('assets/sounds/ding2.ogg'),\n  new Sound('assets/sounds/ding3.ogg'),\n  new Sound('assets/sounds/ding4.ogg')\n])\n\n// When one of the sounds should play.\nding.play()\n```\n */\nexport class SoundGroup {\n  private sounds: Sound[]\n\n  /**\n   * Initialize SoundGroup object.\n   *\n   * @param sounds Array of sounds to select from on play.\n   */\n  constructor(sounds: Sound[]) {\n    this.sounds = sounds\n  }\n\n  /**\n   * Play a random sound from the group.\n   *\n   * @param opts Overriding options for the sound.\n   */\n  play(opts?: SoundOptions) {\n    math.randOneFrom(this.sounds).play(opts)\n  }\n\n  /** Stop all sounds in the group from playing. */\n  stop() {\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoundOptions.html":{"url":"interfaces/SoundOptions.html","title":"interface - SoundOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoundOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound.ts\n        \n\n            \n                Description\n            \n            \n                Options for a Sound object. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        loop\n                                \n                                \n                                        volume\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        loop\n                                    \n                                \n                                \n                                    \n                                        loop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the sound loops. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Volume of the sound (from 0 to 1). \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Assets } from '../assets'\n\n/** Options for a Sound object. */\nexport interface SoundOptions {\n  /** Volume of the sound (from 0 to 1). */\n  volume: number,\n  /** Whether or not the sound loops. */\n  loop: boolean\n}\n\n/**\n * Provides sounds for your game!\n *\n * ### Example\n * ```typescript\nconst ding = new Sound('assets/sounds/ding.ogg')\n\n// When the sound should play.\nding.play()\n```\n */\nexport class Sound {\n  /** Whether or not the sound is currently playing. */\n  playing: boolean\n\n  private options: SoundOptions\n  private audio: HTMLAudioElement\n\n  /** Gets the current volume setting. */\n  get volume() {\n    return this.audio.volume\n  }\n\n  /** Sets the volume of the sound. */\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume\n  }\n\n  /**\n   * Initialize Sound object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   */\n  constructor(src: string, options: SoundOptions = { volume: 1, loop: false }) {\n    this.playing = false\n    this.options = options\n\n    const assets = new Assets()\n    const audio = assets.sound(src)\n\n    audio.loop = options.loop\n\n    audio.addEventListener('error', () => {\n      throw Error(`Error loading audio: ${src}`)\n    }, false)\n\n    audio.addEventListener('ended', () => {\n      this.playing = false\n    }, false)\n\n    this.audio = audio\n  }\n\n  /**\n   * Play the sound from the beginning.\n   *\n   * @param overrides Overriding options for the sound.\n   */\n  play(overrides?: SoundOptions) {\n    const opts = Object.assign({ time: 0 }, this.options, overrides)\n\n    this.audio.volume = opts.volume\n    this.audio.currentTime = opts.time\n\n    this.audio.play()\n    this.playing = true\n  }\n\n  /** Stop the sound from playing. */\n  stop() {\n    this.audio.pause()\n    this.playing = false\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SoundPool.html":{"url":"classes/SoundPool.html","title":"class - SoundPool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SoundPool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/sound-pool.ts\n        \n\n            \n                Description\n            \n            \n                A pool of sound objects to allow playing multiples of the same sound.\nExample\nconst dings = new SoundPool('assets/sounds/ding.ogg')\n\n// When the sound should play (and may already be playing).\ndings.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string, poolSize: number, options: SoundOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/sound-pool.ts:16\n                            \n                        \n\n                \n                    \n                            Initialize SoundPool object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Source for the sound.\n\n                                                        \n                                                \n                                                \n                                                        poolSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Number of sound instances in the pool.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SoundOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initial options for the sound.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay(options?: SoundOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-pool.ts:40\n                \n            \n\n\n            \n                \n                    Play the next sound in the pool.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SoundOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/sound-pool.ts:47\n                \n            \n\n\n            \n                \n                    Stop all sounds in the pool. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Sound, SoundOptions } from './sound'\n\n/**\n * A pool of sound objects to allow playing multiples of the same sound.\n *\n * ### Example\n * ```typescript\nconst dings = new SoundPool('assets/sounds/ding.ogg')\n\n// When the sound should play (and may already be playing).\ndings.play()\n```\n */\nexport class SoundPool {\n  private count: number\n  private sounds: Sound[]\n\n  /**\n   * Initialize SoundPool object.\n   *\n   * @param src Source for the sound.\n   * @param options Initial options for the sound.\n   * @param poolSize Number of sound instances in the pool.\n   */\n  constructor(src: string, poolSize = 3,\n              options: SoundOptions = { volume: 1, loop: false }) {\n    this.count = 0\n    this.sounds = []\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sprite.html":{"url":"classes/Sprite.html","title":"class - Sprite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sprite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/sprite.ts\n        \n\n            \n                Description\n            \n            \n                An entity with additional properties for collision testing and display.\nExample\n// A 32x32 image is loaded into a texture, then the sprite\n// is created from that texture\nconst texture = new Texture('assets/images/bullet.png')\nconst bullet = new Sprite(texture)\n\n// Can also be combined into one line, e.g.\n// const bullet = new Sprite(new Texture('assets/images/bullet.png'))\n\n// Properties can then be set on the sprite.\nbullet.hitBox.set(4, 2, 16, 12)\nbullet.anchor.set(16, 16)\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hitBox\n                            \n                            \n                                    Public\n                                rotation\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    texture\n                                \n                                \n                                    anchor\n                                \n                                \n                                    pivot\n                                \n                                \n                                    height\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(texture: Texture)\n                    \n                \n                        \n                            \n                                Defined in lib/types/sprite.ts:68\n                            \n                        \n\n                \n                    \n                            Initialize Sprite object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        texture\n                                                  \n                                                        \n                                                                        Texture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The texture for the sprite.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hitBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HitBox\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:23\n                            \n                        \n\n                \n                    \n                        The hitbox of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rotation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/sprite.ts:25\n                            \n                        \n\n                \n                    \n                        The rotation of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/sprite.ts:94\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        texture\n                    \n                \n\n                \n                    \n                        gettexture()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:36\n                                \n                            \n                    \n                        \n                                Gets the texture. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        anchor\n                    \n                \n\n                \n                    \n                        getanchor()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:41\n                                \n                            \n                    \n                        \n                                Gets the anchor point. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pivot\n                    \n                \n\n                \n                    \n                        getpivot()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:46\n                                \n                            \n                    \n                        \n                                Gets the pivot point (used for rotations). \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:51\n                                \n                            \n                    \n                        \n                                Gets the height. \n\n\n                        \n                    \n\n                \n                    \n                        setheight(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:61\n                                \n                            \n                    \n                        \n                                Sets the height. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:56\n                                \n                            \n                    \n                        \n                                Gets the width. \n\n\n                        \n                    \n\n                \n                    \n                        setwidth(value)\n                    \n                \n                            \n                                \n                                    Defined in lib/types/sprite.ts:66\n                                \n                            \n                    \n                        \n                                Sets the width. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Entity, Vec, Texture, HitBox } from '.'\n\n/**\n * An entity with additional properties for collision testing and display.\n *\n * ### Example\n * ```typescript\n// A 32x32 image is loaded into a texture, then the sprite\n// is created from that texture\nconst texture = new Texture('assets/images/bullet.png')\nconst bullet = new Sprite(texture)\n\n// Can also be combined into one line, e.g.\n// const bullet = new Sprite(new Texture('assets/images/bullet.png'))\n\n// Properties can then be set on the sprite.\nbullet.hitBox.set(4, 2, 16, 12)\nbullet.anchor.set(16, 16)\n```\n */\nexport class Sprite extends Entity {\n  /** The hitbox of the sprite. */\n  public hitBox: HitBox\n  /** The rotation of the sprite. */\n  public rotation: number\n\n  private _texture: Texture\n\n  private _anchor: Vec\n  private _pivot: Vec\n\n  private _height: number\n  private _width: number\n\n  /** Gets the texture. */\n  get texture() {\n    return this._texture\n  }\n\n  /** Gets the anchor point. */\n  get anchor() {\n    return this._anchor\n  }\n\n  /** Gets the pivot point (used for rotations). */\n  get pivot() {\n    return this._pivot\n  }\n\n  /** Gets the height. */\n  get height() {\n    return this._height\n  }\n\n  /** Gets the width. */\n  get width() {\n    return this._width\n  }\n\n  /** Sets the height. */\n  set height(value) {\n    this._height = value\n  }\n\n  /** Sets the width. */\n  set width(value) {\n    this._width = value\n  }\n\n  /**\n   * Initialize Sprite object.\n   *\n   * @param texture The texture for the sprite.\n   */\n  constructor(texture: Texture) {\n    super()\n\n    this._texture = texture\n    this._anchor = new Vec()\n    this._pivot = new Vec()\n    this._height = 0\n    this._width = 0\n\n    this.hitBox = new HitBox(0, 0, 0, 0)\n    this.rotation = 0\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/state.ts\n        \n\n            \n                Description\n            \n            \n                Tracks state as provided, and provides information on status of the current\nstate. Also allows transitioning to a prior state from a temporary state\n(e.g. a pause dialog back to game play).\nExample\nenum GameState {\n  Ready,\n  Playing,\n  Paused,\n  GameOver\n}\n\n// In the constructor of whatever needs state.\nthis.state = new State(GameState.Ready)\n\n// In the update of the scene/object/whatever.\nthis.state.update(dt)\n\nswitch (this.state) {\n  case GameState.Ready:\n    if (this.state.first) {\n      console.log('First frame of this state')\n    }\n\n    // Go to Playing state after 1.5 seconds\n    if (this.state.time > 1.5) {\n      this.state.set(GameState.Playing)\n    }\n  break\n\n  default:\n    console.log(this.state.get())\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first\n                            \n                            \n                                time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                get\n                            \n                            \n                                is\n                            \n                            \n                                isIn\n                            \n                            \n                                set\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: EnumType)\n                    \n                \n                        \n                            \n                                Defined in lib/state.ts:47\n                            \n                        \n\n                \n                    \n                            Initialize State object.\nExample\nconst state = new State(MyEnum.StateOne)\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                    EnumType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The initial state to set.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            first\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:42\n                            \n                        \n\n                \n                    \n                        Whether this is the first frame of the current state. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/state.ts:40\n                            \n                        \n\n                \n                    \n                        Number of seconds in the current state. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            back\n                        \n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:64\n                \n            \n\n\n            \n                \n                    Return to the previous state (if there is one). \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:89\n                \n            \n\n\n            \n                \n                    Get the current state. \n\n\n                    \n                        Returns :     EnumType\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            is\n                        \n                        \n                    \n                \n            \n            \n                \nis(state: EnumType)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:111\n                \n            \n\n\n            \n                \n                    Whether the current state is the one provided.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            EnumType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State to check for.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isIn\n                        \n                        \n                    \n                \n            \n            \n                \nisIn(...states: EnumType[])\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:119\n                \n            \n\n\n            \n                \n                    Whether the current state is one of the provided states.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    states\n                                    \n                                            EnumType[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of possible states.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(state: EnumType)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:79\n                \n            \n\n\n            \n                \n                    Set the current state and store the previous state to allow going back.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            EnumType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state to change to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/state.ts:100\n                \n            \n\n\n            \n                \n                    Update the state.\nShould be called in parent object's update function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class State {\n  /** Number of seconds in the current state. */\n  time: number\n  /** Whether this is the first frame of the current state. */\n  first: boolean\n\n  private last: EnumType\n  private lastTime: number\n  private state: EnumType\n  private justSetState: boolean\n\n  /**\n   * Initialize State object.\n   *\n   * ### Example\n   * ```typescript\nconst state = new State(MyEnum.StateOne)\n```\n   *\n   * @param state The initial state to set.\n   */\n  constructor(state: EnumType) {\n    this.set(state)\n  }\n\n  /** Return to the previous state (if there is one). */\n  back() {\n    if (this.last === undefined) return\n\n    this.state = this.last\n    this.last = null\n\n    this.time = this.lastTime\n    this.justSetState = false\n  }\n\n  /**\n   * Set the current state and store the previous state to allow going back.\n   *\n   * @param state The new state to change to.\n   */\n  set(state: EnumType) {\n    this.last = this.state\n    this.lastTime = this.time || 0\n\n    this.state = state\n    this.time = 0\n    this.justSetState = true\n  }\n\n  /** Get the current state. */\n  get() {\n    return this.state\n  }\n\n  /**\n   * Update the state.\n   *\n   * Should be called in parent object's update function.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    this.first = this.justSetState\n    this.time += this.first ? 0 : dt\n    this.justSetState = false\n  }\n\n  /**\n   * Whether the current state is the one provided.\n   *\n   * @param state State to check for.\n   */\n  is(state: EnumType) {\n    return this.state === state\n  }\n\n  /**\n   * Whether the current state is one of the provided states.\n   * @param states Array of possible states.\n   */\n  isIn(...states: EnumType[]) {\n    let found = false\n\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Text.html":{"url":"classes/Text.html","title":"class - Text","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Text\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/text.ts\n        \n\n            \n                Description\n            \n            \n                Displays text on the canvas.\nWhen using WebGL for rendering a second canvas is used for text.\nExample\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n            \n\n            \n                Extends\n            \n            \n                        Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                style\n                            \n                            \n                                text\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(text: string, style: TextOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/types/text.ts:28\n                            \n                        \n\n                \n                    \n                            Initialize Text object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The text to display.\n\n                                                        \n                                                \n                                                \n                                                        style\n                                                  \n                                                        \n                                                                        TextOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The styles used for the text.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TextOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/text.ts:28\n                            \n                        \n\n                \n                    \n                        The styles used for the text. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/text.ts:26\n                            \n                        \n\n                \n                    \n                        The text to display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/text.ts:49\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity } from '.'\n\n/** Options for text display. */\nexport interface TextOptions {\n  /** The font to use. */\n  font: string,\n  /** The text fill color. */\n  fill: string,\n  /** Alignment for the text. */\n  align?: CanvasTextAlign\n}\n\n/**\n * Displays text on the canvas.\n *\n * When using WebGL for rendering a second canvas is used for text.\n *\n * ### Example\n * ```typescript\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n```\n */\nexport class Text extends Entity {\n  /** The text to display. */\n  text: string\n  /** The styles used for the text. */\n  style: TextOptions\n\n  /**\n   * Initialize Text object.\n   *\n   * @param text The text to display.\n   * @param style The styles used for the text.\n   */\n  constructor(text: string, style: TextOptions) {\n    super()\n\n    this.text = text\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextOptions.html":{"url":"interfaces/TextOptions.html","title":"interface - TextOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/text.ts\n        \n\n            \n                Description\n            \n            \n                Options for text display. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        align\n                                \n                                \n                                        fill\n                                \n                                \n                                        font\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        align\n                                    \n                                \n                                \n                                    \n                                        align:         CanvasTextAlign\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CanvasTextAlign\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Alignment for the text. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text fill color. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        font\n                                    \n                                \n                                \n                                    \n                                        font:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The font to use. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Entity } from '.'\n\n/** Options for text display. */\nexport interface TextOptions {\n  /** The font to use. */\n  font: string,\n  /** The text fill color. */\n  fill: string,\n  /** Alignment for the text. */\n  align?: CanvasTextAlign\n}\n\n/**\n * Displays text on the canvas.\n *\n * When using WebGL for rendering a second canvas is used for text.\n *\n * ### Example\n * ```typescript\nconst text = new Text('Hello world.', { '20px monospace', '#333' })\ntext.pos.set(20, 20)\n```\n */\nexport class Text extends Entity {\n  /** The text to display. */\n  text: string\n  /** The styles used for the text. */\n  style: TextOptions\n\n  /**\n   * Initialize Text object.\n   *\n   * @param text The text to display.\n   * @param style The styles used for the text.\n   */\n  constructor(text: string, style: TextOptions) {\n    super()\n\n    this.text = text\n    this.style = style\n  }\n\n  /**\n   * Empty implementation from extending {@link Entity}.\n   *\n   * @param _ Not used.\n   * @param __ Not used.\n   */\n  update(_: number, __: number) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Texture.html":{"url":"classes/Texture.html","title":"class - Texture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Texture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/texture.ts\n        \n\n            \n                Description\n            \n            \n                Loads an image into an HTMLImageElement and provides access to it.\nExample\nconst texture = new Texture('assets/images/tilesheet.png')\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                img\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in lib/types/texture.ts:13\n                            \n                        \n\n                \n                    \n                            Initialize Texture object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Relative path to image file.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            img\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLImageElement\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/texture.ts:13\n                            \n                        \n\n                \n                    \n                        The loaded image. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Game } from '..'\n\n/**\n * Loads an image into an HTMLImageElement and provides access to it.\n *\n * ### Example\n * ```typescript\nconst texture = new Texture('assets/images/tilesheet.png')\n```\n */\nexport class Texture {\n  /** The loaded image. */\n  img: HTMLImageElement\n\n  /**\n   * Initialize Texture object.\n   *\n   * @param url Relative path to image file.\n   */\n  constructor(url: string) {\n    this.img = Game.assets.image(url)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tile.html":{"url":"interfaces/Tile.html","title":"interface - Tile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Tile in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the tile in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the tile. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the tile. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TileSprite.html":{"url":"classes/TileSprite.html","title":"class - TileSprite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TileSprite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tile-sprite.ts\n        \n\n            \n                Description\n            \n            \n                An extended Sprite that adds frame data, animations, and tile size.\n\n            \n\n            \n                Extends\n            \n            \n                        Sprite\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anims\n                            \n                            \n                                frame\n                            \n                            \n                                tileHeight\n                            \n                            \n                                tileWidth\n                            \n                            \n                                    Public\n                                hitBox\n                            \n                            \n                                    Public\n                                rotation\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(texture: Texture, width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in lib/tile-sprite.ts:26\n                            \n                        \n\n                \n                    \n                            Initialize TileSprite object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        texture\n                                                  \n                                                        \n                                                                        Texture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Texture to use for the sprite.\n\n                                                        \n                                                \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sprite width in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Sprite height in pixels.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anims\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Animations\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:11\n                            \n                        \n\n                \n                    \n                        Animations used by the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frame\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any | Point\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:9\n                            \n                        \n\n                \n                    \n                        The frame data. Should always have x and y properties. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:16\n                            \n                        \n\n                \n                    \n                        Height of the sprite in pixels \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tileWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/tile-sprite.ts:14\n                            \n                        \n\n                \n                    \n                        Width of the sprite in pixels \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hitBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HitBox\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:23\n\n                            \n                        \n\n                \n                    \n                        The hitbox of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rotation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:25\n\n                            \n                        \n\n                \n                    \n                        The rotation of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number, _: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/tile-sprite.ts:53\n                \n            \n\n\n            \n                \n                    Update the animations.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Sprite\n\n                \n            \n            \n                \n                        Defined in         Sprite:94\n\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/tile-sprite.ts:19\n                                \n                            \n                    \n                        \n                                Gets the width of the sprite in pixels, accounting for scale. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in lib/tile-sprite.ts:24\n                                \n                            \n                    \n                        \n                                Gets the height of the sprite in pixels, accounting for scale. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Animations } from '.'\nimport { Point, Sprite, Texture, Vec } from './types'\n\n/**\n * An extended {@link Sprite} that adds frame data, animations, and tile size.\n */\nexport class TileSprite extends Sprite {\n  /** The frame data. Should always have `x` and `y` properties. */\n  frame: any | Point\n  /** Animations used by the sprite. */\n  anims: Animations\n\n  /** Width of the sprite in pixels */\n  tileWidth: number\n  /** Height of the sprite in pixels */\n  tileHeight: number\n\n  /** Gets the width of the sprite in pixels, accounting for scale. */\n  get width () {\n    return this.tileWidth * Math.abs(this.scale.x)\n  }\n\n  /** Gets the height of the sprite in pixels, accounting for scale. */\n  get height () {\n    return this.tileHeight * Math.abs(this.scale.y)\n  }\n\n  /**\n   * Initialize TileSprite object.\n   *\n   * @param texture Texture to use for the sprite.\n   * @param width Sprite width in pixels.\n   * @param height Sprite height in pixels.\n   */\n  constructor(texture: Texture, width: number, height: number) {\n    super(texture)\n\n    this.tileWidth = width\n    this.tileHeight = height\n\n    this.frame = {}\n    this.frame.__proto__ = new Vec()\n\n    this.anims = new Animations(this.frame)\n  }\n\n  /**\n   * Update the animations.\n   *\n   * @param dt Delta time since last update.\n   * @param _ Not used\n   */\n  update(dt: number, _: number) {\n    this.anims.update(dt)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TiledMap.html":{"url":"interfaces/TiledMap.html","title":"interface - TiledMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TiledMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/tiled-parser.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a Tiled map object. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        levelIndex\n                                \n                                \n                                        mapHeight\n                                \n                                \n                                        mapWidth\n                                \n                                \n                                        tileHeight\n                                \n                                \n                                        tiles\n                                \n                                \n                                        tileWidth\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getObjectByName\n                                \n                                \n                                    getObjectsByType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObjectByName\n                        \n                        \n                    \n                \n            \n            \n                \ngetObjectByName(name: string, mandatory?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/utils/tiled-parser.ts:33\n                \n            \n\n\n            \n                \n                    Gets an object from the map by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of object to get.\n\n                                    \n                                \n                                \n                                    mandatory\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Whether a missing object is an error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Tiled.Object\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObjectsByType\n                        \n                        \n                    \n                \n            \n            \n                \ngetObjectsByType(type: string, mandatory?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in lib/utils/tiled-parser.ts:41\n                \n            \n\n\n            \n                \n                    Gets an array of objects from the map by type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type name of the objects to get.\n\n                                    \n                                \n                                \n                                    mandatory\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Whether no results is an error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Tiled.Object[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelIndex\n                                    \n                                \n                                \n                                    \n                                        levelIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Index of the level layer in tiles array. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mapHeight\n                                    \n                                \n                                \n                                    \n                                        mapHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mapWidth\n                                    \n                                \n                                \n                                    \n                                        mapWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the map in tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileHeight\n                                    \n                                \n                                \n                                    \n                                        tileHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tiles\n                                    \n                                \n                                \n                                    \n                                        tiles:         TileData[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TileData[][]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of arrays of tile objects. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileWidth\n                                    \n                                \n                                \n                                    \n                                        tileWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Point } from '../types'\n\n/** Type for tile data. */\nexport type TileData = {\n  [key: string]: any,\n  frame: Point,\n  x: number,\n  y: number\n}\n\n/** Interface for a Tiled map object. */\nexport interface TiledMap {\n  /** Width of a tile in pixels. */\n  tileWidth: number\n  /** Height of a tile in pixels. */\n  tileHeight: number\n  /** Width of the map in tiles. */\n  mapWidth: number\n  /** Height of the map in tiles. */\n  mapHeight: number\n  /** Array of arrays of tile objects. */\n  tiles: TileData[][]\n  /** Index of the level layer in tiles array. */\n  levelIndex: number\n\n  /**\n   * Gets an object from the map by name.\n   *\n   * @param name Name of object to get.\n   * @param mandatory Whether a missing object is an error.\n   */\n  getObjectByName(name: string, mandatory?: boolean): Tiled.Object\n\n  /**\n   * Gets an array of objects from the map by type.\n   *\n   * @param type Type name of the objects to get.\n   * @param mandatory Whether no results is an error.\n   */\n  getObjectsByType(type: string, mandatory?: boolean): Tiled.Object[]\n}\n\n/** Interface to add extra layers above or below the main level layer. */\nexport interface ExtraLayer {\n  /** Name of the layer to load. */\n  name: string\n  /** Whether the layer is rendered above the level or below. */\n  isAboveLevel: boolean\n}\n\n/**\n * @ignore\n */\nlet tileWidth: number\n/**\n * @ignore\n */\nlet tileHeight: number\n/**\n * @ignore\n */\nlet mapWidth: number\n/**\n * @ignore\n */\nlet mapHeight: number\n/**\n * @ignore\n */\nlet tilesPerRow: number\n/**\n * @ignore\n */\nlet levelIndex: number\n\n/**\n * @ignore\n */\nlet tileset: Tiled.Tileset\n/**\n * @ignore\n */\nlet layers: Tiled.Layer[]\n/**\n * @ignore\n */\nlet tilesets: Tiled.Tileset[]\n/**\n * @ignore\n */\nlet entities: Tiled.Object[]\n\n/**\n * Parses a Tiled map object into a simpler form.\n *\n * There must be at least two layers in the Tiled map:\n * * \"level\"    - containing the tiles for the level\n * * \"entities\" - containing at least one entity (usually player starting location)\n *\n * @param jsonObj Object from Tiled JSON export.\n */\nexport function tiledParser(jsonObj: Tiled.Map,\n                            extraLayers?: ExtraLayer[]): TiledMap {\n  tileWidth = jsonObj.tilewidth\n  tileHeight = jsonObj.tileheight\n  mapWidth = jsonObj.width\n  mapHeight = jsonObj.height\n  layers = jsonObj.layers\n  tilesets = jsonObj.tilesets\n\n  const levelLayer = getLayer('level')\n  const entitiesLayer = getLayer('entities')\n\n  tileset = getTileset()\n\n  if (!entitiesLayer.objects) {\n    throw new Error('Tiled Error: Missing entities objects.')\n  }\n\n  entities = []\n  for (let i = 0; i  {\n  let layer = undefined\n\n  if (!layers) {\n    throw new Error('Tiled Error: No layers found.')\n  }\n\n  for (let i = 0; i  {\n  const tiles: any[] = []\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === false)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  loadTiles(tiles, levelLayer)\n\n  if (extraLayers) {\n    extraLayers.filter(layer => layer.isAboveLevel === true)\n      .forEach(layer => {\n        loadTiles(tiles, getLayer(layer.name, false))\n      })\n  }\n\n  return tiles\n}\n\n/**\n * @ignore\n */\nconst loadTiles = (tiles: any[], layer: Tiled.Layer) => {\n  const index = tiles.push([]) - 1\n\n  if (!layer || !layer.data) {\n    return\n  }\n\n  if (layer.name === 'level') {\n    levelIndex = index\n  }\n\n  for (let i = 0; i  {\n  if (!tilesets || !tilesets[0]) {\n    throw new Error('Tiled Error: Missing tileset index 0.')\n  }\n\n  return tilesets[0]\n}\n\n/**\n * @ignore\n */\nconst getTileProps = (id: number) => {\n  const tmp: any = {}\n  let tile: any = undefined\n\n  if (!tileset.tiles) {\n    return tmp\n  }\n\n  for (let i = 0; i  {\n  const tmp = {\n    x: e.x,\n    y: e.y,\n    type: e.type,\n    name: e.name,\n    width: e.width,\n    height: e.height\n  }\n\n  if (e.properties) {\n    for (let i = 0; i  {\n  const es = []\n  for (let i = 0; i  {\n  let ent: any\n\n  for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tileset.html":{"url":"interfaces/Tileset.html","title":"interface - Tileset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tileset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/tiled.ts\n        \n\n            \n                Description\n            \n            \n                A Tileset in Tiled. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        columns\n                                \n                                \n                                        firstgid\n                                \n                                \n                                        image\n                                \n                                \n                                        imageheight\n                                \n                                \n                                        imagewidth\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                        tileheight\n                                \n                                \n                                            Optional\n                                        tiles\n                                \n                                \n                                        tilewidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                    \n                                \n                                \n                                    \n                                        columns:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of columns in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstgid\n                                    \n                                \n                                \n                                    \n                                        firstgid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The first global ID in the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Source image for the tiles. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageheight\n                                    \n                                \n                                \n                                    \n                                        imageheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of the image in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagewidth\n                                    \n                                \n                                \n                                    \n                                        imagewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the image in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:         Property[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Property[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Properties set on the tileset. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tileheight\n                                    \n                                \n                                \n                                    \n                                        tileheight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Height of a tile in pixels. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tiles\n                                    \n                                \n                                \n                                    \n                                        tiles:         Tile[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tile[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If set, an array of Tile data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tilewidth\n                                    \n                                \n                                \n                                    \n                                        tilewidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of a tile in pixels. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        declare namespace Tiled {\n  /** The Tiled map. */\n  interface Map {\n    /** Height of the map in tiles. */\n    height: number\n    /** Width of the map in tiles. */\n    width: number\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Layers in map. */\n    layers: Layer[]\n    /** Tilesets in the map. */\n    tilesets: Tileset[]\n\n    /** Properties set on the map. */\n    properties?: Property[]\n  }\n\n  /** A Property object in Tiled. */\n  interface Property {\n    /** The name of the property. */\n    name: string\n    /** The value of the property. */\n    value: string\n    /** The type of the property. */\n    type: string\n  }\n\n  /** A Tile in Tiled. */\n  interface Tile {\n    /** The ID of the tile in the tileset. */\n    id: number\n    /** The type of the tile. */\n    type: string\n\n    /** Properties set on the tile. */\n    properties?: Property[]\n  }\n\n  /** An Object in Tiled. */\n  interface Object {\n    /** The global ID of the object. */\n    gid: number\n    /** The local Id of the object. */\n    id: number\n\n    /** X value of the object. */\n    x: number\n    /** Y value of the object. */\n    y: number\n\n    /** Height in pixels. */\n    height: number\n    /** Width in pixels. */\n    width: number\n\n    /** Type of the object. */\n    type: string\n    /** Name of the object. */\n    name: string\n\n    /** Properties set on the object. */\n    properties?: Property[]\n  }\n\n  /** A Layer in Tiled. */\n  interface Layer {\n    /** The name of the layer. */\n    name: string\n    /** The type of the layer. */\n    type: string\n\n    /** The opacity of the layer. */\n    opacity: number\n\n    /** If a tile layer, this is an array of tile IDs. */\n    data?: number[]\n    /** If an object layer, this is an array of Objects. */\n    objects?: Tiled.Object[]\n    /** Properties set on the layer. */\n    properties?: Property[]\n  }\n\n  /** A Tileset in Tiled. */\n  interface Tileset {\n    /** Number of columns in the tileset. */\n    columns: number\n    /** The first global ID in the tileset. */\n    firstgid: number\n\n    /** Height of a tile in pixels. */\n    tileheight: number\n    /** Width of a tile in pixels. */\n    tilewidth: number\n\n    /** Source image for the tiles. */\n    image: string\n    /** Height of the image in pixels. */\n    imageheight: number\n    /** Width of the image in pixels. */\n    imagewidth: number\n\n    /** If set, an array of Tile data. */\n    tiles?: Tile[]\n    /** Properties set on the tileset. */\n    properties?: Property[]\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timer.html":{"url":"classes/Timer.html","title":"class - Timer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/timer.ts\n        \n\n            \n                Description\n            \n            \n                Countdown timer that calls a function on each tick, and optionally\non completion.\nExample\n// Moving a sprite into position on a game scene over 2 seconds,\n// with a half-second delay before starting.\nconst timer = new Timer((r: number) =>\n  (sprite.pos.y = elasticOut(r) * game.height - game.height / 1.6),\n  () => {}, 2, .5\n)\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dead\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(onTick: TickFunc, onDone?: Function, duration: number, delay: number)\n                    \n                \n                        \n                            \n                                Defined in lib/timer.ts:31\n                            \n                        \n\n                \n                    \n                            Initialize Timer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        onTick\n                                                  \n                                                        \n                                                                        TickFunc\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Function called every tick (core loop update).\n\n                                                        \n                                                \n                                                \n                                                        onDone\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function called on timer completion.\n\n                                                        \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds for the timer to run.\n\n                                                        \n                                                \n                                                \n                                                        delay\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Time in seconds to wait before starting timer.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:22\n                            \n                        \n\n                \n                    \n                        Used by core loop to remove the object when dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/timer.ts:24\n                            \n                        \n\n                \n                    \n                        Used by core loop to skip rendering. False, unless changed by user. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(dt: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/timer.ts:60\n                \n            \n\n\n            \n                \n                    Called by core loop each tick.\nUpdates internal state and calls onTick or onDone functions as needed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        type TickFunc = (r: number) => void\n\n/**\n * Countdown timer that calls a function on each tick, and optionally\n * on completion.\n *\n * ### Example\n * ```typescript\n// Moving a sprite into position on a game scene over 2 seconds,\n// with a half-second delay before starting.\nconst timer = new Timer((r: number) =>\n  (sprite.pos.y = elasticOut(r) * game.height - game.height / 1.6),\n  () => {}, 2, .5\n)\n```\n */\nexport class Timer {\n  /** Used by core loop to remove the object when dead. */\n  dead: boolean\n  /** Used by core loop to skip rendering. False, unless changed by user. */\n  visible: boolean\n\n  private elapsed: number\n  private duration: number\n  private delay: number\n\n  private onTick: Function\n  private onDone: Function\n\n  /**\n   * Initialize Timer object.\n   *\n   * @param duration Time in seconds for the timer to run.\n   * @param onTick Function called every tick (core loop update).\n   * @param onDone Function called on timer completion.\n   * @param delay Time in seconds to wait before starting timer.\n   */\n  constructor(onTick: TickFunc, onDone?: Function, duration = 1, delay = 0) {\n    this.elapsed = 0\n    this.duration = duration\n    this.delay = delay\n\n    this.dead = false\n    this.visible = false\n\n    this.onTick = onTick\n    this.onDone = onDone\n  }\n\n  /**\n   * Called by core loop each tick.\n   *\n   * Updates internal state and calls `onTick` or `onDone` functions as needed.\n   *\n   * @param dt Delta time since last update.\n   */\n  update(dt: number) {\n    if (this.delay > 0) {\n      this.delay -= dt\n      return\n    }\n\n    this.elapsed += dt\n    const ratio = this.elapsed / this.duration\n\n    if (ratio >= 1) {\n      this.onDone && this.onDone()\n      this.dead = true\n\n      return\n    }\n\n    this.onTick && this.onTick(ratio)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Trigger.html":{"url":"classes/Trigger.html","title":"class - Trigger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Trigger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/trigger.ts\n        \n\n            \n                Description\n            \n            \n                An area that invokes callbacks when an object enters and/or exits\n(as determined by collision check).\nExample\nconst door = new Trigger(\n  new HitBox(0, 0, 10, 10),\n  () => { console.log('Trigger entered.') },\n  () => { console.log('Trigger exited.') }\n)\n\n// In collision checks.\n\n// Sprite collides, call onEnter if first time.\nif (sprite.hit(player, door)) {\n  if (doorEntered) {\n    return\n  }\n\n  doorEntered = true\n  door.onEnter()\n\n  return\n}\n\n// Sprite does not collide, call onExit if previously entered.\nif (doorEntered) {\n  doorEntered = false\n  door.onExit()\n}\n            \n\n            \n                Extends\n            \n            \n                        Sprite\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hitBox\n                            \n                            \n                                    Public\n                                rotation\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                            \n                                alpha\n                            \n                            \n                                children\n                            \n                            \n                                dead\n                            \n                            \n                                pos\n                            \n                            \n                                scale\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onEnter\n                            \n                            \n                                onExit\n                            \n                            \n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                            \n                                add\n                            \n                            \n                                map\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    debug\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hitBox: HitBox, onEnter: Function, onExit: Function, debug)\n                    \n                \n                        \n                            \n                                Defined in lib/types/trigger.ts:38\n                            \n                        \n\n                \n                    \n                            Initialize Trigger object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        hitBox\n                                                  \n                                                        \n                                                                        HitBox\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The hitbox to use for the trigger.\n\n                                                        \n                                                \n                                                \n                                                        onEnter\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Callback used when the trigger area is entered.\n\n                                                        \n                                                \n                                                \n                                                        onExit\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Callback used when the trigger area is exited.\n\n                                                        \n                                                \n                                                \n                                                        debug\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether to display a debug rectangle for the trigger.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hitBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HitBox\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:23\n\n                            \n                        \n\n                \n                    \n                        The hitbox of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rotation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:25\n\n                            \n                        \n\n                \n                    \n                        The rotation of the sprite. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Sprite\n\n                                \n                            \n                        \n                            \n                                    Defined in         Sprite:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:11\n\n                            \n                        \n\n                \n                    \n                        The opacity of the entity (from 0 to 1) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:19\n\n                            \n                        \n\n                \n                    \n                        An array of child entities for recursive update/render. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dead\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:8\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is dead. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:14\n\n                            \n                        \n\n                \n                    \n                        Position of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Vec\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:16\n\n                            \n                        \n\n                \n                    \n                        Scale of the entity. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Entity\n\n                                \n                            \n                        \n                            \n                                    Defined in         Entity:6\n\n                            \n                        \n\n                \n                    \n                        Whether or not the entity is visible. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEnter\n                        \n                        \n                    \n                \n            \n            \n                \nonEnter(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/trigger.ts:73\n                \n            \n\n\n            \n                \n                    Call to trigger onEnter callback. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onExit\n                        \n                        \n                    \n                \n            \n            \n                \nonExit(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/trigger.ts:78\n                \n            \n\n\n            \n                \n                    Call to trigger onExit callback. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(_: number, __: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Sprite\n\n                \n            \n            \n                \n                        Defined in         Sprite:94\n\n                \n            \n\n\n            \n                \n                    Empty implementation from extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                                \n                                    __\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Not used.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Sprite\n\n                \n            \n            \n                \n                        Defined in         Sprite:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Sprite\n\n                \n            \n            \n                \n                        Defined in         Sprite:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Sprite\n\n                \n            \n            \n                \n                        Defined in         Sprite:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(child: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:52\n\n                \n            \n\n\n            \n                \n                    Adds a child object to the entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Child to add to the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            map\n                        \n                        \n                    \n                \n            \n            \n                \nmap(fn: (child: Partial,index: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:63\n\n                \n            \n\n\n            \n                \n                    Maps a function across all children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to call for each child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dt: number, t: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Entity\n\n                \n            \n            \n                \n                        Defined in         Entity:45\n\n                \n            \n\n\n            \n                \n                    Update method to be implemented by classes extending Entity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dt\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Delta time since last update.\n\n                                    \n                                \n                                \n                                    t\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timestamp in seconds.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        debug\n                    \n                \n\n\n                \n                    \n                        setdebug(val: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/types/trigger.ts:61\n                                \n                            \n                    \n                        \n                                Sets the debug state. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { HitBox, Rect, Sprite } from '.'\n\n/**\n * An area that invokes callbacks when an object enters and/or exits\n * (as determined by collision check).\n *\n * ### Example\n * ```typescript\nconst door = new Trigger(\n  new HitBox(0, 0, 10, 10),\n  () => { console.log('Trigger entered.') },\n  () => { console.log('Trigger exited.') }\n)\n\n// In collision checks.\n\n// Sprite collides, call onEnter if first time.\nif (sprite.hit(player, door)) {\n  if (doorEntered) {\n    return\n  }\n\n  doorEntered = true\n  door.onEnter()\n\n  return\n}\n\n// Sprite does not collide, call onExit if previously entered.\nif (doorEntered) {\n  doorEntered = false\n  door.onExit()\n}\n```\n */\nexport class Trigger extends Sprite {\n  private _onEnter: Function\n  private _onExit: Function\n\n  /**\n   * Initialize Trigger object.\n   *\n   * @param hitBox The hitbox to use for the trigger.\n   * @param onEnter Callback used when the trigger area is entered.\n   * @param onExit Callback used when the trigger area is exited.\n   * @param debug Whether to display a debug rectangle for the trigger.\n   */\n  constructor(hitBox: HitBox, onEnter: Function,\n              onExit: Function, debug = false) {\n    super(null)\n\n    this.hitBox.set(hitBox.x, hitBox.y, hitBox.width, hitBox.height)\n\n    this._onEnter = onEnter\n    this._onExit = onExit\n\n    this.debug = debug\n  }\n\n  /** Sets the debug state. */\n  set debug(val: boolean) {\n    if (!val) {\n      this.children.pop()\n      return\n    }\n\n    this.children.push(new Rect(this.hitBox.width,\n                                this.hitBox.height,\n                                { fill: 'rgba(255, 255, 0, .5)' }))\n  }\n\n  /** Call to trigger onEnter callback. */\n  onEnter(...args: any): any {\n    this._onEnter(...args)\n  }\n\n  /** Call to trigger onExit callback. */\n  onExit(...args: any): any {\n    this._onExit(...args)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vec.html":{"url":"classes/Vec.html","title":"class - Vec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/types/vec.ts\n        \n\n            \n                Description\n            \n            \n                Simple 2D vector that provides vector math helpers.\nMost methods are chainable.\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n            \n\n\n            \n                Implements\n            \n            \n                            Point\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                copy\n                            \n                            \n                                divide\n                            \n                            \n                                dot\n                            \n                            \n                                    Static\n                                from\n                            \n                            \n                                mag\n                            \n                            \n                                multiply\n                            \n                            \n                                normalize\n                            \n                            \n                                set\n                            \n                            \n                                subtract\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(x: number, y: number)\n                    \n                \n                        \n                            \n                                Defined in lib/types/vec.ts:34\n                            \n                        \n\n                \n                    \n                            Initialize Vec object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        x\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                X coordinate value.\n\n                                                        \n                                                \n                                                \n                                                        y\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Y coordinate value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/vec.ts:23\n                            \n                        \n\n                \n                    \n                        X coordinate value. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/types/vec.ts:25\n                            \n                        \n\n                \n                    \n                        Y coordinate value. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:82\n                \n            \n\n\n            \n                \n                    Adds the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to add values from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clone\n                        \n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:73\n                \n            \n\n\n            \n                \n                    Creates a cloned copy of the Vec.\n\n\n                    \n                        Returns :         Vec\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \ncopy(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:65\n                \n            \n\n\n            \n                \n                    Copies the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to copy values from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            divide\n                        \n                        \n                    \n                \n            \n            \n                \ndivide(s: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:122\n                \n            \n\n\n            \n                \n                    Divides the x and y values by the provided value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scalar value to divide by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dot\n                        \n                        \n                    \n                \n            \n            \n                \ndot(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:150\n                \n            \n\n\n            \n                \n                    Gets the dot product of two Vecs.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to get dot product from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            from\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    from(v: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:32\n                \n            \n\n\n            \n                \n                    Creates a new Vec from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Vec to copy into new Vec.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Vec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mag\n                        \n                        \n                    \n                \n            \n            \n                \nmag()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:130\n                \n            \n\n\n            \n                \n                    Gets the magnitude of the Vec. \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            multiply\n                        \n                        \n                    \n                \n            \n            \n                \nmultiply(s: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:110\n                \n            \n\n\n            \n                \n                    Multiplies the x and y values by the provided value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scalar value to multiply.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            normalize\n                        \n                        \n                    \n                \n            \n            \n                \nnormalize()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:135\n                \n            \n\n\n            \n                \n                    Gets the normal of the Vec. \n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:53\n                \n            \n\n\n            \n                \n                    Set the coordinates of the Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        X coordinate value.\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Y coordinate value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subtract\n                        \n                        \n                    \n                \n            \n            \n                \nsubtract(vec: Vec)\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:96\n                \n            \n\n\n            \n                \n                    Subtracts the x and y values from the provided Vec.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vec\n                                    \n                                                Vec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Vec to subtract values from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in lib/types/vec.ts:161\n                \n            \n\n\n            \n                \n                    Custom string representation.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        String formatted as \"(x, y)\"\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface Point {\n  /** X axis coordinate */\n  x: number\n  /** Y axis coordinate */\n  y: number\n}\n\n/**\n * Simple 2D vector that provides vector math helpers.\n *\n * Most methods are chainable.\n *\n * ```typescript\nconst vector1 = new Vec(4, 8)\nconst vector2 = Vec.from(vector1)\n\nvector1.add(vector2).multiply(3)\n```\n */\nexport class Vec implements Point {\n  /** X coordinate value. */\n  x: number\n  /** Y coordinate value. */\n  y: number\n\n  /**\n   * Creates a new Vec from the provided Vec.\n   *\n   * @param v Vec to copy into new Vec.\n   */\n  static from(v: Vec) {\n    return new Vec().copy(v)\n  }\n\n  /**\n   * Initialize Vec object.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the coordinates of the Vec.\n   *\n   * @param x X coordinate value.\n   * @param y Y coordinate value.\n   */\n  set(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Copies the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to copy values from.\n   */\n  copy(vec: Vec) {\n    const { x, y } = vec\n    return this.set(x, y)\n  }\n\n  /**\n   * Creates a cloned copy of the Vec.\n   */\n  clone() {\n    return Vec.from(this)\n  }\n\n  /**\n   * Adds the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to add values from.\n   */\n  add(vec: Vec) {\n    const { x, y } = vec\n\n    this.x += x\n    this.y += y\n\n    return this\n  }\n\n  /**\n   * Subtracts the x and y values from the provided Vec.\n   *\n   * @param vec The Vec to subtract values from.\n   */\n  subtract(vec: Vec) {\n    const { x, y } = vec\n\n    this.x -= x\n    this.y -= y\n\n    return this\n  }\n\n  /**\n   * Multiplies the x and y values by the provided value.\n   *\n   * @param s The scalar value to multiply.\n   */\n  multiply(s: number) {\n    this.x *= s\n    this.y *= s\n\n    return this\n  }\n\n  /**\n   * Divides the x and y values by the provided value.\n   *\n   * @param s The scalar value to divide by.\n   */\n  divide(s: number) {\n    this.x /= s\n    this.y /= s\n\n    return this\n  }\n\n  /** Gets the magnitude of the Vec. */\n  mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /** Gets the normal of the Vec. */\n  normalize() {\n    const mag = this.mag()\n\n    if (mag > 0) {\n      this.divide(mag)\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the dot product of two Vecs.\n   *\n   * @param vec The Vec to get dot product from.\n   */\n  dot(vec: Vec) {\n    const{ x, y } = vec\n\n    return this.x * x + this.y * y\n  }\n\n  /**\n   * Custom string representation.\n   *\n   * @returns String formatted as \"(x, y)\"\n   */\n  toString() {\n    return `(${this.x}, ${this.y})`\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VecEntity.html":{"url":"interfaces/VecEntity.html","title":"interface - VecEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VecEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/utils/physics.ts\n        \n\n            \n                Description\n            \n            \n                Interface for properties needed for physics calculations. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        acc\n                                \n                                \n                                        mass\n                                \n                                \n                                        pos\n                                \n                                \n                                        vel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        acc\n                                    \n                                \n                                \n                                    \n                                        acc:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for acceleration. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mass\n                                    \n                                \n                                \n                                    \n                                        mass:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mass to use in calculations. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pos\n                                    \n                                \n                                \n                                    \n                                        pos:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for position. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vel\n                                    \n                                \n                                \n                                    \n                                        vel:         Vec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Vec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vector for velocity. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Vec } from '../types'\n\n/** Interface for properties needed for physics calculations. */\nexport interface VecEntity {\n  /** Vector for acceleration. */\n  acc: Vec,\n  /** Vector for velocity. */\n  vel: Vec,\n  /** Vector for position. */\n  pos: Vec,\n  /** Mass to use in calculations. */\n  mass: number\n}\n\n/**\n * Applies the provided force to the acceleration of the provided VecEntity.\n *\n * @param e VecEntity to set acceleration on.\n * @param force Force to apply to VecEntity.\n */\nexport function applyForce(e: VecEntity, force: Vec) {\n  e.acc.x += force.x / e.mass\n  e.acc.y += force.y / e.mass\n}\n\n/**\n * Applies the provided friction to the provided VecEntity.\n *\n * @param e VecEntity to apply friction to.\n * @param amount Amount of friction to apply.\n */\nexport function applyFriction(e: VecEntity, amount: number) {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount)\n  applyForce(e, friction)\n}\n\n/**\n * Applies the provided friction to the provided VecEntity in only the X axis.\n *\n * @param e VecEntity to apply horizontal friction to.\n * @param amount Amount of friction to apply.\n */\nexport function applyHorizontalFriction(e: VecEntity, amount: number) {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount)\n\n  friction.y = 0\n  applyForce(e, friction)\n}\n\n/**\n * Applies the provided impulse to the provided VecEntity.\n *\n * @param e VecEntity to apply impulse to.\n * @param force Vec to apply as impulse.\n * @param dt Delta time since last update.\n */\nexport function applyImpulse(e: VecEntity, force: Vec, dt: number) {\n  applyForce(e, { x: force.x / dt, y: force.y / dt })\n}\n\n/**\n * Integrates acceleration and velocity with delta time.\n *\n * @param e VecEntity to integrate.\n * @param dt Delta time since last update.\n */\nexport function integrate(e: VecEntity, dt: number) {\n  const vx = e.vel.x + e.acc.x * dt\n  const vy = e.vel.y + e.acc.y * dt\n  const x = (e.vel.x + vx) / 2 * dt\n  const y = (e.vel.y + vy) / 2 * dt\n\n  e.vel.set(vx, vy)\n  e.acc.set(0, 0)\n\n  return { x, y }\n}\n\n/**\n * Integrates the position with delta time.\n *\n * @param e VecEntity to integrate.\n * @param dt Delta time since last update.\n */\nexport function integratePos (e: VecEntity, dt: number) {\n  const dis = integrate(e, dt)\n  e.pos.add(dis)\n\n  return dis\n}\n\n/**\n * Converts a velocity vector to a speed.\n *\n * @param vel The Vec to convert to a speed.\n */\nexport function speed(vel: Vec) {\n  return Math.sqrt(vel.x * vel.x + vel.y * vel.y)\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebAudio.html":{"url":"classes/WebAudio.html","title":"class - WebAudio","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebAudio\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sound/web-audio.ts\n        \n\n            \n                Description\n            \n            \n                Provides support for playing sounds using the\nWeb Audio API.\nconst audio = new WebAudio('assets/sounds/theme.ogg')\n\nif (!audio.hasWebAudio) {\n  // Do something else for sounds.\n}\n\naudio.master.value = .3 // Low volume\naudio.play()\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hasWebAudio\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fadeOut\n                            \n                            \n                                mute\n                            \n                            \n                                play\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ctx\n                                \n                                \n                                    master\n                                \n                                \n                                    sfx\n                                \n                                \n                                    music\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(src: string)\n                    \n                \n                        \n                            \n                                Defined in lib/sound/web-audio.ts:44\n                            \n                        \n\n                \n                    \n                            Initialize WebAudio instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        src\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The source for the audio element.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasWebAudio\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : !!((window as any).AudioContext || (window as any).webkitAudioContext)\n                        \n                    \n                        \n                            \n                                    Defined in lib/sound/web-audio.ts:18\n                            \n                        \n\n                \n                    \n                        Whether or not WebAudio is supported. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fadeOut\n                        \n                        \n                    \n                \n            \n            \n                \nfadeOut()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:89\n                \n            \n\n\n            \n                \n                    Fades out playing sounds. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mute\n                        \n                        \n                    \n                \n            \n            \n                \nmute()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:84\n                \n            \n\n\n            \n                \n                    Mutes the master node. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:74\n                \n            \n\n\n            \n                \n                    Plays the audio element. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in lib/sound/web-audio.ts:79\n                \n            \n\n\n            \n                \n                    Pauses the audio element. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ctx\n                    \n                \n\n                \n                    \n                        getctx()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:27\n                                \n                            \n                    \n                        \n                                Gets the audio context. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        master\n                    \n                \n\n                \n                    \n                        getmaster()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:32\n                                \n                            \n                    \n                        \n                                Gets the master node. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sfx\n                    \n                \n\n                \n                    \n                        getsfx()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:37\n                                \n                            \n                    \n                        \n                                Gets the sound effects node. \n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        music\n                    \n                \n\n                \n                    \n                        getmusic()\n                    \n                \n                            \n                                \n                                    Defined in lib/sound/web-audio.ts:42\n                                \n                            \n                    \n                        \n                                Gets the music node. \n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export class WebAudio {\n  /** Whether or not WebAudio is supported. */\n  hasWebAudio = !!((window as any).AudioContext || (window as any).webkitAudioContext)\n\n  private element: HTMLAudioElement\n  private context: AudioContext\n  private masterNode: GainNode\n  private sfxNode: GainNode\n  private musicNode: GainNode\n\n  /** Gets the audio context. */\n  get ctx() {\n    return this.context\n  }\n\n  /** Gets the master node. */\n  get master() {\n    return this.masterNode\n  }\n\n  /** Gets the sound effects node. */\n  get sfx() {\n    return this.sfxNode\n  }\n\n  /** Gets the music node. */\n  get music() {\n    return this.musicNode\n  }\n\n  /**\n   * Initialize WebAudio instance.\n   *\n   * @param src The source for the audio element.\n   */\n  constructor(src: string) {\n    if (!this.hasWebAudio) {\n      return\n    }\n\n    this.element = document.createElement('audio')\n    this.element.src = src\n    this.context = new AudioContext()\n\n    this.masterNode = this.context.createGain()\n    this.master.gain.value = 1\n    this.master.connect(this.context.destination)\n\n    this.sfxNode = this.context.createGain()\n    this.sfx.gain.value = 1\n    this.sfx.connect(this.master)\n\n    this.musicNode = this.context.createGain()\n    this.music.gain.value = 1\n    this.music.connect(this.master)\n  }\n\n  /** Plays the audio element. */\n  play() {\n    this.element.play()\n  }\n\n  /** Pauses the audio element. */\n  stop() {\n    this.element.pause()\n  }\n\n  /** Mutes the master node. */\n  mute() {\n    this.masterNode.gain.setValueAtTime(0, this.context.currentTime)\n  }\n\n  /** Fades out playing sounds. */\n  fadeOut() {\n    const volume = this.masterNode.gain.value\n\n    this.masterNode.gain.setValueAtTime(volume, this.context.currentTime)\n    this.masterNode.gain.linearRampToValueAtTime(0, this.context.currentTime + .4)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebGLRenderer.html":{"url":"classes/WebGLRenderer.html","title":"class - WebGLRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebGLRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/renderer/webgl-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Recursive rendering utilizing HTML5 canvas and WebGL. \n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                canvas\n                            \n                            \n                                    Protected\n                                container\n                            \n                            \n                                    Protected\n                                height\n                            \n                            \n                                    Protected\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                    Protected\n                                isInCamera\n                            \n                            \n                                    Abstract\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(width: number, height: number, container: HTMLElement)\n                    \n                \n                        \n                            \n                                Defined in lib/renderer/webgl-renderer.ts:24\n                            \n                        \n\n                \n                    \n                            Initialize CanvasRenderer object.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Width of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Height of the canvas in pixels.\n\n                                                        \n                                                \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    HTMLElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTMLElement to add the canvas to.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCanvasElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:11\n\n                            \n                        \n\n                \n                    \n                        Canvas element for rendering. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:13\n\n                            \n                        \n\n                \n                    \n                        Containing element for the canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:9\n\n                            \n                        \n\n                \n                    \n                        Height of the canvas in pixels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:7\n\n                            \n                        \n\n                \n                    \n                        Width of the canvas in pixels. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(container: Container, clear)\n                \n            \n\n\n            \n                \n                    Defined in lib/renderer/webgl-renderer.ts:62\n                \n            \n\n\n            \n                \n                    Recursive method for rendering the provided container and all its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Container object to render recursively.\n\n                                    \n                                \n                                \n                                    clear\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether or not to clear the canvas before rendering.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            isInCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInCamera(entity: Sprite, camera: any)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Determines if the provided entity is visible to the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Sprite\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Sprite to check for visibility.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera to use when determining visibility.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(container: Container, clear?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:44\n\n                \n            \n\n\n            \n                \n                    To be defined by concrete implementations. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clear\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from './renderer'\nimport { Camera, Container, Game, Scene, TileSprite } from '../'\nimport { Entity, Sprite, Text, Rect } from '../types'\nimport { defaults, ShaderProgram, GlBuffer,  GLUtils } from './webgl'\n\n/**\n * @ignore\n */\ninterface TextureInfo {\n  texture: WebGLTexture\n}\n\n/** Recursive rendering utilizing HTML5 canvas and WebGL. */\nexport class WebGLRenderer extends Renderer {\n  private gl: WebGLRenderingContext\n  private ctx: CanvasRenderingContext2D\n  private shaderProgramTex: ShaderProgram\n  private shaderProgramCol: ShaderProgram\n\n  private buffers: GlBuffer\n  private textures: Map\n  private boundTexture: string\n  private globalAlpha: number\n  private game: Game\n\n    /**\n     * Initialize CanvasRenderer object.\n     *\n     * @param width Width of the canvas in pixels.\n     * @param height Height of the canvas in pixels.\n     * @param container The HTMLElement to add the canvas to.\n     */\n    constructor(width: number, height: number, container: HTMLElement) {\n      super(width, height, container)\n\n      this.gl = this.canvas.getContext('webgl', { antialias: false })\n\n      this.buffers = new GlBuffer(this.gl)\n      this.buffers.create('position')\n      this.buffers.create('texture')\n      this.buffers.create('rect')\n\n      this.createTextCanvas()\n\n      this.textures = new Map()\n      this.shaderProgramTex = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexTexture,\n        fragment: defaults.shaders.fragmentTexture,\n      }, 'default-texture')\n      this.shaderProgramCol = new ShaderProgram(this.gl, {\n        vertex: defaults.shaders.vertexColor,\n        fragment: defaults.shaders.fragmentColor,\n      }, 'default-color')\n    }\n\n  /**\n   * Recursive method for rendering the provided container and all its children.\n   *\n   * @param container Container object to render recursively.\n   * @param clear Whether or not to clear the canvas before rendering.\n   */\n  render(container: Container, clear = true) {\n    if (!container.visible || container.alpha = 0) {\n      this.globalAlpha = container.alpha\n    }\n\n    this.buffers.setActive('position',\n      this.shaderProgramTex.getAttribLocation('a_position'))\n\n    for (let i = 0; i  6) {\n      const parts = color.split(',')\n      parts[0] = parts[0].substr(parts[0].indexOf('(') + 1)\n\n      if (parts.length > 4) {\n        throw new Error(`Invalid color string ${color}`)\n      }\n\n      if (parts.length === 3) {\n        return [\n          parseInt(parts[0]), parseInt(parts[1]),\n          parseInt(parts[2].replace(')', '')), alpha\n        ]\n      }\n\n      return [\n        parseInt(parts[0]), parseInt(parts[1]),\n        parseInt(parts[2]), parseFloat(parts[3].replace(')', ''))\n      ]\n    }\n\n    const r = parseInt(color.substr(0, 2), 16) / 255\n    const g = parseInt(color.substr(2, 2), 16) / 255\n    const b = parseInt(color.substr(4, 2), 16) / 255\n\n    return [r, g, b, alpha]\n  }\n\n  private getTexture(gl: WebGLRenderingContext, sprite: Sprite | TileSprite) {\n    if (!Game.assets.completed) {\n      return null\n    }\n\n    const { img } = sprite.texture\n\n    if (!img.complete) {\n      if (Game.debug) {\n        console.warn(`Image ${img.src} not yet loaded...`)\n      }\n\n      return null\n    }\n\n    if (this.textures.has(img.src)) {\n      const texture = this.textures.get(img.src).texture\n\n      if (this.boundTexture !== img.src) {\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        this.boundTexture = img.src\n      }\n\n      return texture\n    }\n\n    const texture = this.createTexture()\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n\n    this.textures.set(img.src, { texture })\n    this.boundTexture = img.src\n\n    return texture\n  }\n\n  private createTexture() {\n    const { gl } = this\n    const texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n    return texture\n  }\n\n  private getPositionMatrix(camera: any, sprite: Sprite | TileSprite | Rect) {\n    const hasAnchor = (sp: any) => sp.anchor && (sp.anchor.x || sp.anchor.y)\n\n    const cameraTranslation = GLUtils.getCameraTranslation(camera)\n    const projectionMatrix =\n      GLUtils.get2DProjectionMatrix(this.width, this.height)\n    const translationMatrix = hasAnchor(sprite)\n      ? GLUtils.getTranslation(sprite.pos.x + (sprite as any).anchor.x,\n                               sprite.pos.y + (sprite as any).anchor.y)\n      : GLUtils.getTranslation(sprite.pos.x, sprite.pos.y)\n    const scaleMatrix =\n      GLUtils.getScaleMatrix(sprite, sprite.width, sprite.height)\n\n    let originMatrix = GLUtils.getTranslation(0, 0)\n\n    if ((sprite instanceof Sprite || sprite instanceof TileSprite)\n        && sprite.rotation) {\n      const pivotMatrix = GLUtils.getTranslation(-sprite.pivot.x, -sprite.pivot.y)\n      const unpivotMatrix = GLUtils.getTranslation(sprite.pivot.x, sprite.pivot.y)\n\n      let rotMatrix = GLUtils.getRotation(sprite.rotation)\n      rotMatrix = GLUtils.multiplyMatrices(pivotMatrix, rotMatrix)\n\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, rotMatrix)\n      originMatrix = GLUtils.multiplyMatrices(originMatrix, unpivotMatrix)\n    }\n\n    let posMatrix = GLUtils.multiplyMatrices(scaleMatrix, originMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, cameraTranslation)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, translationMatrix)\n    posMatrix = GLUtils.multiplyMatrices(posMatrix, projectionMatrix)\n\n    return posMatrix\n  }\n\n  private createTextCanvas() {\n    const canvas = document.createElement('canvas')\n\n    canvas.width = this.width\n    canvas.height = this.height\n\n    canvas.id = 'kilo-text-canvas'\n    canvas.style.zIndex = '1000'\n    canvas.style.position = 'absolute'\n    canvas.style.top = '0'\n    canvas.style.left = '0'\n\n    this.container.appendChild(canvas)\n    this.ctx = canvas.getContext('2d')\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/animations.ts\n            \n            class\n            Animations\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/assets.ts\n            \n            class\n            Assets\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/camera.ts\n            \n            class\n            Camera\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                lib/container.ts\n            \n            class\n            Container\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                lib/controls/controls.ts\n            \n            interface\n            Controls\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/controls/gamepad-controls.ts\n            \n            class\n            GamepadControls\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/controls/key-controls.ts\n            \n            class\n            KeyControls\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/controls/mouse-controls.ts\n            \n            class\n            MouseControls\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/fx/one-up.ts\n            \n            class\n            OneUp\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                lib/fx/particle-emitter.ts\n            \n            class\n            ParticleEmitter\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                lib/fx/particle.ts\n            \n            class\n            Particle\n            \n                100 %\n                (25/25)\n            \n        \n        \n            \n                \n                lib/fx/particle.ts\n            \n            interface\n            ParticleOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/game.ts\n            \n            class\n            Game\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/renderer/canvas-renderer.ts\n            \n            class\n            CanvasRenderer\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/renderer/renderer.ts\n            \n            class\n            Renderer\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/renderer/webgl-renderer.ts\n            \n            class\n            WebGLRenderer\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/defaults.ts\n            \n            variable\n            defaults\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            class\n            BufferInfo\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/gl-buffer.ts\n            \n            class\n            GlBuffer\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/shader-program.ts\n            \n            class\n            ShaderProgram\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/shader-program.ts\n            \n            interface\n            Scripts\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/renderer/webgl/utils.ts\n            \n            class\n            GLUtils\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/resolvers/stop-move.ts\n            \n            function\n            stopMovement\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            interface\n            Hits\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            interface\n            Resolution\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/resolvers/wall-slide.ts\n            \n            function\n            wallSlide\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/scene.ts\n            \n            class\n            Scene\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                lib/sound/sound-group.ts\n            \n            class\n            SoundGroup\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/sound/sound-pool.ts\n            \n            class\n            SoundPool\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/sound/sound.ts\n            \n            class\n            Sound\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/sound/sound.ts\n            \n            interface\n            SoundOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/sound/web-audio.ts\n            \n            class\n            WebAudio\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/state.ts\n            \n            class\n            State\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/tile-map.ts\n            \n            class\n            TileMap\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                lib/tile-sprite.ts\n            \n            class\n            TileSprite\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                lib/timer.ts\n            \n            class\n            Timer\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/types/entity.ts\n            \n            class\n            Entity\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                lib/types/hit-box.ts\n            \n            class\n            HitBox\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/types/rect.ts\n            \n            class\n            Rect\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/types/rect.ts\n            \n            interface\n            RectStyleOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/types/sprite.ts\n            \n            class\n            Sprite\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/types/text.ts\n            \n            class\n            Text\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/types/text.ts\n            \n            interface\n            TextOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/texture.ts\n            \n            class\n            Texture\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Layer\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Map\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Object\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Property\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Tile\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/types/tiled.ts\n            \n            interface\n            Tileset\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/types/trigger.ts\n            \n            class\n            Trigger\n            \n                100 %\n                (25/25)\n            \n        \n        \n            \n                \n                lib/types/vec.ts\n            \n            class\n            Vec\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/types/vec.ts\n            \n            interface\n            Point\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            angle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            clamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            dirTo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            distance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            gauss\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            gaussDistance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            lerp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            mix\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            rand\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randf\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randomSeed\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randOneFrom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            randOneIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            smoothStep\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            function\n            useSeededRandom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/math.ts\n            \n            variable\n            ease\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            interface\n            VecEntity\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyForce\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyFriction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyHorizontalFriction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            applyImpulse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            integrate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            integratePos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/physics.ts\n            \n            function\n            speed\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            addDebug\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            angle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            bounds\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            center\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            distance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            hit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/sprite.ts\n            \n            function\n            hits\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            interface\n            ExtraLayer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            interface\n            TiledMap\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/utils/tiled-parser.ts\n            \n            function\n            tiledParser\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Speed   (lib/.../game.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/game.ts\n    \n        \n            \n                \n                    \n                        \n                        Speed\n                    \n                \n                    \n                        \n                            Enum of pre-defined speeds for a game.\nDefault game speed is \"Normal\".\nCan also be any number, but be careful.\n\n                        \n                    \n                        \n                            \n                                 Slow\n                            \n                        \n                        \n                            \n                                Value : 0.5\n                            \n                        \n                        \n                            \n                                 Normal\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Fast\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nkilo\nA 2D game engine library written in TypeScript.\nDevelopment\nInstall dependencies:\nnpm install --python=/path/to/python2.7Run tests:\nnpm testRun tests with coverage reporting:\nnpm run test:covTests with coverage must be run before docs to provide unit test coverage data.\nUpdate docs:\nnpm run docsTo serve docs locally (at localhost:5000):\nnpm run docs:serve\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2019-2020 Matthew Ross\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    18 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GameUpdate   (lib/.../game.ts)\n                        \n                        \n                            KeyMap   (lib/.../key-controls.ts)\n                        \n                        \n                            ProgressCallback   (lib/.../assets.ts)\n                        \n                        \n                            ReadyCallback   (lib/.../assets.ts)\n                        \n                        \n                            TickFunc   (lib/.../timer.ts)\n                        \n                        \n                            TileData   (lib/.../tiled-parser.ts)\n                        \n                        \n                            WalkableTest   (lib/.../wall-slide.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/game.ts\n    \n    \n        \n            \n                \n                    \n                    GameUpdate\n                \n            \n            \n                \n                    Function called on each update.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/controls/key-controls.ts\n    \n    \n        \n            \n                \n                    \n                    KeyMap\n                \n            \n            \n                \n                    Type to enforce that keys object uses strings as keys, and boolean as values.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/assets.ts\n    \n    \n        \n            \n                \n                    \n                    ProgressCallback\n                \n            \n            \n                \n                    Function that is called to provide progress status. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReadyCallback\n                \n            \n            \n                \n                    Function that is called when an asset is ready. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/timer.ts\n    \n    \n        \n            \n                \n                    \n                    TickFunc\n                \n            \n            \n                \n                    Function called on each tick of a Timer.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    lib/utils/tiled-parser.ts\n    \n    \n        \n            \n                \n                    \n                    TileData\n                \n            \n            \n                \n                    Type for tile data. \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    lib/resolvers/wall-slide.ts\n    \n    \n        \n            \n                \n                    \n                    WalkableTest\n                \n            \n            \n                \n                    Function used to provide collision resolver with walkable tile status. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/animations.ts\n            \n            \n                100 %\n                (26/26)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/assets.ts\n            \n            \n                100 %\n                (59/59)\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (19/19)\n            \n            \n                100 %\n                (55/55)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/camera.ts\n            \n            \n                100 %\n                (71/71)\n            \n            \n                100 %\n                (28/28)\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (71/71)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/container.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/game.ts\n            \n            \n                100 %\n                (85/85)\n            \n            \n                100 %\n                (28/28)\n            \n            \n                100 %\n                (14/14)\n            \n            \n                100 %\n                (85/85)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/scene.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/state.ts\n            \n            \n                100 %\n                (25/25)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/tile-map.ts\n            \n            \n                100 %\n                (33/33)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/tile-sprite.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/timer.ts\n            \n            \n                100 %\n                (18/18)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/controls/gamepad-controls.ts\n            \n            \n                100 %\n                (35/35)\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/controls/key-controls.ts\n            \n            \n                100 %\n                (32/32)\n            \n            \n                100 %\n                (22/22)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/controls/mouse-controls.ts\n            \n            \n                100 %\n                (30/30)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/fx/one-up.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/fx/particle-emitter.ts\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/fx/particle.ts\n            \n            \n                100 %\n                (19/19)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/canvas-renderer.ts\n            \n            \n                100 %\n                (84/84)\n            \n            \n                100 %\n                (65/65)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (77/77)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/renderer.ts\n            \n            \n                100 %\n                (18/18)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl-renderer.ts\n            \n            \n                100 %\n                (175/175)\n            \n            \n                100 %\n                (91/91)\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (170/170)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/defaults.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/gl-buffer.ts\n            \n            \n                100 %\n                (25/25)\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/shader-program.ts\n            \n            \n                100 %\n                (61/61)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (59/59)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/renderer/webgl/utils.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/resolvers/stop-move.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/resolvers/wall-slide.ts\n            \n            \n                100 %\n                (39/39)\n            \n            \n                100 %\n                (34/34)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/sound/sound-group.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/sound/sound-pool.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/sound/sound.ts\n            \n            \n                100 %\n                (21/21)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/entity.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/hit-box.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/rect.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/sprite.ts\n            \n            \n                100 %\n                (17/17)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/text.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/texture.ts\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/trigger.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/types/vec.ts\n            \n            \n                100 %\n                (32/32)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                        /home/kiswa/projects/kilo/lib/utils/math.ts\n            \n            \n                100 %\n                (58/58)\n            \n            \n                100 %\n                (21/21)\n            \n            \n                100 %\n                (22/22)\n            \n            \n                100 %\n                (57/57)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/utils/physics.ts\n            \n            \n                100 %\n                (26/26)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/utils/sprite.ts\n            \n            \n                100 %\n                (34/34)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                    /home/kiswa/projects/kilo/lib/utils/tiled-parser.ts\n            \n            \n                100 %\n                (109/109)\n            \n            \n                100 %\n                (49/49)\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (97/97)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaults   (lib/.../defaults.ts)\n                        \n                        \n                            ease   (lib/.../math.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/renderer/webgl/defaults.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaults\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /** Default shaders. */\n  shaders: {\n    /** Texture-based rendering vertex shader. */\n    vertexTexture: `\n  attribute vec2 a_position;\n  attribute vec2 a_texCoord;\n\n  uniform mat3 u_posMatrix;\n  uniform mat3 u_texMatrix;\n  uniform float u_texAlpha;\n\n  varying vec2 v_texCoord;\n  varying float v_texAlpha;\n\n  void main() {\n    v_texCoord = (u_texMatrix * vec3(a_texCoord, 1)).xy;\n    v_texAlpha = u_texAlpha;\n\n    gl_Position = vec4((u_posMatrix * vec3(a_position, 1)).xy, 0, 1);\n  }\n`,\n\n    /** Texture-based rendering fragment shader. */\n    fragmentTexture: `\n  precision highp float;\n\n  uniform sampler2D u_sampler;\n\n  varying vec2 v_texCoord;\n  varying float v_texAlpha;\n\n  void main() {\n    vec4 color = texture2D(u_sampler, v_texCoord);\n    color.a *= v_texAlpha;\n\n    gl_FragColor = color;\n  }\n`,\n\n    /** Color-based rendering vertex shader. */\n    vertexColor: `\n  attribute vec2 a_position;\n\n  uniform mat3 u_posMatrix;\n\n  void main() {\n    gl_Position = vec4((u_posMatrix * vec3(a_position, 1)).xy, 0, 1);\n  }\n`,\n\n    /** Color-based rendering fragment shader. */\n    fragmentColor: `\n  precision highp float;\n\n  uniform vec4 u_color;\n\n  void main() {\n    gl_FragColor = u_color;\n  }\n`,\n  },\n}\n                        \n                    \n\n                \n                    \n                        Default shader sources for both texture and color-based rendering. \n\n                    \n                \n\n            \n        \n\n    lib/utils/math.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ease\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  quadIn(x: number) {\n    return x * x\n  },\n\n  quadOut(x: number) {\n    return 1 - this.quadIn(1 - x)\n  },\n\n  cubicIn(x: number) {\n    return x * x * x\n  },\n\n  cubicOut(x: number) {\n    return 1 - this.cubicIn(1 - x)\n  },\n\n  cubicInOut(x: number) {\n    if (x \n                        \n                    \n\n                \n                    \n                        A collection of easing functions. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
